"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _os = _interopRequireDefault(require("os"));
var _helpers = require("./helpers");
var _asyncQueue = _interopRequireDefault(require("./async-queue"));
var _gitShellOutStrategy = _interopRequireDefault(require("./git-shell-out-strategy"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var _default = {
  create(workingDir, options = {}) {
    return this.withStrategies([_gitShellOutStrategy.default])(workingDir, options);
  },
  withStrategies(strategies) {
    return function createForStrategies(workingDir, options = {}) {
      const parallelism = options.parallelism || Math.max(3, _os.default.cpus().length);
      const commandQueue = new _asyncQueue.default({
        parallelism
      });
      const strategyOptions = _objectSpread({}, options, {
        queue: commandQueue
      });
      const strategyInstances = strategies.map(Strategy => new Strategy(workingDir, strategyOptions));
      return (0, _helpers.firstImplementer)(...strategyInstances);
    };
  }
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfb3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9oZWxwZXJzIiwiX2FzeW5jUXVldWUiLCJfZ2l0U2hlbGxPdXRTdHJhdGVneSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Iiwib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImkiLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJfZGVmYXVsdCIsImNyZWF0ZSIsIndvcmtpbmdEaXIiLCJvcHRpb25zIiwid2l0aFN0cmF0ZWdpZXMiLCJHaXRTaGVsbE91dFN0cmF0ZWd5Iiwic3RyYXRlZ2llcyIsImNyZWF0ZUZvclN0cmF0ZWdpZXMiLCJwYXJhbGxlbGlzbSIsIk1hdGgiLCJtYXgiLCJvcyIsImNwdXMiLCJjb21tYW5kUXVldWUiLCJBc3luY1F1ZXVlIiwic3RyYXRlZ3lPcHRpb25zIiwicXVldWUiLCJzdHJhdGVneUluc3RhbmNlcyIsIm1hcCIsIlN0cmF0ZWd5IiwiZmlyc3RJbXBsZW1lbnRlciIsImV4cG9ydHMiXSwic291cmNlcyI6WyJjb21wb3NpdGUtZ2l0LXN0cmF0ZWd5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBvcyBmcm9tICdvcyc7XG5cbmltcG9ydCB7Zmlyc3RJbXBsZW1lbnRlcn0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCBBc3luY1F1ZXVlIGZyb20gJy4vYXN5bmMtcXVldWUnO1xuaW1wb3J0IEdpdFNoZWxsT3V0U3RyYXRlZ3kgZnJvbSAnLi9naXQtc2hlbGwtb3V0LXN0cmF0ZWd5JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjcmVhdGUod29ya2luZ0Rpciwgb3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMud2l0aFN0cmF0ZWdpZXMoW0dpdFNoZWxsT3V0U3RyYXRlZ3ldKSh3b3JraW5nRGlyLCBvcHRpb25zKTtcbiAgfSxcblxuICB3aXRoU3RyYXRlZ2llcyhzdHJhdGVnaWVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUZvclN0cmF0ZWdpZXMod29ya2luZ0Rpciwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICBjb25zdCBwYXJhbGxlbGlzbSA9IG9wdGlvbnMucGFyYWxsZWxpc20gfHwgTWF0aC5tYXgoMywgb3MuY3B1cygpLmxlbmd0aCk7XG4gICAgICBjb25zdCBjb21tYW5kUXVldWUgPSBuZXcgQXN5bmNRdWV1ZSh7cGFyYWxsZWxpc219KTtcbiAgICAgIGNvbnN0IHN0cmF0ZWd5T3B0aW9ucyA9IHsuLi5vcHRpb25zLCBxdWV1ZTogY29tbWFuZFF1ZXVlfTtcblxuICAgICAgY29uc3Qgc3RyYXRlZ3lJbnN0YW5jZXMgPSBzdHJhdGVnaWVzLm1hcChTdHJhdGVneSA9PiBuZXcgU3RyYXRlZ3kod29ya2luZ0Rpciwgc3RyYXRlZ3lPcHRpb25zKSk7XG4gICAgICByZXR1cm4gZmlyc3RJbXBsZW1lbnRlciguLi5zdHJhdGVneUluc3RhbmNlcyk7XG4gICAgfTtcbiAgfSxcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLEdBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLFFBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFdBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNB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