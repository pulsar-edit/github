"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BareIssueishTooltipContainer = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactRelay = require("react-relay");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _octicon = _interopRequireDefault(require("../atom/octicon"));
var _helpers = require("../helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const typeAndStateToIcon = {
  Issue: {
    OPEN: 'issue-opened',
    CLOSED: 'issue-closed'
  },
  PullRequest: {
    OPEN: 'git-pull-request',
    CLOSED: 'git-pull-request',
    MERGED: 'git-merge'
  }
};
class BareIssueishTooltipContainer extends _react.default.Component {
  render() {
    const resource = this.props.resource;
    const author = resource.author || _helpers.GHOST_USER;
    const {
      repository,
      state,
      number,
      title,
      __typename
    } = resource;
    const icons = typeAndStateToIcon[__typename] || {};
    const icon = icons[state] || '';
    return _react.default.createElement("div", {
      className: "github-IssueishTooltip"
    }, _react.default.createElement("div", {
      className: "issueish-avatar-and-title"
    }, _react.default.createElement("img", {
      className: "author-avatar",
      src: author.avatarUrl,
      title: author.login,
      alt: author.login
    }), _react.default.createElement("h3", {
      className: "issueish-title"
    }, title)), _react.default.createElement("div", {
      className: "issueish-badge-and-link"
    }, _react.default.createElement("span", {
      className: (0, _classnames.default)('issueish-badge', 'badge', state.toLowerCase())
    }, _react.default.createElement(_octicon.default, {
      icon: icon
    }), state.toLowerCase()), _react.default.createElement("span", {
      className: "issueish-link"
    }, repository.owner.login, "/", repository.name, "#", number)));
  }
}
exports.BareIssueishTooltipContainer = BareIssueishTooltipContainer;
_defineProperty(BareIssueishTooltipContainer, "propTypes", {
  resource: _propTypes.default.shape({
    issue: _propTypes.default.shape({}),
    pullRequest: _propTypes.default.shape({})
  }).isRequired
});
var _default = (0, _reactRelay.createFragmentContainer)(BareIssueishTooltipContainer, {
  resource: function () {
    const node = require("./__generated__/issueishTooltipContainer_resource.graphql");
    if (node.hash && node.hash !== "8980fc73c7ed3f632f0612ce14f2f0d1") {
      console.error("The definition of 'issueishTooltipContainer_resource' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }
    return require("./__generated__/issueishTooltipContainer_resource.graphql");
  }
});
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdFJlbGF5IiwiX3Byb3BUeXBlcyIsIl9jbGFzc25hbWVzIiwiX29jdGljb24iLCJfaGVscGVycyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2RlZmluZVByb3BlcnR5Iiwia2V5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidCIsImkiLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJyIiwiZSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwiY2FsbCIsIlR5cGVFcnJvciIsIk51bWJlciIsInR5cGVBbmRTdGF0ZVRvSWNvbiIsIklzc3VlIiwiT1BFTiIsIkNMT1NFRCIsIlB1bGxSZXF1ZXN0IiwiTUVSR0VEIiwiQmFyZUlzc3VlaXNoVG9vbHRpcENvbnRhaW5lciIsIlJlYWN0IiwiQ29tcG9uZW50IiwicmVuZGVyIiwicmVzb3VyY2UiLCJwcm9wcyIsImF1dGhvciIsIkdIT1NUX1VTRVIiLCJyZXBvc2l0b3J5Iiwic3RhdGUiLCJudW1iZXIiLCJ0aXRsZSIsIl9fdHlwZW5hbWUiLCJpY29ucyIsImljb24iLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwic3JjIiwiYXZhdGFyVXJsIiwibG9naW4iLCJhbHQiLCJjeCIsInRvTG93ZXJDYXNlIiwib3duZXIiLCJuYW1lIiwiZXhwb3J0cyIsIlByb3BUeXBlcyIsInNoYXBlIiwiaXNzdWUiLCJwdWxsUmVxdWVzdCIsImlzUmVxdWlyZWQiLCJfZGVmYXVsdCIsImNyZWF0ZUZyYWdtZW50Q29udGFpbmVyIiwibm9kZSIsImhhc2giLCJjb25zb2xlIiwiZXJyb3IiXSwic291cmNlcyI6WyJpc3N1ZWlzaC10b29sdGlwLWNvbnRhaW5lci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtjcmVhdGVGcmFnbWVudENvbnRhaW5lciwgZ3JhcGhxbH0gZnJvbSAncmVhY3QtcmVsYXknO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IE9jdGljb24gZnJvbSAnLi4vYXRvbS9vY3RpY29uJztcbmltcG9ydCB7R0hPU1RfVVNFUn0gZnJvbSAnLi4vaGVscGVycyc7XG5cbmNvbnN0IHR5cGVBbmRTdGF0ZVRvSWNvbiA9IHtcbiAgSXNzdWU6IHtcbiAgICBPUEVOOiAnaXNzdWUtb3BlbmVkJyxcbiAgICBDTE9TRUQ6ICdpc3N1ZS1jbG9zZWQnLFxuICB9LFxuICBQdWxsUmVxdWVzdDoge1xuICAgIE9QRU46ICdnaXQtcHVsbC1yZXF1ZXN0JyxcbiAgICBDTE9TRUQ6ICdnaXQtcHVsbC1yZXF1ZXN0JyxcbiAgICBNRVJHRUQ6ICdnaXQtbWVyZ2UnLFxuICB9LFxufTtcblxuZXhwb3J0IGNsYXNzIEJhcmVJc3N1ZWlzaFRvb2x0aXBDb250YWluZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHJlc291cmNlOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgaXNzdWU6IFByb3BUeXBlcy5zaGFwZSh7fSksXG4gICAgICBwdWxsUmVxdWVzdDogUHJvcFR5cGVzLnNoYXBlKHt9KSxcbiAgICB9KS5pc1JlcXVpcmVkLFxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHJlc291cmNlID0gdGhpcy5wcm9wcy5yZXNvdXJjZTtcbiAgICBjb25zdCBhdXRob3IgPSByZXNvdXJjZS5hdXRob3IgfHwgR0hPU1RfVVNFUjtcblxuICAgIGNvbnN0IHtyZXBvc2l0b3J5LCBzdGF0ZSwgbnVtYmVyLCB0aXRsZSwgX190eXBlbmFtZX0gPSByZXNvdXJjZTtcbiAgICBjb25zdCBpY29ucyA9IHR5cGVBbmRTdGF0ZVRvSWNvbltfX3R5cGVuYW1lXSB8fCB7fTtcbiAgICBjb25zdCBpY29uID0gaWNvbnNbc3RhdGVdIHx8ICcnO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImdpdGh1Yi1Jc3N1ZWlzaFRvb2x0aXBcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpc3N1ZWlzaC1hdmF0YXItYW5kLXRpdGxlXCI+XG4gICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJhdXRob3ItYXZhdGFyXCIgc3JjPXthdXRob3IuYXZhdGFyVXJsfSB0aXRsZT17YXV0aG9yLmxvZ2lufVxuICAgICAgICAgICAgYWx0PXthdXRob3IubG9naW59XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwiaXNzdWVpc2gtdGl0bGVcIj57dGl0bGV9PC9oMz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaXNzdWVpc2gtYmFkZ2UtYW5kLWxpbmtcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2N4KCdpc3N1ZWlzaC1iYWRnZScsICdiYWRnZScsIHN0YXRlLnRvTG93ZXJDYXNlKCkpfT5cbiAgICAgICAgICAgIDxPY3RpY29uIGljb249e2ljb259IC8+XG4gICAgICAgICAgICB7c3RhdGUudG9Mb3dlckNhc2UoKX1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaXNzdWVpc2gtbGlua1wiPlxuICAgICAgICAgICAge3JlcG9zaXRvcnkub3duZXIubG9naW59L3tyZXBvc2l0b3J5Lm5hbWV9I3tudW1iZXJ9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRnJhZ21lbnRDb250YWluZXIoQmFyZUlzc3VlaXNoVG9vbHRpcENvbnRhaW5lciwge1xuICByZXNvdXJjZTogZ3JhcGhxbGBcbiAgICBmcmFnbWVudCBpc3N1ZWlzaFRvb2x0aXBDb250YWluZXJfcmVzb3VyY2Ugb24gVW5pZm9ybVJlc291cmNlTG9jYXRhYmxlIHtcbiAgICAgIF9fdHlwZW5hbWVcblxuICAgICAgLi4uIG9uIElzc3VlIHtcbiAgICAgICAgc3RhdGUgbnVtYmVyIHRpdGxlXG4gICAgICAgIHJlcG9zaXRvcnkgeyBuYW1lIG93bmVyIHsgbG9naW4gfSB9XG4gICAgICAgIGF1dGhvciB7IGxvZ2luIGF2YXRhclVybCB9XG4gICAgICB9XG4gICAgICAuLi4gb24gUHVsbFJlcXVlc3Qge1xuICAgICAgICBzdGF0ZSBudW1iZXIgdGl0bGVcbiAgICAgICAgcmVwb3NpdG9yeSB7IG5hbWUgb3duZXIgeyBsb2dpbiB9IH1cbiAgICAgICAgYXV0aG9yIHsgbG9naW4gYXZhdGFyVXJsIH1cbiAgICAgIH1cbiAgICB9XG4gIGAsXG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsVUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsV0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUksUUFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssUUFBQSxHQUFBTCxPQUFBO0FBQXNDLFNBQUFELHVCQUFBTyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBQUEsU0FBQUcsZ0JBQUFILEdBQUEsRUFBQUksR0FBQSxFQUFBQyxLQUFBLElBQUFELEdBQUEsR0FBQUUsY0FBQSxDQUFBRixHQUFBLE9BQUFBLEdBQUEsSUFBQUosR0FBQSxJQUFBTyxNQUFBLENBQUFDLGNBQUEsQ0FBQVIsR0FBQSxFQUFBSSxHQUFBLElBQUFDLEtBQUEsRUFBQUEsS0FBQSxFQUFBSSxVQUFBLFFBQUFDLFlBQUEsUUFBQUMs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