"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BareCreateDialogController = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRelay = require("react-relay");
var _atom = require("atom");
var _eventKit = require("event-kit");
var _path = _interopRequireDefault(require("path"));
var _createDialogView = _interopRequireDefault(require("../views/create-dialog-view"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class BareCreateDialogController extends _react.default.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "didChangeRepoName", () => {
      this.modified.repoName = true;
      if (!this.modified.localPath) {
        if (this.localPath.getText() === this.projectHome) {
          this.localPath.setText(_path.default.join(this.projectHome, this.repoName.getText()));
        } else {
          const dirName = _path.default.dirname(this.localPath.getText());
          this.localPath.setText(_path.default.join(dirName, this.repoName.getText()));
        }
        this.modified.localPath = false;
      }
      this.recheckAcceptEnablement();
    });
    _defineProperty(this, "didChangeOwnerID", ownerID => new Promise(resolve => this.setState({
      selectedOwnerID: ownerID
    }, resolve)));
    _defineProperty(this, "didChangeLocalPath", () => {
      this.modified.localPath = true;
      if (!this.modified.repoName) {
        this.repoName.setText(_path.default.basename(this.localPath.getText()));
        this.modified.repoName = false;
      }
      this.recheckAcceptEnablement();
    });
    _defineProperty(this, "didChangeVisibility", visibility => {
      return new Promise(resolve => this.setState({
        selectedVisibility: visibility
      }, resolve));
    });
    _defineProperty(this, "didChangeSourceRemoteName", () => {
      this.writeSourceRemoteNameSetting();
      this.recheckAcceptEnablement();
    });
    _defineProperty(this, "didChangeProtocol", async protocol => {
      await new Promise(resolve => this.setState({
        selectedProtocol: protocol
      }, resolve));
      this.writeRemoteFetchProtocolSetting(protocol);
    });
    _defineProperty(this, "readSourceRemoteNameSetting", ({
      newValue
    }) => {
      if (newValue !== this.sourceRemoteName.getText()) {
        this.sourceRemoteName.setText(newValue);
      }
    });
    _defineProperty(this, "readRemoteFetchProtocolSetting", ({
      newValue
    }) => {
      if (newValue !== this.state.selectedProtocol) {
        this.setState({
          selectedProtocol: newValue
        });
      }
    });
    _defineProperty(this, "accept", () => {
      if (!this.acceptIsEnabled()) {
        return Promise.resolve();
      }
      const ownerID = this.state.selectedOwnerID !== '' ? this.state.selectedOwnerID : this.props.user.id;
      return this.props.request.accept({
        ownerID,
        name: this.repoName.getText(),
        visibility: this.state.selectedVisibility,
        localPath: this.localPath.getText(),
        protocol: this.state.selectedProtocol,
        sourceRemoteName: this.sourceRemoteName.getText()
      });
    });
    const {
      localDir
    } = this.props.request.getParams();
    this.projectHome = this.props.config.get('core.projectHome');
    this.modified = {
      repoName: false,
      localPath: false
    };
    this.repoName = new _atom.TextBuffer({
      text: localDir ? _path.default.basename(localDir) : ''
    });
    this.localPath = new _atom.TextBuffer({
      text: localDir || this.projectHome
    });
    this.sourceRemoteName = new _atom.TextBuffer({
      text: this.props.config.get('github.sourceRemoteName')
    });
    this.subs = new _eventKit.CompositeDisposable(this.repoName.onDidChange(this.didChangeRepoName), this.localPath.onDidChange(this.didChangeLocalPath), this.sourceRemoteName.onDidChange(this.didChangeSourceRemoteName), this.props.config.onDidChange('github.sourceRemoteName', this.readSourceRemoteNameSetting), this.props.config.onDidChange('github.remoteFetchProtocol', this.readRemoteFetchProtocolSetting));
    this.state = {
      acceptEnabled: this.acceptIsEnabled(),
      selectedVisibility: 'PUBLIC',
      selectedProtocol: this.props.config.get('github.remoteFetchProtocol'),
      selectedOwnerID: this.props.user ? this.props.user.id : ''
    };
  }
  render() {
    return _react.default.createElement(_createDialogView.default, _extends({
      selectedOwnerID: this.state.selectedOwnerID,
      repoName: this.repoName,
      selectedVisibility: this.state.selectedVisibility,
      localPath: this.localPath,
      sourceRemoteName: this.sourceRemoteName,
      selectedProtocol: this.state.selectedProtocol,
      didChangeOwnerID: this.didChangeOwnerID,
      didChangeVisibility: this.didChangeVisibility,
      didChangeProtocol: this.didChangeProtocol,
      acceptEnabled: this.state.acceptEnabled,
      accept: this.accept
    }, this.props));
  }
  componentDidUpdate(prevProps) {
    if (this.props.user !== prevProps.user) {
      this.recheckAcceptEnablement();
    }
  }
  componentWillUnmount() {
    this.subs.dispose();
  }
  writeSourceRemoteNameSetting() {
    if (this.props.config.get('github.sourceRemoteName') !== this.sourceRemoteName.getText()) {
      this.props.config.set('github.sourceRemoteName', this.sourceRemoteName.getText());
    }
  }
  writeRemoteFetchProtocolSetting(protocol) {
    if (this.props.config.get('github.remoteFetchProtocol') !== protocol) {
      this.props.config.set('github.remoteFetchProtocol', protocol);
    }
  }
  acceptIsEnabled() {
    return !this.repoName.isEmpty() && !this.localPath.isEmpty() && !this.sourceRemoteName.isEmpty() && this.props.user !== null;
  }
  recheckAcceptEnablement() {
    const nextEnablement = this.acceptIsEnabled();
    if (nextEnablement !== this.state.acceptEnabled) {
      this.setState({
        acceptEnabled: nextEnablement
      });
    }
  }
}
exports.BareCreateDialogController = BareCreateDialogController;
_defineProperty(BareCreateDialogController, "propTypes", {
  // Relay
  user: _propTypes.default.shape({
    id: _propTypes.default.string.isRequired
  }),
  // Model
  request: _propTypes.default.shape({
    getParams: _propTypes.default.func.isRequired,
    accept: _propTypes.default.func.isRequired
  }).isRequired,
  error: _propTypes.default.instanceOf(Error),
  isLoading: _propTypes.default.bool.isRequired,
  inProgress: _propTypes.default.bool.isRequired,
  // Atom environment
  currentWindow: _propTypes.default.object.isRequired,
  workspace: _propTypes.default.object.isRequired,
  commands: _propTypes.default.object.isRequired,
  config: _propTypes.default.object.isRequired
});
var _default = (0, _reactRelay.createFragmentContainer)(BareCreateDialogController, {
  user: function () {
    const node = require("./__generated__/createDialogController_user.graphql");
    if (node.hash && node.hash !== "729f5d41fc5444c5f12632127f89ed21") {
      console.error("The definition of 'createDialogController_user' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }
    return require("./__generated__/createDialogController_user.graphql");
  }
});
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfcmVhY3RSZWxheSIsIl9hdG9tIiwiX2V2ZW50S2l0IiwiX3BhdGgiLCJfY3JlYXRlRGlhbG9nVmlldyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJiaW5kIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwiX2RlZmluZVByb3BlcnR5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiYXJnIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiQmFyZUNyZWF0ZURpYWxvZ0NvbnRyb2xsZXIiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJtb2RpZmllZCIsInJlcG9OYW1lIiwibG9jYWxQYXRoIiwiZ2V0VGV4dCIsInByb2plY3RIb21lIiwic2V0VGV4dCIsInBhdGgiLCJqb2luIiwiZGlyTmFtZSIsImRpcm5hbWUiLCJyZWNoZWNrQWNjZXB0RW5hYmxlbWVudCIsIm93bmVySUQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFN0YXRlIiwic2VsZWN0ZWRPd25lcklEIiwiYmFzZW5hbWUiLCJ2aXNpYmlsaXR5Iiwic2VsZWN0ZWRWaXNpYmlsaXR5Iiwid3JpdGVTb3VyY2VSZW1vdGVOYW1lU2V0dGluZyIsInByb3RvY29sIiwic2VsZWN0ZWRQcm90b2NvbCIsIndyaXRlUmVtb3RlRmV0Y2hQcm90b2NvbFNldHRpbmciLCJuZXdWYWx1ZSIsInNvdXJjZVJlbW90ZU5hbWUiLCJzdGF0ZSIsImFjY2VwdElzRW5hYmxlZCIsInVzZXIiLCJpZCIsInJlcXVlc3QiLCJhY2NlcHQiLCJuYW1lIiwibG9jYWxEaXIiLCJnZXRQYXJhbXMiLCJjb25maWciLCJnZXQiLCJUZXh0QnVmZmVyIiwidGV4dCIsInN1YnMiLCJDb21wb3NpdGVEaXNwb3NhYmxlIiwib25EaWRDaGFuZ2UiLCJkaWRDaGFuZ2VSZXBvTmFtZSIsImRpZENoYW5nZUxvY2FsUGF0aCIsImRpZENoYW5nZVNvdXJjZVJlbW90ZU5hbWUiLCJyZWFkU291cmNlUmVtb3RlTmFtZVNldHRpbmciLCJyZWFkUmVtb3RlRmV0Y2hQcm90b2NvbFNldHRpbmciLCJhY2NlcHRFbmFibGVkIiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsImRpZENoYW5nZU93bmVySUQiLCJkaWRDaGFuZ2VWaXNpYmlsaXR5IiwiZGlkQ2hhbmdlUHJvdG9jb2wiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImRpc3Bvc2UiLCJzZXQiLCJpc0VtcHR5IiwibmV4dEVuYWJsZW1lbnQiLCJleHBvcnRzIiwiUHJvcFR5cGVzIiwic2hhcGUiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwiZnVuYyIsImVycm9yIiwiaW5zdGFuY2VPZiIsIkVycm9yIiwiaXNMb2FkaW5nIiwiYm9vbCIsImluUHJvZ3Jlc3MiLCJjdXJyZW50V2luZG93Iiwib2JqZWN0Iiwid29ya3NwYWNlIiwiY29tbWFuZHMiLCJfZGVmYXVsdCIsImNyZWF0ZUZyYWdtZW50Q29udGFpbmVyIiwibm9kZSIsImhhc2giLCJjb25zb2xlIl0sInNvdXJjZXMiOlsiY3JlYXRlLWRpYWxvZy1jb250cm9sbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtjcmVhdGVGcmFnbWVudENvbnRhaW5lciwgZ3JhcGhxbH0gZnJvbSAncmVhY3QtcmVsYXknO1xuaW1wb3J0IHtUZXh0QnVmZmVyfSBmcm9tICdhdG9tJztcbmltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZX0gZnJvbSAnZXZlbnQta2l0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgQ3JlYXRlRGlhbG9nVmlldyBmcm9tICcuLi92aWV3cy9jcmVhdGUtZGlhbG9nLXZpZXcnO1xuXG5leHBvcnQgY2xhc3MgQmFyZUNyZWF0ZURpYWxvZ0NvbnRyb2xsZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8vIFJlbGF5XG4gICAgdXNlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgfSksXG5cbiAgICAvLyBNb2RlbFxuICAgIHJlcXVlc3Q6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBnZXRQYXJhbXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBhY2NlcHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgfSkuaXNSZXF1aXJlZCxcbiAgICBlcnJvcjogUHJvcFR5cGVzLmluc3RhbmNlT2YoRXJyb3IpLFxuICAgIGlzTG9hZGluZzogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBpblByb2dyZXNzOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuXG4gICAgLy8gQXRvbSBlbnZpcm9ubWVudFxuICAgIGN1cnJlbnRXaW5kb3c6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICB3b3Jrc3BhY2U6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBjb21tYW5kczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGNvbmZpZzogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICBjb25zdCB7bG9jYWxEaXJ9ID0gdGhpcy5wcm9wcy5yZXF1ZXN0LmdldFBhcmFtcygpO1xuXG4gICAgdGhpcy5wcm9qZWN0SG9tZSA9IHRoaXMucHJvcHMuY29uZmlnLmdldCgnY29yZS5wcm9qZWN0SG9tZScpO1xuICAgIHRoaXMubW9kaWZpZWQgPSB7XG4gICAgICByZXBvTmFtZTogZmFsc2UsXG4gICAgICBsb2NhbFBhdGg6IGZhbHNlLFxuICAgIH07XG5cbiAgICB0aGlzLnJlcG9OYW1lID0gbmV3IFRleHRCdWZmZXIoe1xuICAgICAgdGV4dDogbG9jYWxEaXIgPyBwYXRoLmJhc2VuYW1lKGxvY2FsRGlyKSA6ICcnLFxuICAgIH0pO1xuICAgIHRoaXMubG9jYWxQYXRoID0gbmV3IFRleHRCdWZmZXIoe1xuICAgICAgdGV4dDogbG9jYWxEaXIgfHwgdGhpcy5wcm9qZWN0SG9tZSxcbiAgICB9KTtcbiAgICB0aGlzLnNvdXJjZVJlbW90ZU5hbWUgPSBuZXcgVGV4dEJ1ZmZlcih7XG4gICAgICB0ZXh0OiB0aGlzLnByb3BzLmNvbmZpZy5nZXQoJ2dpdGh1Yi5zb3VyY2VSZW1vdGVOYW1lJyksXG4gICAgfSk7XG5cbiAgICB0aGlzLnN1YnMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZShcbiAgICAgIHRoaXMucmVwb05hbWUub25EaWRDaGFuZ2UodGhpcy5kaWRDaGFuZ2VSZXBvTmFtZSksXG4gICAgICB0aGlzLmxvY2FsUGF0aC5vbkRpZENoYW5nZSh0aGlzLmRpZENoYW5nZUxvY2FsUGF0aCksXG4gICAgICB0aGlzLnNvdXJjZVJlbW90ZU5hbWUub25EaWRDaGFuZ2UodGhpcy5kaWRDaGFuZ2VTb3VyY2VSZW1vdGVOYW1lKSxcbiAgICAgIHRoaXMucHJvcHMuY29uZmlnLm9uRGlkQ2hhbmdlKCdnaXRodWIuc291cmNlUmVtb3RlTmFtZScsIHRoaXMucmVhZFNvdXJjZVJlbW90ZU5hbWVTZXR0aW5nKSxcbiAgICAgIHRoaXMucHJvcHMuY29uZmlnLm9uRGlkQ2hhbmdlKCdnaXRodWIucmVtb3RlRmV0Y2hQcm90b2NvbCcsIHRoaXMucmVhZFJlbW90ZUZldGNoUHJvdG9jb2xTZXR0aW5nKSxcbiAgICApO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGFjY2VwdEVuYWJsZWQ6IHRoaXMuYWNjZXB0SXNFbmFibGVkKCksXG4gICAgICBzZWxlY3RlZFZpc2liaWxpdHk6ICdQVUJMSUMnLFxuICAgICAgc2VsZWN0ZWRQcm90b2NvbDogdGhpcy5wcm9wcy5jb25maWcuZ2V0KCdnaXRodWIucmVtb3RlRmV0Y2hQcm90b2NvbCcpLFxuICAgICAgc2VsZWN0ZWRPd25lcklEOiB0aGlzLnByb3BzLnVzZXIgPyB0aGlzLnByb3BzLnVzZXIuaWQgOiAnJyxcbiAgICB9O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Q3JlYXRlRGlhbG9nVmlld1xuICAgICAgICBzZWxlY3RlZE93bmVySUQ9e3RoaXMuc3RhdGUuc2VsZWN0ZWRPd25lcklEfVxuICAgICAgICByZXBvTmFtZT17dGhpcy5yZXBvTmFtZX1cbiAgICAgICAgc2VsZWN0ZWRWaXNpYmlsaXR5PXt0aGlzLnN0YXRlLnNlbGVjdGVkVmlzaWJpbGl0eX1cbiAgICAgICAgbG9jYWxQYXRoPXt0aGlzLmxvY2FsUGF0aH1cbiAgICAgICAgc291cmNlUmVtb3RlTmFtZT17dGhpcy5zb3VyY2VSZW1vdGVOYW1lfVxuICAgICAgICBzZWxlY3RlZFByb3RvY29sPXt0aGlzLnN0YXRlLnNlbGVjdGVkUHJvdG9jb2x9XG4gICAgICAgIGRpZENoYW5nZU93bmVySUQ9e3RoaXMuZGlkQ2hhbmdlT3duZXJJRH1cbiAgICAgICAgZGlkQ2hhbmdlVmlzaWJpbGl0eT17dGhpcy5kaWRDaGFuZ2VWaXNpYmlsaXR5fVxuICAgICAgICBkaWRDaGFuZ2VQcm90b2NvbD17dGhpcy5kaWRDaGFuZ2VQcm90b2NvbH1cbiAgICAgICAgYWNjZXB0RW5hYmxlZD17dGhpcy5zdGF0ZS5hY2NlcHRFbmFibGVkfVxuICAgICAgICBhY2NlcHQ9e3RoaXMuYWNjZXB0fVxuICAgICAgICB7Li4udGhpcy5wcm9wc31cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy51c2VyICE9PSBwcmV2UHJvcHMudXNlcikge1xuICAgICAgdGhpcy5yZWNoZWNrQWNjZXB0RW5hYmxlbWVudCgpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuc3Vicy5kaXNwb3NlKCk7XG4gIH1cblxuICBkaWRDaGFuZ2VSZXBvTmFtZSA9ICgpID0+IHtcbiAgICB0aGlzLm1vZGlmaWVkLnJlcG9OYW1lID0gdHJ1ZTtcbiAgICBpZiAoIXRoaXMubW9kaWZpZWQubG9jYWxQYXRoKSB7XG4gICAgICBpZiAodGhpcy5sb2NhbFBhdGguZ2V0VGV4dCgpID09PSB0aGlzLnByb2plY3RIb21lKSB7XG4gICAgICAgIHRoaXMubG9jYWxQYXRoLnNldFRleHQocGF0aC5qb2luKHRoaXMucHJvamVjdEhvbWUsIHRoaXMucmVwb05hbWUuZ2V0VGV4dCgpKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBkaXJOYW1lID0gcGF0aC5kaXJuYW1lKHRoaXMubG9jYWxQYXRoLmdldFRleHQoKSk7XG4gICAgICAgIHRoaXMubG9jYWxQYXRoLnNldFRleHQocGF0aC5qb2luKGRpck5hbWUsIHRoaXMucmVwb05hbWUuZ2V0VGV4dCgpKSk7XG4gICAgICB9XG4gICAgICB0aGlzLm1vZGlmaWVkLmxvY2FsUGF0aCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLnJlY2hlY2tBY2NlcHRFbmFibGVtZW50KCk7XG4gIH1cblxuICBkaWRDaGFuZ2VPd25lcklEID0gb3duZXJJRCA9PiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHRoaXMuc2V0U3RhdGUoe3NlbGVjdGVkT3duZXJJRDogb3duZXJJRH0sIHJlc29sdmUpKVxuXG4gIGRpZENoYW5nZUxvY2FsUGF0aCA9ICgpID0+IHtcbiAgICB0aGlzLm1vZGlmaWVkLmxvY2FsUGF0aCA9IHRydWU7XG4gICAgaWYgKCF0aGlzLm1vZGlmaWVkLnJlcG9OYW1lKSB7XG4gICAgICB0aGlzLnJlcG9OYW1lLnNldFRleHQocGF0aC5iYXNlbmFtZSh0aGlzLmxvY2FsUGF0aC5nZXRUZXh0KCkpKTtcbiAgICAgIHRoaXMubW9kaWZpZWQucmVwb05hbWUgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5yZWNoZWNrQWNjZXB0RW5hYmxlbWVudCgpO1xuICB9XG5cbiAgZGlkQ2hhbmdlVmlzaWJpbGl0eSA9IHZpc2liaWxpdHkgPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHRoaXMuc2V0U3RhdGUoe3NlbGVjdGVkVmlzaWJpbGl0eTogdmlzaWJpbGl0eX0sIHJlc29sdmUpKTtcbiAgfVxuXG4gIGRpZENoYW5nZVNvdXJjZVJlbW90ZU5hbWUgPSAoKSA9PiB7XG4gICAgdGhpcy53cml0ZVNvdXJjZVJlbW90ZU5hbWVTZXR0aW5nKCk7XG4gICAgdGhpcy5yZWNoZWNrQWNjZXB0RW5hYmxlbWVudCgpO1xuICB9XG5cbiAgZGlkQ2hhbmdlUHJvdG9jb2wgPSBhc3luYyBwcm90b2NvbCA9PiB7XG4gICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB0aGlzLnNldFN0YXRlKHtzZWxlY3RlZFByb3RvY29sOiBwcm90b2NvbH0sIHJlc29sdmUpKTtcbiAgICB0aGlzLndyaXRlUmVtb3RlRmV0Y2hQcm90b2NvbFNldHRpbmcocHJvdG9jb2wpO1xuICB9XG5cbiAgcmVhZFNvdXJjZVJlbW90ZU5hbWVTZXR0aW5nID0gKHtuZXdWYWx1ZX0pID0+IHtcbiAgICBpZiAobmV3VmFsdWUgIT09IHRoaXMuc291cmNlUmVtb3RlTmFtZS5nZXRUZXh0KCkpIHtcbiAgICAgIHRoaXMuc291cmNlUmVtb3RlTmFtZS5zZXRUZXh0KG5ld1ZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB3cml0ZVNvdXJjZVJlbW90ZU5hbWVTZXR0aW5nKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmNvbmZpZy5nZXQoJ2dpdGh1Yi5zb3VyY2VSZW1vdGVOYW1lJykgIT09IHRoaXMuc291cmNlUmVtb3RlTmFtZS5nZXRUZXh0KCkpIHtcbiAgICAgIHRoaXMucHJvcHMuY29uZmlnLnNldCgnZ2l0aHViLnNvdXJjZVJlbW90ZU5hbWUnLCB0aGlzLnNvdXJjZVJlbW90ZU5hbWUuZ2V0VGV4dCgpKTtcbiAgICB9XG4gIH1cblxuICByZWFkUmVtb3RlRmV0Y2hQcm90b2NvbFNldHRpbmcgPSAoe25ld1ZhbHVlfSkgPT4ge1xuICAgIGlmIChuZXdWYWx1ZSAhPT0gdGhpcy5zdGF0ZS5zZWxlY3RlZFByb3RvY29sKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtzZWxlY3RlZFByb3RvY29sOiBuZXdWYWx1ZX0pO1xuICAgIH1cbiAgfVxuXG4gIHdyaXRlUmVtb3RlRmV0Y2hQcm90b2NvbFNldHRpbmcocHJvdG9jb2wpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5jb25maWcuZ2V0KCdnaXRodWIucmVtb3RlRmV0Y2hQcm90b2NvbCcpICE9PSBwcm90b2NvbCkge1xuICAgICAgdGhpcy5wcm9wcy5jb25maWcuc2V0KCdnaXRodWIucmVtb3RlRmV0Y2hQcm90b2NvbCcsIHByb3RvY29sKTtcbiAgICB9XG4gIH1cblxuICBhY2NlcHRJc0VuYWJsZWQoKSB7XG4gICAgcmV0dXJuICF0aGlzLnJlcG9OYW1lLmlzRW1wdHkoKSAmJlxuICAgICAgIXRoaXMubG9jYWxQYXRoLmlzRW1wdHkoKSAmJlxuICAgICAgIXRoaXMuc291cmNlUmVtb3RlTmFtZS5pc0VtcHR5KCkgJiZcbiAgICAgIHRoaXMucHJvcHMudXNlciAhPT0gbnVsbDtcbiAgfVxuXG4gIHJlY2hlY2tBY2NlcHRFbmFibGVtZW50KCkge1xuICAgIGNvbnN0IG5leHRFbmFibGVtZW50ID0gdGhpcy5hY2NlcHRJc0VuYWJsZWQoKTtcbiAgICBpZiAobmV4dEVuYWJsZW1lbnQgIT09IHRoaXMuc3RhdGUuYWNjZXB0RW5hYmxlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7YWNjZXB0RW5hYmxlZDogbmV4dEVuYWJsZW1lbnR9KTtcbiAgICB9XG4gIH1cblxuICBhY2NlcHQgPSAoKSA9PiB7XG4gICAgaWYgKCF0aGlzLmFjY2VwdElzRW5hYmxlZCgpKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3duZXJJRCA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRPd25lcklEICE9PSAnJyA/IHRoaXMuc3RhdGUuc2VsZWN0ZWRPd25lcklEIDogdGhpcy5wcm9wcy51c2VyLmlkO1xuXG4gICAgcmV0dXJuIHRoaXMucHJvcHMucmVxdWVzdC5hY2NlcHQoe1xuICAgICAgb3duZXJJRCxcbiAgICAgIG5hbWU6IHRoaXMucmVwb05hbWUuZ2V0VGV4dCgpLFxuICAgICAgdmlzaWJpbGl0eTogdGhpcy5zdGF0ZS5zZWxlY3RlZFZpc2liaWxpdHksXG4gICAgICBsb2NhbFBhdGg6IHRoaXMubG9jYWxQYXRoLmdldFRleHQoKSxcbiAgICAgIHByb3RvY29sOiB0aGlzLnN0YXRlLnNlbGVjdGVkUHJvdG9jb2wsXG4gICAgICBzb3VyY2VSZW1vdGVOYW1lOiB0aGlzLnNvdXJjZVJlbW90ZU5hbWUuZ2V0VGV4dCgpLFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZyYWdtZW50Q29udGFpbmVyKEJhcmVDcmVhdGVEaWFsb2dDb250cm9sbGVyLCB7XG4gIHVzZXI6IGdyYXBocWxgXG4gICAgZnJhZ21lbnQgY3JlYXRlRGlhbG9nQ29udHJvbGxlcl91c2VyIG9uIFVzZXJcbiAgICBAYXJndW1lbnREZWZpbml0aW9ucyhcbiAgICAgIG9yZ2FuaXphdGlvbkNvdW50OiB7dHlwZTogXCJJbnQhXCJ9XG4gICAgICBvcmdhbml6YXRpb25DdXJzb3I6IHt0eXBlOiBcIlN0cmluZ1wifVxuICAgICkge1xuICAgICAgaWRcbiAgICAgIC4uLnJlcG9zaXRvcnlIb21lU2VsZWN0aW9uVmlld191c2VyIEBhcmd1bWVudHMoXG4gICAgICAgIG9yZ2FuaXphdGlvbkNvdW50OiAkb3JnYW5pemF0aW9uQ291bnRcbiAgICAgICAgb3JnYW5pemF0aW9uQ3Vyc29yOiAkb3JnYW5pemF0aW9uQ3Vyc29yXG4gICAgICApXG4gICAgfVxuICBgLFxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFdBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLEtBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLFNBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLEtBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFNLGlCQUFBLEdBQUFQLHNCQUFBLENBQUFDLE9BQUE7QUFBMkQsU0FBQUQsdUJBQUFRLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFBQSxTQUFBRyxTQUFBLElBQUFBLFFBQUEsR0FBQUMsTUFBQSxDQUFBQyxNQUFBLEdBQUFELE1BQUEsQ0FBQUMsTUFBQSxDQUFBQyxJQUFBLGVBQUFDLE1BQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxFQUFBRixDQUFBLFVBQUFHLE1BQUEsR0FBQUYsU0FBQSxDQUFBRCxDQUFBLFlBQUFJLEdBQUEsSUFBQUQsTUFBQSxRQUFBUCxNQUFBLENBQUFTLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFKLE1BQUEsRUFBQUMsR0FBQSxLQUFBTCxNQUFBLENBQUFLLEdBQUEsSUFBQUQsTUFBQSxDQUFBQyxHQUFBLGdCQUFBTCxNQUFBLFlBQUFKLFFBQUEsQ0FBQWEsS0FBQSxP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