"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BareIssueishDetailController = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactRelay = require("react-relay");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _propTypes2 = require("../prop-types");
var _issueDetailView = _interopRequireDefault(require("../views/issue-detail-view"));
var _commitDetailItem = _interopRequireDefault(require("../items/commit-detail-item"));
var _reviewsItem = _interopRequireDefault(require("../items/reviews-item"));
var _reporterProxy = require("../reporter-proxy");
var _prCheckoutController = _interopRequireDefault(require("./pr-checkout-controller"));
var _prDetailView = _interopRequireDefault(require("../views/pr-detail-view"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class BareIssueishDetailController extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "openCommit", async ({
      sha
    }) => {
      /* istanbul ignore if */
      if (!this.props.workdirPath) {
        return;
      }
      const uri = _commitDetailItem.default.buildURI(this.props.workdirPath, sha);
      await this.props.workspace.open(uri, {
        pending: true
      });
      (0, _reporterProxy.addEvent)('open-commit-in-pane', {
        package: 'github',
        from: this.constructor.name
      });
    });
    _defineProperty(this, "openReviews", async () => {
      /* istanbul ignore if */
      if (this.getTypename() !== 'PullRequest') {
        return;
      }
      const uri = _reviewsItem.default.buildURI({
        host: this.props.endpoint.getHost(),
        owner: this.props.repository.owner.login,
        repo: this.props.repository.name,
        number: this.props.issueishNumber,
        workdir: this.props.workdirPath
      });
      await this.props.workspace.open(uri);
      (0, _reporterProxy.addEvent)('open-reviews-tab', {
        package: 'github',
        from: this.constructor.name
      });
    });
  }
  componentDidMount() {
    this.updateTitle();
  }
  componentDidUpdate() {
    this.updateTitle();
  }
  updateTitle() {
    const {
      repository
    } = this.props;
    if (repository && (repository.issue || repository.pullRequest)) {
      let prefix, issueish;
      if (this.getTypename() === 'PullRequest') {
        prefix = 'PR:';
        issueish = repository.pullRequest;
      } else {
        prefix = 'Issue:';
        issueish = repository.issue;
      }
      const title = `${prefix} ${repository.owner.login}/${repository.name}#${issueish.number} â€” ${issueish.title}`;
      this.props.onTitleChange(title);
    }
  }
  render() {
    const {
      repository
    } = this.props;
    if (!repository || !repository.issue || !repository.pullRequest) {
      return _react.default.createElement("div", null, "Issue/PR #", this.props.issueishNumber, " not found"); // TODO: no PRs
    }
    if (this.getTypename() === 'PullRequest') {
      return _react.default.createElement(_prCheckoutController.default, {
        repository: repository,
        pullRequest: repository.pullRequest,
        localRepository: this.props.localRepository,
        isAbsent: this.props.isAbsent,
        isLoading: this.props.isLoading,
        isPresent: this.props.isPresent,
        isMerging: this.props.isMerging,
        isRebasing: this.props.isRebasing,
        branches: this.props.branches,
        remotes: this.props.remotes
      }, checkoutOp => _react.default.createElement(_prDetailView.default, {
        relay: this.props.relay,
        repository: this.props.repository,
        pullRequest: this.props.repository.pullRequest,
        checkoutOp: checkoutOp,
        localRepository: this.props.localRepository,
        reviewCommentsLoading: this.props.reviewCommentsLoading,
        reviewCommentsTotalCount: this.props.reviewCommentsTotalCount,
        reviewCommentsResolvedCount: this.props.reviewCommentsResolvedCount,
        reviewCommentThreads: this.props.reviewCommentThreads,
        endpoint: this.props.endpoint,
        token: this.props.token,
        workspace: this.props.workspace,
        commands: this.props.commands,
        keymaps: this.props.keymaps,
        tooltips: this.props.tooltips,
        config: this.props.config,
        openCommit: this.openCommit,
        openReviews: this.openReviews,
        switchToIssueish: this.props.switchToIssueish,
        destroy: this.props.destroy,
        reportRelayError: this.props.reportRelayError,
        itemType: this.props.itemType,
        refEditor: this.props.refEditor,
        initChangedFilePath: this.props.initChangedFilePath,
        initChangedFilePosition: this.props.initChangedFilePosition,
        selectedTab: this.props.selectedTab,
        onTabSelected: this.props.onTabSelected,
        onOpenFilesTab: this.props.onOpenFilesTab,
        workdirPath: this.props.workdirPath
      }));
    } else {
      return _react.default.createElement(_issueDetailView.default, {
        repository: repository,
        issue: repository.issue,
        switchToIssueish: this.props.switchToIssueish,
        tooltips: this.props.tooltips,
        reportRelayError: this.props.reportRelayError
      });
    }
  }
  getTypename() {
    const {
      repository
    } = this.props;
    /* istanbul ignore if */
    if (!repository) {
      return null;
    }
    /* istanbul ignore if */
    if (!repository.pullRequest) {
      return null;
    }
    return repository.pullRequest.__typename;
  }
}
exports.BareIssueishDetailController = BareIssueishDetailController;
_defineProperty(BareIssueishDetailController, "propTypes", {
  // Relay response
  relay: _propTypes.default.object.isRequired,
  repository: _propTypes.default.shape({
    name: _propTypes.default.string.isRequired,
    owner: _propTypes.default.shape({
      login: _propTypes.default.string.isRequired
    }).isRequired,
    pullRequest: _propTypes.default.any,
    issue: _propTypes.default.any
  }),
  // Local Repository model properties
  localRepository: _propTypes.default.object.isRequired,
  branches: _propTypes2.BranchSetPropType.isRequired,
  remotes: _propTypes2.RemoteSetPropType.isRequired,
  isMerging: _propTypes.default.bool.isRequired,
  isRebasing: _propTypes.default.bool.isRequired,
  isAbsent: _propTypes.default.bool.isRequired,
  isLoading: _propTypes.default.bool.isRequired,
  isPresent: _propTypes.default.bool.isRequired,
  workdirPath: _propTypes.default.string,
  issueishNumber: _propTypes.default.number.isRequired,
  // Review comment threads
  reviewCommentsLoading: _propTypes.default.bool.isRequired,
  reviewCommentsTotalCount: _propTypes.default.number.isRequired,
  reviewCommentsResolvedCount: _propTypes.default.number.isRequired,
  reviewCommentThreads: _propTypes.default.arrayOf(_propTypes.default.shape({
    thread: _propTypes.default.object.isRequired,
    comments: _propTypes.default.arrayOf(_propTypes.default.object).isRequired
  })).isRequired,
  // Connection information
  endpoint: _propTypes2.EndpointPropType.isRequired,
  token: _propTypes.default.string.isRequired,
  // Atom environment
  workspace: _propTypes.default.object.isRequired,
  commands: _propTypes.default.object.isRequired,
  keymaps: _propTypes.default.object.isRequired,
  tooltips: _propTypes.default.object.isRequired,
  config: _propTypes.default.object.isRequired,
  // Action methods
  onTitleChange: _propTypes.default.func.isRequired,
  switchToIssueish: _propTypes.default.func.isRequired,
  destroy: _propTypes.default.func.isRequired,
  reportRelayError: _propTypes.default.func.isRequired,
  // Item context
  itemType: _propTypes2.ItemTypePropType.isRequired,
  refEditor: _propTypes2.RefHolderPropType.isRequired,
  // For opening files changed tab
  initChangedFilePath: _propTypes.default.string,
  initChangedFilePosition: _propTypes.default.number,
  selectedTab: _propTypes.default.number.isRequired,
  onTabSelected: _propTypes.default.func.isRequired,
  onOpenFilesTab: _propTypes.default.func.isRequired
});
var _default = (0, _reactRelay.createFragmentContainer)(BareIssueishDetailController, {
  repository: function () {
    const node = require("./__generated__/issueishDetailController_repository.graphql");
    if (node.hash && node.hash !== "504a7b23eb6c4c87798663e4d9c7136a") {
      console.error("The definition of 'issueishDetailController_repository' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }
    return require("./__generated__/issueishDetailController_repository.graphql");
  }
});
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdFJlbGF5IiwiX3Byb3BUeXBlcyIsIl9wcm9wVHlwZXMyIiwiX2lzc3VlRGV0YWlsVmlldyIsIl9jb21taXREZXRhaWxJdGVtIiwiX3Jldmlld3NJdGVtIiwiX3JlcG9ydGVyUHJveHkiLCJfcHJDaGVja291dENvbnRyb2xsZXIiLCJfcHJEZXRhaWxWaWV3Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ0IiwiaSIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsInIiLCJlIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiQmFyZUlzc3VlaXNoRGV0YWlsQ29udHJvbGxlciIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJhcmdzIiwic2hhIiwicHJvcHMiLCJ3b3JrZGlyUGF0aCIsInVyaSIsIkNvbW1pdERldGFpbEl0ZW0iLCJidWlsZFVSSSIsIndvcmtzcGFjZSIsIm9wZW4iLCJwZW5kaW5nIiwiYWRkRXZlbnQiLCJwYWNrYWdlIiwiZnJvbSIsIm5hbWUiLCJnZXRUeXBlbmFtZSIsIlJldmlld3NJdGVtIiwiaG9zdCIsImVuZHBvaW50IiwiZ2V0SG9zdCIsIm93bmVyIiwicmVwb3NpdG9yeSIsImxvZ2luIiwicmVwbyIsIm51bWJlciIsImlzc3VlaXNoTnVtYmVyIiwid29ya2RpciIsImNvbXBvbmVudERpZE1vdW50IiwidXBkYXRlVGl0bGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJpc3N1ZSIsInB1bGxSZXF1ZXN0IiwicHJlZml4IiwiaXNzdWVpc2giLCJ0aXRsZSIsIm9uVGl0bGVDaGFuZ2UiLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwibG9jYWxSZXBvc2l0b3J5IiwiaXNBYnNlbnQiLCJpc0xvYWRpbmciLCJpc1ByZXNlbnQiLCJpc01lcmdpbmciLCJpc1JlYmFzaW5nIiwiYnJhbmNoZXMiLCJyZW1vdGVzIiwiY2hlY2tvdXRPcCIsInJlbGF5IiwicmV2aWV3Q29tbWVudHNMb2FkaW5nIiwicmV2aWV3Q29tbWVudHNUb3RhbENvdW50IiwicmV2aWV3Q29tbWVudHNSZXNvbHZlZENvdW50IiwicmV2aWV3Q29tbWVudFRocmVhZHMiLCJ0b2tlbiIsImNvbW1hbmRzIiwia2V5bWFwcyIsInRvb2x0aXBzIiwiY29uZmlnIiwib3BlbkNvbW1pdCIsIm9wZW5SZXZpZXdzIiwic3dpdGNoVG9Jc3N1ZWlzaCIsImRlc3Ryb3kiLCJyZXBvcnRSZWxheUVycm9yIiwiaXRlbVR5cGUiLCJyZWZFZGl0b3IiLCJpbml0Q2hhbmdlZEZpbGVQYXRoIiwiaW5pdENoYW5nZWRGaWxlUG9zaXRpb24iLCJzZWxlY3RlZFRhYiIsIm9uVGFiU2VsZWN0ZWQiLCJvbk9wZW5GaWxlc1RhYiIsIl9fdHlwZW5hbWUiLCJleHBvcnRzIiwiUHJvcFR5cGVzIiwib2JqZWN0IiwiaXNSZXF1aXJlZCIsInNoYXBlIiwic3RyaW5nIiwiYW55IiwiQnJhbmNoU2V0UHJvcFR5cGUiLCJSZW1vdGVTZXRQcm9wVHlwZSIsImJvb2wiLCJhcnJheU9mIiwidGhyZWFkIiwiY29tbWVudHMiLCJFbmRwb2ludFByb3BUeXBlIiwiZnVuYyIsIkl0ZW1UeXBlUHJvcFR5cGUiLCJSZWZIb2xkZXJQcm9wVHlwZSIsIl9kZWZhdWx0IiwiY3JlYXRlRnJhZ21lbnRDb250YWluZXIiLCJub2RlIiwiaGFzaCIsImNvbnNvbGUiLCJlcnJvciJdLCJzb3VyY2VzIjpbImlzc3VlaXNoLWRldGFpbC1jb250cm9sbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2dyYXBocWwsIGNyZWF0ZUZyYWdtZW50Q29udGFpbmVyfSBmcm9tICdyZWFjdC1yZWxheSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQge1xuICBCcmFuY2hTZXRQcm9wVHlwZSwgUmVtb3RlU2V0UHJvcFR5cGUsIEl0ZW1UeXBlUHJvcFR5cGUsIEVuZHBvaW50UHJvcFR5cGUsIFJlZkhvbGRlclByb3BUeXBlLFxufSBmcm9tICcuLi9wcm9wLXR5cGVzJztcbmltcG9ydCBJc3N1ZURldGFpbFZpZXcgZnJvbSAnLi4vdmlld3MvaXNzdWUtZGV0YWlsLXZpZXcnO1xuaW1wb3J0IENvbW1pdERldGFpbEl0ZW0gZnJvbSAnLi4vaXRlbXMvY29tbWl0LWRldGFpbC1pdGVtJztcbmltcG9ydCBSZXZpZXdzSXRlbSBmcm9tICcuLi9pdGVtcy9yZXZpZXdzLWl0ZW0nO1xuaW1wb3J0IHthZGRFdmVudH0gZnJvbSAnLi4vcmVwb3J0ZXItcHJveHknO1xuaW1wb3J0IFB1bGxSZXF1ZXN0Q2hlY2tvdXRDb250cm9sbGVyIGZyb20gJy4vcHItY2hlY2tvdXQtY29udHJvbGxlcic7XG5pbXBvcnQgUHVsbFJlcXVlc3REZXRhaWxWaWV3IGZyb20gJy4uL3ZpZXdzL3ByLWRldGFpbC12aWV3JztcblxuZXhwb3J0IGNsYXNzIEJhcmVJc3N1ZWlzaERldGFpbENvbnRyb2xsZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8vIFJlbGF5IHJlc3BvbnNlXG4gICAgcmVsYXk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICByZXBvc2l0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgb3duZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIGxvZ2luOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICB9KS5pc1JlcXVpcmVkLFxuICAgICAgcHVsbFJlcXVlc3Q6IFByb3BUeXBlcy5hbnksXG4gICAgICBpc3N1ZTogUHJvcFR5cGVzLmFueSxcbiAgICB9KSxcblxuICAgIC8vIExvY2FsIFJlcG9zaXRvcnkgbW9kZWwgcHJvcGVydGllc1xuICAgIGxvY2FsUmVwb3NpdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGJyYW5jaGVzOiBCcmFuY2hTZXRQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICAgIHJlbW90ZXM6IFJlbW90ZVNldFByb3BUeXBlLmlzUmVxdWlyZWQsXG4gICAgaXNNZXJnaW5nOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIGlzUmViYXNpbmc6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgaXNBYnNlbnQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgaXNMb2FkaW5nOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIGlzUHJlc2VudDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICB3b3JrZGlyUGF0aDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpc3N1ZWlzaE51bWJlcjogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuXG4gICAgLy8gUmV2aWV3IGNvbW1lbnQgdGhyZWFkc1xuICAgIHJldmlld0NvbW1lbnRzTG9hZGluZzogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICByZXZpZXdDb21tZW50c1RvdGFsQ291bnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICByZXZpZXdDb21tZW50c1Jlc29sdmVkQ291bnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICByZXZpZXdDb21tZW50VGhyZWFkczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHRocmVhZDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgICAgY29tbWVudHM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vYmplY3QpLmlzUmVxdWlyZWQsXG4gICAgfSkpLmlzUmVxdWlyZWQsXG5cbiAgICAvLyBDb25uZWN0aW9uIGluZm9ybWF0aW9uXG4gICAgZW5kcG9pbnQ6IEVuZHBvaW50UHJvcFR5cGUuaXNSZXF1aXJlZCxcbiAgICB0b2tlbjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuXG4gICAgLy8gQXRvbSBlbnZpcm9ubWVudFxuICAgIHdvcmtzcGFjZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGNvbW1hbmRzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAga2V5bWFwczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHRvb2x0aXBzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgY29uZmlnOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgICAvLyBBY3Rpb24gbWV0aG9kc1xuICAgIG9uVGl0bGVDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc3dpdGNoVG9Jc3N1ZWlzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBkZXN0cm95OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHJlcG9ydFJlbGF5RXJyb3I6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgICAvLyBJdGVtIGNvbnRleHRcbiAgICBpdGVtVHlwZTogSXRlbVR5cGVQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICAgIHJlZkVkaXRvcjogUmVmSG9sZGVyUHJvcFR5cGUuaXNSZXF1aXJlZCxcblxuICAgIC8vIEZvciBvcGVuaW5nIGZpbGVzIGNoYW5nZWQgdGFiXG4gICAgaW5pdENoYW5nZWRGaWxlUGF0aDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpbml0Q2hhbmdlZEZpbGVQb3NpdGlvbjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBzZWxlY3RlZFRhYjogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIG9uVGFiU2VsZWN0ZWQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25PcGVuRmlsZXNUYWI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnVwZGF0ZVRpdGxlKCk7XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy51cGRhdGVUaXRsZSgpO1xuICB9XG5cbiAgdXBkYXRlVGl0bGUoKSB7XG4gICAgY29uc3Qge3JlcG9zaXRvcnl9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAocmVwb3NpdG9yeSAmJiAocmVwb3NpdG9yeS5pc3N1ZSB8fCByZXBvc2l0b3J5LnB1bGxSZXF1ZXN0KSkge1xuICAgICAgbGV0IHByZWZpeCwgaXNzdWVpc2g7XG4gICAgICBpZiAodGhpcy5nZXRUeXBlbmFtZSgpID09PSAnUHVsbFJlcXVlc3QnKSB7XG4gICAgICAgIHByZWZpeCA9ICdQUjonO1xuICAgICAgICBpc3N1ZWlzaCA9IHJlcG9zaXRvcnkucHVsbFJlcXVlc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmVmaXggPSAnSXNzdWU6JztcbiAgICAgICAgaXNzdWVpc2ggPSByZXBvc2l0b3J5Lmlzc3VlO1xuICAgICAgfVxuICAgICAgY29uc3QgdGl0bGUgPSBgJHtwcmVmaXh9ICR7cmVwb3NpdG9yeS5vd25lci5sb2dpbn0vJHtyZXBvc2l0b3J5Lm5hbWV9IyR7aXNzdWVpc2gubnVtYmVyfSDigJQgJHtpc3N1ZWlzaC50aXRsZX1gO1xuICAgICAgdGhpcy5wcm9wcy5vblRpdGxlQ2hhbmdlKHRpdGxlKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge3JlcG9zaXRvcnl9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIXJlcG9zaXRvcnkgfHwgIXJlcG9zaXRvcnkuaXNzdWUgfHwgIXJlcG9zaXRvcnkucHVsbFJlcXVlc3QpIHtcbiAgICAgIHJldHVybiA8ZGl2Pklzc3VlL1BSICN7dGhpcy5wcm9wcy5pc3N1ZWlzaE51bWJlcn0gbm90IGZvdW5kPC9kaXY+OyAvLyBUT0RPOiBubyBQUnNcbiAgICB9XG5cbiAgICBpZiAodGhpcy5nZXRUeXBlbmFtZSgpID09PSAnUHVsbFJlcXVlc3QnKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8UHVsbFJlcXVlc3RDaGVja291dENvbnRyb2xsZXJcbiAgICAgICAgICByZXBvc2l0b3J5PXtyZXBvc2l0b3J5fVxuICAgICAgICAgIHB1bGxSZXF1ZXN0PXtyZXBvc2l0b3J5LnB1bGxSZXF1ZXN0fVxuXG4gICAgICAgICAgbG9jYWxSZXBvc2l0b3J5PXt0aGlzLnByb3BzLmxvY2FsUmVwb3NpdG9yeX1cbiAgICAgICAgICBpc0Fic2VudD17dGhpcy5wcm9wcy5pc0Fic2VudH1cbiAgICAgICAgICBpc0xvYWRpbmc9e3RoaXMucHJvcHMuaXNMb2FkaW5nfVxuICAgICAgICAgIGlzUHJlc2VudD17dGhpcy5wcm9wcy5pc1ByZXNlbnR9XG4gICAgICAgICAgaXNNZXJnaW5nPXt0aGlzLnByb3BzLmlzTWVyZ2luZ31cbiAgICAgICAgICBpc1JlYmFzaW5nPXt0aGlzLnByb3BzLmlzUmViYXNpbmd9XG4gICAgICAgICAgYnJhbmNoZXM9e3RoaXMucHJvcHMuYnJhbmNoZXN9XG4gICAgICAgICAgcmVtb3Rlcz17dGhpcy5wcm9wcy5yZW1vdGVzfT5cblxuICAgICAgICAgIHtjaGVja291dE9wID0+IChcbiAgICAgICAgICAgIDxQdWxsUmVxdWVzdERldGFpbFZpZXdcbiAgICAgICAgICAgICAgcmVsYXk9e3RoaXMucHJvcHMucmVsYXl9XG4gICAgICAgICAgICAgIHJlcG9zaXRvcnk9e3RoaXMucHJvcHMucmVwb3NpdG9yeX1cbiAgICAgICAgICAgICAgcHVsbFJlcXVlc3Q9e3RoaXMucHJvcHMucmVwb3NpdG9yeS5wdWxsUmVxdWVzdH1cblxuICAgICAgICAgICAgICBjaGVja291dE9wPXtjaGVja291dE9wfVxuICAgICAgICAgICAgICBsb2NhbFJlcG9zaXRvcnk9e3RoaXMucHJvcHMubG9jYWxSZXBvc2l0b3J5fVxuXG4gICAgICAgICAgICAgIHJldmlld0NvbW1lbnRzTG9hZGluZz17dGhpcy5wcm9wcy5yZXZpZXdDb21tZW50c0xvYWRpbmd9XG4gICAgICAgICAgICAgIHJldmlld0NvbW1lbnRzVG90YWxDb3VudD17dGhpcy5wcm9wcy5yZXZpZXdDb21tZW50c1RvdGFsQ291bnR9XG4gICAgICAgICAgICAgIHJldmlld0NvbW1lbnRzUmVzb2x2ZWRDb3VudD17dGhpcy5wcm9wcy5yZXZpZXdDb21tZW50c1Jlc29sdmVkQ291bnR9XG4gICAgICAgICAgICAgIHJldmlld0NvbW1lbnRUaHJlYWRzPXt0aGlzLnByb3BzLnJldmlld0NvbW1lbnRUaHJlYWRzfVxuXG4gICAgICAgICAgICAgIGVuZHBvaW50PXt0aGlzLnByb3BzLmVuZHBvaW50fVxuICAgICAgICAgICAgICB0b2tlbj17dGhpcy5wcm9wcy50b2tlbn1cblxuICAgICAgICAgICAgICB3b3Jrc3BhY2U9e3RoaXMucHJvcHMud29ya3NwYWNlfVxuICAgICAgICAgICAgICBjb21tYW5kcz17dGhpcy5wcm9wcy5jb21tYW5kc31cbiAgICAgICAgICAgICAga2V5bWFwcz17dGhpcy5wcm9wcy5rZXltYXBzfVxuICAgICAgICAgICAgICB0b29sdGlwcz17dGhpcy5wcm9wcy50b29sdGlwc31cbiAgICAgICAgICAgICAgY29uZmlnPXt0aGlzLnByb3BzLmNvbmZpZ31cblxuICAgICAgICAgICAgICBvcGVuQ29tbWl0PXt0aGlzLm9wZW5Db21taXR9XG4gICAgICAgICAgICAgIG9wZW5SZXZpZXdzPXt0aGlzLm9wZW5SZXZpZXdzfVxuICAgICAgICAgICAgICBzd2l0Y2hUb0lzc3VlaXNoPXt0aGlzLnByb3BzLnN3aXRjaFRvSXNzdWVpc2h9XG4gICAgICAgICAgICAgIGRlc3Ryb3k9e3RoaXMucHJvcHMuZGVzdHJveX1cbiAgICAgICAgICAgICAgcmVwb3J0UmVsYXlFcnJvcj17dGhpcy5wcm9wcy5yZXBvcnRSZWxheUVycm9yfVxuXG4gICAgICAgICAgICAgIGl0ZW1UeXBlPXt0aGlzLnByb3BzLml0ZW1UeXBlfVxuICAgICAgICAgICAgICByZWZFZGl0b3I9e3RoaXMucHJvcHMucmVmRWRpdG9yfVxuXG4gICAgICAgICAgICAgIGluaXRDaGFuZ2VkRmlsZVBhdGg9e3RoaXMucHJvcHMuaW5pdENoYW5nZWRGaWxlUGF0aH1cbiAgICAgICAgICAgICAgaW5pdENoYW5nZWRGaWxlUG9zaXRpb249e3RoaXMucHJvcHMuaW5pdENoYW5nZWRGaWxlUG9zaXRpb259XG4gICAgICAgICAgICAgIHNlbGVjdGVkVGFiPXt0aGlzLnByb3BzLnNlbGVjdGVkVGFifVxuICAgICAgICAgICAgICBvblRhYlNlbGVjdGVkPXt0aGlzLnByb3BzLm9uVGFiU2VsZWN0ZWR9XG4gICAgICAgICAgICAgIG9uT3BlbkZpbGVzVGFiPXt0aGlzLnByb3BzLm9uT3BlbkZpbGVzVGFifVxuICAgICAgICAgICAgICB3b3JrZGlyUGF0aD17dGhpcy5wcm9wcy53b3JrZGlyUGF0aH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cblxuICAgICAgICA8L1B1bGxSZXF1ZXN0Q2hlY2tvdXRDb250cm9sbGVyPlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPElzc3VlRGV0YWlsVmlld1xuICAgICAgICAgIHJlcG9zaXRvcnk9e3JlcG9zaXRvcnl9XG4gICAgICAgICAgaXNzdWU9e3JlcG9zaXRvcnkuaXNzdWV9XG4gICAgICAgICAgc3dpdGNoVG9Jc3N1ZWlzaD17dGhpcy5wcm9wcy5zd2l0Y2hUb0lzc3VlaXNofVxuICAgICAgICAgIHRvb2x0aXBzPXt0aGlzLnByb3BzLnRvb2x0aXBzfVxuICAgICAgICAgIHJlcG9ydFJlbGF5RXJyb3I9e3RoaXMucHJvcHMucmVwb3J0UmVsYXlFcnJvcn1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgb3BlbkNvbW1pdCA9IGFzeW5jICh7c2hhfSkgPT4ge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghdGhpcy5wcm9wcy53b3JrZGlyUGF0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHVyaSA9IENvbW1pdERldGFpbEl0ZW0uYnVpbGRVUkkodGhpcy5wcm9wcy53b3JrZGlyUGF0aCwgc2hhKTtcbiAgICBhd2FpdCB0aGlzLnByb3BzLndvcmtzcGFjZS5vcGVuKHVyaSwge3BlbmRpbmc6IHRydWV9KTtcbiAgICBhZGRFdmVudCgnb3Blbi1jb21taXQtaW4tcGFuZScsIHtwYWNrYWdlOiAnZ2l0aHViJywgZnJvbTogdGhpcy5jb25zdHJ1Y3Rvci5uYW1lfSk7XG4gIH1cblxuICBvcGVuUmV2aWV3cyA9IGFzeW5jICgpID0+IHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodGhpcy5nZXRUeXBlbmFtZSgpICE9PSAnUHVsbFJlcXVlc3QnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdXJpID0gUmV2aWV3c0l0ZW0uYnVpbGRVUkkoe1xuICAgICAgaG9zdDogdGhpcy5wcm9wcy5lbmRwb2ludC5nZXRIb3N0KCksXG4gICAgICBvd25lcjogdGhpcy5wcm9wcy5yZXBvc2l0b3J5Lm93bmVyLmxvZ2luLFxuICAgICAgcmVwbzogdGhpcy5wcm9wcy5yZXBvc2l0b3J5Lm5hbWUsXG4gICAgICBudW1iZXI6IHRoaXMucHJvcHMuaXNzdWVpc2hOdW1iZXIsXG4gICAgICB3b3JrZGlyOiB0aGlzLnByb3BzLndvcmtkaXJQYXRoLFxuICAgIH0pO1xuICAgIGF3YWl0IHRoaXMucHJvcHMud29ya3NwYWNlLm9wZW4odXJpKTtcbiAgICBhZGRFdmVudCgnb3Blbi1yZXZpZXdzLXRhYicsIHtwYWNrYWdlOiAnZ2l0aHViJywgZnJvbTogdGhpcy5jb25zdHJ1Y3Rvci5uYW1lfSk7XG4gIH1cblxuICBnZXRUeXBlbmFtZSgpIHtcbiAgICBjb25zdCB7cmVwb3NpdG9yeX0gPSB0aGlzLnByb3BzO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghcmVwb3NpdG9yeSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghcmVwb3NpdG9yeS5wdWxsUmVxdWVzdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiByZXBvc2l0b3J5LnB1bGxSZXF1ZXN0Ll9fdHlwZW5hbWU7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRnJhZ21lbnRDb250YWluZXIoQmFyZUlzc3VlaXNoRGV0YWlsQ29udHJvbGxlciwge1xuICByZXBvc2l0b3J5OiBncmFwaHFsYFxuICAgIGZyYWdtZW50IGlzc3VlaXNoRGV0YWlsQ29udHJvbGxlcl9yZXBvc2l0b3J5IG9uIFJlcG9zaXRvcnlcbiAgICBAYXJndW1lbnREZWZpbml0aW9ucyhcbiAgICAgIGlzc3VlaXNoTnVtYmVyOiB7dHlwZTogXCJJbnQhXCJ9XG4gICAgICB0aW1lbGluZUNvdW50OiB7dHlwZTogXCJJbnQhXCJ9XG4gICAgICB0aW1lbGluZUN1cnNvcjoge3R5cGU6IFwiU3RyaW5nXCJ9XG4gICAgICBjb21taXRDb3VudDoge3R5cGU6IFwiSW50IVwifVxuICAgICAgY29tbWl0Q3Vyc29yOiB7dHlwZTogXCJTdHJpbmdcIn1cbiAgICAgIGNoZWNrU3VpdGVDb3VudDoge3R5cGU6IFwiSW50IVwifVxuICAgICAgY2hlY2tTdWl0ZUN1cnNvcjoge3R5cGU6IFwiU3RyaW5nXCJ9XG4gICAgICBjaGVja1J1bkNvdW50OiB7dHlwZTogXCJJbnQhXCJ9XG4gICAgICBjaGVja1J1bkN1cnNvcjoge3R5cGU6IFwiU3RyaW5nXCJ9XG4gICAgKSB7XG4gICAgICAuLi5pc3N1ZURldGFpbFZpZXdfcmVwb3NpdG9yeVxuICAgICAgLi4ucHJDaGVja291dENvbnRyb2xsZXJfcmVwb3NpdG9yeVxuICAgICAgLi4ucHJEZXRhaWxWaWV3X3JlcG9zaXRvcnlcbiAgICAgIG5hbWVcbiAgICAgIG93bmVyIHtcbiAgICAgICAgbG9naW5cbiAgICAgIH1cbiAgICAgIGlzc3VlOiBpc3N1ZU9yUHVsbFJlcXVlc3QobnVtYmVyOiAkaXNzdWVpc2hOdW1iZXIpIHtcbiAgICAgICAgX190eXBlbmFtZVxuICAgICAgICAuLi4gb24gSXNzdWUge1xuICAgICAgICAgIHRpdGxlXG4gICAgICAgICAgbnVtYmVyXG4gICAgICAgICAgLi4uaXNzdWVEZXRhaWxWaWV3X2lzc3VlIEBhcmd1bWVudHMoXG4gICAgICAgICAgICB0aW1lbGluZUNvdW50OiAkdGltZWxpbmVDb3VudCxcbiAgICAgICAgICAgIHRpbWVsaW5lQ3Vyc29yOiAkdGltZWxpbmVDdXJzb3IsXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwdWxsUmVxdWVzdDogaXNzdWVPclB1bGxSZXF1ZXN0KG51bWJlcjogJGlzc3VlaXNoTnVtYmVyKSB7XG4gICAgICAgIF9fdHlwZW5hbWVcbiAgICAgICAgLi4uIG9uIFB1bGxSZXF1ZXN0IHtcbiAgICAgICAgICB0aXRsZVxuICAgICAgICAgIG51bWJlclxuICAgICAgICAgIC4uLnByQ2hlY2tvdXRDb250cm9sbGVyX3B1bGxSZXF1ZXN0XG4gICAgICAgICAgLi4ucHJEZXRhaWxWaWV3X3B1bGxSZXF1ZXN0IEBhcmd1bWVudHMoXG4gICAgICAgICAgICB0aW1lbGluZUNvdW50OiAkdGltZWxpbmVDb3VudFxuICAgICAgICAgICAgdGltZWxpbmVDdXJzb3I6ICR0aW1lbGluZUN1cnNvclxuICAgICAgICAgICAgY29tbWl0Q291bnQ6ICRjb21taXRDb3VudFxuICAgICAgICAgICAgY29tbWl0Q3Vyc29yOiAkY29tbWl0Q3Vyc29yXG4gICAgICAgICAgICBjaGVja1N1aXRlQ291bnQ6ICRjaGVja1N1aXRlQ291bnRcbiAgICAgICAgICAgIGNoZWNrU3VpdGVDdXJzb3I6ICRjaGVja1N1aXRlQ3Vyc29yXG4gICAgICAgICAgICBjaGVja1J1bkNvdW50OiAkY2hlY2tSdW5Db3VudFxuICAgICAgICAgICAgY2hlY2tSdW5DdXJzb3I6ICRjaGVja1J1bkN1cnNvclxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgYCxcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxVQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFHQSxJQUFBSSxnQkFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssaUJBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFNLFlBQUEsR0FBQVAsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFPLGNBQUEsR0FBQVAsT0FBQTtBQUNBLElBQUFRLHFCQUFBLEdBQUFULHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBUyxhQUFBLEdBQUFWLHNCQUFBLENBQUFDLE9BQUE7QUFBNEQsU0FBQUQsdUJBQUFXLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFBQSxTQUFBRyxnQkFBQUgsR0FBQSxFQUFBSSxHQUFBLEVBQUFDLEtBQUEsSUFBQUQsR0FBQSxHQUFBRSxjQUFBLENBQUFGLEdBQUEsT0FBQUEsR0FBQSxJQUFBSixHQUFBLElBQUFPLE1BQUEsQ0FBQUMsY0FBQSxDQUFBUixHQUFBLEVBQUFJLEdBQUEsSUFBQUMsS0FBQSxFQUFBQSxLQUFBLEVBQUFJLFVBQUEsUUFBQUMsWUFBQSxRQUFBQyxRQUFBLG9CQUFBWCxHQUFBLENBQUFJLEdBQUEsSUFBQUMsS0FBQSxXQUFBTCxHQUFBO0FBQUEsU0FB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