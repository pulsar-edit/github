"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _commitDetailView = _interopRequireDefault(require("../views/commit-detail-view"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class CommitDetailController extends _react.default.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "toggleMessage", () => {
      return new Promise(resolve => {
        this.setState(prevState => ({
          messageOpen: !prevState.messageOpen
        }), resolve);
      });
    });
    this.state = {
      messageCollapsible: this.props.commit.isBodyLong(),
      messageOpen: !this.props.commit.isBodyLong()
    };
  }
  render() {
    return _react.default.createElement(_commitDetailView.default, _extends({
      messageCollapsible: this.state.messageCollapsible,
      messageOpen: this.state.messageOpen,
      toggleMessage: this.toggleMessage
    }, this.props));
  }
}
exports.default = CommitDetailController;
_defineProperty(CommitDetailController, "propTypes", _objectSpread({}, _commitDetailView.default.drilledPropTypes, {
  commit: _propTypes.default.object.isRequired
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfY29tbWl0RGV0YWlsVmlldyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Iiwib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsIlR5cGVFcnJvciIsIk51bWJlciIsIkNvbW1pdERldGFpbENvbnRyb2xsZXIiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFN0YXRlIiwicHJldlN0YXRlIiwibWVzc2FnZU9wZW4iLCJzdGF0ZSIsIm1lc3NhZ2VDb2xsYXBzaWJsZSIsImNvbW1pdCIsImlzQm9keUxvbmciLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwidG9nZ2xlTWVzc2FnZSIsImV4cG9ydHMiLCJDb21taXREZXRhaWxWaWV3IiwiZHJpbGxlZFByb3BUeXBlcyIsIlByb3BUeXBlcyIsIm9iamVjdCIsImlzUmVxdWlyZWQiXSwic291cmNlcyI6WyJjb21taXQtZGV0YWlsLWNvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCBDb21taXREZXRhaWxWaWV3IGZyb20gJy4uL3ZpZXdzL2NvbW1pdC1kZXRhaWwtdmlldyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbW1pdERldGFpbENvbnRyb2xsZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC4uLkNvbW1pdERldGFpbFZpZXcuZHJpbGxlZFByb3BUeXBlcyxcblxuICAgIGNvbW1pdDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbWVzc2FnZUNvbGxhcHNpYmxlOiB0aGlzLnByb3BzLmNvbW1pdC5pc0JvZHlMb25nKCksXG4gICAgICBtZXNzYWdlT3BlbjogIXRoaXMucHJvcHMuY29tbWl0LmlzQm9keUxvbmcoKSxcbiAgICB9O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Q29tbWl0RGV0YWlsVmlld1xuICAgICAgICBtZXNzYWdlQ29sbGFwc2libGU9e3RoaXMuc3RhdGUubWVzc2FnZUNvbGxhcHNpYmxlfVxuICAgICAgICBtZXNzYWdlT3Blbj17dGhpcy5zdGF0ZS5tZXNzYWdlT3Blbn1cbiAgICAgICAgdG9nZ2xlTWVzc2FnZT17dGhpcy50b2dnbGVNZXNzYWdlfVxuICAgICAgICB7Li4udGhpcy5wcm9wc31cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuXG4gIHRvZ2dsZU1lc3NhZ2UgPSAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHttZXNzYWdlT3BlbjogIXByZXZTdGF0ZS5tZXNzYWdlT3Blbn0pLCByZXNvbHZlKTtcbiAgICB9KTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRSxpQkFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQTJELFNBQUFELHVCQUFBSSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBQUEsU0FBQUcsUUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFFBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLENBQUEsT0FBQUcsTUFBQSxDQUFBRSxxQkFBQSxRQUFBQyxDQUFBLEdBQUFILE1BQUEsQ0FBQUUscUJBQUEsQ0FBQUwsQ0FBQSxHQUFBQyxDQUFBLEtBQUFLLENBQUEsR0FBQUEsQ0FBQSxDQUFBQyxNQUFBLFdBQUFOLENBQUEsV0FBQUUsTUFBQSxDQUFBSyx3QkFBQSxDQUFBUixDQUFBLEVBQUFDLENBQUEsRUFBQVEsVUFBQSxPQUFBUCxDQUFBLENBQUFRLElBQUEsQ0FBQUMsS0FBQSxDQUFBVCxDQUFBLEVBQUFJLENBQUEsWUFBQUosQ0FBQTtBQUFBLFNBQUFVLGNBQUFaLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFZLFNBQUEsQ0FBQUMsTUFBQSxFQUFBYixDQUFBLFVBQUFDLENBQUEsV0FBQVcsU0FBQSxDQUFBWixDQUFBLElBQUFZLFNBQUEsQ0FBQVosQ0FBQSxRQUFBQSxDQUFBLE9BQUFGLE9BQUEsQ0FBQUksTUFBQSxDQUFBRCxDQUFBLE9BQUFhLE9BQUEsV0FBQWQsQ0FBQSxJQUFBZSxlQUFBLENBQUFoQixDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxDQUFBRCxDQUFBLFNBQUFFLE1B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