"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _commitDetailView = _interopRequireDefault(require("../views/commit-detail-view"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class CommitDetailController extends _react.default.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "toggleMessage", () => {
      return new Promise(resolve => {
        this.setState(prevState => ({
          messageOpen: !prevState.messageOpen
        }), resolve);
      });
    });
    this.state = {
      messageCollapsible: this.props.commit.isBodyLong(),
      messageOpen: !this.props.commit.isBodyLong()
    };
  }
  render() {
    return _react.default.createElement(_commitDetailView.default, _extends({
      messageCollapsible: this.state.messageCollapsible,
      messageOpen: this.state.messageOpen,
      toggleMessage: this.toggleMessage
    }, this.props));
  }
}
exports.default = CommitDetailController;
_defineProperty(CommitDetailController, "propTypes", _objectSpread({}, _commitDetailView.default.drilledPropTypes, {
  commit: _propTypes.default.object.isRequired
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfY29tbWl0RGV0YWlsVmlldyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Iiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsIk9iamVjdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJmb3JFYWNoIiwia2V5IiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsIlR5cGVFcnJvciIsIk51bWJlciIsIkNvbW1pdERldGFpbENvbnRyb2xsZXIiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFN0YXRlIiwicHJldlN0YXRlIiwibWVzc2FnZU9wZW4iLCJzdGF0ZSIsIm1lc3NhZ2VDb2xsYXBzaWJsZSIsImNvbW1pdCIsImlzQm9keUxvbmciLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwidG9nZ2xlTWVzc2FnZSIsImV4cG9ydHMiLCJDb21taXREZXRhaWxWaWV3IiwiZHJpbGxlZFByb3BUeXBlcyIsIlByb3BUeXBlcyIsImlzUmVxdWlyZWQiXSwic291cmNlcyI6WyJjb21taXQtZGV0YWlsLWNvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCBDb21taXREZXRhaWxWaWV3IGZyb20gJy4uL3ZpZXdzL2NvbW1pdC1kZXRhaWwtdmlldyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbW1pdERldGFpbENvbnRyb2xsZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC4uLkNvbW1pdERldGFpbFZpZXcuZHJpbGxlZFByb3BUeXBlcyxcblxuICAgIGNvbW1pdDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbWVzc2FnZUNvbGxhcHNpYmxlOiB0aGlzLnByb3BzLmNvbW1pdC5pc0JvZHlMb25nKCksXG4gICAgICBtZXNzYWdlT3BlbjogIXRoaXMucHJvcHMuY29tbWl0LmlzQm9keUxvbmcoKSxcbiAgICB9O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Q29tbWl0RGV0YWlsVmlld1xuICAgICAgICBtZXNzYWdlQ29sbGFwc2libGU9e3RoaXMuc3RhdGUubWVzc2FnZUNvbGxhcHNpYmxlfVxuICAgICAgICBtZXNzYWdlT3Blbj17dGhpcy5zdGF0ZS5tZXNzYWdlT3Blbn1cbiAgICAgICAgdG9nZ2xlTWVzc2FnZT17dGhpcy50b2dnbGVNZXNzYWdlfVxuICAgICAgICB7Li4udGhpcy5wcm9wc31cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuXG4gIHRvZ2dsZU1lc3NhZ2UgPSAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHttZXNzYWdlT3BlbjogIXByZXZTdGF0ZS5tZXNzYWdlT3Blbn0pLCByZXNvbHZlKTtcbiAgICB9KTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRSxpQkFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQTJELFNBQUFELHVCQUFBSSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBQUEsU0FBQUcsUUFBQUMsTUFBQSxFQUFBQyxjQUFBLFFBQUFDLElBQUEsR0FBQUMsTUFBQSxDQUFBRCxJQUFBLENBQUFGLE1BQUEsT0FBQUcsTUFBQSxDQUFBQyxxQkFBQSxRQUFBQyxPQUFBLEdBQUFGLE1BQUEsQ0FBQUMscUJBQUEsQ0FBQUosTUFBQSxHQUFBQyxjQUFBLEtBQUFJLE9BQUEsR0FBQUEsT0FBQSxDQUFBQyxNQUFBLFdBQUFDLEdBQUEsV0FBQUosTUFBQSxDQUFBSyx3QkFBQSxDQUFBUixNQUFBLEVBQUFPLEdBQUEsRUFBQUUsVUFBQSxPQUFBUCxJQUFBLENBQUFRLElBQUEsQ0FBQUMsS0FBQSxDQUFBVCxJQUFBLEVBQUFHLE9BQUEsWUFBQUgsSUFBQTtBQUFBLFNBQUFVLGNBQUFDLE1BQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxFQUFBRixDQUFBLFVBQUFHLE1BQUEsV0FBQUYsU0FBQSxDQUFBRCxDQUFBLElBQUFDLFNBQUEsQ0FBQUQsQ0FBQSxRQUFBQSxDQUFBLE9BQUFmLE9BQUEsQ0FBQUksTUFBQSxDQUFBYyxNQUFBLE9BQUFDLE9BQUEsV0FBQUMsR0FBQSxJ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