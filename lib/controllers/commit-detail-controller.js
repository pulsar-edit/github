"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _commitDetailView = _interopRequireDefault(require("../views/commit-detail-view"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class CommitDetailController extends _react.default.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "toggleMessage", () => {
      return new Promise(resolve => {
        this.setState(prevState => ({
          messageOpen: !prevState.messageOpen
        }), resolve);
      });
    });
    this.state = {
      messageCollapsible: this.props.commit.isBodyLong(),
      messageOpen: !this.props.commit.isBodyLong()
    };
  }
  render() {
    return _react.default.createElement(_commitDetailView.default, _extends({
      messageCollapsible: this.state.messageCollapsible,
      messageOpen: this.state.messageOpen,
      toggleMessage: this.toggleMessage
    }, this.props));
  }
}
exports.default = CommitDetailController;
_defineProperty(CommitDetailController, "propTypes", _objectSpread({}, _commitDetailView.default.drilledPropTypes, {
  commit: _propTypes.default.object.isRequired
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfY29tbWl0RGV0YWlsVmlldyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Iiwib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJDb21taXREZXRhaWxDb250cm9sbGVyIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRTdGF0ZSIsInByZXZTdGF0ZSIsIm1lc3NhZ2VPcGVuIiwic3RhdGUiLCJtZXNzYWdlQ29sbGFwc2libGUiLCJjb21taXQiLCJpc0JvZHlMb25nIiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsInRvZ2dsZU1lc3NhZ2UiLCJleHBvcnRzIiwiQ29tbWl0RGV0YWlsVmlldyIsImRyaWxsZWRQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJvYmplY3QiLCJpc1JlcXVpcmVkIl0sInNvdXJjZXMiOlsiY29tbWl0LWRldGFpbC1jb250cm9sbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgQ29tbWl0RGV0YWlsVmlldyBmcm9tICcuLi92aWV3cy9jb21taXQtZGV0YWlsLXZpZXcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21taXREZXRhaWxDb250cm9sbGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAuLi5Db21taXREZXRhaWxWaWV3LmRyaWxsZWRQcm9wVHlwZXMsXG5cbiAgICBjb21taXQ6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1lc3NhZ2VDb2xsYXBzaWJsZTogdGhpcy5wcm9wcy5jb21taXQuaXNCb2R5TG9uZygpLFxuICAgICAgbWVzc2FnZU9wZW46ICF0aGlzLnByb3BzLmNvbW1pdC5pc0JvZHlMb25nKCksXG4gICAgfTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPENvbW1pdERldGFpbFZpZXdcbiAgICAgICAgbWVzc2FnZUNvbGxhcHNpYmxlPXt0aGlzLnN0YXRlLm1lc3NhZ2VDb2xsYXBzaWJsZX1cbiAgICAgICAgbWVzc2FnZU9wZW49e3RoaXMuc3RhdGUubWVzc2FnZU9wZW59XG4gICAgICAgIHRvZ2dsZU1lc3NhZ2U9e3RoaXMudG9nZ2xlTWVzc2FnZX1cbiAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICB0b2dnbGVNZXNzYWdlID0gKCkgPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+ICh7bWVzc2FnZU9wZW46ICFwcmV2U3RhdGUubWVzc2FnZU9wZW59KSwgcmVzb2x2ZSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUUsaUJBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUEyRCxTQUFBRCx1QkFBQUksR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUFBLFNBQUFHLFFBQUFDLENBQUEsRUFBQUMsQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBSixDQUFBLE9BQUFHLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFMLENBQUEsR0FBQUMsQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFRLFVBQUEsT0FBQVAsQ0FBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsQ0FBQSxFQUFBSSxDQUFBLFlBQUFKLENBQUE7QUFBQSxTQUFBVSxjQUFBWixDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBWSxTQUFBLENBQUFDLE1BQUEsRUFBQWIsQ0FBQSxVQUFBQyxDQUFBLFdBQUFXLFNBQUEsQ0FBQVosQ0FBQSxJQUFBWSxTQUFBLENBQUFaLENBQUEsUUFBQUEsQ0FBQSxPQUFBRixPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxPQUFBYSxPQUFBLFdBQUFkLENBQUEsSUFBQWUsZUFBQSxDQUFBaEIs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