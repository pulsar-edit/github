"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _multiFilePatchController = _interopRequireDefault(require("./multi-file-patch-controller"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class CommitPreviewController extends _react.default.Component {
  render() {
    return _react.default.createElement(_multiFilePatchController.default, _extends({
      surface: this.props.surfaceToCommitPreviewButton
    }, this.props));
  }
}
exports.default = CommitPreviewController;
_defineProperty(CommitPreviewController, "propTypes", {
  repository: _propTypes.default.object.isRequired,
  stagingStatus: _propTypes.default.oneOf(['staged', 'unstaged']),
  workspace: _propTypes.default.object.isRequired,
  commands: _propTypes.default.object.isRequired,
  keymaps: _propTypes.default.object.isRequired,
  tooltips: _propTypes.default.object.isRequired,
  config: _propTypes.default.object.isRequired,
  destroy: _propTypes.default.func.isRequired,
  undoLastDiscard: _propTypes.default.func.isRequired,
  surfaceToCommitPreviewButton: _propTypes.default.func.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfbXVsdGlGaWxlUGF0Y2hDb250cm9sbGVyIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ0IiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiciIsImUiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsIlR5cGVFcnJvciIsIk51bWJlciIsIkNvbW1pdFByZXZpZXdDb250cm9sbGVyIiwiUmVhY3QiLCJDb21wb25lbnQiLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50Iiwic3VyZmFjZSIsInByb3BzIiwic3VyZmFjZVRvQ29tbWl0UHJldmlld0J1dHRvbiIsImV4cG9ydHMiLCJyZXBvc2l0b3J5IiwiUHJvcFR5cGVzIiwib2JqZWN0IiwiaXNSZXF1aXJlZCIsInN0YWdpbmdTdGF0dXMiLCJvbmVPZiIsIndvcmtzcGFjZSIsImNvbW1hbmRzIiwia2V5bWFwcyIsInRvb2x0aXBzIiwiY29uZmlnIiwiZGVzdHJveSIsImZ1bmMiLCJ1bmRvTGFzdERpc2NhcmQiXSwic291cmNlcyI6WyJjb21taXQtcHJldmlldy1jb250cm9sbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgTXVsdGlGaWxlUGF0Y2hDb250cm9sbGVyIGZyb20gJy4vbXVsdGktZmlsZS1wYXRjaC1jb250cm9sbGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tbWl0UHJldmlld0NvbnRyb2xsZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHJlcG9zaXRvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGFnaW5nU3RhdHVzOiBQcm9wVHlwZXMub25lT2YoWydzdGFnZWQnLCAndW5zdGFnZWQnXSksXG5cbiAgICB3b3Jrc3BhY2U6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBjb21tYW5kczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGtleW1hcHM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICB0b29sdGlwczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGNvbmZpZzogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gICAgZGVzdHJveTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1bmRvTGFzdERpc2NhcmQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc3VyZmFjZVRvQ29tbWl0UHJldmlld0J1dHRvbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPE11bHRpRmlsZVBhdGNoQ29udHJvbGxlclxuICAgICAgICBzdXJmYWNlPXt0aGlzLnByb3BzLnN1cmZhY2VUb0NvbW1pdFByZXZpZXdCdXR0b259XG4gICAgICAgIHsuLi50aGlzLnByb3BzfVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFF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