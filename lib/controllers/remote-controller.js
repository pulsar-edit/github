"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _electron = require("electron");
var _reporterProxy = require("../reporter-proxy");
var _propTypes2 = require("../prop-types");
var _issueishSearchesController = _interopRequireDefault(require("./issueish-searches-controller"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class RemoteController extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "onCreatePr", async () => {
      const currentBranch = this.props.branches.getHeadBranch();
      const upstream = currentBranch.getUpstream();
      if (!upstream.isPresent() || this.props.aheadCount > 0) {
        await this.props.onPushBranch();
      }
      let createPrUrl = 'https://github.com/';
      createPrUrl += this.props.remote.getOwner() + '/' + this.props.remote.getRepo();
      createPrUrl += '/compare/' + encodeURIComponent(currentBranch.getName());
      createPrUrl += '?expand=1';
      await _electron.shell.openExternal(createPrUrl);
      (0, _reporterProxy.incrementCounter)('create-pull-request');
    });
  }
  render() {
    return _react.default.createElement(_issueishSearchesController.default, {
      endpoint: this.props.endpoint,
      token: this.props.token,
      workingDirectory: this.props.workingDirectory,
      repository: this.props.repository,
      workspace: this.props.workspace,
      remote: this.props.remote,
      remotes: this.props.remotes,
      branches: this.props.branches,
      aheadCount: this.props.aheadCount,
      pushInProgress: this.props.pushInProgress,
      onCreatePr: this.onCreatePr
    });
  }
}
exports.default = RemoteController;
_defineProperty(RemoteController, "propTypes", {
  // Relay payload
  repository: _propTypes.default.shape({
    id: _propTypes.default.string.isRequired,
    defaultBranchRef: _propTypes.default.shape({
      prefix: _propTypes.default.string.isRequired,
      name: _propTypes.default.string.isRequired
    })
  }),
  // Connection
  endpoint: _propTypes2.EndpointPropType.isRequired,
  token: _propTypes2.TokenPropType.isRequired,
  // Repository derived attributes
  workingDirectory: _propTypes.default.string,
  workspace: _propTypes.default.object.isRequired,
  remote: _propTypes2.RemotePropType.isRequired,
  remotes: _propTypes2.RemoteSetPropType.isRequired,
  branches: _propTypes2.BranchSetPropType.isRequired,
  aheadCount: _propTypes.default.number,
  pushInProgress: _propTypes.default.bool.isRequired,
  // Actions
  onPushBranch: _propTypes.default.func.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZW1vdGVDb250cm9sbGVyIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjdXJyZW50QnJhbmNoIiwicHJvcHMiLCJicmFuY2hlcyIsImdldEhlYWRCcmFuY2giLCJ1cHN0cmVhbSIsImdldFVwc3RyZWFtIiwiaXNQcmVzZW50IiwiYWhlYWRDb3VudCIsIm9uUHVzaEJyYW5jaCIsImNyZWF0ZVByVXJsIiwicmVtb3RlIiwiZ2V0T3duZXIiLCJnZXRSZXBvIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2V0TmFtZSIsInNoZWxsIiwib3BlbkV4dGVybmFsIiwiaW5jcmVtZW50Q291bnRlciIsInJlbmRlciIsImVuZHBvaW50IiwidG9rZW4iLCJ3b3JraW5nRGlyZWN0b3J5IiwicmVwb3NpdG9yeSIsIndvcmtzcGFjZSIsInJlbW90ZXMiLCJwdXNoSW5Qcm9ncmVzcyIsIm9uQ3JlYXRlUHIiLCJQcm9wVHlwZXMiLCJzaGFwZSIsImlkIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsImRlZmF1bHRCcmFuY2hSZWYiLCJwcmVmaXgiLCJuYW1lIiwiRW5kcG9pbnRQcm9wVHlwZSIsIlRva2VuUHJvcFR5cGUiLCJvYmplY3QiLCJSZW1vdGVQcm9wVHlwZSIsIlJlbW90ZVNldFByb3BUeXBlIiwiQnJhbmNoU2V0UHJvcFR5cGUiLCJudW1iZXIiLCJib29sIiwiZnVuYyJdLCJzb3VyY2VzIjpbInJlbW90ZS1jb250cm9sbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtzaGVsbH0gZnJvbSAnZWxlY3Ryb24nO1xuXG5pbXBvcnQge2luY3JlbWVudENvdW50ZXJ9IGZyb20gJy4uL3JlcG9ydGVyLXByb3h5JztcbmltcG9ydCB7UmVtb3RlUHJvcFR5cGUsIFJlbW90ZVNldFByb3BUeXBlLCBCcmFuY2hTZXRQcm9wVHlwZSwgRW5kcG9pbnRQcm9wVHlwZSwgVG9rZW5Qcm9wVHlwZX0gZnJvbSAnLi4vcHJvcC10eXBlcyc7XG5pbXBvcnQgSXNzdWVpc2hTZWFyY2hlc0NvbnRyb2xsZXIgZnJvbSAnLi9pc3N1ZWlzaC1zZWFyY2hlcy1jb250cm9sbGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVtb3RlQ29udHJvbGxlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLy8gUmVsYXkgcGF5bG9hZFxuICAgIHJlcG9zaXRvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgZGVmYXVsdEJyYW5jaFJlZjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgcHJlZml4OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIH0pLFxuICAgIH0pLFxuXG4gICAgLy8gQ29ubmVjdGlvblxuICAgIGVuZHBvaW50OiBFbmRwb2ludFByb3BUeXBlLmlzUmVxdWlyZWQsXG4gICAgdG9rZW46IFRva2VuUHJvcFR5cGUuaXNSZXF1aXJlZCxcblxuICAgIC8vIFJlcG9zaXRvcnkgZGVyaXZlZCBhdHRyaWJ1dGVzXG4gICAgd29ya2luZ0RpcmVjdG9yeTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB3b3Jrc3BhY2U6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICByZW1vdGU6IFJlbW90ZVByb3BUeXBlLmlzUmVxdWlyZWQsXG4gICAgcmVtb3RlczogUmVtb3RlU2V0UHJvcFR5cGUuaXNSZXF1aXJlZCxcbiAgICBicmFuY2hlczogQnJhbmNoU2V0UHJvcFR5cGUuaXNSZXF1aXJlZCxcbiAgICBhaGVhZENvdW50OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHB1c2hJblByb2dyZXNzOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuXG4gICAgLy8gQWN0aW9uc1xuICAgIG9uUHVzaEJyYW5jaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPElzc3VlaXNoU2VhcmNoZXNDb250cm9sbGVyXG4gICAgICAgIGVuZHBvaW50PXt0aGlzLnByb3BzLmVuZHBvaW50fVxuICAgICAgICB0b2tlbj17dGhpcy5wcm9wcy50b2tlbn1cblxuICAgICAgICB3b3JraW5nRGlyZWN0b3J5PXt0aGlzLnByb3BzLndvcmtpbmdEaXJlY3Rvcnl9XG4gICAgICAgIHJlcG9zaXRvcnk9e3RoaXMucHJvcHMucmVwb3NpdG9yeX1cblxuICAgICAgICB3b3Jrc3BhY2U9e3RoaXMucHJvcHMud29ya3NwYWNlfVxuICAgICAgICByZW1vdGU9e3RoaXMucHJvcHMucmVtb3RlfVxuICAgICAgICByZW1vdGVzPXt0aGlzLnByb3BzLnJlbW90ZXN9XG4gICAgICAgIGJyYW5jaGVzPXt0aGlzLnByb3BzLmJyYW5jaGVzfVxuICAgICAgICBhaGVhZENvdW50PXt0aGlzLnByb3BzLmFoZWFkQ291bnR9XG4gICAgICAgIHB1c2hJblByb2dyZXNzPXt0aGlzLnByb3BzLnB1c2hJblByb2dyZXNzfVxuXG4gICAgICAgIG9uQ3JlYXRlUHI9e3RoaXMub25DcmVhdGVQcn1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuXG4gIG9uQ3JlYXRlUHIgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY3VycmVudEJyYW5jaCA9IHRoaXMucHJvcHMuYnJhbmNoZXMuZ2V0SGVhZEJyYW5jaCgpO1xuICAgIGNvbnN0IHVwc3RyZWFtID0gY3VycmVudEJyYW5jaC5nZXRVcHN0cmVhbSgpO1xuICAgIGlmICghdXBzdHJlYW0uaXNQcmVzZW50KCkgfHwgdGhpcy5wcm9wcy5haGVhZENvdW50ID4gMCkge1xuICAgICAgYXdhaXQgdGhpcy5wcm9wcy5vblB1c2hCcmFuY2goKTtcbiAgICB9XG5cbiAgICBsZXQgY3JlYXRlUHJVcmwgPSAnaHR0cHM6Ly9naXRodWIuY29tLyc7XG4gICAgY3JlYXRlUHJVcmwgKz0gdGhpcy5wcm9wcy5yZW1vdGUuZ2V0T3duZXIoKSArICcvJyArIHRoaXMucHJvcHMucmVtb3RlLmdldFJlcG8oKTtcbiAgICBjcmVhdGVQclVybCArPSAnL2NvbXBhcmUvJyArIGVuY29kZVVSSUNvbXBvbmVudChjdXJyZW50QnJhbmNoLmdldE5hbWUoKSk7XG4gICAgY3JlYXRlUHJVcmwgKz0gJz9leHBhbmQ9MSc7XG5cbiAgICBhd2FpdCBzaGVsbC5vcGVuRXh0ZXJuYWwoY3JlYXRlUHJVcmwpO1xuICAgIGluY3JlbWVudENvdW50ZXIoJ2NyZWF0ZS1wdWxsLXJlcXVlc3QnKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBd0U7QUFBQTtBQUFBO0FBQUE7QUFFekQsTUFBTUEsZ0JBQWdCLFNBQVNDLGNBQUssQ0FBQ0MsU0FBUyxDQUFDO0VBQUE7SUFBQTtJQUFBLG9DQWlEL0MsWUFBWTtNQUN2QixNQUFNQyxhQUFhLEdBQUcsSUFBSSxDQUFDQyxLQUFLLENBQUNDLFFBQVEsQ0FBQ0MsYUFBYSxFQUFFO01BQ3pELE1BQU1DLFFBQVEsR0FBR0osYUFBYSxDQUFDSyxXQUFXLEVBQUU7TUFDNUMsSUFBSSxDQUFDRCxRQUFRLENBQUNFLFNBQVMsRUFBRSxJQUFJLElBQUksQ0FBQ0wsS0FBSyxDQUFDTSxVQUFVLEdBQUcsQ0FBQyxFQUFFO1FBQ3RELE1BQU0sSUFBSSxDQUFDTixLQUFLLENBQUNPLFlBQVksRUFBRTtNQUNqQztNQUVBLElBQUlDLFdBQVcsR0FBRyxxQkFBcUI7TUFDdkNBLFdBQVcsSUFBSSxJQUFJLENBQUNSLEtBQUssQ0FBQ1MsTUFBTSxDQUFDQyxRQUFRLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDVixLQUFLLENBQUNTLE1BQU0sQ0FBQ0UsT0FBTyxFQUFFO01BQy9FSCxXQUFXLElBQUksV0FBVyxHQUFHSSxrQkFBa0IsQ0FBQ2IsYUFBYSxDQUFDYyxPQUFPLEVBQUUsQ0FBQztNQUN4RUwsV0FBVyxJQUFJLFdBQVc7TUFFMUIsTUFBTU0sZUFBSyxDQUFDQyxZQUFZLENBQUNQLFdBQVcsQ0FBQztNQUNyQyxJQUFBUSwrQkFBZ0IsRUFBQyxxQkFBcUIsQ0FBQztJQUN6QyxDQUFDO0VBQUE7RUFuQ0RDLE1BQU0sR0FBRztJQUNQLE9BQ0UsNkJBQUMsbUNBQTBCO01BQ3pCLFFBQVEsRUFBRSxJQUFJLENBQUNqQixLQUFLLENBQUNrQixRQUFTO01BQzlCLEtBQUssRUFBRSxJQUFJLENBQUNsQixLQUFLLENBQUNtQixLQUFNO01BRXhCLGdCQUFnQixFQUFFLElBQUksQ0FBQ25CLEtBQUssQ0FBQ29CLGdCQUFpQjtNQUM5QyxVQUFVLEVBQUUsSUFBSSxDQUFDcEIsS0FBSyxDQUFDcUIsVUFBVztNQUVsQyxTQUFTLEVBQUUsSUFBSSxDQUFDckIsS0FBSyxDQUFDc0IsU0FBVTtNQUNoQyxNQUFNLEVBQUUsSUFBSSxDQUFDdEIsS0FBSyxDQUFDUyxNQUFPO01BQzFCLE9BQU8sRUFBRSxJQUFJLENBQUNULEtBQUssQ0FBQ3VCLE9BQVE7TUFDNUIsUUFBUSxFQUFFLElBQUksQ0FBQ3ZCLEtBQUssQ0FBQ0MsUUFBUztNQUM5QixVQUFVLEVBQUUsSUFBSSxDQUFDRCxLQUFLLENBQUNNLFVBQVc7TUFDbEMsY0FBYyxFQUFFLElBQUksQ0FBQ04sS0FBSyxDQUFDd0IsY0FBZTtNQUUxQyxVQUFVLEVBQUUsSUFBSSxDQUFDQztJQUFXLEVBQzVCO0VBRU47QUFpQkY7QUFBQztBQUFBLGdCQWhFb0I3QixnQkFBZ0IsZUFDaEI7RUFDakI7RUFDQXlCLFVBQVUsRUFBRUssa0JBQVMsQ0FBQ0MsS0FBSyxDQUFDO0lBQzFCQyxFQUFFLEVBQUVGLGtCQUFTLENBQUNHLE1BQU0sQ0FBQ0MsVUFBVTtJQUMvQkMsZ0JBQWdCLEVBQUVMLGtCQUFTLENBQUNDLEtBQUssQ0FBQztNQUNoQ0ssTUFBTSxFQUFFTixrQkFBUyxDQUFDRyxNQUFNLENBQUNDLFVBQVU7TUFDbkNHLElBQUksRUFBRVAsa0JBQVMsQ0FBQ0csTUFBTSxDQUFDQztJQUN6QixDQUFDO0VBQ0gsQ0FBQyxDQUFDO0VBRUY7RUFDQVosUUFBUSxFQUFFZ0IsNEJBQWdCLENBQUNKLFVBQVU7RUFDckNYLEtBQUssRUFBRWdCLHlCQUFhLENBQUNMLFVBQVU7RUFFL0I7RUFDQVYsZ0JBQWdCLEVBQUVNLGtCQUFTLENBQUNHLE1BQU07RUFDbENQLFNBQVMsRUFBRUksa0JBQVMsQ0FBQ1UsTUFBTSxDQUFDTixVQUFVO0VBQ3RDckIsTUFBTSxFQUFFNEIsMEJBQWMsQ0FBQ1AsVUFBVTtFQUNqQ1AsT0FBTyxFQUFFZSw2QkFBaUIsQ0FBQ1IsVUFBVTtFQUNyQzdCLFFBQVEsRUFBRXNDLDZCQUFpQixDQUFDVCxVQUFVO0VBQ3RDeEIsVUFBVSxFQUFFb0Isa0JBQVMsQ0FBQ2MsTUFBTTtFQUM1QmhCLGNBQWMsRUFBRUUsa0JBQVMsQ0FBQ2UsSUFBSSxDQUFDWCxVQUFVO0VBRXpDO0VBQ0F2QixZQUFZLEVBQUVtQixrQkFBUyxDQUFDZ0IsSUFBSSxDQUFDWjtBQUMvQixDQUFDIn0=