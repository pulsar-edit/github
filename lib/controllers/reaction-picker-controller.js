"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactionPickerView = _interopRequireDefault(require("../views/reaction-picker-view"));
var _propTypes2 = require("../prop-types");
var _reporterProxy = require("../reporter-proxy");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class ReactionPickerController extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "addReactionAndClose", async content => {
      await this.props.addReaction(content);
      (0, _reporterProxy.addEvent)('add-emoji-reaction', {
        package: 'github'
      });
      this.props.tooltipHolder.map(tooltip => tooltip.dispose());
    });
    _defineProperty(this, "removeReactionAndClose", async content => {
      await this.props.removeReaction(content);
      (0, _reporterProxy.addEvent)('remove-emoji-reaction', {
        package: 'github'
      });
      this.props.tooltipHolder.map(tooltip => tooltip.dispose());
    });
  }
  render() {
    return _react.default.createElement(_reactionPickerView.default, _extends({
      addReactionAndClose: this.addReactionAndClose,
      removeReactionAndClose: this.removeReactionAndClose
    }, this.props));
  }
}
exports.default = ReactionPickerController;
_defineProperty(ReactionPickerController, "propTypes", {
  addReaction: _propTypes.default.func.isRequired,
  removeReaction: _propTypes.default.func.isRequired,
  tooltipHolder: _propTypes2.RefHolderPropType.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfcmVhY3Rpb25QaWNrZXJWaWV3IiwiX3Byb3BUeXBlczIiLCJfcmVwb3J0ZXJQcm94eSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJiaW5kIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwiX2RlZmluZVByb3BlcnR5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidCIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsInIiLCJlIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJSZWFjdGlvblBpY2tlckNvbnRyb2xsZXIiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiYXJncyIsImNvbnRlbnQiLCJwcm9wcyIsImFkZFJlYWN0aW9uIiwiYWRkRXZlbnQiLCJwYWNrYWdlIiwidG9vbHRpcEhvbGRlciIsIm1hcCIsInRvb2x0aXAiLCJkaXNwb3NlIiwicmVtb3ZlUmVhY3Rpb24iLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiYWRkUmVhY3Rpb25BbmRDbG9zZSIsInJlbW92ZVJlYWN0aW9uQW5kQ2xvc2UiLCJleHBvcnRzIiwiUHJvcFR5cGVzIiwiZnVuYyIsImlzUmVxdWlyZWQiLCJSZWZIb2xkZXJQcm9wVHlwZSJdLCJzb3VyY2VzIjpbInJlYWN0aW9uLXBpY2tlci1jb250cm9sbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgUmVhY3Rpb25QaWNrZXJWaWV3IGZyb20gJy4uL3ZpZXdzL3JlYWN0aW9uLXBpY2tlci12aWV3JztcbmltcG9ydCB7UmVmSG9sZGVyUHJvcFR5cGV9IGZyb20gJy4uL3Byb3AtdHlwZXMnO1xuaW1wb3J0IHthZGRFdmVudH0gZnJvbSAnLi4vcmVwb3J0ZXItcHJveHknO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWFjdGlvblBpY2tlckNvbnRyb2xsZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGFkZFJlYWN0aW9uOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHJlbW92ZVJlYWN0aW9uOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gICAgdG9vbHRpcEhvbGRlcjogUmVmSG9sZGVyUHJvcFR5cGUuaXNSZXF1aXJlZCxcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJlYWN0aW9uUGlja2VyVmlld1xuICAgICAgICBhZGRSZWFjdGlvbkFuZENsb3NlPXt0aGlzLmFkZFJlYWN0aW9uQW5kQ2xvc2V9XG4gICAgICAgIHJlbW92ZVJlYWN0aW9uQW5kQ2xvc2U9e3RoaXMucmVtb3ZlUmVhY3Rpb25BbmRDbG9zZX1cbiAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICBhZGRSZWFjdGlvbkFuZENsb3NlID0gYXN5bmMgY29udGVudCA9PiB7XG4gICAgYXdhaXQgdGhpcy5wcm9wcy5hZGRSZWFjdGlvbihjb250ZW50KTtcbiAgICBhZGRFdmVudCgnYWRkLWVtb2ppLXJlYWN0aW9uJywge3BhY2thZ2U6ICdnaXRodWInfSk7XG4gICAgdGhpcy5wcm9wcy50b29sdGlwSG9sZGVyLm1hcCh0b29sdGlwID0+IHRvb2x0aXAuZGlzcG9zZSgpKTtcbiAgfVxuXG4gIHJlbW92ZVJlYWN0aW9uQW5kQ2xvc2UgPSBhc3luYyBjb250ZW50ID0+IHtcbiAgICBhd2FpdCB0aGlzLnByb3BzLnJlbW92ZVJlYWN0aW9uKGNvbnRlbnQpO1xuICAgIGFkZEV2ZW50KCdyZW1vdmUtZW1vamktcmVhY3Rpb24nLCB7cGFja2FnZTogJ2dpdGh1Yid9KTtcbiAgICB0aGlzLnByb3BzLnRvb2x0aXBIb2xkZXIubWFwKHRvb2x0aXAgPT4gdG9vbHRpcC5kaXNwb3NlKCkpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFFLG1CQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxjQUFBLEdBQUFKLE9BQUE7QUFBMkMsU0FBQUQsdUJBQUFNLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFBQSxTQUFBRyxTQUFBLElBQUFBLFFBQUEsR0FBQUMsTUFBQSxDQUFBQyxNQUFBLEdBQUFELE1BQUEsQ0FBQUMsTUFBQSxDQUFBQyxJQUFBLGVBQUFDLE1BQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxFQUFBRixDQUFBLFVBQUFHLE1BQUEsR0FBQUYsU0FBQSxDQUFBRCxDQUFBLFlBQUFJLEdBQUEsSUFBQUQsTUFBQSxRQUFBUCxNQUFBLENBQUFTLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFKLE1BQUEsRUFBQUMsR0FBQSxLQUFBTCxNQUFBLENBQUFLLEdBQUEsSUFBQUQsTUFBQSxDQUFBQyxHQUFBLGdCQUFBTCxNQUFBLFlBQUFKLFFBQUEsQ0FBQWEsS0FBQSxPQUFBUCxTQUFBO0FBQUEsU0FBQVEsZ0JBQUFqQixHQUFBLEVBQUFZLEdBQUEsRUFBQU0sS0FBQSxJQUFBTixHQUFBLEdBQUFPLGNB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