"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BareEmojiReactionsController = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _reactRelay = require("react-relay");
var _emojiReactionsView = _interopRequireDefault(require("../views/emoji-reactions-view"));
var _addReaction = _interopRequireDefault(require("../mutations/add-reaction"));
var _removeReaction = _interopRequireDefault(require("../mutations/remove-reaction"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class BareEmojiReactionsController extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "addReaction", async content => {
      try {
        await (0, _addReaction.default)(this.props.relay.environment, this.props.reactable.id, content);
      } catch (err) {
        this.props.reportRelayError('Unable to add reaction emoji', err);
      }
    });
    _defineProperty(this, "removeReaction", async content => {
      try {
        await (0, _removeReaction.default)(this.props.relay.environment, this.props.reactable.id, content);
      } catch (err) {
        this.props.reportRelayError('Unable to remove reaction emoji', err);
      }
    });
  }
  render() {
    return _react.default.createElement(_emojiReactionsView.default, _extends({
      addReaction: this.addReaction,
      removeReaction: this.removeReaction
    }, this.props));
  }
}
exports.BareEmojiReactionsController = BareEmojiReactionsController;
_defineProperty(BareEmojiReactionsController, "propTypes", {
  relay: _propTypes.default.shape({
    environment: _propTypes.default.object.isRequired
  }).isRequired,
  reactable: _propTypes.default.shape({
    id: _propTypes.default.string.isRequired
  }).isRequired,
  // Atom environment
  tooltips: _propTypes.default.object.isRequired,
  // Action methods
  reportRelayError: _propTypes.default.func.isRequired
});
var _default = (0, _reactRelay.createFragmentContainer)(BareEmojiReactionsController, {
  reactable: function () {
    const node = require("./__generated__/emojiReactionsController_reactable.graphql");
    if (node.hash && node.hash !== "cfdd39cd7aa02bce0bdcd52bc0154223") {
      console.error("The definition of 'emojiReactionsController_reactable' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }
    return require("./__generated__/emojiReactionsController_reactable.graphql");
  }
});
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3RSZWxheSIsIl9lbW9qaVJlYWN0aW9uc1ZpZXciLCJfYWRkUmVhY3Rpb24iLCJfcmVtb3ZlUmVhY3Rpb24iLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9leHRlbmRzIiwiT2JqZWN0IiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsIl9kZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsIlR5cGVFcnJvciIsIk51bWJlciIsIkJhcmVFbW9qaVJlYWN0aW9uc0NvbnRyb2xsZXIiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiYXJncyIsImNvbnRlbnQiLCJhZGRSZWFjdGlvbk11dGF0aW9uIiwicHJvcHMiLCJyZWxheSIsImVudmlyb25tZW50IiwicmVhY3RhYmxlIiwiaWQiLCJlcnIiLCJyZXBvcnRSZWxheUVycm9yIiwicmVtb3ZlUmVhY3Rpb25NdXRhdGlvbiIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJhZGRSZWFjdGlvbiIsInJlbW92ZVJlYWN0aW9uIiwiZXhwb3J0cyIsIlByb3BUeXBlcyIsInNoYXBlIiwib2JqZWN0IiwiaXNSZXF1aXJlZCIsInN0cmluZyIsInRvb2x0aXBzIiwiZnVuYyIsIl9kZWZhdWx0IiwiY3JlYXRlRnJhZ21lbnRDb250YWluZXIiLCJub2RlIiwiaGFzaCIsImNvbnNvbGUiLCJlcnJvciJdLCJzb3VyY2VzIjpbImVtb2ppLXJlYWN0aW9ucy1jb250cm9sbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtjcmVhdGVGcmFnbWVudENvbnRhaW5lciwgZ3JhcGhxbH0gZnJvbSAncmVhY3QtcmVsYXknO1xuXG5pbXBvcnQgRW1vamlSZWFjdGlvbnNWaWV3IGZyb20gJy4uL3ZpZXdzL2Vtb2ppLXJlYWN0aW9ucy12aWV3JztcbmltcG9ydCBhZGRSZWFjdGlvbk11dGF0aW9uIGZyb20gJy4uL211dGF0aW9ucy9hZGQtcmVhY3Rpb24nO1xuaW1wb3J0IHJlbW92ZVJlYWN0aW9uTXV0YXRpb24gZnJvbSAnLi4vbXV0YXRpb25zL3JlbW92ZS1yZWFjdGlvbic7XG5cbmV4cG9ydCBjbGFzcyBCYXJlRW1vamlSZWFjdGlvbnNDb250cm9sbGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICByZWxheTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGVudmlyb25tZW50OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgfSkuaXNSZXF1aXJlZCxcbiAgICByZWFjdGFibGU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIH0pLmlzUmVxdWlyZWQsXG5cbiAgICAvLyBBdG9tIGVudmlyb25tZW50XG4gICAgdG9vbHRpcHM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAgIC8vIEFjdGlvbiBtZXRob2RzXG4gICAgcmVwb3J0UmVsYXlFcnJvcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEVtb2ppUmVhY3Rpb25zVmlld1xuICAgICAgICBhZGRSZWFjdGlvbj17dGhpcy5hZGRSZWFjdGlvbn1cbiAgICAgICAgcmVtb3ZlUmVhY3Rpb249e3RoaXMucmVtb3ZlUmVhY3Rpb259XG4gICAgICAgIHsuLi50aGlzLnByb3BzfVxuICAgICAgLz5cbiAgICApO1xuICB9XG5cbiAgYWRkUmVhY3Rpb24gPSBhc3luYyBjb250ZW50ID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgYWRkUmVhY3Rpb25NdXRhdGlvbih0aGlzLnByb3BzLnJlbGF5LmVudmlyb25tZW50LCB0aGlzLnByb3BzLnJlYWN0YWJsZS5pZCwgY29udGVudCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aGlzLnByb3BzLnJlcG9ydFJlbGF5RXJyb3IoJ1VuYWJsZSB0byBhZGQgcmVhY3Rpb24gZW1vamknLCBlcnIpO1xuICAgIH1cbiAgfTtcblxuICByZW1vdmVSZWFjdGlvbiA9IGFzeW5jIGNvbnRlbnQgPT4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCByZW1vdmVSZWFjdGlvbk11dGF0aW9uKHRoaXMucHJvcHMucmVsYXkuZW52aXJvbm1lbnQsIHRoaXMucHJvcHMucmVhY3RhYmxlLmlkLCBjb250ZW50KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRoaXMucHJvcHMucmVwb3J0UmVsYXlFcnJvcignVW5hYmxlIHRvIHJlbW92ZSByZWFjdGlvbiBlbW9qaScsIGVycik7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGcmFnbWVudENvbnRhaW5lcihCYXJlRW1vamlSZWFjdGlvbnNDb250cm9sbGVyLCB7XG4gIHJlYWN0YWJsZTogZ3JhcGhxbGBcbiAgICBmcmFnbWVudCBlbW9qaVJlYWN0aW9uc0NvbnRyb2xsZXJfcmVhY3RhYmxlIG9uIFJlYWN0YWJsZSB7XG4gICAgICBpZFxuICAgICAgLi4uZW1vamlSZWFjdGlvbnNWaWV3X3JlYWN0YWJsZVxuICAgIH1cbiAgYCxcbn0pO1xuIl0sIm1hcHBp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