"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BareEmojiReactionsController = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _reactRelay = require("react-relay");
var _emojiReactionsView = _interopRequireDefault(require("../views/emoji-reactions-view"));
var _addReaction = _interopRequireDefault(require("../mutations/add-reaction"));
var _removeReaction = _interopRequireDefault(require("../mutations/remove-reaction"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class BareEmojiReactionsController extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "addReaction", async content => {
      try {
        await (0, _addReaction.default)(this.props.relay.environment, this.props.reactable.id, content);
      } catch (err) {
        this.props.reportRelayError('Unable to add reaction emoji', err);
      }
    });
    _defineProperty(this, "removeReaction", async content => {
      try {
        await (0, _removeReaction.default)(this.props.relay.environment, this.props.reactable.id, content);
      } catch (err) {
        this.props.reportRelayError('Unable to remove reaction emoji', err);
      }
    });
  }
  render() {
    return _react.default.createElement(_emojiReactionsView.default, _extends({
      addReaction: this.addReaction,
      removeReaction: this.removeReaction
    }, this.props));
  }
}
exports.BareEmojiReactionsController = BareEmojiReactionsController;
_defineProperty(BareEmojiReactionsController, "propTypes", {
  relay: _propTypes.default.shape({
    environment: _propTypes.default.object.isRequired
  }).isRequired,
  reactable: _propTypes.default.shape({
    id: _propTypes.default.string.isRequired
  }).isRequired,
  // Atom environment
  tooltips: _propTypes.default.object.isRequired,
  // Action methods
  reportRelayError: _propTypes.default.func.isRequired
});
var _default = (0, _reactRelay.createFragmentContainer)(BareEmojiReactionsController, {
  reactable: function () {
    const node = require("./__generated__/emojiReactionsController_reactable.graphql");
    if (node.hash && node.hash !== "cfdd39cd7aa02bce0bdcd52bc0154223") {
      console.error("The definition of 'emojiReactionsController_reactable' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }
    return require("./__generated__/emojiReactionsController_reactable.graphql");
  }
});
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3RSZWxheSIsIl9lbW9qaVJlYWN0aW9uc1ZpZXciLCJfYWRkUmVhY3Rpb24iLCJfcmVtb3ZlUmVhY3Rpb24iLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9leHRlbmRzIiwiT2JqZWN0IiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsIl9kZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInQiLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJyIiwiZSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiQmFyZUVtb2ppUmVhY3Rpb25zQ29udHJvbGxlciIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJhcmdzIiwiY29udGVudCIsImFkZFJlYWN0aW9uTXV0YXRpb24iLCJwcm9wcyIsInJlbGF5IiwiZW52aXJvbm1lbnQiLCJyZWFjdGFibGUiLCJpZCIsImVyciIsInJlcG9ydFJlbGF5RXJyb3IiLCJyZW1vdmVSZWFjdGlvbk11dGF0aW9uIiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsImFkZFJlYWN0aW9uIiwicmVtb3ZlUmVhY3Rpb24iLCJleHBvcnRzIiwiUHJvcFR5cGVzIiwic2hhcGUiLCJvYmplY3QiLCJpc1JlcXVpcmVkIiwic3RyaW5nIiwidG9vbHRpcHMiLCJmdW5jIiwiX2RlZmF1bHQiLCJjcmVhdGVGcmFnbWVudENvbnRhaW5lciIsIm5vZGUiLCJoYXNoIiwiY29uc29sZSIsImVycm9yIl0sInNvdXJjZXMiOlsiZW1vamktcmVhY3Rpb25zLWNvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2NyZWF0ZUZyYWdtZW50Q29udGFpbmVyLCBncmFwaHFsfSBmcm9tICdyZWFjdC1yZWxheSc7XG5cbmltcG9ydCBFbW9qaVJlYWN0aW9uc1ZpZXcgZnJvbSAnLi4vdmlld3MvZW1vamktcmVhY3Rpb25zLXZpZXcnO1xuaW1wb3J0IGFkZFJlYWN0aW9uTXV0YXRpb24gZnJvbSAnLi4vbXV0YXRpb25zL2FkZC1yZWFjdGlvbic7XG5pbXBvcnQgcmVtb3ZlUmVhY3Rpb25NdXRhdGlvbiBmcm9tICcuLi9tdXRhdGlvbnMvcmVtb3ZlLXJlYWN0aW9uJztcblxuZXhwb3J0IGNsYXNzIEJhcmVFbW9qaVJlYWN0aW9uc0NvbnRyb2xsZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHJlbGF5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgZW52aXJvbm1lbnQ6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICB9KS5pc1JlcXVpcmVkLFxuICAgIHJlYWN0YWJsZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgfSkuaXNSZXF1aXJlZCxcblxuICAgIC8vIEF0b20gZW52aXJvbm1lbnRcbiAgICB0b29sdGlwczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gICAgLy8gQWN0aW9uIG1ldGhvZHNcbiAgICByZXBvcnRSZWxheUVycm9yOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8RW1vamlSZWFjdGlvbnNWaWV3XG4gICAgICAgIGFkZFJlYWN0aW9uPXt0aGlzLmFkZFJlYWN0aW9ufVxuICAgICAgICByZW1vdmVSZWFjdGlvbj17dGhpcy5yZW1vdmVSZWFjdGlvbn1cbiAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICBhZGRSZWFjdGlvbiA9IGFzeW5jIGNvbnRlbnQgPT4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBhZGRSZWFjdGlvbk11dGF0aW9uKHRoaXMucHJvcHMucmVsYXkuZW52aXJvbm1lbnQsIHRoaXMucHJvcHMucmVhY3RhYmxlLmlkLCBjb250ZW50KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRoaXMucHJvcHMucmVwb3J0UmVsYXlFcnJvcignVW5hYmxlIHRvIGFkZCByZWFjdGlvbiBlbW9qaScsIGVycik7XG4gICAgfVxuICB9O1xuXG4gIHJlbW92ZVJlYWN0aW9uID0gYXN5bmMgY29udGVudCA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHJlbW92ZVJlYWN0aW9uTXV0YXRpb24odGhpcy5wcm9wcy5yZWxheS5lbnZpcm9ubWVudCwgdGhpcy5wcm9wcy5yZWFjdGFibGUuaWQsIGNvbnRlbnQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhpcy5wcm9wcy5yZXBvcnRSZWxheUVycm9yKCdVbmFibGUgdG8gcmVtb3ZlIHJlYWN0aW9uIGVtb2ppJywgZXJyKTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZyYWdtZW50Q29udGFpbmVyKEJhcmVFbW9qaVJlYWN0aW9uc0NvbnRyb2xsZXIsIHtcbiAgcmVhY3RhYmxlOiBncmFwaHFsYFxuICAgIGZyYWdtZW50IGVtb2ppUmVhY3Rpb25zQ29udHJvbGxlcl9yZWFjdGFibGUgb24gUmVhY3RhYmxlIHtcbiAgICAgIGlkXG4gICAgICAuLi5lbW9qaVJlYWN0aW9uc1ZpZXdfcmVhY3RhYmxlXG4gICAgfVxuICBgLFxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLFVBQUEsR0FBQUMs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