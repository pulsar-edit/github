"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BareCheckRunView = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRelay = require("react-relay");
var _octicon = _interopRequireDefault(require("../atom/octicon"));
var _githubDotcomMarkdown = _interopRequireDefault(require("./github-dotcom-markdown"));
var _buildStatus = require("../models/build-status");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class BareCheckRunView extends _react.default.Component {
  render() {
    const {
      checkRun
    } = this.props;
    const {
      icon,
      classSuffix
    } = (0, _buildStatus.buildStatusFromCheckResult)(checkRun);
    return _react.default.createElement("li", {
      className: "github-PrStatuses-list-item github-PrStatuses-list-item--checkRun"
    }, _react.default.createElement("span", {
      className: "github-PrStatuses-list-item-icon"
    }, _react.default.createElement(_octicon.default, {
      icon: icon,
      className: `github-PrStatuses--${classSuffix}`
    })), _react.default.createElement("a", {
      className: "github-PrStatuses-list-item-name",
      href: checkRun.permalink
    }, checkRun.name), _react.default.createElement("div", {
      className: "github-PrStatuses-list-item-context"
    }, checkRun.title && _react.default.createElement("span", {
      className: "github-PrStatuses-list-item-title"
    }, checkRun.title), checkRun.summary && _react.default.createElement(_githubDotcomMarkdown.default, {
      className: "github-PrStatuses-list-item-summary",
      switchToIssueish: this.props.switchToIssueish,
      markdown: checkRun.summary
    })), checkRun.detailsUrl && _react.default.createElement("a", {
      className: "github-PrStatuses-list-item-details-link",
      href: checkRun.detailsUrl
    }, "Details"));
  }
}
exports.BareCheckRunView = BareCheckRunView;
_defineProperty(BareCheckRunView, "propTypes", {
  // Relay
  checkRun: _propTypes.default.shape({
    name: _propTypes.default.string.isRequired,
    status: _propTypes.default.oneOf(['QUEUED', 'IN_PROGRESS', 'COMPLETED', 'REQUESTED']).isRequired,
    conclusion: _propTypes.default.oneOf(['ACTION_REQUIRED', 'TIMED_OUT', 'CANCELLED', 'FAILURE', 'SUCCESS', 'NEUTRAL']),
    title: _propTypes.default.string,
    detailsUrl: _propTypes.default.string
  }).isRequired,
  // Actions
  switchToIssueish: _propTypes.default.func.isRequired
});
var _default = (0, _reactRelay.createFragmentContainer)(BareCheckRunView, {
  checkRun: function () {
    const node = require("./__generated__/checkRunView_checkRun.graphql");
    if (node.hash && node.hash !== "7135f882a3513e65b0a52393a0cc8b40") {
      console.error("The definition of 'checkRunView_checkRun' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }
    return require("./__generated__/checkRunView_checkRun.graphql");
  }
});
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfcmVhY3RSZWxheSIsIl9vY3RpY29uIiwiX2dpdGh1YkRvdGNvbU1hcmtkb3duIiwiX2J1aWxkU3RhdHVzIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ0IiwiaSIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsInIiLCJlIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiQmFyZUNoZWNrUnVuVmlldyIsIlJlYWN0IiwiQ29tcG9uZW50IiwicmVuZGVyIiwiY2hlY2tSdW4iLCJwcm9wcyIsImljb24iLCJjbGFzc1N1ZmZpeCIsImJ1aWxkU3RhdHVzRnJvbUNoZWNrUmVzdWx0IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImhyZWYiLCJwZXJtYWxpbmsiLCJuYW1lIiwidGl0bGUiLCJzdW1tYXJ5Iiwic3dpdGNoVG9Jc3N1ZWlzaCIsIm1hcmtkb3duIiwiZGV0YWlsc1VybCIsImV4cG9ydHMiLCJQcm9wVHlwZXMiLCJzaGFwZSIsInN0cmluZyIsImlzUmVxdWlyZWQiLCJzdGF0dXMiLCJvbmVPZiIsImNvbmNsdXNpb24iLCJmdW5jIiwiX2RlZmF1bHQiLCJjcmVhdGVGcmFnbWVudENvbnRhaW5lciIsIm5vZGUiLCJoYXNoIiwiY29uc29sZSIsImVycm9yIl0sInNvdXJjZXMiOlsiY2hlY2stcnVuLXZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge2dyYXBocWwsIGNyZWF0ZUZyYWdtZW50Q29udGFpbmVyfSBmcm9tICdyZWFjdC1yZWxheSc7XG5cbmltcG9ydCBPY3RpY29uIGZyb20gJy4uL2F0b20vb2N0aWNvbic7XG5pbXBvcnQgR2l0aHViRG90Y29tTWFya2Rvd24gZnJvbSAnLi9naXRodWItZG90Y29tLW1hcmtkb3duJztcbmltcG9ydCB7YnVpbGRTdGF0dXNGcm9tQ2hlY2tSZXN1bHR9IGZyb20gJy4uL21vZGVscy9idWlsZC1zdGF0dXMnO1xuXG5leHBvcnQgY2xhc3MgQmFyZUNoZWNrUnVuVmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLy8gUmVsYXlcbiAgICBjaGVja1J1bjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIHN0YXR1czogUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgICAgJ1FVRVVFRCcsICdJTl9QUk9HUkVTUycsICdDT01QTEVURUQnLCAnUkVRVUVTVEVEJyxcbiAgICAgIF0pLmlzUmVxdWlyZWQsXG4gICAgICBjb25jbHVzaW9uOiBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgICAnQUNUSU9OX1JFUVVJUkVEJywgJ1RJTUVEX09VVCcsICdDQU5DRUxMRUQnLCAnRkFJTFVSRScsICdTVUNDRVNTJywgJ05FVVRSQUwnLFxuICAgICAgXSksXG4gICAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIGRldGFpbHNVcmw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgfSkuaXNSZXF1aXJlZCxcblxuICAgIC8vIEFjdGlvbnNcbiAgICBzd2l0Y2hUb0lzc3VlaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtjaGVja1J1bn0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHtpY29uLCBjbGFzc1N1ZmZpeH0gPSBidWlsZFN0YXR1c0Zyb21DaGVja1Jlc3VsdChjaGVja1J1bik7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGxpIGNsYXNzTmFtZT1cImdpdGh1Yi1QclN0YXR1c2VzLWxpc3QtaXRlbSBnaXRodWItUHJTdGF0dXNlcy1saXN0LWl0ZW0tLWNoZWNrUnVuXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdpdGh1Yi1QclN0YXR1c2VzLWxpc3QtaXRlbS1pY29uXCI+XG4gICAgICAgICAgPE9jdGljb24gaWNvbj17aWNvbn0gY2xhc3NOYW1lPXtgZ2l0aHViLVByU3RhdHVzZXMtLSR7Y2xhc3NTdWZmaXh9YH0gLz5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICA8YSBjbGFzc05hbWU9XCJnaXRodWItUHJTdGF0dXNlcy1saXN0LWl0ZW0tbmFtZVwiIGhyZWY9e2NoZWNrUnVuLnBlcm1hbGlua30+e2NoZWNrUnVuLm5hbWV9PC9hPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdpdGh1Yi1QclN0YXR1c2VzLWxpc3QtaXRlbS1jb250ZXh0XCI+XG4gICAgICAgICAge2NoZWNrUnVuLnRpdGxlICYmIDxzcGFuIGNsYXNzTmFtZT1cImdpdGh1Yi1QclN0YXR1c2VzLWxpc3QtaXRlbS10aXRsZVwiPntjaGVja1J1bi50aXRsZX08L3NwYW4+fVxuICAgICAgICAgIHtjaGVja1J1bi5zdW1tYXJ5ICYmIChcbiAgICAgICAgICAgIDxHaXRodWJEb3Rjb21NYXJrZG93blxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJnaXRodWItUHJTdGF0dXNlcy1saXN0LWl0ZW0tc3VtbWFyeVwiXG4gICAgICAgICAgICAgIHN3aXRjaFRvSXNzdWVpc2g9e3RoaXMucHJvcHMuc3dpdGNoVG9Jc3N1ZWlzaH1cbiAgICAgICAgICAgICAgbWFya2Rvd249e2NoZWNrUnVuLnN1bW1hcnl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7Y2hlY2tSdW4uZGV0YWlsc1VybCAmJiAoXG4gICAgICAgICAgPGEgY2xhc3NOYW1lPVwiZ2l0aHViLVByU3RhdHVzZXMtbGlzdC1pdGVtLWRldGFpbHMtbGlua1wiIGhyZWY9e2NoZWNrUnVuLmRldGFpbHNVcmx9PlxuICAgICAgICAgICAgRGV0YWlsc1xuICAgICAgICAgIDwvYT5cbiAgICAgICAgKX1cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGcmFnbWVudENvbnRhaW5lcihCYXJlQ2hlY2tSdW5WaWV3LCB7XG4gIGNoZWNrUnVuOiBncmFwaHFsYFxuICAgIGZyYWdtZW50IGNoZWNrUnVuVmlld19jaGVja1J1biBvbiBDaGVja1J1biB7XG4gICAgICBuYW1lXG4gICAgICBzdGF0dXNcbiAgICAgIGNvbmNsdXNpb25cbiAgICAgIHRpdGxlXG4gICAgICBzdW1tYXJ5XG4gICAgICBwZXJtYWxpbmtcbiAgICAgIGRldGFpbHNVcmxcbiAgICB9XG4gIGAsXG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsV0FBQSxHQUFBRixPQUFBO0FBRUEsSUFBQUcsUUFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUkscUJBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFLLFlBQUEsR0FBQUwsT0FBQTtBQUFrRSxTQUFBRCx1QkFBQU8sR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUFBLFNBQUFHLGdCQUFBSCxHQUFBLEVBQUFJLEdBQUEsRUFBQUMsS0FBQSxJQUFBRCxHQUFBLEdBQUFFLGNBQUEsQ0FBQUYsR0FBQSxPQUFBQSxHQUFBLElBQUFKLEdBQUEsSUFBQU8sTUFBQSxDQUFBQyxjQUFBLENBQUFSLEdBQUEsRUFBQUksR0FBQSxJQUFB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