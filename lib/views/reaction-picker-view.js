"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _helpers = require("../helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const CONTENT_TYPES = Object.keys(_helpers.reactionTypeToEmoji);
const EMOJI_COUNT = CONTENT_TYPES.length;
const EMOJI_PER_ROW = 4;
const EMOJI_ROWS = Math.ceil(EMOJI_COUNT / EMOJI_PER_ROW);
class ReactionPickerView extends _react.default.Component {
  render() {
    const viewerReactedSet = new Set(this.props.viewerReacted);
    const emojiRows = [];
    for (let row = 0; row < EMOJI_ROWS; row++) {
      const emojiButtons = [];
      for (let column = 0; column < EMOJI_PER_ROW; column++) {
        const emojiIndex = row * EMOJI_PER_ROW + column;

        /* istanbul ignore if */
        if (emojiIndex >= CONTENT_TYPES.length) {
          break;
        }
        const content = CONTENT_TYPES[emojiIndex];
        const toggle = !viewerReactedSet.has(content) ? () => this.props.addReactionAndClose(content) : () => this.props.removeReactionAndClose(content);
        const className = (0, _classnames.default)('github-ReactionPicker-reaction', 'btn', {
          selected: viewerReactedSet.has(content)
        });
        emojiButtons.push(_react.default.createElement("button", {
          key: content,
          className: className,
          onClick: toggle
        }, _helpers.reactionTypeToEmoji[content]));
      }
      emojiRows.push(_react.default.createElement("p", {
        key: row,
        className: "github-ReactionPicker-row inline-block-tight"
      }, emojiButtons));
    }
    return _react.default.createElement("div", {
      className: "github-ReactionPicker"
    }, emojiRows);
  }
}
exports.default = ReactionPickerView;
_defineProperty(ReactionPickerView, "propTypes", {
  viewerReacted: _propTypes.default.arrayOf(_propTypes.default.oneOf(Object.keys(_helpers.reactionTypeToEmoji))),
  // Action methods
  addReactionAndClose: _propTypes.default.func.isRequired,
  removeReactionAndClose: _propTypes.default.func.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfY2xhc3NuYW1lcyIsIl9oZWxwZXJzIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiQ09OVEVOVF9UWVBFUyIsImtleXMiLCJyZWFjdGlvblR5cGVUb0Vtb2ppIiwiRU1PSklfQ09VTlQiLCJsZW5ndGgiLCJFTU9KSV9QRVJfUk9XIiwiRU1PSklfUk9XUyIsIk1hdGgiLCJjZWlsIiwiUmVhY3Rpb25QaWNrZXJWaWV3IiwiUmVhY3QiLCJDb21wb25lbnQiLCJyZW5kZXIiLCJ2aWV3ZXJSZWFjdGVkU2V0IiwiU2V0IiwicHJvcHMiLCJ2aWV3ZXJSZWFjdGVkIiwiZW1vamlSb3dzIiwicm93IiwiZW1vamlCdXR0b25zIiwiY29sdW1uIiwiZW1vamlJbmRleCIsImNvbnRlbnQiLCJ0b2dnbGUiLCJoYXMiLCJhZGRSZWFjdGlvbkFuZENsb3NlIiwicmVtb3ZlUmVhY3Rpb25BbmRDbG9zZSIsImNsYXNzTmFtZSIsImN4Iiwic2VsZWN0ZWQiLCJwdXNoIiwiY3JlYXRlRWxlbWVudCIsIm9uQ2xpY2siLCJleHBvcnRzIiwiUHJvcFR5cGVzIiwiYXJyYXlPZiIsIm9uZU9mIiwiZnVuYyIsImlzUmVxdWlyZWQiXSwic291cmNlcyI6WyJyZWFjdGlvbi1waWNrZXItdmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IHtyZWFjdGlvblR5cGVUb0Vtb2ppfSBmcm9tICcuLi9oZWxwZXJzJztcblxuY29uc3QgQ09OVEVOVF9UWVBFUyA9IE9iamVjdC5rZXlzKHJlYWN0aW9uVHlwZVRvRW1vamkpO1xuY29uc3QgRU1PSklfQ09VTlQgPSBDT05URU5UX1RZUEVTLmxlbmd0aDtcbmNvbnN0IEVNT0pJX1BFUl9ST1cgPSA0O1xuY29uc3QgRU1PSklfUk9XUyA9IE1hdGguY2VpbChFTU9KSV9DT1VOVCAvIEVNT0pJX1BFUl9ST1cpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWFjdGlvblBpY2tlclZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHZpZXdlclJlYWN0ZWQ6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgUHJvcFR5cGVzLm9uZU9mKE9iamVjdC5rZXlzKHJlYWN0aW9uVHlwZVRvRW1vamkpKSxcbiAgICApLFxuXG4gICAgLy8gQWN0aW9uIG1ldGhvZHNcbiAgICBhZGRSZWFjdGlvbkFuZENsb3NlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHJlbW92ZVJlYWN0aW9uQW5kQ2xvc2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qgdmlld2VyUmVhY3RlZFNldCA9IG5ldyBTZXQodGhpcy5wcm9wcy52aWV3ZXJSZWFjdGVkKTtcblxuICAgIGNvbnN0IGVtb2ppUm93cyA9IFtdO1xuICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IEVNT0pJX1JPV1M7IHJvdysrKSB7XG4gICAgICBjb25zdCBlbW9qaUJ1dHRvbnMgPSBbXTtcblxuICAgICAgZm9yIChsZXQgY29sdW1uID0gMDsgY29sdW1uIDwgRU1PSklfUEVSX1JPVzsgY29sdW1uKyspIHtcbiAgICAgICAgY29uc3QgZW1vamlJbmRleCA9IHJvdyAqIEVNT0pJX1BFUl9ST1cgKyBjb2x1bW47XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChlbW9qaUluZGV4ID49IENPTlRFTlRfVFlQRVMubGVuZ3RoKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb250ZW50ID0gQ09OVEVOVF9UWVBFU1tlbW9qaUluZGV4XTtcblxuICAgICAgICBjb25zdCB0b2dnbGUgPSAhdmlld2VyUmVhY3RlZFNldC5oYXMoY29udGVudClcbiAgICAgICAgICA/ICgpID0+IHRoaXMucHJvcHMuYWRkUmVhY3Rpb25BbmRDbG9zZShjb250ZW50KVxuICAgICAgICAgIDogKCkgPT4gdGhpcy5wcm9wcy5yZW1vdmVSZWFjdGlvbkFuZENsb3NlKGNvbnRlbnQpO1xuXG4gICAgICAgIGNvbnN0IGNsYXNzTmFtZSA9IGN4KFxuICAgICAgICAgICdnaXRodWItUmVhY3Rpb25QaWNrZXItcmVhY3Rpb24nLFxuICAgICAgICAgICdidG4nLFxuICAgICAgICAgIHtzZWxlY3RlZDogdmlld2VyUmVhY3RlZFNldC5oYXMoY29udGVudCl9LFxuICAgICAgICApO1xuXG4gICAgICAgIGVtb2ppQnV0dG9ucy5wdXNoKFxuICAgICAgICAgIDxidXR0b24ga2V5PXtjb250ZW50fSBjbGFzc05hbWU9e2NsYXNzTmFtZX0gb25DbGljaz17dG9nZ2xlfT5cbiAgICAgICAgICAgIHtyZWFjdGlvblR5cGVUb0Vtb2ppW2NvbnRlbnRdfVxuICAgICAgICAgIDwvYnV0dG9uPixcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgZW1vamlSb3dzLnB1c2goPHAga2V5PXtyb3d9IGNsYXNzTmFtZT1cImdpdGh1Yi1SZWFjdGlvblBpY2tlci1yb3cgaW5saW5lLWJsb2NrLXRpZ2h0XCI+e2Vtb2ppQnV0dG9uc308L3A+KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJnaXRodWItUmVhY3Rpb25QaWNrZXJcIj5cbiAgICAgICAge2Vtb2ppUm93c31cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsV0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUcsUUFBQSxHQUFBSCxPQUFBO0FBQStDLFNBQUFELHVCQUFBSyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBQUEsU0FBQUcsZ0JBQUFILEdBQUEsRUFBQUksR0FBQSxFQUFBQyxLQUFBLElBQUFELEdBQUEsR0FBQUUsY0FBQSxDQUFBRixHQUFBLE9BQUFBLEdBQUEsSUFBQUosR0FBQSxJQUFBTyxNQUFBLENBQUFDLGNBQUEsQ0FBQVIsR0FBQSxFQUFBSSxHQUFBLElBQUFDLEtBQUEsRUFBQUEsS0FBQSxFQUFBSSxVQUFBLFFBQUFDLFlBQUEsUUFBQUMsUUFBQSxvQkFBQVgsR0FBQSxDQUFBSSxHQUFBLElBQUFDLEtBQUEsV0FBQUwsR0FBQTtBQUFBLFNBQUFNLGVBQUFNLEdBQUEsUUFBQVIsR0FBQSxHQUFBUyxZQUFBLENBQUFELEdBQUEsMkJBQUFSLEdBQUEsZ0JBQUFBLEdBQUEsR0FBQVUsTUFBQSxDQUFBVixHQUFBO0FBQUEsU0FBQVMsYUFBQUUsS0FBQSxFQUFBQyxJQUFBLGVBQUFELEtBQUEsaUJBQUFBLEtBQUEsa0JBQUFBLEtBQUEsTUFBQUUsSUFBQSxHQUFBRixLQUFBLENBQUFHLE1BQUEsQ0FBQUMsV0FBQSxPQUFBRixJQUFBLEtBQUFHLFNBQUEsUUFBQUMsR0FBQSxHQUFBSixJQUFBLENBQUFLLElBQUEsQ0FBQVAsS0FBQSxFQUFBQyxJQUFBLDJCQUFBSyxHQUFBLHNCQUFBQSxHQUFBLFlBQUFFLFNBQUEsNERBQUFQLElBQUEsZ0JBQUFGLE1BQUEsR0FBQVUsTUFBQSxFQUFBVCxLQUFBO0FBRS9DLE1BQU1VLGFBQWEsR0FBR2xCLE1BQU0sQ0FBQ21CLElBQUksQ0FBQ0MsNEJBQW1CLENBQUM7QUFDdEQsTUFBTUMsV0FBVyxHQUFHSCxhQUFhLENBQUNJLE1BQU07QUFDeEMsTUFBTUMsYUFBYSxHQUFHLENBQUM7QUFDdkIsTUFBTUMsVUFBVSxHQUFHQyxJQUFJLENBQUNDLElBQUksQ0FBQ0wsV0FBVyxHQUFHRSxhQUFhLENBQUM7QUFFMUMsTUFBTUksa0JBQWtCLFNBQVNDLGNBQUssQ0FBQ0MsU0FBUyxDQUFDO0VBVzlEQyxNQUFNQSxDQUFBLEVBQUc7SUFDUCxNQUFNQyxnQkFBZ0IsR0FBRyxJQUFJQyxHQUFHLENBQUMsSUFBSSxDQUFDQyxLQUFLLENBQUNDLGFBQWEsQ0FBQztJQUUxRCxNQUFNQyxTQUFTLEdBQUcsRUFBRTtJQUNwQixLQUFLLElBQUlDLEdBQUcsR0FBRyxDQUFDLEVBQUVBLEdBQUcsR0FBR1osVUFBVSxFQUFFWSxHQUFHLEVBQUUsRUFBRTtNQUN6QyxNQUFNQyxZQUFZLEdBQUcsRUFBRTtNQUV2QixLQUFLLElBQUlDLE1BQU0sR0FBRyxDQUFDLEVBQUVBLE1BQU0sR0FBR2YsYUFBYSxFQUFFZSxNQUFNLEVBQUUsRUFBRTtRQUNyRCxNQUFNQyxVQUFVLEdBQUdILEdBQUcsR0FBR2IsYUFBYSxHQUFHZSxNQUFNOztRQUUvQztRQUNBLElBQUlDLFVBQVUsSUFBSXJCLGFBQWEsQ0FBQ0ksTUFBTSxFQUFFO1VBQ3RDO1FBQ0Y7UUFFQSxNQUFNa0IsT0FBTyxHQUFHdEIsYUFBYSxDQUFDcUIsVUFBVSxDQUFDO1FBRXpDLE1BQU1FLE1BQU0sR0FBRyxDQUFDVixnQkFBZ0IsQ0FBQ1csR0FBRyxDQUFDRixPQUFPLENBQUMsR0FDekMsTUFBTSxJQUFJLENBQUNQLEtBQUssQ0FBQ1UsbUJBQW1CLENBQUNILE9BQU8sQ0FBQyxHQUM3QyxNQUFNLElBQUksQ0FBQ1AsS0FBSyxDQUFDVyxzQkFBc0IsQ0FBQ0osT0FBTyxDQUFDO1FBRXBELE1BQU1LLFNBQVMsR0FBRyxJQUFBQyxtQkFBRSxFQUNsQixnQ0FBZ0MsRUFDaEMsS0FBSyxFQUNMO1VBQUNDLFFBQVEsRUFBRWhCLGdCQUFnQixDQUFDVyxHQUFHLENBQUNGLE9BQU87UUFBQyxDQUFDLENBQzFDO1FBRURILFlBQVksQ0FBQ1csSUFBSSxDQUNmN0QsTUFBQSxDQUFBUSxPQUFBLENBQUFzRCxhQUFBO1VBQVFwRCxHQUFHLEVBQUUyQyxPQUFRO1VBQUNLLFNBQVMsRUFBRUEsU0FBVTtVQUFDSyxPQUFPLEVBQUVUO1FBQU8sR0FDekRyQiw0QkFBbUIsQ0FBQ29CLE9BQU8sQ0FBQyxDQUN0QixDQUNWO01BQ0g7TUFFQUwsU0FBUyxDQUFDYSxJQUFJLENBQUM3RCxNQUFBLENBQUFRLE9BQUEsQ0FBQXNELGFBQUE7UUFBR3BELEdBQUcsRUFBRXVDLEdBQUk7UUFBQ1MsU0FBUyxFQUFDO01BQThDLEdBQUVSLFlBQVksQ0FBSyxDQUFDO0lBQzFHO0lBRUEsT0FDRWxELE1BQUEsQ0FBQVEsT0FBQSxDQUFBc0QsYUFBQTtNQUFLSixTQUFTLEVBQUM7SUFBdUIsR0FDbkNWLFNBQVMsQ0FDTjtFQUVWO0FBQ0Y7QUFBQ2dCLE9BQUEsQ0FBQXhELE9BQUEsR0FBQWdDLGtCQUFBO0FBQUEvQixlQUFBLENBdERvQitCLGtCQUFrQixlQUNsQjtFQUNqQk8sYUFBYSxFQUFFa0Isa0JBQVMsQ0FBQ0MsT0FBTyxDQUM5QkQsa0JBQVMsQ0FBQ0UsS0FBSyxDQUFDdEQsTUFBTSxDQUFDbUIsSUFBSSxDQUFDQyw0QkFBbUIsQ0FBQyxDQUFDLENBQ2xEO0VBRUQ7RUFDQXVCLG1CQUFtQixFQUFFUyxrQkFBUyxDQUFDRyxJQUFJLENBQUNDLFVBQVU7RUFDOUNaLHNCQUFzQixFQUFFUSxrQkFBUyxDQUFDRyxJQUFJLENBQUNDO0FBQ3pDLENBQUMifQ==