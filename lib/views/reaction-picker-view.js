"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _helpers = require("../helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const CONTENT_TYPES = Object.keys(_helpers.reactionTypeToEmoji);
const EMOJI_COUNT = CONTENT_TYPES.length;
const EMOJI_PER_ROW = 4;
const EMOJI_ROWS = Math.ceil(EMOJI_COUNT / EMOJI_PER_ROW);
class ReactionPickerView extends _react.default.Component {
  render() {
    const viewerReactedSet = new Set(this.props.viewerReacted);
    const emojiRows = [];
    for (let row = 0; row < EMOJI_ROWS; row++) {
      const emojiButtons = [];
      for (let column = 0; column < EMOJI_PER_ROW; column++) {
        const emojiIndex = row * EMOJI_PER_ROW + column;

        /* istanbul ignore if */
        if (emojiIndex >= CONTENT_TYPES.length) {
          break;
        }
        const content = CONTENT_TYPES[emojiIndex];
        const toggle = !viewerReactedSet.has(content) ? () => this.props.addReactionAndClose(content) : () => this.props.removeReactionAndClose(content);
        const className = (0, _classnames.default)('github-ReactionPicker-reaction', 'btn', {
          selected: viewerReactedSet.has(content)
        });
        emojiButtons.push(_react.default.createElement("button", {
          key: content,
          className: className,
          onClick: toggle
        }, _helpers.reactionTypeToEmoji[content]));
      }
      emojiRows.push(_react.default.createElement("p", {
        key: row,
        className: "github-ReactionPicker-row inline-block-tight"
      }, emojiButtons));
    }
    return _react.default.createElement("div", {
      className: "github-ReactionPicker"
    }, emojiRows);
  }
}
exports.default = ReactionPickerView;
_defineProperty(ReactionPickerView, "propTypes", {
  viewerReacted: _propTypes.default.arrayOf(_propTypes.default.oneOf(Object.keys(_helpers.reactionTypeToEmoji))),
  // Action methods
  addReactionAndClose: _propTypes.default.func.isRequired,
  removeReactionAndClose: _propTypes.default.func.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfY2xhc3NuYW1lcyIsIl9oZWxwZXJzIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ0IiwiaSIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsInIiLCJlIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiQ09OVEVOVF9UWVBFUyIsImtleXMiLCJyZWFjdGlvblR5cGVUb0Vtb2ppIiwiRU1PSklfQ09VTlQiLCJsZW5ndGgiLCJFTU9KSV9QRVJfUk9XIiwiRU1PSklfUk9XUyIsIk1hdGgiLCJjZWlsIiwiUmVhY3Rpb25QaWNrZXJWaWV3IiwiUmVhY3QiLCJDb21wb25lbnQiLCJyZW5kZXIiLCJ2aWV3ZXJSZWFjdGVkU2V0IiwiU2V0IiwicHJvcHMiLCJ2aWV3ZXJSZWFjdGVkIiwiZW1vamlSb3dzIiwicm93IiwiZW1vamlCdXR0b25zIiwiY29sdW1uIiwiZW1vamlJbmRleCIsImNvbnRlbnQiLCJ0b2dnbGUiLCJoYXMiLCJhZGRSZWFjdGlvbkFuZENsb3NlIiwicmVtb3ZlUmVhY3Rpb25BbmRDbG9zZSIsImNsYXNzTmFtZSIsImN4Iiwic2VsZWN0ZWQiLCJwdXNoIiwiY3JlYXRlRWxlbWVudCIsIm9uQ2xpY2siLCJleHBvcnRzIiwiUHJvcFR5cGVzIiwiYXJyYXlPZiIsIm9uZU9mIiwiZnVuYyIsImlzUmVxdWlyZWQiXSwic291cmNlcyI6WyJyZWFjdGlvbi1waWNrZXItdmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IHtyZWFjdGlvblR5cGVUb0Vtb2ppfSBmcm9tICcuLi9oZWxwZXJzJztcblxuY29uc3QgQ09OVEVOVF9UWVBFUyA9IE9iamVjdC5rZXlzKHJlYWN0aW9uVHlwZVRvRW1vamkpO1xuY29uc3QgRU1PSklfQ09VTlQgPSBDT05URU5UX1RZUEVTLmxlbmd0aDtcbmNvbnN0IEVNT0pJX1BFUl9ST1cgPSA0O1xuY29uc3QgRU1PSklfUk9XUyA9IE1hdGguY2VpbChFTU9KSV9DT1VOVCAvIEVNT0pJX1BFUl9ST1cpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWFjdGlvblBpY2tlclZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHZpZXdlclJlYWN0ZWQ6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgUHJvcFR5cGVzLm9uZU9mKE9iamVjdC5rZXlzKHJlYWN0aW9uVHlwZVRvRW1vamkpKSxcbiAgICApLFxuXG4gICAgLy8gQWN0aW9uIG1ldGhvZHNcbiAgICBhZGRSZWFjdGlvbkFuZENsb3NlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHJlbW92ZVJlYWN0aW9uQW5kQ2xvc2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qgdmlld2VyUmVhY3RlZFNldCA9IG5ldyBTZXQodGhpcy5wcm9wcy52aWV3ZXJSZWFjdGVkKTtcblxuICAgIGNvbnN0IGVtb2ppUm93cyA9IFtdO1xuICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IEVNT0pJX1JPV1M7IHJvdysrKSB7XG4gICAgICBjb25zdCBlbW9qaUJ1dHRvbnMgPSBbXTtcblxuICAgICAgZm9yIChsZXQgY29sdW1uID0gMDsgY29sdW1uIDwgRU1PSklfUEVSX1JPVzsgY29sdW1uKyspIHtcbiAgICAgICAgY29uc3QgZW1vamlJbmRleCA9IHJvdyAqIEVNT0pJX1BFUl9ST1cgKyBjb2x1bW47XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChlbW9qaUluZGV4ID49IENPTlRFTlRfVFlQRVMubGVuZ3RoKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb250ZW50ID0gQ09OVEVOVF9UWVBFU1tlbW9qaUluZGV4XTtcblxuICAgICAgICBjb25zdCB0b2dnbGUgPSAhdmlld2VyUmVhY3RlZFNldC5oYXMoY29udGVudClcbiAgICAgICAgICA/ICgpID0+IHRoaXMucHJvcHMuYWRkUmVhY3Rpb25BbmRDbG9zZShjb250ZW50KVxuICAgICAgICAgIDogKCkgPT4gdGhpcy5wcm9wcy5yZW1vdmVSZWFjdGlvbkFuZENsb3NlKGNvbnRlbnQpO1xuXG4gICAgICAgIGNvbnN0IGNsYXNzTmFtZSA9IGN4KFxuICAgICAgICAgICdnaXRodWItUmVhY3Rpb25QaWNrZXItcmVhY3Rpb24nLFxuICAgICAgICAgICdidG4nLFxuICAgICAgICAgIHtzZWxlY3RlZDogdmlld2VyUmVhY3RlZFNldC5oYXMoY29udGVudCl9LFxuICAgICAgICApO1xuXG4gICAgICAgIGVtb2ppQnV0dG9ucy5wdXNoKFxuICAgICAgICAgIDxidXR0b24ga2V5PXtjb250ZW50fSBjbGFzc05hbWU9e2NsYXNzTmFtZX0gb25DbGljaz17dG9nZ2xlfT5cbiAgICAgICAgICAgIHtyZWFjdGlvblR5cGVUb0Vtb2ppW2NvbnRlbnRdfVxuICAgICAgICAgIDwvYnV0dG9uPixcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgZW1vamlSb3dzLnB1c2goPHAga2V5PXtyb3d9IGNsYXNzTmFtZT1cImdpdGh1Yi1SZWFjdGlvblBpY2tlci1yb3cgaW5saW5lLWJsb2NrLXRpZ2h0XCI+e2Vtb2ppQnV0dG9uc308L3A+KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJnaXRodWItUmVhY3Rpb25QaWNrZXJcIj5cbiAgICAgICAge2Vtb2ppUm93c31cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsV0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUcsUUFBQSxHQUFBSCxPQUFBO0FBQStDLFNBQUFELHVCQUFBSyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBQUEsU0FBQUcsZ0JBQUFILEdBQUEsRUFBQUksR0FBQSxFQUFBQyxLQUFBLElBQUFELEdBQUEsR0FBQUUsY0FBQSxDQUFBRixHQUFBLE9BQUFBLEdBQUEsSUFBQUosR0FBQSxJQUFBTyxNQUFBLENBQUFDLGNBQUEsQ0FBQVIsR0FBQSxFQUFBSSxHQUFBLElBQUFDLEtBQUEsRUFBQUEsS0FBQSxFQUFBSSxVQUFBLFFBQUFDLFlBQUEsUUFBQUMsUUFBQSxvQkFBQVgsR0FBQSxDQUFBSSxHQUFBLElBQUFDLEtBQUEsV0FBQUwsR0FBQTtBQUFBLFNBQUFNLGVBQUFNLENBQUEsUUFBQUMsQ0FBQSxHQUFBQyxZQUFBLENBQUFGLENBQUEsdUNBQUFDLENBQUEsR0FBQUEsQ0FBQSxHQUFBRSxNQUFBLENBQUFGLENBQUE7QUFBQSxTQUFBQyxhQUFBRixDQUFBLEVBQUFJLENBQUEsMkJBQUFKLENBQUEsS0FBQUEsQ0FBQSxTQUFBQSxDQUFBLE1BQUFLLENBQUEsR0FBQUwsQ0FBQSxDQUFBTSxNQUFBLENBQUFDLFdBQUEsa0JBQUFGLENBQUEsUUFBQUosQ0FBQSxHQUFBSSxDQUFBLENBQUFHLElBQUEsQ0FBQVIsQ0FBQSxFQUFBSSxDQUFBLHVDQUFBSCxDQUFBLFNBQUFBLENBQUEsWUFBQVEsU0FBQSx5RUFBQUws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