"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _commitDetailItem = _interopRequireDefault(require("../items/commit-detail-item"));
var _issueishDetailItem = _interopRequireDefault(require("../items/issueish-detail-item"));
var _propTypes2 = require("../prop-types");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class FilePatchMetaView extends _react.default.Component {
  renderMetaControls() {
    if (this.props.itemType === _commitDetailItem.default || this.props.itemType === _issueishDetailItem.default) {
      return null;
    }
    return _react.default.createElement("div", {
      className: "github-FilePatchView-metaControls"
    }, _react.default.createElement("button", {
      className: (0, _classnames.default)('github-FilePatchView-metaButton', 'icon', this.props.actionIcon),
      onClick: this.props.action
    }, this.props.actionText));
  }
  render() {
    return _react.default.createElement("div", {
      className: "github-FilePatchView-meta"
    }, _react.default.createElement("div", {
      className: "github-FilePatchView-metaContainer"
    }, _react.default.createElement("header", {
      className: "github-FilePatchView-metaHeader"
    }, _react.default.createElement("h3", {
      className: "github-FilePatchView-metaTitle"
    }, this.props.title), this.renderMetaControls()), _react.default.createElement("div", {
      className: "github-FilePatchView-metaDetails"
    }, this.props.children)));
  }
}
exports.default = FilePatchMetaView;
_defineProperty(FilePatchMetaView, "propTypes", {
  title: _propTypes.default.string.isRequired,
  actionIcon: _propTypes.default.string.isRequired,
  actionText: _propTypes.default.string.isRequired,
  action: _propTypes.default.func.isRequired,
  children: _propTypes.default.element.isRequired,
  itemType: _propTypes2.ItemTypePropType.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfY2xhc3NuYW1lcyIsIl9jb21taXREZXRhaWxJdGVtIiwiX2lzc3VlaXNoRGV0YWlsSXRlbSIsIl9wcm9wVHlwZXMyIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiRmlsZVBhdGNoTWV0YVZpZXciLCJSZWFjdCIsIkNvbXBvbmVudCIsInJlbmRlck1ldGFDb250cm9scyIsInByb3BzIiwiaXRlbVR5cGUiLCJDb21taXREZXRhaWxJdGVtIiwiSXNzdWVpc2hEZXRhaWxJdGVtIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImN4IiwiYWN0aW9uSWNvbiIsIm9uQ2xpY2siLCJhY3Rpb24iLCJhY3Rpb25UZXh0IiwicmVuZGVyIiwidGl0bGUiLCJjaGlsZHJlbiIsImV4cG9ydHMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwiZnVuYyIsImVsZW1lbnQiLCJJdGVtVHlwZVByb3BUeXBlIl0sInNvdXJjZXMiOlsiZmlsZS1wYXRjaC1tZXRhLXZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBDb21taXREZXRhaWxJdGVtIGZyb20gJy4uL2l0ZW1zL2NvbW1pdC1kZXRhaWwtaXRlbSc7XG5pbXBvcnQgSXNzdWVpc2hEZXRhaWxJdGVtIGZyb20gJy4uL2l0ZW1zL2lzc3VlaXNoLWRldGFpbC1pdGVtJztcbmltcG9ydCB7SXRlbVR5cGVQcm9wVHlwZX0gZnJvbSAnLi4vcHJvcC10eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbGVQYXRjaE1ldGFWaWV3IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGFjdGlvbkljb246IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBhY3Rpb25UZXh0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cbiAgICBhY3Rpb246IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZCxcbiAgICBpdGVtVHlwZTogSXRlbVR5cGVQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHJlbmRlck1ldGFDb250cm9scygpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5pdGVtVHlwZSA9PT0gQ29tbWl0RGV0YWlsSXRlbSB8fCB0aGlzLnByb3BzLml0ZW1UeXBlID09PSBJc3N1ZWlzaERldGFpbEl0ZW0pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJnaXRodWItRmlsZVBhdGNoVmlldy1tZXRhQ29udHJvbHNcIj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2dpdGh1Yi1GaWxlUGF0Y2hWaWV3LW1ldGFCdXR0b24nLCAnaWNvbicsIHRoaXMucHJvcHMuYWN0aW9uSWNvbil9XG4gICAgICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5hY3Rpb259PlxuICAgICAgICAgIHt0aGlzLnByb3BzLmFjdGlvblRleHR9XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJnaXRodWItRmlsZVBhdGNoVmlldy1tZXRhXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2l0aHViLUZpbGVQYXRjaFZpZXctbWV0YUNvbnRhaW5lclwiPlxuICAgICAgICAgIDxoZWFkZXIgY2xhc3NOYW1lPVwiZ2l0aHViLUZpbGVQYXRjaFZpZXctbWV0YUhlYWRlclwiPlxuICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cImdpdGh1Yi1GaWxlUGF0Y2hWaWV3LW1ldGFUaXRsZVwiPnt0aGlzLnByb3BzLnRpdGxlfTwvaDM+XG4gICAgICAgICAgICB7dGhpcy5yZW5kZXJNZXRhQ29udHJvbHMoKX1cbiAgICAgICAgICA8L2hlYWRlcj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdpdGh1Yi1GaWxlUGF0Y2hWaWV3LW1ldGFEZXRhaWxzXCI+XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFdBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFHLGlCQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxtQkFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssV0FBQSxHQUFBTCxPQUFBO0FBQStDLFNBQUFELHVCQUFBTyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdB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