"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _octicon = _interopRequireDefault(require("../atom/octicon"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const typeAndStateToIcon = {
  Issue: {
    OPEN: 'issue-opened',
    CLOSED: 'issue-closed'
  },
  PullRequest: {
    OPEN: 'git-pull-request',
    CLOSED: 'git-pull-request',
    MERGED: 'git-merge'
  }
};
class IssueishBadge extends _react.default.Component {
  render() {
    const _this$props = this.props,
      {
        type,
        state
      } = _this$props,
      others = _objectWithoutProperties(_this$props, ["type", "state"]);
    const icons = typeAndStateToIcon[type] || {};
    const icon = icons[state] || 'question';
    const {
        className
      } = others,
      otherProps = _objectWithoutProperties(others, ["className"]);
    return _react.default.createElement("span", _extends({
      className: (0, _classnames.default)(className, 'github-IssueishBadge', state.toLowerCase())
    }, otherProps), _react.default.createElement(_octicon.default, {
      icon: icon
    }), state.toLowerCase());
  }
}
exports.default = IssueishBadge;
_defineProperty(IssueishBadge, "propTypes", {
  type: _propTypes.default.oneOf(['Issue', 'PullRequest', 'Unknown']).isRequired,
  state: _propTypes.default.oneOf(['OPEN', 'CLOSED', 'MERGED', 'UNKNOWN']).isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfY2xhc3NuYW1lcyIsIl9vY3RpY29uIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsImluZGV4T2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNvdXJjZUtleXMiLCJrZXlzIiwiX2RlZmluZVByb3BlcnR5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiYXJnIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwidHlwZUFuZFN0YXRlVG9JY29uIiwiSXNzdWUiLCJPUEVOIiwiQ0xPU0VEIiwiUHVsbFJlcXVlc3QiLCJNRVJHRUQiLCJJc3N1ZWlzaEJhZGdlIiwiUmVhY3QiLCJDb21wb25lbnQiLCJyZW5kZXIiLCJfdGhpcyRwcm9wcyIsInByb3BzIiwidHlwZSIsInN0YXRlIiwib3RoZXJzIiwiaWNvbnMiLCJpY29uIiwiY2xhc3NOYW1lIiwib3RoZXJQcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJjeCIsInRvTG93ZXJDYXNlIiwiZXhwb3J0cyIsIlByb3BUeXBlcyIsIm9uZU9mIiwiaXNSZXF1aXJlZCJdLCJzb3VyY2VzIjpbImlzc3VlaXNoLWJhZGdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgT2N0aWNvbiBmcm9tICcuLi9hdG9tL29jdGljb24nO1xuXG5jb25zdCB0eXBlQW5kU3RhdGVUb0ljb24gPSB7XG4gIElzc3VlOiB7XG4gICAgT1BFTjogJ2lzc3VlLW9wZW5lZCcsXG4gICAgQ0xPU0VEOiAnaXNzdWUtY2xvc2VkJyxcbiAgfSxcbiAgUHVsbFJlcXVlc3Q6IHtcbiAgICBPUEVOOiAnZ2l0LXB1bGwtcmVxdWVzdCcsXG4gICAgQ0xPU0VEOiAnZ2l0LXB1bGwtcmVxdWVzdCcsXG4gICAgTUVSR0VEOiAnZ2l0LW1lcmdlJyxcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElzc3VlaXNoQmFkZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHR5cGU6IFByb3BUeXBlcy5vbmVPZihbXG4gICAgICAnSXNzdWUnLCAnUHVsbFJlcXVlc3QnLCAnVW5rbm93bicsXG4gICAgXSkuaXNSZXF1aXJlZCxcbiAgICBzdGF0ZTogUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgICdPUEVOJywgJ0NMT1NFRCcsICdNRVJHRUQnLCAnVU5LTk9XTicsXG4gICAgXSkuaXNSZXF1aXJlZCxcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7dHlwZSwgc3RhdGUsIC4uLm90aGVyc30gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGljb25zID0gdHlwZUFuZFN0YXRlVG9JY29uW3R5cGVdIHx8IHt9O1xuICAgIGNvbnN0IGljb24gPSBpY29uc1tzdGF0ZV0gfHwgJ3F1ZXN0aW9uJztcblxuICAgIGNvbnN0IHtjbGFzc05hbWUsIC4uLm90aGVyUHJvcHN9ID0gb3RoZXJzO1xuICAgIHJldHVybiAoXG4gICAgICA8c3BhbiBjbGFzc05hbWU9e2N4KGNsYXNzTmFtZSwgJ2dpdGh1Yi1Jc3N1ZWlzaEJhZGdlJywgc3RhdGUudG9Mb3dlckNhc2UoKSl9IHsuLi5vdGhlclByb3BzfT5cbiAgICAgICAgPE9jdGljb24gaWNvbj17aWNvbn0gLz5cbiAgICAgICAge3N0YXRlLnRvTG93ZXJDYXNlKCl9XG4gICAgICA8L3NwYW4+XG4gICAgKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxXQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRyxRQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBc0MsU0FBQUQsdUJBQUFLLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFBQSxTQUFBRyxTQUFBLElBQUFBLFFBQUEsR0FBQUMsTUFBQSxDQUFBQyxNQUFBLEdBQUFELE1BQUEsQ0FBQUMsTUFBQSxDQUFBQyxJQUFBLGVBQUFDLE1BQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxFQUFBRixDQUFBLFVBQUFHLE1BQUEsR0FBQUYsU0FBQSxDQUFBRCxDQUFBLFlBQUFJLEdBQUEsSUFBQUQsTUFBQSxRQUFBUCxNQUFBLENBQUFTLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFKLE1BQUEsRUFBQUMsR0FBQSxLQUFBTCxNQUFBLENBQUFLLEdBQUEsSUFBQUQsTUFBQSxDQUFBQyxHQUFBLGdCQUFBTCxNQUFBLFlBQUFKLFFBQUEsQ0FBQWEsS0FBQSxPQUFBUCxTQUFBO0FBQUEsU0FBQVEseUJBQUFOLE1BQUEsRUFBQU8sUUFBQSxRQUFBUCxN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