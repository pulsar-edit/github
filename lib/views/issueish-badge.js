"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _octicon = _interopRequireDefault(require("../atom/octicon"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const typeAndStateToIcon = {
  Issue: {
    OPEN: 'issue-opened',
    CLOSED: 'issue-closed'
  },
  PullRequest: {
    OPEN: 'git-pull-request',
    CLOSED: 'git-pull-request',
    MERGED: 'git-merge'
  }
};
class IssueishBadge extends _react.default.Component {
  render() {
    const _this$props = this.props,
      {
        type,
        state
      } = _this$props,
      others = _objectWithoutProperties(_this$props, ["type", "state"]);
    const icons = typeAndStateToIcon[type] || {};
    const icon = icons[state] || 'question';
    const {
        className
      } = others,
      otherProps = _objectWithoutProperties(others, ["className"]);
    return _react.default.createElement("span", _extends({
      className: (0, _classnames.default)(className, 'github-IssueishBadge', state.toLowerCase())
    }, otherProps), _react.default.createElement(_octicon.default, {
      icon: icon
    }), state.toLowerCase());
  }
}
exports.default = IssueishBadge;
_defineProperty(IssueishBadge, "propTypes", {
  type: _propTypes.default.oneOf(['Issue', 'PullRequest', 'Unknown']).isRequired,
  state: _propTypes.default.oneOf(['OPEN', 'CLOSED', 'MERGED', 'UNKNOWN']).isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfY2xhc3NuYW1lcyIsIl9vY3RpY29uIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsImluZGV4T2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNvdXJjZUtleXMiLCJrZXlzIiwiX2RlZmluZVByb3BlcnR5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidCIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsInIiLCJlIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJ0eXBlQW5kU3RhdGVUb0ljb24iLCJJc3N1ZSIsIk9QRU4iLCJDTE9TRUQiLCJQdWxsUmVxdWVzdCIsIk1FUkdFRCIsIklzc3VlaXNoQmFkZ2UiLCJSZWFjdCIsIkNvbXBvbmVudCIsInJlbmRlciIsIl90aGlzJHByb3BzIiwicHJvcHMiLCJ0eXBlIiwic3RhdGUiLCJvdGhlcnMiLCJpY29ucyIsImljb24iLCJjbGFzc05hbWUiLCJvdGhlclByb3BzIiwiY3JlYXRlRWxlbWVudCIsImN4IiwidG9Mb3dlckNhc2UiLCJleHBvcnRzIiwiUHJvcFR5cGVzIiwib25lT2YiLCJpc1JlcXVpcmVkIl0sInNvdXJjZXMiOlsiaXNzdWVpc2gtYmFkZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBPY3RpY29uIGZyb20gJy4uL2F0b20vb2N0aWNvbic7XG5cbmNvbnN0IHR5cGVBbmRTdGF0ZVRvSWNvbiA9IHtcbiAgSXNzdWU6IHtcbiAgICBPUEVOOiAnaXNzdWUtb3BlbmVkJyxcbiAgICBDTE9TRUQ6ICdpc3N1ZS1jbG9zZWQnLFxuICB9LFxuICBQdWxsUmVxdWVzdDoge1xuICAgIE9QRU46ICdnaXQtcHVsbC1yZXF1ZXN0JyxcbiAgICBDTE9TRUQ6ICdnaXQtcHVsbC1yZXF1ZXN0JyxcbiAgICBNRVJHRUQ6ICdnaXQtbWVyZ2UnLFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSXNzdWVpc2hCYWRnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgICdJc3N1ZScsICdQdWxsUmVxdWVzdCcsICdVbmtub3duJyxcbiAgICBdKS5pc1JlcXVpcmVkLFxuICAgIHN0YXRlOiBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgJ09QRU4nLCAnQ0xPU0VEJywgJ01FUkdFRCcsICdVTktOT1dOJyxcbiAgICBdKS5pc1JlcXVpcmVkLFxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHt0eXBlLCBzdGF0ZSwgLi4ub3RoZXJzfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgaWNvbnMgPSB0eXBlQW5kU3RhdGVUb0ljb25bdHlwZV0gfHwge307XG4gICAgY29uc3QgaWNvbiA9IGljb25zW3N0YXRlXSB8fCAncXVlc3Rpb24nO1xuXG4gICAgY29uc3Qge2NsYXNzTmFtZSwgLi4ub3RoZXJQcm9wc30gPSBvdGhlcnM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxzcGFuIGNsYXNzTmFtZT17Y3goY2xhc3NOYW1lLCAnZ2l0aHViLUlzc3VlaXNoQmFkZ2UnLCBzdGF0ZS50b0xvd2VyQ2FzZSgpKX0gey4uLm90aGVyUHJvcHN9PlxuICAgICAgICA8T2N0aWNvbiBpY29uPXtpY29ufSAvPlxuICAgICAgICB7c3RhdGUudG9Mb3dlckNhc2UoKX1cbiAgICAgIDwvc3Bhbj5cbiAgICApO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFdBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFHLFFBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUFzQyxTQUFBRCx1QkFBQUssR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUFBLFNBQUFHLFNBQUEsSUFBQUEsUUFBQSxHQUFBQyxNQUFBLENBQUFDLE1BQUEsR0FBQUQsTUFBQSxDQUFBQyxNQUFBLENBQUFDLElBQUEsZUFBQUMsTUFBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLEVBQUFGLENBQUEsVUFBQUcsTUFBQSxHQUFBRixTQUFBLENBQUFELENBQUEsWUFBQUksR0FBQSxJQUFBRCxNQUFBLFFBQUFQLE1BQUEsQ0FBQVMsU0FBQSxDQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQUosTUFBQSxFQUFBQyxHQUFBLEtBQUFMLE1BQUEsQ0FBQUssR0FBQSxJQUFBRCxNQUFBLENBQUFDLEdBQUEsZ0JBQUFMLE1BQUEsWUFBQUosUUFBQSxDQUFBYSxLQUFBLE9BQUFQLFNBQUE7QUFBQSxTQUFBUSx5QkFBQU4sTUFBQSxFQUFBTyxRQUFBLFFBQUFQLE1BQUEseUJBQUFKLE1BQUEsR0FBQVksNkJBQUEsQ0FBQVIsTUFBQSxFQUFBTyxRQUFBLE9BQUFOLEdBQUEsRUFBQUosQ0FBQSxNQUFBSixNQUFBLENBQUFnQixxQkFBQSxRQUFBQyxnQkFBQSxHQUFBakIsTUFBQSxDQUFBZ0IscUJBQUEsQ0FBQVQsTUFBQSxRQUFBSCxDQUFBLE1BQUFBLENBQUEsR0FBQWEsZ0JBQUEsQ0FBQVgsTUFBQSxFQUFBRixDQUFBLE1BQUFJLEdBQUEsR0FBQVMsZ0JBQUEsQ0FBQWIsQ0FBQSxPQUFBVSxRQUFBLENBQUFJLE9BQUEsQ0FBQVYsR0FBQSx1QkFBQVIsTUFBQSxDQUFBUyxTQUFBLENBQUFVLG9CQUFBLENBQUFSLElBQUEsQ0FBQUosTUFBQSxFQUFBQyxHQUFBLGFBQUFMLE1BQUEsQ0FBQUssR0FBQSxJQUFBRCxNQUFBLENBQUFDLEdBQUEsY0FBQUwsTUFBQTtBQUFBLFNBQUFZLDhCQUFBUixNQUFBLEVBQUFPLFFBQUEsUUFBQVAsTUFBQSx5QkFBQUosTUFBQSxXQUFBaUIsVUFBQSxHQUFBcEIsTUFBQSxDQUFBcUIsSUFBQSxDQUFBZCxNQUFBLE9BQUFDLEdBQUEsRUFBQUosQ0FBQSxPQUFBQSxDQUFBLE1BQUFBLENBQUEsR0FBQWdCLFVBQUEsQ0FBQWQsTUFBQSxFQUFBRixDQUFBLE1BQUFJLEdBQUEsR0FBQVksVUFBQSxDQUFBaEIsQ0FBQSxPQUFBVSxRQUFBLENBQUFJLE9BQUEsQ0FBQVYsR0FBQSxrQkFBQUwsTUFBQSxDQUFBSyxHQUFBLElBQUFELE1BQUEsQ0FBQUMsR0FBQSxZQUFBTCxNQUFBO0FBQUEsU0FBQW1CLGdCQUFBMUIsR0FBQSxFQUFBWSxHQUFBLEVBQUFlLEtBQUEsSUFBQWYsR0FBQSxHQUFBZ0IsY0FBQSxDQUFBaEIsR0FBQSxPQUFBQSxHQUFBLElBQUFaLEdBQUEsSUFBQUksTUFBQSxDQUFBeUIsY0FBQSxDQUFBN0IsR0FBQSxFQUFBWSxHQUFBLElBQUFlLEtBQUEsRUFBQUEsS0FBQSxFQUFBRyxVQUFBLFFBQUFDLFlBQUEsUUFBQUMsUUFBQSxvQkFBQWhDLEdBQUEsQ0FBQVksR0FBQSxJQUFBZSxLQUFBLFdBQUEzQixHQUFBO0FBQUEsU0FBQTRCLGVBQUFLLENBQUEsUUFBQXpCLENBQUEsR0FBQTBCLFlBQUEsQ0FBQUQsQ0FBQSx1Q0FBQXpCLENBQUEsR0FBQUEsQ0FBQSxHQUFBMkIsTUFBQSxDQUFBM0IsQ0FBQTtBQUFBLFNBQUEwQixhQUFBRCxDQUFBLEVBQUFHLENBQUEsMkJBQUFILENBQUEsS0FBQUEsQ0FBQSxTQUFBQSxDQUFBLE1BQUFJLENBQUEsR0FBQUosQ0FBQSxDQUFBSyxNQUFBLENBQUFDLFdBQUEsa0JBQUFGLENBQUEsUUFBQTdCLENBQUEsR0FBQTZCLENBQUEsQ0FBQXRCLElBQUEsQ0FBQWtCLENBQUEsRUFBQUcsQ0FBQSx1Q0FBQTVCLENBQUEsU0FBQUEsQ0FBQSxZQUFBZ0MsU0FBQSx5RUFBQUosQ0FBQSxHQUFBRCxNQUFBLEdBQUFNLE1BQUEsRUFBQVIsQ0FBQTtBQUV0QyxNQUFNUyxrQkFBa0IsR0FBRztFQUN6QkMsS0FBSyxFQUFFO0lBQ0xDLElBQUksRUFBRSxjQUFjO0lBQ3BCQyxNQUFNLEVBQUU7RUFDVixDQUFDO0VBQ0RDLFdBQVcsRUFBRTtJQUNYRixJQUFJLEVBQUUsa0JBQWtCO0lBQ3hCQyxNQUFNLEVBQUUsa0JBQWtCO0lBQzFCRSxNQUFNLEVBQUU7RUFDVjtBQUNGLENBQUM7QUFFYyxNQUFNQyxhQUFhLFNBQVNDLGNBQUssQ0FBQ0MsU0FBUyxDQUFDO0VBVXpEQyxNQUFNQSxDQUFBLEVBQUc7SUFDUCxNQUFBQyxXQUFBLEdBQWlDLElBQUksQ0FBQ0MsS0FBSztNQUFyQztRQUFDQyxJQUFJO1FBQUVDO01BQWdCLENBQUMsR0FBQUgsV0FBQTtNQUFQSSxNQUFNLEdBQUF2Qyx3QkFBQSxDQUFBbUMsV0FBQTtJQUM3QixNQUFNSyxLQUFLLEdBQUdmLGtCQUFrQixDQUFDWSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsTUFBTUksSUFBSSxHQUFHRCxLQUFLLENBQUNGLEtBQUssQ0FBQyxJQUFJLFVBQVU7SUFFdkMsTUFBTTtRQUFDSTtNQUF3QixDQUFDLEdBQUdILE1BQU07TUFBcEJJLFVBQVUsR0FBQTNDLHdCQUFBLENBQUl1QyxNQUFNO0lBQ3pDLE9BQ0U5RCxNQUFBLENBQUFRLE9BQUEsQ0FBQTJELGFBQUEsU0FBQTFELFFBQUE7TUFBTXdELFNBQVMsRUFBRSxJQUFBRyxtQkFBRSxFQUFDSCxTQUFTLEVBQUUsc0JBQXNCLEVBQUVKLEtBQUssQ0FBQ1EsV0FBVyxDQUFDLENBQUM7SUFBRSxHQUFLSCxVQUFVLEdBQ3pGbEUsTUFBQSxDQUFBUSxPQUFBLENBQUEyRCxhQUFBLENBQUM5RCxRQUFBLENBQUFHLE9BQU87TUFBQ3dELElBQUksRUFBRUE7SUFBSyxDQUFFLENBQUMsRUFDdEJILEtBQUssQ0FBQ1EsV0FBVyxDQUFDLENBQ2YsQ0FBQztFQUVYO0FBQ0Y7QUFBQ0MsT0FBQSxDQUFBOUQsT0FBQSxHQUFBOEMsYUFBQTtBQUFBdEIsZUFBQSxDQXZCb0JzQixhQUFhLGVBQ2I7RUFDakJNLElBQUksRUFBRVcsa0JBQVMsQ0FBQ0MsS0FBSyxDQUFDLENBQ3BCLE9BQU8sRUFBRSxhQUFhLEVBQUUsU0FBUyxDQUNsQyxDQUFDLENBQUNDLFVBQVU7RUFDYlosS0FBSyxFQUFFVSxrQkFBUyxDQUFDQyxLQUFLLENBQUMsQ0FDckIsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUN0QyxDQUFDLENBQUNDO0FBQ0wsQ0FBQyJ9