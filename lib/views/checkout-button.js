"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes2 = require("../prop-types");
var _prCheckoutController = require("../controllers/pr-checkout-controller");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class CheckoutButton extends _react.default.Component {
  render() {
    const {
      checkoutOp
    } = this.props;
    const extraClasses = this.props.classNames || [];
    let buttonText = 'Checkout';
    let buttonTitle = null;
    if (!checkoutOp.isEnabled()) {
      buttonTitle = checkoutOp.getMessage();
      const reason = checkoutOp.why();
      if (reason === _prCheckoutController.checkoutStates.HIDDEN) {
        return null;
      }
      buttonText = reason.when({
        current: 'Checked out',
        default: 'Checkout'
      });
      extraClasses.push(this.props.classNamePrefix + reason.when({
        disabled: 'disabled',
        busy: 'busy',
        current: 'current'
      }));
    }
    const classNames = (0, _classnames.default)('btn', 'btn-primary', 'checkoutButton', ...extraClasses);
    return _react.default.createElement("button", {
      className: classNames,
      disabled: !checkoutOp.isEnabled(),
      title: buttonTitle,
      onClick: () => checkoutOp.run()
    }, buttonText);
  }
}
exports.default = CheckoutButton;
_defineProperty(CheckoutButton, "propTypes", {
  checkoutOp: _propTypes2.EnableableOperationPropType.isRequired,
  classNamePrefix: _propTypes.default.string.isRequired,
  classNames: _propTypes.default.array
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfY2xhc3NuYW1lcyIsIl9wcm9wVHlwZXMyIiwiX3ByQ2hlY2tvdXRDb250cm9sbGVyIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiQ2hlY2tvdXRCdXR0b24iLCJSZWFjdCIsIkNvbXBvbmVudCIsInJlbmRlciIsImNoZWNrb3V0T3AiLCJwcm9wcyIsImV4dHJhQ2xhc3NlcyIsImNsYXNzTmFtZXMiLCJidXR0b25UZXh0IiwiYnV0dG9uVGl0bGUiLCJpc0VuYWJsZWQiLCJnZXRNZXNzYWdlIiwicmVhc29uIiwid2h5IiwiY2hlY2tvdXRTdGF0ZXMiLCJISURERU4iLCJ3aGVuIiwiY3VycmVudCIsInB1c2giLCJjbGFzc05hbWVQcmVmaXgiLCJkaXNhYmxlZCIsImJ1c3kiLCJjeCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJ0aXRsZSIsIm9uQ2xpY2siLCJydW4iLCJleHBvcnRzIiwiRW5hYmxlYWJsZU9wZXJhdGlvblByb3BUeXBlIiwiaXNSZXF1aXJlZCIsIlByb3BUeXBlcyIsInN0cmluZyIsImFycmF5Il0sInNvdXJjZXMiOlsiY2hlY2tvdXQtYnV0dG9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHtFbmFibGVhYmxlT3BlcmF0aW9uUHJvcFR5cGV9IGZyb20gJy4uL3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtjaGVja291dFN0YXRlc30gZnJvbSAnLi4vY29udHJvbGxlcnMvcHItY2hlY2tvdXQtY29udHJvbGxlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoZWNrb3V0QnV0dG9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjaGVja291dE9wOiBFbmFibGVhYmxlT3BlcmF0aW9uUHJvcFR5cGUuaXNSZXF1aXJlZCxcbiAgICBjbGFzc05hbWVQcmVmaXg6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBjbGFzc05hbWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2NoZWNrb3V0T3B9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBleHRyYUNsYXNzZXMgPSB0aGlzLnByb3BzLmNsYXNzTmFtZXMgfHwgW107XG4gICAgbGV0IGJ1dHRvblRleHQgPSAnQ2hlY2tvdXQnO1xuICAgIGxldCBidXR0b25UaXRsZSA9IG51bGw7XG5cbiAgICBpZiAoIWNoZWNrb3V0T3AuaXNFbmFibGVkKCkpIHtcbiAgICAgIGJ1dHRvblRpdGxlID0gY2hlY2tvdXRPcC5nZXRNZXNzYWdlKCk7XG4gICAgICBjb25zdCByZWFzb24gPSBjaGVja291dE9wLndoeSgpO1xuICAgICAgaWYgKHJlYXNvbiA9PT0gY2hlY2tvdXRTdGF0ZXMuSElEREVOKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBidXR0b25UZXh0ID0gcmVhc29uLndoZW4oe1xuICAgICAgICBjdXJyZW50OiAnQ2hlY2tlZCBvdXQnLFxuICAgICAgICBkZWZhdWx0OiAnQ2hlY2tvdXQnLFxuICAgICAgfSk7XG5cbiAgICAgIGV4dHJhQ2xhc3Nlcy5wdXNoKHRoaXMucHJvcHMuY2xhc3NOYW1lUHJlZml4ICsgcmVhc29uLndoZW4oe1xuICAgICAgICBkaXNhYmxlZDogJ2Rpc2FibGVkJyxcbiAgICAgICAgYnVzeTogJ2J1c3knLFxuICAgICAgICBjdXJyZW50OiAnY3VycmVudCcsXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgY29uc3QgY2xhc3NOYW1lcyA9IGN4KCdidG4nLCAnYnRuLXByaW1hcnknLCAnY2hlY2tvdXRCdXR0b24nLCAuLi5leHRyYUNsYXNzZXMpO1xuICAgIHJldHVybiAoXG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lc31cbiAgICAgICAgZGlzYWJsZWQ9eyFjaGVja291dE9wLmlzRW5hYmxlZCgpfVxuICAgICAgICB0aXRsZT17YnV0dG9uVGl0bGV9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IGNoZWNrb3V0T3AucnVuKCl9PlxuICAgICAgICB7YnV0dG9uVGV4dH1cbiAgICAgIDwvYnV0dG9uPlxuICAgICk7XG4gIH1cblxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxXQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxxQkFBQSxHQUFBSixPQUFBO0FBQXFFLFNBQUFELHVCQUFBTSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBQUEsU0FBQUcsZ0JBQUFILEdBQUEsRUFBQUksR0FBQSxFQUFBQyxLQUFBLElBQUFELEdBQUEsR0FBQUUsY0FBQSxDQUFBRixHQUFBLE9BQUFBLEdBQUEsSUFBQUosR0FBQSxJQUFBTyxNQUFBLENBQUFDLGNBQUEsQ0FBQVIsR0FBQSxFQUFBSSxHQUFB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