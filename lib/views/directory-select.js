"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _electron = require("electron");
var _tabbable = require("./tabbable");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const {
  dialog
} = _electron.remote;
class DirectorySelect extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "chooseDirectory", async () => {
      const {
        filePaths
      } = await this.props.showOpenDialog(this.props.currentWindow, {
        defaultPath: this.props.buffer.getText(),
        properties: ['openDirectory', 'createDirectory', 'promptToCreate']
      });
      if (filePaths.length) {
        this.props.buffer.setText(filePaths[0]);
      }
    });
  }
  render() {
    return _react.default.createElement("div", {
      className: "github-Dialog-row"
    }, _react.default.createElement(_tabbable.TabbableTextEditor, {
      tabGroup: this.props.tabGroup,
      commands: this.props.commands,
      className: "github-DirectorySelect-destinationPath",
      mini: true,
      readOnly: this.props.disabled,
      buffer: this.props.buffer
    }), _react.default.createElement(_tabbable.TabbableButton, {
      tabGroup: this.props.tabGroup,
      commands: this.props.commands,
      className: "btn icon icon-file-directory github-Dialog-rightBumper",
      disabled: this.props.disabled,
      onClick: this.chooseDirectory
    }));
  }
}
exports.default = DirectorySelect;
_defineProperty(DirectorySelect, "propTypes", {
  buffer: _propTypes.default.object.isRequired,
  disabled: _propTypes.default.bool,
  showOpenDialog: _propTypes.default.func,
  tabGroup: _propTypes.default.object.isRequired,
  // Atom environment
  currentWindow: _propTypes.default.object.isRequired,
  commands: _propTypes.default.object.isRequired
});
_defineProperty(DirectorySelect, "defaultProps", {
  disabled: false,
  showOpenDialog: /* istanbul ignore next */(...args) => dialog.showOpenDialog(...args)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfZWxlY3Ryb24iLCJfdGFiYmFibGUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9kZWZpbmVQcm9wZXJ0eSIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInQiLCJpIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiciIsImUiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJkaWFsb2ciLCJyZW1vdGUiLCJEaXJlY3RvcnlTZWxlY3QiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiYXJncyIsImZpbGVQYXRocyIsInByb3BzIiwic2hvd09wZW5EaWFsb2ciLCJjdXJyZW50V2luZG93IiwiZGVmYXVsdFBhdGgiLCJidWZmZXIiLCJnZXRUZXh0IiwicHJvcGVydGllcyIsImxlbmd0aCIsInNldFRleHQiLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiVGFiYmFibGVUZXh0RWRpdG9yIiwidGFiR3JvdXAiLCJjb21tYW5kcyIsIm1pbmkiLCJyZWFkT25seSIsImRpc2FibGVkIiwiVGFiYmFibGVCdXR0b24iLCJvbkNsaWNrIiwiY2hvb3NlRGlyZWN0b3J5IiwiZXhwb3J0cyIsIlByb3BUeXBlcyIsIm9iamVjdCIsImlzUmVxdWlyZWQiLCJib29sIiwiZnVuYyJdLCJzb3VyY2VzIjpbImRpcmVjdG9yeS1zZWxlY3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge3JlbW90ZX0gZnJvbSAnZWxlY3Ryb24nO1xuXG5pbXBvcnQge1RhYmJhYmxlVGV4dEVkaXRvciwgVGFiYmFibGVCdXR0b259IGZyb20gJy4vdGFiYmFibGUnO1xuXG5jb25zdCB7ZGlhbG9nfSA9IHJlbW90ZTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGlyZWN0b3J5U2VsZWN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBidWZmZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd09wZW5EaWFsb2c6IFByb3BUeXBlcy5mdW5jLFxuICAgIHRhYkdyb3VwOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgICAvLyBBdG9tIGVudmlyb25tZW50XG4gICAgY3VycmVudFdpbmRvdzogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGNvbW1hbmRzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBzaG93T3BlbkRpYWxvZzogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gKC4uLmFyZ3MpID0+IGRpYWxvZy5zaG93T3BlbkRpYWxvZyguLi5hcmdzKSxcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJnaXRodWItRGlhbG9nLXJvd1wiPlxuICAgICAgICA8VGFiYmFibGVUZXh0RWRpdG9yXG4gICAgICAgICAgdGFiR3JvdXA9e3RoaXMucHJvcHMudGFiR3JvdXB9XG4gICAgICAgICAgY29tbWFuZHM9e3RoaXMucHJvcHMuY29tbWFuZHN9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiZ2l0aHViLURpcmVjdG9yeVNlbGVjdC1kZXN0aW5hdGlvblBhdGhcIlxuICAgICAgICAgIG1pbmk9e3RydWV9XG4gICAgICAgICAgcmVhZE9ubHk9e3RoaXMucHJvcHMuZGlzYWJsZWR9XG4gICAgICAgICAgYnVmZmVyPXt0aGlzLnByb3BzLmJ1ZmZlcn1cbiAgICAgICAgLz5cbiAgICAgICAgPFRhYmJhYmxlQnV0dG9uXG4gICAgICAgICAgdGFiR3JvdXA9e3RoaXMucHJvcHMudGFiR3JvdXB9XG4gICAgICAgICAgY29tbWFuZHM9e3RoaXMucHJvcHMuY29tbWFuZHN9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGljb24gaWNvbi1maWxlLWRpcmVjdG9yeSBnaXRodWItRGlhbG9nLXJpZ2h0QnVtcGVyXCJcbiAgICAgICAgICBkaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZH1cbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLmNob29zZURpcmVjdG9yeX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICBjaG9vc2VEaXJlY3RvcnkgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qge2ZpbGVQYXRoc30gPSBhd2FpdCB0aGlzLnByb3BzLnNob3dPcGVuRGlhbG9nKHRoaXMucHJvcHMuY3VycmVudFdpbmRvdywge1xuICAgICAgZGVmYXVsdFBhdGg6IHRoaXMucHJvcHMuYnVmZmVyLmdldFRleHQoKSxcbiAgICAgIHByb3BlcnRpZXM6IFsnb3BlbkRpcmVjdG9yeScsICdjcmVhdGVEaXJlY3RvcnknLCAncHJvbXB0VG9DcmVhdGUnXSxcbiAgICB9KTtcbiAgICBpZiAoZmlsZVBhdGhzLmxlbmd0aCkge1xuICAgICAgdGhpcy5wcm9wcy5idWZmZXIuc2V0VGV4dChmaWxlUGF0aHNbMF0pO1xuICAgIH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxTQUFBLEdBQUFGLE9BQUE7QUFFQSxJQUFBRyxTQUFBLEdBQUFILE9BQUE7QUFBOEQsU0FBQUQs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