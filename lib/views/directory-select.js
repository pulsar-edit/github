"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _electron = require("electron");
var _tabbable = require("./tabbable");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const {
  dialog
} = _electron.remote;
class DirectorySelect extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "chooseDirectory", async () => {
      const {
        filePaths
      } = await this.props.showOpenDialog(this.props.currentWindow, {
        defaultPath: this.props.buffer.getText(),
        properties: ['openDirectory', 'createDirectory', 'promptToCreate']
      });
      if (filePaths.length) {
        this.props.buffer.setText(filePaths[0]);
      }
    });
  }
  render() {
    return _react.default.createElement("div", {
      className: "github-Dialog-row"
    }, _react.default.createElement(_tabbable.TabbableTextEditor, {
      tabGroup: this.props.tabGroup,
      commands: this.props.commands,
      className: "github-DirectorySelect-destinationPath",
      mini: true,
      readOnly: this.props.disabled,
      buffer: this.props.buffer
    }), _react.default.createElement(_tabbable.TabbableButton, {
      tabGroup: this.props.tabGroup,
      commands: this.props.commands,
      className: "btn icon icon-file-directory github-Dialog-rightBumper",
      disabled: this.props.disabled,
      onClick: this.chooseDirectory
    }));
  }
}
exports.default = DirectorySelect;
_defineProperty(DirectorySelect, "propTypes", {
  buffer: _propTypes.default.object.isRequired,
  disabled: _propTypes.default.bool,
  showOpenDialog: _propTypes.default.func,
  tabGroup: _propTypes.default.object.isRequired,
  // Atom environment
  currentWindow: _propTypes.default.object.isRequired,
  commands: _propTypes.default.object.isRequired
});
_defineProperty(DirectorySelect, "defaultProps", {
  disabled: false,
  showOpenDialog: /* istanbul ignore next */(...args) => dialog.showOpenDialog(...args)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfZWxlY3Ryb24iLCJfdGFiYmFibGUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9kZWZpbmVQcm9wZXJ0eSIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJkaWFsb2ciLCJyZW1vdGUiLCJEaXJlY3RvcnlTZWxlY3QiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiYXJncyIsImZpbGVQYXRocyIsInByb3BzIiwic2hvd09wZW5EaWFsb2ciLCJjdXJyZW50V2luZG93IiwiZGVmYXVsdFBhdGgiLCJidWZmZXIiLCJnZXRUZXh0IiwicHJvcGVydGllcyIsImxlbmd0aCIsInNldFRleHQiLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiVGFiYmFibGVUZXh0RWRpdG9yIiwidGFiR3JvdXAiLCJjb21tYW5kcyIsIm1pbmkiLCJyZWFkT25seSIsImRpc2FibGVkIiwiVGFiYmFibGVCdXR0b24iLCJvbkNsaWNrIiwiY2hvb3NlRGlyZWN0b3J5IiwiZXhwb3J0cyIsIlByb3BUeXBlcyIsIm9iamVjdCIsImlzUmVxdWlyZWQiLCJib29sIiwiZnVuYyJdLCJzb3VyY2VzIjpbImRpcmVjdG9yeS1zZWxlY3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge3JlbW90ZX0gZnJvbSAnZWxlY3Ryb24nO1xuXG5pbXBvcnQge1RhYmJhYmxlVGV4dEVkaXRvciwgVGFiYmFibGVCdXR0b259IGZyb20gJy4vdGFiYmFibGUnO1xuXG5jb25zdCB7ZGlhbG9nfSA9IHJlbW90ZTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGlyZWN0b3J5U2VsZWN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBidWZmZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd09wZW5EaWFsb2c6IFByb3BUeXBlcy5mdW5jLFxuICAgIHRhYkdyb3VwOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgICAvLyBBdG9tIGVudmlyb25tZW50XG4gICAgY3VycmVudFdpbmRvdzogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGNvbW1hbmRzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBzaG93T3BlbkRpYWxvZzogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gKC4uLmFyZ3MpID0+IGRpYWxvZy5zaG93T3BlbkRpYWxvZyguLi5hcmdzKSxcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJnaXRodWItRGlhbG9nLXJvd1wiPlxuICAgICAgICA8VGFiYmFibGVUZXh0RWRpdG9yXG4gICAgICAgICAgdGFiR3JvdXA9e3RoaXMucHJvcHMudGFiR3JvdXB9XG4gICAgICAgICAgY29tbWFuZHM9e3RoaXMucHJvcHMuY29tbWFuZHN9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiZ2l0aHViLURpcmVjdG9yeVNlbGVjdC1kZXN0aW5hdGlvblBhdGhcIlxuICAgICAgICAgIG1pbmk9e3RydWV9XG4gICAgICAgICAgcmVhZE9ubHk9e3RoaXMucHJvcHMuZGlzYWJsZWR9XG4gICAgICAgICAgYnVmZmVyPXt0aGlzLnByb3BzLmJ1ZmZlcn1cbiAgICAgICAgLz5cbiAgICAgICAgPFRhYmJhYmxlQnV0dG9uXG4gICAgICAgICAgdGFiR3JvdXA9e3RoaXMucHJvcHMudGFiR3JvdXB9XG4gICAgICAgICAgY29tbWFuZHM9e3RoaXMucHJvcHMuY29tbWFuZHN9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGljb24gaWNvbi1maWxlLWRpcmVjdG9yeSBnaXRodWItRGlhbG9nLXJpZ2h0QnVtcGVyXCJcbiAgICAgICAgICBkaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZH1cbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLmNob29zZURpcmVjdG9yeX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICBjaG9vc2VEaXJlY3RvcnkgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qge2ZpbGVQYXRoc30gPSBhd2FpdCB0aGlzLnByb3BzLnNob3dPcGVuRGlhbG9nKHRoaXMucHJvcHMuY3VycmVudFdpbmRvdywge1xuICAgICAgZGVmYXVsdFBhdGg6IHRoaXMucHJvcHMuYnVmZmVyLmdldFRleHQoKSxcbiAgICAgIHByb3BlcnRpZXM6IFsnb3BlbkRpcmVjdG9yeScsICdjcmVhdGVEaXJlY3RvcnknLCAncHJvbXB0VG9DcmVhdGUnXSxcbiAgICB9KTtcbiAgICBpZiAoZmlsZVBhdGhzLmxlbmd0aCkge1xuICAgICAgdGhpcy5wcm9wcy5idWZmZXIuc2V0VGV4dChmaWxlUGF0aHNbMF0pO1xuICAgIH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxTQUFBLEdBQUFGLE9BQUE7QUFFQSxJQUFB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