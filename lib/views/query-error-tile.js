"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _octicon = _interopRequireDefault(require("../atom/octicon"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class QueryErrorTile extends _react.default.Component {
  componentDidMount() {
    // eslint-disable-next-line no-console
    console.error('Error encountered in subquery', this.props.error);
  }
  render() {
    return _react.default.createElement("div", {
      className: "github-QueryErrorTile"
    }, _react.default.createElement("div", {
      className: "github-QueryErrorTile-messages"
    }, this.renderMessages()));
  }
  renderMessages() {
    if (this.props.error.errors) {
      return this.props.error.errors.map((error, index) => {
        return this.renderMessage(error.message, index, 'alert');
      });
    }
    if (this.props.error.response) {
      return this.renderMessage(this.props.error.responseText, '0', 'alert');
    }
    if (this.props.error.network) {
      return this.renderMessage('Offline', '0', 'alignment-unalign');
    }
    return this.renderMessage(this.props.error.toString(), '0', 'alert');
  }
  renderMessage(body, key, icon) {
    return _react.default.createElement("p", {
      key: key,
      className: "github-QueryErrorTile-message"
    }, _react.default.createElement(_octicon.default, {
      icon: icon
    }), body);
  }
}
exports.default = QueryErrorTile;
_defineProperty(QueryErrorTile, "propTypes", {
  error: _propTypes.default.shape({
    response: _propTypes.default.shape({
      status: _propTypes.default.number.isRequired
    }),
    responseText: _propTypes.default.string,
    network: _propTypes.default.bool,
    errors: _propTypes.default.arrayOf(_propTypes.default.shape({
      message: _propTypes.default.string.isRequired
    }))
  }).isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfb2N0aWNvbiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2RlZmluZVByb3BlcnR5Iiwia2V5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiYXJnIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiY2FsbCIsIlR5cGVFcnJvciIsIk51bWJlciIsIlF1ZXJ5RXJyb3JUaWxlIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb21wb25lbnREaWRNb3VudCIsImNvbnNvbGUiLCJlcnJvciIsInByb3BzIiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInJlbmRlck1lc3NhZ2VzIiwiZXJyb3JzIiwibWFwIiwiaW5kZXgiLCJyZW5kZXJNZXNzYWdlIiwibWVzc2FnZSIsInJlc3BvbnNlIiwicmVzcG9uc2VUZXh0IiwibmV0d29yayIsInRvU3RyaW5nIiwiYm9keSIsImljb24iLCJleHBvcnRzIiwiUHJvcFR5cGVzIiwic2hhcGUiLCJzdGF0dXMiLCJudW1iZXIiLCJpc1JlcXVpcmVkIiwic3RyaW5nIiwiYm9vbCIsImFycmF5T2YiXSwic291cmNlcyI6WyJxdWVyeS1lcnJvci10aWxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgT2N0aWNvbiBmcm9tICcuLi9hdG9tL29jdGljb24nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBRdWVyeUVycm9yVGlsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZXJyb3I6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICByZXNwb25zZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgc3RhdHVzOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgICB9KSxcbiAgICAgIHJlc3BvbnNlVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIG5ldHdvcms6IFByb3BUeXBlcy5ib29sLFxuICAgICAgZXJyb3JzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICBtZXNzYWdlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICB9KSksXG4gICAgfSkuaXNSZXF1aXJlZCxcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZW5jb3VudGVyZWQgaW4gc3VicXVlcnknLCB0aGlzLnByb3BzLmVycm9yKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJnaXRodWItUXVlcnlFcnJvclRpbGVcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnaXRodWItUXVlcnlFcnJvclRpbGUtbWVzc2FnZXNcIj5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJNZXNzYWdlcygpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXJNZXNzYWdlcygpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5lcnJvci5lcnJvcnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmVycm9yLmVycm9ycy5tYXAoKGVycm9yLCBpbmRleCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJNZXNzYWdlKGVycm9yLm1lc3NhZ2UsIGluZGV4LCAnYWxlcnQnKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmVycm9yLnJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJNZXNzYWdlKHRoaXMucHJvcHMuZXJyb3IucmVzcG9uc2VUZXh0LCAnMCcsICdhbGVydCcpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmVycm9yLm5ldHdvcmspIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlck1lc3NhZ2UoJ09mZmxpbmUnLCAnMCcsICdhbGlnbm1lbnQtdW5hbGlnbicpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlbmRlck1lc3NhZ2UodGhpcy5wcm9wcy5lcnJvci50b1N0cmluZygpLCAnMCcsICdhbGVydCcpO1xuICB9XG5cbiAgcmVuZGVyTWVzc2FnZShib2R5LCBrZXksIGljb24pIHtcbiAgICByZXR1cm4gKFxuICAgICAgPHAga2V5PXtrZXl9IGNsYXNzTmFtZT1cImdpdGh1Yi1RdWVyeUVycm9yVGlsZS1tZXNzYWdlXCI+XG4gICAgICAgIDxPY3RpY29uIGljb249e2ljb259IC8+XG4gICAgICAgIHtib2R5fVxuICAgICAgPC9wPlxuICAgICk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUUsUUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQXNDLFNBQUFELHVCQUFBSSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBQUEsU0FBQUcsZ0JBQUFILEdBQUEsRUFBQUksR0FBQSxFQUFBQyxLQUFBLElBQUFELEdBQUEsR0FBQUUsY0FBQSxDQUFBRixHQUFBLE9BQUFBLEdBQUEsSUFBQUosR0FBQSxJQUFBTyxNQUFBLENBQUFD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