"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _modelObserver = _interopRequireDefault(require("../models/model-observer"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class ObserveModel extends _react.default.Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty(this, "fetchData", model => this.props.fetchData(model, ...this.props.fetchParams));
    _defineProperty(this, "didUpdate", () => {
      if (this.mounted) {
        const data = this.modelObserver.getActiveModelData();
        this.setState({
          data
        });
      }
    });
    this.state = {
      data: null
    };
    this.modelObserver = new _modelObserver.default({
      fetchData: this.fetchData,
      didUpdate: this.didUpdate
    });
  }
  componentDidMount() {
    this.mounted = true;
    this.modelObserver.setActiveModel(this.props.model);
  }
  componentDidUpdate(prevProps) {
    this.modelObserver.setActiveModel(this.props.model);
    if (!this.modelObserver.hasPendingUpdate() && prevProps.fetchParams.length !== this.props.fetchParams.length || prevProps.fetchParams.some((prevParam, i) => prevParam !== this.props.fetchParams[i])) {
      this.modelObserver.refreshModelData();
    }
  }
  render() {
    return this.props.children(this.state.data);
  }
  componentWillUnmount() {
    this.mounted = false;
    this.modelObserver.destroy();
  }
}
exports.default = ObserveModel;
_defineProperty(ObserveModel, "propTypes", {
  model: _propTypes.default.shape({
    onDidUpdate: _propTypes.default.func.isRequired
  }),
  fetchData: _propTypes.default.func.isRequired,
  fetchParams: _propTypes.default.arrayOf(_propTypes.default.any),
  children: _propTypes.default.func.isRequired
});
_defineProperty(ObserveModel, "defaultProps", {
  fetchParams: []
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfbW9kZWxPYnNlcnZlciIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2RlZmluZVByb3BlcnR5Iiwia2V5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidCIsImkiLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJyIiwiZSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwiY2FsbCIsIlR5cGVFcnJvciIsIk51bWJlciIsIk9ic2VydmVNb2RlbCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsImNvbnRleHQiLCJtb2RlbCIsImZldGNoRGF0YSIsImZldGNoUGFyYW1zIiwibW91bnRlZCIsImRhdGEiLCJtb2RlbE9ic2VydmVyIiwiZ2V0QWN0aXZlTW9kZWxEYXRhIiwic2V0U3RhdGUiLCJzdGF0ZSIsIk1vZGVsT2JzZXJ2ZXIiLCJkaWRVcGRhdGUiLCJjb21wb25lbnREaWRNb3VudCIsInNldEFjdGl2ZU1vZGVsIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwiaGFzUGVuZGluZ1VwZGF0ZSIsImxlbmd0aCIsInNvbWUiLCJwcmV2UGFyYW0iLCJyZWZyZXNoTW9kZWxEYXRhIiwicmVuZGVyIiwiY2hpbGRyZW4iLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImRlc3Ryb3kiLCJleHBvcnRzIiwiUHJvcFR5cGVzIiwic2hhcGUiLCJvbkRpZFVwZGF0ZSIsImZ1bmMiLCJpc1JlcXVpcmVkIiwiYXJyYXlPZiIsImFueSJdLCJzb3VyY2VzIjpbIm9ic2VydmUtbW9kZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCBNb2RlbE9ic2VydmVyIGZyb20gJy4uL21vZGVscy9tb2RlbC1vYnNlcnZlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9ic2VydmVNb2RlbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgbW9kZWw6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBvbkRpZFVwZGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB9KSxcbiAgICBmZXRjaERhdGE6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZmV0Y2hQYXJhbXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5hbnkpLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBmZXRjaFBhcmFtczogW10sXG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm9wcywgY29udGV4dCkge1xuICAgIHN1cGVyKHByb3BzLCBjb250ZXh0KTtcblxuICAgIHRoaXMuc3RhdGUgPSB7ZGF0YTogbnVsbH07XG4gICAgdGhpcy5tb2RlbE9ic2VydmVyID0gbmV3IE1vZGVsT2JzZXJ2ZXIoe2ZldGNoRGF0YTogdGhpcy5mZXRjaERhdGEsIGRpZFVwZGF0ZTogdGhpcy5kaWRVcGRhdGV9KTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgdGhpcy5tb2RlbE9ic2VydmVyLnNldEFjdGl2ZU1vZGVsKHRoaXMucHJvcHMubW9kZWwpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHRoaXMubW9kZWxPYnNlcnZlci5zZXRBY3RpdmVNb2RlbCh0aGlzLnByb3BzLm1vZGVsKTtcblxuICAgIGlmIChcbiAgICAgICF0aGlzLm1vZGVsT2JzZXJ2ZXIuaGFzUGVuZGluZ1VwZGF0ZSgpICYmXG4gICAgICBwcmV2UHJvcHMuZmV0Y2hQYXJhbXMubGVuZ3RoICE9PSB0aGlzLnByb3BzLmZldGNoUGFyYW1zLmxlbmd0aCB8fFxuICAgICAgcHJldlByb3BzLmZldGNoUGFyYW1zLnNvbWUoKHByZXZQYXJhbSwgaSkgPT4gcHJldlBhcmFtICE9PSB0aGlzLnByb3BzLmZldGNoUGFyYW1zW2ldKVxuICAgICkge1xuICAgICAgdGhpcy5tb2RlbE9ic2VydmVyLnJlZnJlc2hNb2RlbERhdGEoKTtcbiAgICB9XG4gIH1cblxuICBmZXRjaERhdGEgPSBtb2RlbCA9PiB0aGlzLnByb3BzLmZldGNoRGF0YShtb2RlbCwgLi4udGhpcy5wcm9wcy5mZXRjaFBhcmFtcyk7XG5cbiAgZGlkVXBkYXRlID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLm1vdW50ZWQpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLm1vZGVsT2JzZXJ2ZXIuZ2V0QWN0aXZlTW9kZWxEYXRhKCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHtkYXRhfSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuKHRoaXMuc3RhdGUuZGF0YSk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgICB0aGlzLm1vZGVsT2JzZXJ2ZXIuZGVzdHJveSgpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFFLGNBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUFxRCxTQUFBRCx1QkFBQUksR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUFBLFNBQUFHLGdC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