"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _modelObserver = _interopRequireDefault(require("../models/model-observer"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ObserveModel extends _react.default.Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty(this, "fetchData", model => this.props.fetchData(model, ...this.props.fetchParams));
    _defineProperty(this, "didUpdate", () => {
      if (this.mounted) {
        const data = this.modelObserver.getActiveModelData();
        this.setState({
          data
        });
      }
    });
    this.state = {
      data: null
    };
    this.modelObserver = new _modelObserver.default({
      fetchData: this.fetchData,
      didUpdate: this.didUpdate
    });
  }
  componentDidMount() {
    this.mounted = true;
    this.modelObserver.setActiveModel(this.props.model);
  }
  componentDidUpdate(prevProps) {
    this.modelObserver.setActiveModel(this.props.model);
    if (!this.modelObserver.hasPendingUpdate() && prevProps.fetchParams.length !== this.props.fetchParams.length || prevProps.fetchParams.some((prevParam, i) => prevParam !== this.props.fetchParams[i])) {
      this.modelObserver.refreshModelData();
    }
  }
  render() {
    return this.props.children(this.state.data);
  }
  componentWillUnmount() {
    this.mounted = false;
    this.modelObserver.destroy();
  }
}
exports.default = ObserveModel;
_defineProperty(ObserveModel, "propTypes", {
  model: _propTypes.default.shape({
    onDidUpdate: _propTypes.default.func.isRequired
  }),
  fetchData: _propTypes.default.func.isRequired,
  fetchParams: _propTypes.default.arrayOf(_propTypes.default.any),
  children: _propTypes.default.func.isRequired
});
_defineProperty(ObserveModel, "defaultProps", {
  fetchParams: []
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfbW9kZWxPYnNlcnZlciIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2RlZmluZVByb3BlcnR5Iiwia2V5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiYXJnIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiY2FsbCIsIlR5cGVFcnJvciIsIk51bWJlciIsIk9ic2VydmVNb2RlbCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsImNvbnRleHQiLCJtb2RlbCIsImZldGNoRGF0YSIsImZldGNoUGFyYW1zIiwibW91bnRlZCIsImRhdGEiLCJtb2RlbE9ic2VydmVyIiwiZ2V0QWN0aXZlTW9kZWxEYXRhIiwic2V0U3RhdGUiLCJzdGF0ZSIsIk1vZGVsT2JzZXJ2ZXIiLCJkaWRVcGRhdGUiLCJjb21wb25lbnREaWRNb3VudCIsInNldEFjdGl2ZU1vZGVsIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwiaGFzUGVuZGluZ1VwZGF0ZSIsImxlbmd0aCIsInNvbWUiLCJwcmV2UGFyYW0iLCJpIiwicmVmcmVzaE1vZGVsRGF0YSIsInJlbmRlciIsImNoaWxkcmVuIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJkZXN0cm95IiwiZXhwb3J0cyIsIlByb3BUeXBlcyIsInNoYXBlIiwib25EaWRVcGRhdGUiLCJmdW5jIiwiaXNSZXF1aXJlZCIsImFycmF5T2YiLCJhbnkiXSwic291cmNlcyI6WyJvYnNlcnZlLW1vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgTW9kZWxPYnNlcnZlciBmcm9tICcuLi9tb2RlbHMvbW9kZWwtb2JzZXJ2ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPYnNlcnZlTW9kZWwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG1vZGVsOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgb25EaWRVcGRhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgfSksXG4gICAgZmV0Y2hEYXRhOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGZldGNoUGFyYW1zOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuYW55KSxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgZmV0Y2hQYXJhbXM6IFtdLFxuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMsIGNvbnRleHQpIHtcbiAgICBzdXBlcihwcm9wcywgY29udGV4dCk7XG5cbiAgICB0aGlzLnN0YXRlID0ge2RhdGE6IG51bGx9O1xuICAgIHRoaXMubW9kZWxPYnNlcnZlciA9IG5ldyBNb2RlbE9ic2VydmVyKHtmZXRjaERhdGE6IHRoaXMuZmV0Y2hEYXRhLCBkaWRVcGRhdGU6IHRoaXMuZGlkVXBkYXRlfSk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuICAgIHRoaXMubW9kZWxPYnNlcnZlci5zZXRBY3RpdmVNb2RlbCh0aGlzLnByb3BzLm1vZGVsKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB0aGlzLm1vZGVsT2JzZXJ2ZXIuc2V0QWN0aXZlTW9kZWwodGhpcy5wcm9wcy5tb2RlbCk7XG5cbiAgICBpZiAoXG4gICAgICAhdGhpcy5tb2RlbE9ic2VydmVyLmhhc1BlbmRpbmdVcGRhdGUoKSAmJlxuICAgICAgcHJldlByb3BzLmZldGNoUGFyYW1zLmxlbmd0aCAhPT0gdGhpcy5wcm9wcy5mZXRjaFBhcmFtcy5sZW5ndGggfHxcbiAgICAgIHByZXZQcm9wcy5mZXRjaFBhcmFtcy5zb21lKChwcmV2UGFyYW0sIGkpID0+IHByZXZQYXJhbSAhPT0gdGhpcy5wcm9wcy5mZXRjaFBhcmFtc1tpXSlcbiAgICApIHtcbiAgICAgIHRoaXMubW9kZWxPYnNlcnZlci5yZWZyZXNoTW9kZWxEYXRhKCk7XG4gICAgfVxuICB9XG5cbiAgZmV0Y2hEYXRhID0gbW9kZWwgPT4gdGhpcy5wcm9wcy5mZXRjaERhdGEobW9kZWwsIC4uLnRoaXMucHJvcHMuZmV0Y2hQYXJhbXMpO1xuXG4gIGRpZFVwZGF0ZSA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5tb3VudGVkKSB7XG4gICAgICBjb25zdCBkYXRhID0gdGhpcy5tb2RlbE9ic2VydmVyLmdldEFjdGl2ZU1vZGVsRGF0YSgpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7ZGF0YX0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbih0aGlzLnN0YXRlLmRhdGEpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gICAgdGhpcy5tb2RlbE9ic2VydmVyLmRlc3Ryb3koKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRSxjQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBcUQsU0FBQUQsdUJBQUFJLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxL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