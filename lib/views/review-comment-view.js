"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _refHolder = _interopRequireDefault(require("../models/ref-holder"));
var _timeago = _interopRequireDefault(require("./timeago"));
var _octicon = _interopRequireDefault(require("../atom/octicon"));
var _githubDotcomMarkdown = _interopRequireDefault(require("./github-dotcom-markdown"));
var _emojiReactionsController = _interopRequireDefault(require("../controllers/emoji-reactions-controller"));
var _helpers = require("../helpers");
var _actionableReviewView = _interopRequireDefault(require("./actionable-review-view"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class ReviewCommentView extends _react.default.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "renderComment", showActionsMenu => {
      const comment = this.props.comment;
      if (comment.isMinimized) {
        return _react.default.createElement("div", {
          className: "github-Review-comment github-Review-comment--hidden",
          key: comment.id
        }, _react.default.createElement(_octicon.default, {
          icon: 'fold',
          className: "github-Review-icon"
        }), _react.default.createElement("em", null, "This comment was hidden"));
      }
      const commentClass = (0, _classnames.default)('github-Review-comment', {
        'github-Review-comment--pending': comment.state === 'PENDING'
      });
      const author = comment.author || _helpers.GHOST_USER;
      return _react.default.createElement("div", {
        className: commentClass
      }, _react.default.createElement("header", {
        className: "github-Review-header"
      }, _react.default.createElement("div", {
        className: "github-Review-header-authorData"
      }, _react.default.createElement("img", {
        className: "github-Review-avatar",
        src: author.avatarUrl,
        alt: author.login
      }), _react.default.createElement("a", {
        className: "github-Review-username",
        href: author.url
      }, author.login), _react.default.createElement("a", {
        className: "github-Review-timeAgo",
        href: comment.url
      }, _react.default.createElement(_timeago.default, {
        displayStyle: "long",
        time: comment.createdAt
      })), this.props.renderEditedLink(comment), this.props.renderAuthorAssociation(comment), comment.state === 'PENDING' && _react.default.createElement("span", {
        className: "github-Review-pendingBadge badge badge-warning"
      }, "pending")), _react.default.createElement(_octicon.default, {
        icon: "ellipses",
        className: "github-Review-actionsMenu",
        onClick: event => showActionsMenu(event, comment, author)
      })), _react.default.createElement("div", {
        className: "github-Review-text"
      }, _react.default.createElement(_githubDotcomMarkdown.default, {
        html: comment.bodyHTML,
        switchToIssueish: this.props.openIssueish,
        openIssueishLinkInNewTab: this.props.openIssueishLinkInNewTab
      }), _react.default.createElement(_emojiReactionsController.default, {
        reactable: comment,
        tooltips: this.props.tooltips,
        reportRelayError: this.props.reportRelayError
      })));
    });
    this.refEditor = new _refHolder.default();
  }
  render() {
    return _react.default.createElement(_actionableReviewView.default, {
      originalContent: this.props.comment,
      isPosting: this.props.isPosting,
      confirm: this.props.confirm,
      commands: this.props.commands,
      contentUpdater: this.props.updateComment,
      render: this.renderComment
    });
  }
}
exports.default = ReviewCommentView;
_defineProperty(ReviewCommentView, "propTypes", {
  // Model
  comment: _propTypes.default.object.isRequired,
  isPosting: _propTypes.default.bool.isRequired,
  // Atom environment
  confirm: _propTypes.default.func.isRequired,
  tooltips: _propTypes.default.object.isRequired,
  commands: _propTypes.default.object.isRequired,
  // Render props
  renderEditedLink: _propTypes.default.func.isRequired,
  renderAuthorAssociation: _propTypes.default.func.isRequired,
  // Action methods
  openIssueish: _propTypes.default.func.isRequired,
  openIssueishLinkInNewTab: _propTypes.default.func.isRequired,
  updateComment: _propTypes.default.func.isRequired,
  reportRelayError: _propTypes.default.func.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfY2xhc3NuYW1lcyIsIl9yZWZIb2xkZXIiLCJfdGltZWFnbyIsIl9vY3RpY29uIiwiX2dpdGh1YkRvdGNvbU1hcmtkb3duIiwiX2Vtb2ppUmVhY3Rpb25zQ29udHJvbGxlciIsIl9oZWxwZXJzIiwiX2FjdGlvbmFibGVSZXZpZXdWaWV3Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ0IiwiaSIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsInIiLCJlIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiUmV2aWV3Q29tbWVudFZpZXciLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzaG93QWN0aW9uc01lbnUiLCJjb21tZW50IiwiaXNNaW5pbWl6ZWQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiaWQiLCJpY29uIiwiY29tbWVudENsYXNzIiwiY3giLCJzdGF0ZSIsImF1dGhvciIsIkdIT1NUX1VTRVIiLCJzcmMiLCJhdmF0YXJVcmwiLCJhbHQiLCJsb2dpbiIsImhyZWYiLCJ1cmwiLCJkaXNwbGF5U3R5bGUiLCJ0aW1lIiwiY3JlYXRlZEF0IiwicmVuZGVyRWRpdGVkTGluayIsInJlbmRlckF1dGhvckFzc29jaWF0aW9uIiwib25DbGljayIsImV2ZW50IiwiaHRtbCIsImJvZHlIVE1MIiwic3dpdGNoVG9Jc3N1ZWlzaCIsIm9wZW5Jc3N1ZWlzaCIsIm9wZW5Jc3N1ZWlzaExpbmtJbk5ld1RhYiIsInJlYWN0YWJsZSIsInRvb2x0aXBzIiwicmVwb3J0UmVsYXlFcnJvciIsInJlZkVkaXRvciIsIlJlZkhvbGRlciIsInJlbmRlciIsIm9yaWdpbmFsQ29udGVudCIsImlzUG9zdGluZyIsImNvbmZpcm0iLCJjb21tYW5kcyIsImNvbnRlbnRVcGRhdGVyIiwidXBkYXRlQ29tbWVudCIsInJlbmRlckNvbW1lbnQiLCJleHBvcnRzIiwiUHJvcFR5cGVzIiwib2JqZWN0IiwiaXNSZXF1aXJlZCIsImJvb2wiLCJmdW5jIl0sInNvdXJjZXMiOlsicmV2aWV3LWNvbW1lbnQtdmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IFJlZkhvbGRlciBmcm9tICcuLi9tb2RlbHMvcmVmLWhvbGRlcic7XG5pbXBvcnQgVGltZWFnbyBmcm9tICcuL3RpbWVhZ28nO1xuaW1wb3J0IE9jdGljb24gZnJvbSAnLi4vYXRvbS9vY3RpY29uJztcbmltcG9ydCBHaXRodWJEb3Rjb21NYXJrZG93biBmcm9tICcuL2dpdGh1Yi1kb3Rjb20tbWFya2Rvd24nO1xuaW1wb3J0IEVtb2ppUmVhY3Rpb25zQ29udHJvbGxlciBmcm9tICcuLi9jb250cm9sbGVycy9lbW9qaS1yZWFjdGlvbnMtY29udHJvbGxlcic7XG5pbXBvcnQge0dIT1NUX1VTRVJ9IGZyb20gJy4uL2hlbHBlcnMnO1xuaW1wb3J0IEFjdGlvbmFibGVSZXZpZXdWaWV3IGZyb20gJy4vYWN0aW9uYWJsZS1yZXZpZXctdmlldyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJldmlld0NvbW1lbnRWaWV3IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAvLyBNb2RlbFxuICAgIGNvbW1lbnQ6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBpc1Bvc3Rpbmc6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgICAvLyBBdG9tIGVudmlyb25tZW50XG4gICAgY29uZmlybTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB0b29sdGlwczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGNvbW1hbmRzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgICAvLyBSZW5kZXIgcHJvcHNcbiAgICByZW5kZXJFZGl0ZWRMaW5rOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHJlbmRlckF1dGhvckFzc29jaWF0aW9uOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gICAgLy8gQWN0aW9uIG1ldGhvZHNcbiAgICBvcGVuSXNzdWVpc2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb3Blbklzc3VlaXNoTGlua0luTmV3VGFiOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHVwZGF0ZUNvbW1lbnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgcmVwb3J0UmVsYXlFcnJvcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMucmVmRWRpdG9yID0gbmV3IFJlZkhvbGRlcigpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8QWN0aW9uYWJsZVJldmlld1ZpZXdcbiAgICAgICAgb3JpZ2luYWxDb250ZW50PXt0aGlzLnByb3BzLmNvbW1lbnR9XG4gICAgICAgIGlzUG9zdGluZz17dGhpcy5wcm9wcy5pc1Bvc3Rpbmd9XG4gICAgICAgIGNvbmZpcm09e3RoaXMucHJvcHMuY29uZmlybX1cbiAgICAgICAgY29tbWFuZHM9e3RoaXMucHJvcHMuY29tbWFuZHN9XG4gICAgICAgIGNvbnRlbnRVcGRhdGVyPXt0aGlzLnByb3BzLnVwZGF0ZUNvbW1lbnR9XG4gICAgICAgIHJlbmRlcj17dGhpcy5yZW5kZXJDb21tZW50fVxuICAgICAgLz4pO1xuICB9XG5cbiAgcmVuZGVyQ29tbWVudCA9IHNob3dBY3Rpb25zTWVudSA9PiB7XG4gICAgY29uc3QgY29tbWVudCA9IHRoaXMucHJvcHMuY29tbWVudDtcblxuICAgIGlmIChjb21tZW50LmlzTWluaW1pemVkKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdpdGh1Yi1SZXZpZXctY29tbWVudCBnaXRodWItUmV2aWV3LWNvbW1lbnQtLWhpZGRlblwiIGtleT17Y29tbWVudC5pZH0+XG4gICAgICAgICAgPE9jdGljb24gaWNvbj17J2ZvbGQnfSBjbGFzc05hbWU9XCJnaXRodWItUmV2aWV3LWljb25cIiAvPlxuICAgICAgICAgIDxlbT5UaGlzIGNvbW1lbnQgd2FzIGhpZGRlbjwvZW0+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBjb21tZW50Q2xhc3MgPSBjeCgnZ2l0aHViLVJldmlldy1jb21tZW50JywgeydnaXRodWItUmV2aWV3LWNvbW1lbnQtLXBlbmRpbmcnOiBjb21tZW50LnN0YXRlID09PSAnUEVORElORyd9KTtcbiAgICBjb25zdCBhdXRob3IgPSBjb21tZW50LmF1dGhvciB8fCBHSE9TVF9VU0VSO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjb21tZW50Q2xhc3N9PlxuICAgICAgICA8aGVhZGVyIGNsYXNzTmFtZT1cImdpdGh1Yi1SZXZpZXctaGVhZGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnaXRodWItUmV2aWV3LWhlYWRlci1hdXRob3JEYXRhXCI+XG4gICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImdpdGh1Yi1SZXZpZXctYXZhdGFyXCJcbiAgICAgICAgICAgICAgc3JjPXthdXRob3IuYXZhdGFyVXJsfSBhbHQ9e2F1dGhvci5sb2dpbn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJnaXRodWItUmV2aWV3LXVzZXJuYW1lXCIgaHJlZj17YXV0aG9yLnVybH0+XG4gICAgICAgICAgICAgIHthdXRob3IubG9naW59XG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJnaXRodWItUmV2aWV3LXRpbWVBZ29cIiBocmVmPXtjb21tZW50LnVybH0+XG4gICAgICAgICAgICAgIDxUaW1lYWdvIGRpc3BsYXlTdHlsZT1cImxvbmdcIiB0aW1lPXtjb21tZW50LmNyZWF0ZWRBdH0gLz5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIHt0aGlzLnByb3BzLnJlbmRlckVkaXRlZExpbmsoY29tbWVudCl9XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5yZW5kZXJBdXRob3JBc3NvY2lhdGlvbihjb21tZW50KX1cbiAgICAgICAgICAgIHtjb21tZW50LnN0YXRlID09PSAnUEVORElORycgJiYgKFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnaXRodWItUmV2aWV3LXBlbmRpbmdCYWRnZSBiYWRnZSBiYWRnZS13YXJuaW5nXCI+cGVuZGluZzwvc3Bhbj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPE9jdGljb25cbiAgICAgICAgICAgIGljb249XCJlbGxpcHNlc1wiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJnaXRodWItUmV2aWV3LWFjdGlvbnNNZW51XCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2V2ZW50ID0+IHNob3dBY3Rpb25zTWVudShldmVudCwgY29tbWVudCwgYXV0aG9yKX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2hlYWRlcj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnaXRodWItUmV2aWV3LXRleHRcIj5cbiAgICAgICAgICA8R2l0aHViRG90Y29tTWFya2Rvd25cbiAgICAgICAgICAgIGh0bWw9e2NvbW1lbnQuYm9keUhUTUx9XG4gICAgICAgICAgICBzd2l0Y2hUb0lzc3VlaXNoPXt0aGlzLnByb3BzLm9wZW5Jc3N1ZWlzaH1cbiAgICAgICAgICAgIG9wZW5Jc3N1ZWlzaExpbmtJbk5ld1RhYj17dGhpcy5wcm9wcy5vcGVuSXNzdWVpc2hMaW5rSW5OZXdUYWJ9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8RW1vamlSZWFjdGlvbnNDb250cm9sbGVyXG4gICAgICAgICAgICByZWFjdGFibGU9e2NvbW1lbnR9XG4gICAgICAgICAgICB0b29sdGlwcz17dGhpcy5wcm9wcy50b29sdGlwc31cbiAgICAgICAgICAgIHJlcG9ydFJlbGF5RXJyb3I9e3RoaXMucHJvcHMucmVwb3J0UmVsYXlFcnJvcn1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxXQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRyxVQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxRQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxRQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBTSxxQkFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU8seUJBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFRLFFBQUEsR0FBQVIsT0FBQTtBQUNBLElBQUFTLHFCQUFBLEdBQUFWLHNCQUFBLENBQUFDLE9BQUE7QUFBNEQsU0FBQUQsdUJBQUFXLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFBQSxTQUFBRyxnQkFBQUgsR0FBQSxFQUFBSSxHQUFB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