"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _propTypes2 = require("../prop-types");
var _accordion = _interopRequireDefault(require("./accordion"));
var _timeago = _interopRequireDefault(require("./timeago"));
var _statusDonutChart = _interopRequireDefault(require("./status-donut-chart"));
var _checkSuitesAccumulator = _interopRequireDefault(require("../containers/accumulators/check-suites-accumulator"));
var _queryErrorTile = _interopRequireDefault(require("./query-error-tile"));
var _octicon = _interopRequireDefault(require("../atom/octicon"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class IssueishListView extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "renderReviewsButton", () => {
      if (!this.props.needReviewsButton || this.props.issueishes.length < 1) {
        return null;
      }
      return _react.default.createElement("button", {
        className: "btn btn-primary btn-sm github-IssueishList-openReviewsButton",
        onClick: this.openReviews
      }, "See reviews");
    });
    _defineProperty(this, "openReviews", e => {
      e.stopPropagation();
      this.props.openReviews(this.props.issueishes[0]);
    });
    _defineProperty(this, "renderIssueish", issueish => {
      return _react.default.createElement(_checkSuitesAccumulator.default, {
        commit: issueish.getLatestCommit()
      }, ({
        runsBySuite
      }) => {
        issueish.setCheckRuns(runsBySuite);
        return _react.default.createElement(_react.Fragment, null, _react.default.createElement("img", {
          className: "github-IssueishList-item github-IssueishList-item--avatar",
          src: issueish.getAuthorAvatarURL(32),
          title: issueish.getAuthorLogin(),
          alt: issueish.getAuthorLogin()
        }), _react.default.createElement("span", {
          className: "github-IssueishList-item github-IssueishList-item--title"
        }, issueish.getTitle()), _react.default.createElement("span", {
          className: "github-IssueishList-item github-IssueishList-item--number"
        }, "#", issueish.getNumber()), this.renderStatusSummary(issueish.getStatusCounts()), _react.default.createElement(_timeago.default, {
          time: issueish.getCreatedAt(),
          displayStyle: "short",
          className: "github-IssueishList-item github-IssueishList-item--age"
        }), _react.default.createElement(_octicon.default, {
          icon: "ellipses",
          className: "github-IssueishList-item github-IssueishList-item--menu",
          onClick: event => this.showActionsMenu(event, issueish)
        }));
      });
    });
    _defineProperty(this, "renderLoadingTile", () => {
      return _react.default.createElement("div", {
        className: "github-IssueishList-loading"
      }, "Loading");
    });
    _defineProperty(this, "renderEmptyTile", () => {
      if (this.props.error) {
        return _react.default.createElement(_queryErrorTile.default, {
          error: this.props.error
        });
      }
      if (this.props.emptyComponent) {
        const EmptyComponent = this.props.emptyComponent;
        return _react.default.createElement(EmptyComponent, null);
      }
      return null;
    });
    _defineProperty(this, "renderMoreTile", () => {
      /* eslint-disable jsx-a11y/anchor-is-valid */
      if (this.props.onMoreClick) {
        return _react.default.createElement("div", {
          className: "github-IssueishList-more"
        }, _react.default.createElement("a", {
          onClick: this.props.onMoreClick
        }, "More..."));
      }
      return null;
    });
  }
  render() {
    return _react.default.createElement(_accordion.default, {
      leftTitle: this.props.title,
      isLoading: this.props.isLoading,
      results: this.props.issueishes,
      total: this.props.total,
      loadingComponent: this.renderLoadingTile,
      emptyComponent: this.renderEmptyTile,
      moreComponent: this.renderMoreTile,
      reviewsButton: this.renderReviewsButton,
      onClickItem: this.props.onIssueishClick
    }, this.renderIssueish);
  }
  showActionsMenu(event, issueish) {
    event.preventDefault();
    event.stopPropagation();
    this.props.showActionsMenu(issueish);
  }
  renderStatusSummary(statusCounts) {
    if (['success', 'failure', 'pending'].every(kind => statusCounts[kind] === 0)) {
      return _react.default.createElement(_octicon.default, {
        className: "github-IssueishList-item github-IssueishList-item--status",
        icon: "dash"
      });
    }
    if (statusCounts.success > 0 && statusCounts.failure === 0 && statusCounts.pending === 0) {
      return _react.default.createElement(_octicon.default, {
        className: "github-IssueishList-item github-IssueishList-item--status",
        icon: "check"
      });
    }
    if (statusCounts.success === 0 && statusCounts.failure > 0 && statusCounts.pending === 0) {
      return _react.default.createElement(_octicon.default, {
        className: "github-IssueishList-item github-IssueishList-item--status",
        icon: "x"
      });
    }
    return _react.default.createElement(_statusDonutChart.default, _extends({}, statusCounts, {
      className: "github-IssueishList-item github-IssueishList-item--status"
    }));
  }
}
exports.default = IssueishListView;
_defineProperty(IssueishListView, "propTypes", {
  title: _propTypes.default.string.isRequired,
  isLoading: _propTypes.default.bool.isRequired,
  total: _propTypes.default.number.isRequired,
  issueishes: _propTypes.default.arrayOf(_propTypes2.IssueishPropType).isRequired,
  repository: _propTypes.default.shape({
    defaultBranchRef: _propTypes.default.shape({
      prefix: _propTypes.default.string.isRequired,
      name: _propTypes.default.string.isRequired
    })
  }),
  needReviewsButton: _propTypes.default.bool,
  onIssueishClick: _propTypes.default.func.isRequired,
  onMoreClick: _propTypes.default.func,
  openReviews: _propTypes.default.func.isRequired,
  openOnGitHub: _propTypes.default.func.isRequired,
  showActionsMenu: _propTypes.default.func.isRequired,
  emptyComponent: _propTypes.default.func,
  error: _propTypes.default.object
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9wcm9wVHlwZXMyIiwiX2FjY29yZGlvbiIsIl90aW1lYWdvIiwiX3N0YXR1c0RvbnV0Q2hhcnQiLCJfY2hlY2tTdWl0ZXNBY2N1bXVsYXRvciIsIl9xdWVyeUVycm9yVGlsZSIsIl9vY3RpY29uIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsIl9kZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJJc3N1ZWlzaExpc3RWaWV3IiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsImFyZ3MiLCJwcm9wcyIsIm5lZWRSZXZpZXdzQnV0dG9uIiwiaXNzdWVpc2hlcyIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJvbkNsaWNrIiwib3BlblJldmlld3MiLCJlIiwic3RvcFByb3BhZ2F0aW9uIiwiaXNzdWVpc2giLCJjb21taXQiLCJnZXRMYXRlc3RDb21taXQiLCJydW5zQnlTdWl0ZSIsInNldENoZWNrUnVucyIsIkZyYWdtZW50Iiwic3JjIiwiZ2V0QXV0aG9yQXZhdGFyVVJMIiwidGl0bGUiLCJnZXRBdXRob3JMb2dpbiIsImFsdCIsImdldFRpdGxlIiwiZ2V0TnVtYmVyIiwicmVuZGVyU3RhdHVzU3VtbWFyeSIsImdldFN0YXR1c0NvdW50cyIsInRpbWUiLCJnZXRDcmVhdGVkQXQiLCJkaXNwbGF5U3R5bGUiLCJpY29uIiwiZXZlbnQiLCJzaG93QWN0aW9uc01lbnUiLCJlcnJvciIsImVtcHR5Q29tcG9uZW50IiwiRW1wdHlDb21wb25lbnQiLCJvbk1vcmVDbGljayIsInJlbmRlciIsImxlZnRUaXRsZSIsImlzTG9hZGluZyIsInJlc3VsdHMiLCJ0b3RhbCIsImxvYWRpbmdDb21wb25lbnQiLCJyZW5kZXJMb2FkaW5nVGlsZSIsInJlbmRlckVtcHR5VGlsZSIsIm1vcmVDb21wb25lbnQiLCJyZW5kZXJNb3JlVGlsZSIsInJldmlld3NCdXR0b24iLCJyZW5kZXJSZXZpZXdzQnV0dG9uIiwib25DbGlja0l0ZW0iLCJvbklzc3VlaXNoQ2xpY2siLCJyZW5kZXJJc3N1ZWlzaCIsInByZXZlbnREZWZhdWx0Iiwic3RhdHVzQ291bnRzIiwiZXZlcnkiLCJraW5kIiwic3VjY2VzcyIsImZhaWx1cmUiLCJwZW5kaW5nIiwiZXhwb3J0cyIsIlByb3BUeXBlcyIsInN0cmluZyIsImlzUmVxdWlyZWQiLCJib29sIiwibnVtYmVyIiwiYXJyYXlPZiIsIklzc3VlaXNoUHJvcFR5cGUiLCJyZXBvc2l0b3J5Iiwic2hhcGUiLCJkZWZhdWx0QnJhbmNoUmVmIiwicHJlZml4IiwibmFtZSIsImZ1bmMiLCJvcGVuT25HaXRIdWIiLCJvYmplY3QiXSwic291cmNlcyI6WyJpc3N1ZWlzaC1saXN0LXZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7RnJhZ21lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCB7SXNzdWVpc2hQcm9wVHlwZX0gZnJvbSAnLi4vcHJvcC10eXBlcyc7XG5pbXBvcnQgQWNjb3JkaW9uIGZyb20gJy4vYWNjb3JkaW9uJztcbmltcG9ydCBUaW1lYWdvIGZyb20gJy4vdGltZWFnbyc7XG5pbXBvcnQgU3RhdHVzRG9udXRDaGFydCBmcm9tICcuL3N0YXR1cy1kb251dC1jaGFydCc7XG5pbXBvcnQgQ2hlY2tTdWl0ZXNBY2N1bXVsYXRvciBmcm9tICcuLi9jb250YWluZXJzL2FjY3VtdWxhdG9ycy9jaGVjay1zdWl0ZXMtYWNjdW11bGF0b3InO1xuaW1wb3J0IFF1ZXJ5RXJyb3JUaWxlIGZyb20gJy4vcXVlcnktZXJyb3ItdGlsZSc7XG5pbXBvcnQgT2N0aWNvbiBmcm9tICcuLi9hdG9tL29jdGljb24nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJc3N1ZWlzaExpc3RWaWV3IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGlzTG9hZGluZzogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICB0b3RhbDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIGlzc3VlaXNoZXM6IFByb3BUeXBlcy5hcnJheU9mKElzc3VlaXNoUHJvcFR5cGUpLmlzUmVxdWlyZWQsXG5cbiAgICByZXBvc2l0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgZGVmYXVsdEJyYW5jaFJlZjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgcHJlZml4OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIH0pLFxuICAgIH0pLFxuXG4gICAgbmVlZFJldmlld3NCdXR0b246IFByb3BUeXBlcy5ib29sLFxuICAgIG9uSXNzdWVpc2hDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbk1vcmVDbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb3BlblJldmlld3M6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb3Blbk9uR2l0SHViOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNob3dBY3Rpb25zTWVudTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblxuICAgIGVtcHR5Q29tcG9uZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBlcnJvcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEFjY29yZGlvblxuICAgICAgICBsZWZ0VGl0bGU9e3RoaXMucHJvcHMudGl0bGV9XG4gICAgICAgIGlzTG9hZGluZz17dGhpcy5wcm9wcy5pc0xvYWRpbmd9XG4gICAgICAgIHJlc3VsdHM9e3RoaXMucHJvcHMuaXNzdWVpc2hlc31cbiAgICAgICAgdG90YWw9e3RoaXMucHJvcHMudG90YWx9XG4gICAgICAgIGxvYWRpbmdDb21wb25lbnQ9e3RoaXMucmVuZGVyTG9hZGluZ1RpbGV9XG4gICAgICAgIGVtcHR5Q29tcG9uZW50PXt0aGlzLnJlbmRlckVtcHR5VGlsZX1cbiAgICAgICAgbW9yZUNvbXBvbmVudD17dGhpcy5yZW5kZXJNb3JlVGlsZX1cbiAgICAgICAgcmV2aWV3c0J1dHRvbj17dGhpcy5yZW5kZXJSZXZpZXdzQnV0dG9ufVxuICAgICAgICBvbkNsaWNrSXRlbT17dGhpcy5wcm9wcy5vbklzc3VlaXNoQ2xpY2t9PlxuICAgICAgICB7dGhpcy5yZW5kZXJJc3N1ZWlzaH1cbiAgICAgIDwvQWNjb3JkaW9uPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJSZXZpZXdzQnV0dG9uID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy5wcm9wcy5uZWVkUmV2aWV3c0J1dHRvbiB8fCB0aGlzLnByb3BzLmlzc3VlaXNoZXMubGVuZ3RoIDwgMSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeSBidG4tc20gZ2l0aHViLUlzc3VlaXNoTGlzdC1vcGVuUmV2aWV3c0J1dHRvblwiXG4gICAgICAgIG9uQ2xpY2s9e3RoaXMub3BlblJldmlld3N9PlxuICAgICAgICBTZWUgcmV2aWV3c1xuICAgICAgPC9idXR0b24+XG4gICAgKTtcbiAgfVxuXG4gIG9wZW5SZXZpZXdzID0gZSA9PiB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLnByb3BzLm9wZW5SZXZpZXdzKHRoaXMucHJvcHMuaXNzdWVpc2hlc1swXSk7XG4gIH1cblxuICByZW5kZXJJc3N1ZWlzaCA9IGlzc3VlaXNoID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPENoZWNrU3VpdGVzQWNjdW11bGF0b3IgY29tbWl0PXtpc3N1ZWlzaC5nZXRMYXRlc3RDb21taXQoKX0+XG4gICAgICAgIHsoe3J1bnNCeVN1aXRlfSkgPT4ge1xuICAgICAgICAgIGlzc3VlaXNoLnNldENoZWNrUnVucyhydW5zQnlTdWl0ZSk7XG5cbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEZyYWdtZW50PlxuICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ2l0aHViLUlzc3VlaXNoTGlzdC1pdGVtIGdpdGh1Yi1Jc3N1ZWlzaExpc3QtaXRlbS0tYXZhdGFyXCJcbiAgICAgICAgICAgICAgICBzcmM9e2lzc3VlaXNoLmdldEF1dGhvckF2YXRhclVSTCgzMil9XG4gICAgICAgICAgICAgICAgdGl0bGU9e2lzc3VlaXNoLmdldEF1dGhvckxvZ2luKCl9XG4gICAgICAgICAgICAgICAgYWx0PXtpc3N1ZWlzaC5nZXRBdXRob3JMb2dpbigpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnaXRodWItSXNzdWVpc2hMaXN0LWl0ZW0gZ2l0aHViLUlzc3VlaXNoTGlzdC1pdGVtLS10aXRsZVwiPlxuICAgICAgICAgICAgICAgIHtpc3N1ZWlzaC5nZXRUaXRsZSgpfVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdpdGh1Yi1Jc3N1ZWlzaExpc3QtaXRlbSBnaXRodWItSXNzdWVpc2hMaXN0LWl0ZW0tLW51bWJlclwiPlxuICAgICAgICAgICAgICAgICN7aXNzdWVpc2guZ2V0TnVtYmVyKCl9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAge3RoaXMucmVuZGVyU3RhdHVzU3VtbWFyeShpc3N1ZWlzaC5nZXRTdGF0dXNDb3VudHMoKSl9XG4gICAgICAgICAgICAgIDxUaW1lYWdvXG4gICAgICAgICAgICAgICAgdGltZT17aXNzdWVpc2guZ2V0Q3JlYXRlZEF0KCl9XG4gICAgICAgICAgICAgICAgZGlzcGxheVN0eWxlPVwic2hvcnRcIlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImdpdGh1Yi1Jc3N1ZWlzaExpc3QtaXRlbSBnaXRodWItSXNzdWVpc2hMaXN0LWl0ZW0tLWFnZVwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxPY3RpY29uIGljb249XCJlbGxpcHNlc1wiXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ2l0aHViLUlzc3VlaXNoTGlzdC1pdGVtIGdpdGh1Yi1Jc3N1ZWlzaExpc3QtaXRlbS0tbWVudVwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17ZXZlbnQgPT4gdGhpcy5zaG93QWN0aW9uc01lbnUoZXZlbnQsIGlzc3VlaXNoKX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICAgICAgKTtcbiAgICAgICAgfX1cbiAgICAgIDwvQ2hlY2tTdWl0ZXNBY2N1bXVsYXRvcj5cbiAgICApO1xuICB9XG5cbiAgc2hvd0FjdGlvbnNNZW51KGV2ZW50LCBpc3N1ZWlzaCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICB0aGlzLnByb3BzLnNob3dBY3Rpb25zTWVudShpc3N1ZWlzaCk7XG4gIH1cblxuICByZW5kZXJTdGF0dXNTdW1tYXJ5KHN0YXR1c0NvdW50cykge1xuICAgIGlmIChbJ3N1Y2Nlc3MnLCAnZmFpbHVyZScsICdwZW5kaW5nJ10uZXZlcnkoa2luZCA9PiBzdGF0dXNDb3VudHNba2luZF0gPT09IDApKSB7XG4gICAgICByZXR1cm4gPE9jdGljb24gY2xhc3NOYW1lPVwiZ2l0aHViLUlzc3VlaXNoTGlzdC1pdGVtIGdpdGh1Yi1Jc3N1ZWlzaExpc3QtaXRlbS0tc3RhdHVzXCIgaWNvbj1cImRhc2hcIiAvPjtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzQ291bnRzLnN1Y2Nlc3MgPiAwICYmIHN0YXR1c0NvdW50cy5mYWlsdXJlID09PSAwICYmIHN0YXR1c0NvdW50cy5wZW5kaW5nID09PSAwKSB7XG4gICAgICByZXR1cm4gPE9jdGljb24gY2xhc3NOYW1lPVwiZ2l0aHViLUlzc3VlaXNoTGlzdC1pdGVtIGdpdGh1Yi1Jc3N1ZWlzaExpc3QtaXRlbS0tc3RhdHVzXCIgaWNvbj1cImNoZWNrXCIgLz47XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1c0NvdW50cy5zdWNjZXNzID09PSAwICYmIHN0YXR1c0NvdW50cy5mYWlsdXJlID4gMCAmJiBzdGF0dXNDb3VudHMucGVuZGluZyA9PT0gMCkge1xuICAgICAgcmV0dXJuIDxPY3RpY29uIGNsYXNzTmFtZT1cImdpdGh1Yi1Jc3N1ZWlzaExpc3QtaXRlbSBnaXRodWItSXNzdWVpc2hMaXN0LWl0ZW0tLXN0YXR1c1wiIGljb249XCJ4XCIgLz47XG4gICAgfVxuXG4gICAgcmV0dXJuIDxTdGF0dXNEb251dENoYXJ0IHsuLi5zdGF0dXNDb3VudHN9IGNsYXNzTmFtZT1cImdpdGh1Yi1Jc3N1ZWlzaExpc3QtaXRlbSBnaXRodWItSXNzdWVpc2hMaXN0LWl0ZW0tLXN0YXR1c1wiIC8+O1xuICB9XG5cbiAgcmVuZGVyTG9hZGluZ1RpbGUgPSAoKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2l0aHViLUlzc3VlaXNoTGlzdC1sb2FkaW5nXCI+XG4gICAgICAgIExvYWRpbmdcbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXJFbXB0eVRpbGUgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMucHJvcHMuZXJyb3IpIHtcbiAgICAgIHJldHVybiA8UXVlcnlFcnJvclRpbGUgZXJyb3I9e3RoaXMucHJvcHMuZXJyb3J9IC8+O1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmVtcHR5Q29tcG9uZW50KSB7XG4gICAgICBjb25zdCBFbXB0eUNvbXBvbmVudCA9IHRoaXMucHJvcHMuZW1wdHlDb21wb25lbnQ7XG4gICAgICByZXR1cm4gPEVtcHR5Q29tcG9uZW50IC8+O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmVuZGVyTW9yZVRpbGUgPSAoKSA9PiB7XG4gICAgLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvYW5jaG9yLWlzLXZhbGlkICovXG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3JlQ2xpY2spIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2l0aHViLUlzc3VlaXNoTGlzdC1tb3JlXCI+XG4gICAgICAgICAgPGEgb25DbGljaz17dGhpcy5wcm9wcy5vbk1vcmVDbGlja30+XG4gICAgICAgICAgICBNb3JlLi4uXG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiJdLCJtYXBwaW5n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