"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _propTypes2 = require("../prop-types");
var _loadingView = _interopRequireDefault(require("./loading-view"));
var _queryErrorView = _interopRequireDefault(require("../views/query-error-view"));
var _githubLoginView = _interopRequireDefault(require("../views/github-login-view"));
var _remoteSelectorView = _interopRequireDefault(require("./remote-selector-view"));
var _githubTabHeaderContainer = _interopRequireDefault(require("../containers/github-tab-header-container"));
var _githubBlankNolocal = _interopRequireDefault(require("./github-blank-nolocal"));
var _githubBlankUninitialized = _interopRequireDefault(require("./github-blank-uninitialized"));
var _githubBlankNoremote = _interopRequireDefault(require("./github-blank-noremote"));
var _remoteContainer = _interopRequireDefault(require("../containers/remote-container"));
var _keytarStrategy = require("../shared/keytar-strategy");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class GitHubTabView extends _react.default.Component {
  render() {
    return _react.default.createElement("div", {
      className: "github-GitHub",
      ref: this.props.rootHolder.setter
    }, this.renderHeader(), _react.default.createElement("div", {
      className: "github-GitHub-content"
    }, this.renderRemote()));
  }
  renderRemote() {
    if (this.props.token === null) {
      return _react.default.createElement(_loadingView.default, null);
    }
    if (this.props.token === _keytarStrategy.UNAUTHENTICATED) {
      return _react.default.createElement(_githubLoginView.default, {
        onLogin: this.props.handleLogin
      });
    }
    if (this.props.token === _keytarStrategy.INSUFFICIENT) {
      return _react.default.createElement(_githubLoginView.default, {
        onLogin: this.props.handleLogin,
        tokenStatus: _keytarStrategy.INSUFFICIENT
      }, _react.default.createElement("p", null, "Your token no longer has sufficient authorizations. Please re-authenticate and generate a new one."));
    }
    if (this.props.token instanceof Error) {
      return _react.default.createElement(_queryErrorView.default, {
        error: this.props.token,
        retry: this.props.handleTokenRetry,
        login: this.props.handleLogin,
        logout: this.props.handleLogout
      });
    }
    if (this.props.isLoading) {
      return _react.default.createElement(_loadingView.default, null);
    }
    if (this.props.repository.isAbsent() || this.props.repository.isAbsentGuess()) {
      return _react.default.createElement(_githubBlankNolocal.default, {
        openCreateDialog: this.props.openCreateDialog,
        openCloneDialog: this.props.openCloneDialog
      });
    }
    if (this.props.repository.isEmpty()) {
      return _react.default.createElement(_githubBlankUninitialized.default, {
        openBoundPublishDialog: this.props.openBoundPublishDialog,
        openGitTab: this.props.openGitTab
      });
    }
    if (this.props.currentRemote.isPresent()) {
      // Single, chosen or unambiguous remote
      return _react.default.createElement(_remoteContainer.default
      // Connection
      , {
        endpoint: this.props.currentRemote.getEndpoint(),
        token: this.props.token

        // Repository attributes
        ,
        refresher: this.props.refresher,
        pushInProgress: this.props.pushInProgress,
        workingDirectory: this.props.workingDirectory,
        workspace: this.props.workspace,
        remote: this.props.currentRemote,
        remotes: this.props.remotes,
        branches: this.props.branches,
        aheadCount: this.props.aheadCount

        // Action methods
        ,
        handleLogin: this.props.handleLogin,
        handleLogout: this.props.handleLogout,
        onPushBranch: () => this.props.handlePushBranch(this.props.currentBranch, this.props.currentRemote)
      });
    }
    if (this.props.manyRemotesAvailable) {
      // No chosen remote, multiple remotes hosted on GitHub instances
      return _react.default.createElement(_remoteSelectorView.default, {
        remotes: this.props.remotes,
        currentBranch: this.props.currentBranch,
        selectRemote: this.props.handleRemoteSelect
      });
    }
    return _react.default.createElement(_githubBlankNoremote.default, {
      openBoundPublishDialog: this.props.openBoundPublishDialog
    });
  }
  renderHeader() {
    return _react.default.createElement(_githubTabHeaderContainer.default
    // Connection
    , {
      endpoint: this.props.endpoint,
      token: this.props.token

      // Workspace
      ,
      currentWorkDir: this.props.workingDirectory,
      contextLocked: this.props.contextLocked,
      changeWorkingDirectory: this.props.changeWorkingDirectory,
      setContextLock: this.props.setContextLock,
      getCurrentWorkDirs: this.props.getCurrentWorkDirs

      // Event Handlers
      ,
      onDidChangeWorkDirs: this.props.onDidChangeWorkDirs
    });
  }
}
exports.default = GitHubTabView;
_defineProperty(GitHubTabView, "propTypes", {
  refresher: _propTypes2.RefresherPropType.isRequired,
  rootHolder: _propTypes2.RefHolderPropType.isRequired,
  // Connection
  endpoint: _propTypes2.EndpointPropType.isRequired,
  token: _propTypes2.TokenPropType,
  // Workspace
  workspace: _propTypes.default.object.isRequired,
  workingDirectory: _propTypes.default.string,
  getCurrentWorkDirs: _propTypes.default.func.isRequired,
  changeWorkingDirectory: _propTypes.default.func.isRequired,
  contextLocked: _propTypes.default.bool.isRequired,
  setContextLock: _propTypes.default.func.isRequired,
  repository: _propTypes.default.object.isRequired,
  // Remotes
  remotes: _propTypes2.RemoteSetPropType.isRequired,
  currentRemote: _propTypes2.RemotePropType.isRequired,
  manyRemotesAvailable: _propTypes.default.bool.isRequired,
  isLoading: _propTypes.default.bool.isRequired,
  branches: _propTypes2.BranchSetPropType.isRequired,
  currentBranch: _propTypes2.BranchPropType.isRequired,
  aheadCount: _propTypes.default.number,
  pushInProgress: _propTypes.default.bool.isRequired,
  // Event Handlers
  handleLogin: _propTypes.default.func.isRequired,
  handleLogout: _propTypes.default.func.isRequired,
  handleTokenRetry: _propTypes.default.func.isRequired,
  handleWorkDirSelect: _propTypes.default.func,
  handlePushBranch: _propTypes.default.func.isRequired,
  handleRemoteSelect: _propTypes.default.func.isRequired,
  onDidChangeWorkDirs: _propTypes.default.func.isRequired,
  openCreateDialog: _propTypes.default.func.isRequired,
  openBoundPublishDialog: _propTypes.default.func.isRequired,
  openCloneDialog: _propTypes.default.func.isRequired,
  openGitTab: _propTypes.default.func.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfcHJvcFR5cGVzMiIsIl9sb2FkaW5nVmlldyIsIl9xdWVyeUVycm9yVmlldyIsIl9naXRodWJMb2dpblZpZXciLCJfcmVtb3RlU2VsZWN0b3JWaWV3IiwiX2dpdGh1YlRhYkhlYWRlckNvbnRhaW5lciIsIl9naXRodWJCbGFua05vbG9jYWwiLCJfZ2l0aHViQmxhbmtVbmluaXRpYWxpemVkIiwiX2dpdGh1YkJsYW5rTm9yZW1vdGUiLCJfcmVtb3RlQ29udGFpbmVyIiwiX2tleXRhclN0cmF0ZWd5Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ0IiwiaSIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsInIiLCJlIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiR2l0SHViVGFiVmlldyIsIlJlYWN0IiwiQ29tcG9uZW50IiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInJlZiIsInByb3BzIiwicm9vdEhvbGRlciIsInNldHRlciIsInJlbmRlckhlYWRlciIsInJlbmRlclJlbW90ZSIsInRva2VuIiwiVU5BVVRIRU5USUNBVEVEIiwib25Mb2dpbiIsImhhbmRsZUxvZ2luIiwiSU5TVUZGSUNJRU5UIiwidG9rZW5TdGF0dXMiLCJFcnJvciIsImVycm9yIiwicmV0cnkiLCJoYW5kbGVUb2tlblJldHJ5IiwibG9naW4iLCJsb2dvdXQiLCJoYW5kbGVMb2dvdXQiLCJpc0xvYWRpbmciLCJyZXBvc2l0b3J5IiwiaXNBYnNlbnQiLCJpc0Fic2VudEd1ZXNzIiwib3BlbkNyZWF0ZURpYWxvZyIsIm9wZW5DbG9uZURpYWxvZyIsImlzRW1wdHkiLCJvcGVuQm91bmRQdWJsaXNoRGlhbG9nIiwib3BlbkdpdFRhYiIsImN1cnJlbnRSZW1vdGUiLCJpc1ByZXNlbnQiLCJlbmRwb2ludCIsImdldEVuZHBvaW50IiwicmVmcmVzaGVyIiwicHVzaEluUHJvZ3Jlc3MiLCJ3b3JraW5nRGlyZWN0b3J5Iiwid29ya3NwYWNlIiwicmVtb3RlIiwicmVtb3RlcyIsImJyYW5jaGVzIiwiYWhlYWRDb3VudCIsIm9uUHVzaEJyYW5jaCIsImhhbmRsZVB1c2hCcmFuY2giLCJjdXJyZW50QnJhbmNoIiwibWFueVJlbW90ZXNBdmFpbGFibGUiLCJzZWxlY3RSZW1vdGUiLCJoYW5kbGVSZW1vdGVTZWxlY3QiLCJjdXJyZW50V29ya0RpciIsImNvbnRleHRMb2NrZWQiLCJjaGFuZ2VXb3JraW5nRGlyZWN0b3J5Iiwic2V0Q29udGV4dExvY2siLCJnZXRDdXJyZW50V29ya0RpcnMiLCJvbkRpZENoYW5nZVdvcmtEaXJzIiwiZXhwb3J0cyIsIlJlZnJlc2hlclByb3BUeXBlIiwiaXNSZXF1aXJlZCIsIlJlZkhvbGRlclByb3BUeXBlIiwiRW5kcG9pbnRQcm9wVHlwZSIsIlRva2VuUHJvcFR5cGUiLCJQcm9wVHlwZXMiLCJvYmplY3QiLCJzdHJpbmciLCJmdW5jIiwiYm9vbCIsIlJlbW90ZVNldFByb3BUeXBlIiwiUmVtb3RlUHJvcFR5cGUiLCJCcmFuY2hTZXRQcm9wVHlwZSIsIkJyYW5jaFByb3BUeXBlIiwibnVtYmVyIiwiaGFuZGxlV29ya0RpclNlbGVjdCJdLCJzb3VyY2VzIjpbImdpdGh1Yi10YWItdmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHtcbiAgVG9rZW5Qcm9wVHlwZSwgRW5kcG9pbnRQcm9wVHlwZSwgUmVmSG9sZGVyUHJvcFR5cGUsXG4gIFJlbW90ZVNldFByb3BUeXBlLCBSZW1vdGVQcm9wVHlwZSwgQnJhbmNoU2V0UHJvcFR5cGUsIEJyYW5jaFByb3BUeXBlLFxuICBSZWZyZXNoZXJQcm9wVHlwZSxcbn0gZnJvbSAnLi4vcHJvcC10eXBlcyc7XG5pbXBvcnQgTG9hZGluZ1ZpZXcgZnJvbSAnLi9sb2FkaW5nLXZpZXcnO1xuaW1wb3J0IFF1ZXJ5RXJyb3JWaWV3IGZyb20gJy4uL3ZpZXdzL3F1ZXJ5LWVycm9yLXZpZXcnO1xuaW1wb3J0IEdpdGh1YkxvZ2luVmlldyBmcm9tICcuLi92aWV3cy9naXRodWItbG9naW4tdmlldyc7XG5pbXBvcnQgUmVtb3RlU2VsZWN0b3JWaWV3IGZyb20gJy4vcmVtb3RlLXNlbGVjdG9yLXZpZXcnO1xuaW1wb3J0IEdpdGh1YlRhYkhlYWRlckNvbnRhaW5lciBmcm9tICcuLi9jb250YWluZXJzL2dpdGh1Yi10YWItaGVhZGVyLWNvbnRhaW5lcic7XG5pbXBvcnQgR2l0SHViQmxhbmtOb0xvY2FsIGZyb20gJy4vZ2l0aHViLWJsYW5rLW5vbG9jYWwnO1xuaW1wb3J0IEdpdEh1YkJsYW5rVW5pbml0aWFsaXplZCBmcm9tICcuL2dpdGh1Yi1ibGFuay11bmluaXRpYWxpemVkJztcbmltcG9ydCBHaXRIdWJCbGFua05vUmVtb3RlIGZyb20gJy4vZ2l0aHViLWJsYW5rLW5vcmVtb3RlJztcbmltcG9ydCBSZW1vdGVDb250YWluZXIgZnJvbSAnLi4vY29udGFpbmVycy9yZW1vdGUtY29udGFpbmVyJztcbmltcG9ydCB7VU5BVVRIRU5USUNBVEVELCBJTlNVRkZJQ0lFTlR9IGZyb20gJy4uL3NoYXJlZC9rZXl0YXItc3RyYXRlZ3knO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHaXRIdWJUYWJWaWV3IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICByZWZyZXNoZXI6IFJlZnJlc2hlclByb3BUeXBlLmlzUmVxdWlyZWQsXG4gICAgcm9vdEhvbGRlcjogUmVmSG9sZGVyUHJvcFR5cGUuaXNSZXF1aXJlZCxcblxuICAgIC8vIENvbm5lY3Rpb25cbiAgICBlbmRwb2ludDogRW5kcG9pbnRQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICAgIHRva2VuOiBUb2tlblByb3BUeXBlLFxuXG4gICAgLy8gV29ya3NwYWNlXG4gICAgd29ya3NwYWNlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgd29ya2luZ0RpcmVjdG9yeTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBnZXRDdXJyZW50V29ya0RpcnM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY2hhbmdlV29ya2luZ0RpcmVjdG9yeTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBjb250ZXh0TG9ja2VkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIHNldENvbnRleHRMb2NrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHJlcG9zaXRvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAgIC8vIFJlbW90ZXNcbiAgICByZW1vdGVzOiBSZW1vdGVTZXRQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICAgIGN1cnJlbnRSZW1vdGU6IFJlbW90ZVByb3BUeXBlLmlzUmVxdWlyZWQsXG4gICAgbWFueVJlbW90ZXNBdmFpbGFibGU6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgaXNMb2FkaW5nOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIGJyYW5jaGVzOiBCcmFuY2hTZXRQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICAgIGN1cnJlbnRCcmFuY2g6IEJyYW5jaFByb3BUeXBlLmlzUmVxdWlyZWQsXG4gICAgYWhlYWRDb3VudDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBwdXNoSW5Qcm9ncmVzczogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAgIC8vIEV2ZW50IEhhbmRsZXJzXG4gICAgaGFuZGxlTG9naW46IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaGFuZGxlTG9nb3V0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGhhbmRsZVRva2VuUmV0cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaGFuZGxlV29ya0RpclNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFuZGxlUHVzaEJyYW5jaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBoYW5kbGVSZW1vdGVTZWxlY3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25EaWRDaGFuZ2VXb3JrRGlyczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvcGVuQ3JlYXRlRGlhbG9nOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9wZW5Cb3VuZFB1Ymxpc2hEaWFsb2c6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb3BlbkNsb25lRGlhbG9nOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9wZW5HaXRUYWI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2l0aHViLUdpdEh1YlwiIHJlZj17dGhpcy5wcm9wcy5yb290SG9sZGVyLnNldHRlcn0+XG4gICAgICAgIHt0aGlzLnJlbmRlckhlYWRlcigpfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdpdGh1Yi1HaXRIdWItY29udGVudFwiPlxuICAgICAgICAgIHt0aGlzLnJlbmRlclJlbW90ZSgpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXJSZW1vdGUoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMudG9rZW4gPT09IG51bGwpIHtcbiAgICAgIHJldHVybiA8TG9hZGluZ1ZpZXcgLz47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMudG9rZW4gPT09IFVOQVVUSEVOVElDQVRFRCkge1xuICAgICAgcmV0dXJuIDxHaXRodWJMb2dpblZpZXcgb25Mb2dpbj17dGhpcy5wcm9wcy5oYW5kbGVMb2dpbn0gLz47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMudG9rZW4gPT09IElOU1VGRklDSUVOVCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEdpdGh1YkxvZ2luVmlldyBvbkxvZ2luPXt0aGlzLnByb3BzLmhhbmRsZUxvZ2lufSB0b2tlblN0YXR1cz17SU5TVUZGSUNJRU5UfT5cbiAgICAgICAgICA8cD5cbiAgICAgICAgICAgIFlvdXIgdG9rZW4gbm8gbG9uZ2VyIGhhcyBzdWZmaWNpZW50IGF1dGhvcml6YXRpb25zLiBQbGVhc2UgcmUtYXV0aGVudGljYXRlIGFuZCBnZW5lcmF0ZSBhIG5ldyBvbmUuXG4gICAgICAgICAgPC9wPlxuICAgICAgICA8L0dpdGh1YkxvZ2luVmlldz5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMudG9rZW4gaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFF1ZXJ5RXJyb3JWaWV3XG4gICAgICAgICAgZXJyb3I9e3RoaXMucHJvcHMudG9rZW59XG4gICAgICAgICAgcmV0cnk9e3RoaXMucHJvcHMuaGFuZGxlVG9rZW5SZXRyeX1cbiAgICAgICAgICBsb2dpbj17dGhpcy5wcm9wcy5oYW5kbGVMb2dpbn1cbiAgICAgICAgICBsb2dvdXQ9e3RoaXMucHJvcHMuaGFuZGxlTG9nb3V0fVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5pc0xvYWRpbmcpIHtcbiAgICAgIHJldHVybiA8TG9hZGluZ1ZpZXcgLz47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMucmVwb3NpdG9yeS5pc0Fic2VudCgpIHx8IHRoaXMucHJvcHMucmVwb3NpdG9yeS5pc0Fic2VudEd1ZXNzKCkpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxHaXRIdWJCbGFua05vTG9jYWxcbiAgICAgICAgICBvcGVuQ3JlYXRlRGlhbG9nPXt0aGlzLnByb3BzLm9wZW5DcmVhdGVEaWFsb2d9XG4gICAgICAgICAgb3BlbkNsb25lRGlhbG9nPXt0aGlzLnByb3BzLm9wZW5DbG9uZURpYWxvZ31cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMucmVwb3NpdG9yeS5pc0VtcHR5KCkpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxHaXRIdWJCbGFua1VuaW5pdGlhbGl6ZWRcbiAgICAgICAgICBvcGVuQm91bmRQdWJsaXNoRGlhbG9nPXt0aGlzLnByb3BzLm9wZW5Cb3VuZFB1Ymxpc2hEaWFsb2d9XG4gICAgICAgICAgb3BlbkdpdFRhYj17dGhpcy5wcm9wcy5vcGVuR2l0VGFifVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5jdXJyZW50UmVtb3RlLmlzUHJlc2VudCgpKSB7XG4gICAgICAvLyBTaW5nbGUsIGNob3NlbiBvciB1bmFtYmlndW91cyByZW1vdGVcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxSZW1vdGVDb250YWluZXJcbiAgICAgICAgICAvLyBDb25uZWN0aW9uXG4gICAgICAgICAgZW5kcG9pbnQ9e3RoaXMucHJvcHMuY3VycmVudFJlbW90ZS5nZXRFbmRwb2ludCgpfVxuICAgICAgICAgIHRva2VuPXt0aGlzLnByb3BzLnRva2VufVxuXG4gICAgICAgICAgLy8gUmVwb3NpdG9yeSBhdHRyaWJ1dGVzXG4gICAgICAgICAgcmVmcmVzaGVyPXt0aGlzLnByb3BzLnJlZnJlc2hlcn1cbiAgICAgICAgICBwdXNoSW5Qcm9ncmVzcz17dGhpcy5wcm9wcy5wdXNoSW5Qcm9ncmVzc31cbiAgICAgICAgICB3b3JraW5nRGlyZWN0b3J5PXt0aGlzLnByb3BzLndvcmtpbmdEaXJlY3Rvcnl9XG4gICAgICAgICAgd29ya3NwYWNlPXt0aGlzLnByb3BzLndvcmtzcGFjZX1cbiAgICAgICAgICByZW1vdGU9e3RoaXMucHJvcHMuY3VycmVudFJlbW90ZX1cbiAgICAgICAgICByZW1vdGVzPXt0aGlzLnByb3BzLnJlbW90ZXN9XG4gICAgICAgICAgYnJhbmNoZXM9e3RoaXMucHJvcHMuYnJhbmNoZXN9XG4gICAgICAgICAgYWhlYWRDb3VudD17dGhpcy5wcm9wcy5haGVhZENvdW50fVxuXG4gICAgICAgICAgLy8gQWN0aW9uIG1ldGhvZHNcbiAgICAgICAgICBoYW5kbGVMb2dpbj17dGhpcy5wcm9wcy5oYW5kbGVMb2dpbn1cbiAgICAgICAgICBoYW5kbGVMb2dvdXQ9e3RoaXMucHJvcHMuaGFuZGxlTG9nb3V0fVxuICAgICAgICAgIG9uUHVzaEJyYW5jaD17KCkgPT4gdGhpcy5wcm9wcy5oYW5kbGVQdXNoQnJhbmNoKHRoaXMucHJvcHMuY3VycmVudEJyYW5jaCwgdGhpcy5wcm9wcy5jdXJyZW50UmVtb3RlKX1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMubWFueVJlbW90ZXNBdmFpbGFibGUpIHtcbiAgICAgIC8vIE5vIGNob3NlbiByZW1vdGUsIG11bHRpcGxlIHJlbW90ZXMgaG9zdGVkIG9uIEdpdEh1YiBpbnN0YW5jZXNcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxSZW1vdGVTZWxlY3RvclZpZXdcbiAgICAgICAgICByZW1vdGVzPXt0aGlzLnByb3BzLnJlbW90ZXN9XG4gICAgICAgICAgY3VycmVudEJyYW5jaD17dGhpcy5wcm9wcy5jdXJyZW50QnJhbmNofVxuICAgICAgICAgIHNlbGVjdFJlbW90ZT17dGhpcy5wcm9wcy5oYW5kbGVSZW1vdGVTZWxlY3R9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8R2l0SHViQmxhbmtOb1JlbW90ZSBvcGVuQm91bmRQdWJsaXNoRGlhbG9nPXt0aGlzLnByb3BzLm9wZW5Cb3VuZFB1Ymxpc2hEaWFsb2d9IC8+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlckhlYWRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEdpdGh1YlRhYkhlYWRlckNvbnRhaW5lclxuICAgICAgICAvLyBDb25uZWN0aW9uXG4gICAgICAgIGVuZHBvaW50PXt0aGlzLnByb3BzLmVuZHBvaW50fVxuICAgICAgICB0b2tlbj17dGhpcy5wcm9wcy50b2tlbn1cblxuICAgICAgICAvLyBXb3Jrc3BhY2VcbiAgICAgICAgY3VycmVudFdvcmtEaXI9e3RoaXMucHJvcHMud29ya2luZ0RpcmVjdG9yeX1cbiAgICAgICAgY29udGV4dExvY2tlZD17dGhpcy5wcm9wcy5jb250ZXh0TG9ja2VkfVxuICAgICAgICBjaGFuZ2VXb3JraW5nRGlyZWN0b3J5PXt0aGlzLnByb3BzLmNoYW5nZVdvcmtpbmdEaXJlY3Rvcnl9XG4gICAgICAgIHNldENvbnRleHRMb2NrPXt0aGlzLnByb3BzLnNldENvbnRleHRMb2NrfVxuICAgICAgICBnZXRDdXJyZW50V29ya0RpcnM9e3RoaXMucHJvcHMuZ2V0Q3VycmVudFdvcmtEaXJzfVxuXG4gICAgICAgIC8vIEV2ZW50IEhhbmRsZXJzXG4gICAgICAgIG9uRGlkQ2hhbmdlV29ya0RpcnM9e3RoaXMucHJvcHMub25EaWRDaGFuZ2VXb3JrRGlyc31cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRSxXQUFBLEdBQUFGLE9BQUE7QUFLQSxJQUFBRyxZQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxlQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxnQkFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU0sbUJBQUEsR0FBQVAsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFPLHlC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