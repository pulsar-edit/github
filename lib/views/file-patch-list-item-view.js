"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _eventKit = require("event-kit");
var _propTypes2 = require("../prop-types");
var _helpers = require("../helpers");
var _refHolder = _interopRequireDefault(require("../models/ref-holder"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class FilePatchListItemView extends _react.default.Component {
  constructor(props) {
    super(props);
    this.refItem = new _refHolder.default();
    this.subs = new _eventKit.CompositeDisposable(this.refItem.observe(item => this.props.registerItemElement(this.props.filePatch, item)));
  }
  render() {
    const _this$props = this.props,
      {
        filePatch,
        selected
      } = _this$props,
      others = _objectWithoutProperties(_this$props, ["filePatch", "selected"]);
    delete others.registerItemElement;
    const status = _helpers.classNameForStatus[filePatch.status];
    const className = selected ? 'is-selected' : '';
    return _react.default.createElement("div", _extends({
      ref: this.refItem.setter
    }, others, {
      className: `github-FilePatchListView-item is-${status} ${className}`
    }), _react.default.createElement("span", {
      className: `github-FilePatchListView-icon icon icon-diff-${status} status-${status}`
    }), _react.default.createElement("span", {
      className: "github-FilePatchListView-path"
    }, filePatch.filePath));
  }
  componentWillUnmount() {
    this.subs.dispose();
  }
}
exports.default = FilePatchListItemView;
_defineProperty(FilePatchListItemView, "propTypes", {
  filePatch: _propTypes2.FilePatchItemPropType.isRequired,
  selected: _propTypes.default.bool.isRequired,
  registerItemElement: _propTypes.default.func
});
_defineProperty(FilePatchListItemView, "defaultProps", {
  registerItemElement: () => {}
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfZXZlbnRLaXQiLCJfcHJvcFR5cGVzMiIsIl9oZWxwZXJzIiwiX3JlZkhvbGRlciIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJiaW5kIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNvdXJjZVN5bWJvbEtleXMiLCJpbmRleE9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzb3VyY2VLZXlzIiwia2V5cyIsIl9kZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInQiLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJyIiwiZSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiRmlsZVBhdGNoTGlzdEl0ZW1WaWV3IiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwicmVmSXRlbSIsIlJlZkhvbGRlciIsInN1YnMiLCJDb21wb3NpdGVEaXNwb3NhYmxlIiwib2JzZXJ2ZSIsIml0ZW0iLCJyZWdpc3Rlckl0ZW1FbGVtZW50IiwiZmlsZVBhdGNoIiwicmVuZGVyIiwiX3RoaXMkcHJvcHMiLCJzZWxlY3RlZCIsIm90aGVycyIsInN0YXR1cyIsImNsYXNzTmFtZUZvclN0YXR1cyIsImNsYXNzTmFtZSIsImNyZWF0ZUVsZW1lbnQiLCJyZWYiLCJzZXR0ZXIiLCJmaWxlUGF0aCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiZGlzcG9zZSIsImV4cG9ydHMiLCJGaWxlUGF0Y2hJdGVtUHJvcFR5cGUiLCJpc1JlcXVpcmVkIiwiUHJvcFR5cGVzIiwiYm9vbCIsImZ1bmMiXSwic291cmNlcyI6WyJmaWxlLXBhdGNoLWxpc3QtaXRlbS12aWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtDb21wb3NpdGVEaXNwb3NhYmxlfSBmcm9tICdldmVudC1raXQnO1xuXG5pbXBvcnQge0ZpbGVQYXRjaEl0ZW1Qcm9wVHlwZX0gZnJvbSAnLi4vcHJvcC10eXBlcyc7XG5pbXBvcnQge2NsYXNzTmFtZUZvclN0YXR1c30gZnJvbSAnLi4vaGVscGVycyc7XG5pbXBvcnQgUmVmSG9sZGVyIGZyb20gJy4uL21vZGVscy9yZWYtaG9sZGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsZVBhdGNoTGlzdEl0ZW1WaWV3IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBmaWxlUGF0Y2g6IEZpbGVQYXRjaEl0ZW1Qcm9wVHlwZS5pc1JlcXVpcmVkLFxuICAgIHNlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIHJlZ2lzdGVySXRlbUVsZW1lbnQ6IFByb3BUeXBlcy5mdW5jLFxuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICByZWdpc3Rlckl0ZW1FbGVtZW50OiAoKSA9PiB7fSxcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5yZWZJdGVtID0gbmV3IFJlZkhvbGRlcigpO1xuICAgIHRoaXMuc3VicyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKFxuICAgICAgdGhpcy5yZWZJdGVtLm9ic2VydmUoaXRlbSA9PiB0aGlzLnByb3BzLnJlZ2lzdGVySXRlbUVsZW1lbnQodGhpcy5wcm9wcy5maWxlUGF0Y2gsIGl0ZW0pKSxcbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtmaWxlUGF0Y2gsIHNlbGVjdGVkLCAuLi5vdGhlcnN9ID0gdGhpcy5wcm9wcztcbiAgICBkZWxldGUgb3RoZXJzLnJlZ2lzdGVySXRlbUVsZW1lbnQ7XG4gICAgY29uc3Qgc3RhdHVzID0gY2xhc3NOYW1lRm9yU3RhdHVzW2ZpbGVQYXRjaC5zdGF0dXNdO1xuICAgIGNvbnN0IGNsYXNzTmFtZSA9IHNlbGVjdGVkID8gJ2lzLXNlbGVjdGVkJyA6ICcnO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgcmVmPXt0aGlzLnJlZkl0ZW0uc2V0dGVyfSB7Li4ub3RoZXJzfSBjbGFzc05hbWU9e2BnaXRodWItRmlsZVBhdGNoTGlzdFZpZXctaXRlbSBpcy0ke3N0YXR1c30gJHtjbGFzc05hbWV9YH0+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT17YGdpdGh1Yi1GaWxlUGF0Y2hMaXN0Vmlldy1pY29uIGljb24gaWNvbi1kaWZmLSR7c3RhdHVzfSBzdGF0dXMtJHtzdGF0dXN9YH0gLz5cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2l0aHViLUZpbGVQYXRjaExpc3RWaWV3LXBhdGhcIj57ZmlsZVBhdGNoLmZpbGVQYXRofTwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnN1YnMuZGlzcG9zZSgpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFNBQUEsR0FBQUYsT0FBQTtBQUVBLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtB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