"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = GitHubBlankUninitialized;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _octicon = _interopRequireDefault(require("../atom/octicon"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/* istanbul ignore file */

function GitHubBlankUninitialized(props) {
  return _react.default.createElement("div", {
    className: "github-Local-Uninit github-Blank"
  }, _react.default.createElement("main", {
    className: "github-Blank-body"
  }, _react.default.createElement("div", {
    className: "github-Blank-LargeIcon icon icon-mark-github"
  }), _react.default.createElement("p", {
    className: "github-Blank-context"
  }, "This repository is not yet version controlled by git."), _react.default.createElement("p", {
    className: "github-Blank-option"
  }, _react.default.createElement("button", {
    className: "github-Blank-actionBtn btn icon icon-globe",
    onClick: props.openBoundPublishDialog
  }, "Initialize and publish on GitHub...")), _react.default.createElement("p", {
    className: "github-Blank-explanation"
  }, "Create a new GitHub repository, then track the existing content within this directory as a git repository configured to push there."), _react.default.createElement("p", {
    className: "github-Blank-footer github-Blank-explanation"
  }, "To initialize this directory as a git repository without publishing it to GitHub, visit the", _react.default.createElement("button", {
    className: "github-Blank-tabLink",
    onClick: props.openGitTab
  }, _react.default.createElement(_octicon.default, {
    icon: "git-commit"
  }), "Git tab."))));
}
GitHubBlankUninitialized.propTypes = {
  openBoundPublishDialog: _propTypes.default.func.isRequired,
  openGitTab: _propTypes.default.func.isRequired
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfb2N0aWNvbiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiR2l0SHViQmxhbmtVbmluaXRpYWxpemVkIiwicHJvcHMiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwib25DbGljayIsIm9wZW5Cb3VuZFB1Ymxpc2hEaWFsb2ciLCJvcGVuR2l0VGFiIiwiaWNvbiIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImZ1bmMiLCJpc1JlcXVpcmVkIl0sInNvdXJjZXMiOlsiZ2l0aHViLWJsYW5rLXVuaW5pdGlhbGl6ZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogaXN0YW5idWwgaWdub3JlIGZpbGUgKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCBPY3RpY29uIGZyb20gJy4uL2F0b20vb2N0aWNvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEdpdEh1YkJsYW5rVW5pbml0aWFsaXplZChwcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2l0aHViLUxvY2FsLVVuaW5pdCBnaXRodWItQmxhbmtcIj5cbiAgICAgIDxtYWluIGNsYXNzTmFtZT1cImdpdGh1Yi1CbGFuay1ib2R5XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2l0aHViLUJsYW5rLUxhcmdlSWNvbiBpY29uIGljb24tbWFyay1naXRodWJcIiAvPlxuICAgICAgICA8cCBjbGFzc05hbWU9XCJnaXRodWItQmxhbmstY29udGV4dFwiPlRoaXMgcmVwb3NpdG9yeSBpcyBub3QgeWV0IHZlcnNpb24gY29udHJvbGxlZCBieSBnaXQuPC9wPlxuICAgICAgICA8cCBjbGFzc05hbWU9XCJnaXRodWItQmxhbmstb3B0aW9uXCI+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJnaXRodWItQmxhbmstYWN0aW9uQnRuIGJ0biBpY29uIGljb24tZ2xvYmVcIiBvbkNsaWNrPXtwcm9wcy5vcGVuQm91bmRQdWJsaXNoRGlhbG9nfT5cbiAgICAgICAgICAgIEluaXRpYWxpemUgYW5kIHB1Ymxpc2ggb24gR2l0SHViLi4uXG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvcD5cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwiZ2l0aHViLUJsYW5rLWV4cGxhbmF0aW9uXCI+XG4gICAgICAgICAgQ3JlYXRlIGEgbmV3IEdpdEh1YiByZXBvc2l0b3J5LCB0aGVuIHRyYWNrIHRoZSBleGlzdGluZyBjb250ZW50IHdpdGhpbiB0aGlzIGRpcmVjdG9yeSBhcyBhIGdpdCByZXBvc2l0b3J5XG4gICAgICAgICAgY29uZmlndXJlZCB0byBwdXNoIHRoZXJlLlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwIGNsYXNzTmFtZT1cImdpdGh1Yi1CbGFuay1mb290ZXIgZ2l0aHViLUJsYW5rLWV4cGxhbmF0aW9uXCI+XG4gICAgICAgICAgVG8gaW5pdGlhbGl6ZSB0aGlzIGRpcmVjdG9yeSBhcyBhIGdpdCByZXBvc2l0b3J5IHdpdGhvdXQgcHVibGlzaGluZyBpdCB0byBHaXRIdWIsIHZpc2l0IHRoZVxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiZ2l0aHViLUJsYW5rLXRhYkxpbmtcIiBvbkNsaWNrPXtwcm9wcy5vcGVuR2l0VGFifT5cbiAgICAgICAgICAgIDxPY3RpY29uIGljb249XCJnaXQtY29tbWl0XCIgLz5HaXQgdGFiLlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L3A+XG4gICAgICA8L21haW4+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbkdpdEh1YkJsYW5rVW5pbml0aWFsaXplZC5wcm9wVHlwZXMgPSB7XG4gIG9wZW5Cb3VuZFB1Ymxpc2hEaWFsb2c6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9wZW5HaXRUYWI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRSxRQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBc0MsU0FBQUQsdUJBQUFJLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFMdEM7O0FBT2UsU0FBU0csd0JBQXdCQSxDQUFDQyxLQUFLLEVBQUU7RUFDdEQsT0FDRVQsTUFBQSxDQUFBTyxPQUFBLENBQUFHLGFBQUE7SUFBS0MsU0FBUyxFQUFDO0VBQWtDLEdBQy9DWCxNQUFBLENBQUFPLE9BQUEsQ0FBQUcsYUFBQTtJQUFNQyxTQUFTLEVBQUM7RUFBbUIsR0FDakNYLE1BQUEsQ0FBQU8sT0FBQSxDQUFBRyxhQUFBO0lBQUtDLFNBQVMsRUFBQztFQUE4QyxFQUFHLEVBQ2hFWCxNQUFBLENBQUFPLE9BQUEsQ0FBQUcsYUFBQTtJQUFHQyxTQUFTLEVBQUM7RUFBc0IsMkRBQTBELEVBQzdGWCxNQUFBLENBQUFPLE9BQUEsQ0FBQUcsYUFBQTtJQUFHQyxTQUFTLEVBQUM7RUFBcUIsR0FDaENYLE1BQUEsQ0FBQU8sT0FBQSxDQUFBRyxhQUFBO0lBQVFDLFNBQVMsRUFBQyw0Q0FBNEM7SUFBQ0MsT0FBTyxFQUFFSCxLQUFLLENBQUNJO0VBQXVCLHlDQUU1RixDQUNQLEVBQ0piLE1BQUEsQ0FBQU8sT0FBQSxDQUFBRyxhQUFBO0lBQUdDLFNBQVMsRUFBQztFQUEwQix5SUFHbkMsRUFDSlgsTUFBQSxDQUFBTyxPQUFBLENBQUFHLGFBQUE7SUFBR0MsU0FBUyxFQUFDO0VBQThDLGtHQUV6RFgsTUFBQSxDQUFBTyxPQUFBLENBQUFHLGFBQUE7SUFBUUMsU0FBUyxFQUFDLHNCQUFzQjtJQUFDQyxPQUFPLEVBQUVILEtBQUssQ0FBQ0s7RUFBVyxHQUNqRWQsTUFBQSxDQUFBTyxPQUFBLENBQUFHLGFBQUEsQ0FBQ04sUUFBQSxDQUFBRyxPQUFPO0lBQUNRLElBQUksRUFBQztFQUFZLEVBQUcsYUFDdEIsQ0FDUCxDQUNDLENBQ0g7QUFFVjtBQUVBUCx3QkFBd0IsQ0FBQ1EsU0FBUyxHQUFHO0VBQ25DSCxzQkFBc0IsRUFBRUksa0JBQVMsQ0FBQ0MsSUFBSSxDQUFDQyxVQUFVO0VBQ2pETCxVQUFVLEVBQUVHLGtCQUFTLENBQUNDLElBQUksQ0FBQ0M7QUFDN0IsQ0FBQyJ9