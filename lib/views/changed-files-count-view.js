"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _octicon = _interopRequireDefault(require("../atom/octicon"));
var _reporterProxy = require("../reporter-proxy");
var _helpers = require("../helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ChangedFilesCountView extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _helpers.autobind)(this, 'handleClick');
  }
  handleClick() {
    (0, _reporterProxy.addEvent)('click', {
      package: 'github',
      component: 'ChangedFileCountView'
    });
    this.props.didClick();
  }
  render() {
    return _react.default.createElement("button", {
      ref: "changedFiles",
      className: "github-ChangedFilesCount inline-block",
      onClick: this.handleClick
    }, _react.default.createElement(_octicon.default, {
      icon: "git-commit"
    }), `Git (${this.props.changedFilesCount})`, this.props.mergeConflictsPresent && _react.default.createElement(_octicon.default, {
      icon: "alert"
    }));
  }
}
exports.default = ChangedFilesCountView;
_defineProperty(ChangedFilesCountView, "propTypes", {
  changedFilesCount: _propTypes.default.number.isRequired,
  didClick: _propTypes.default.func.isRequired,
  mergeConflictsPresent: _propTypes.default.bool
});
_defineProperty(ChangedFilesCountView, "defaultProps", {
  changedFilesCount: 0,
  mergeConflictsPresent: false,
  didClick: () => {}
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfb2N0aWNvbiIsIl9yZXBvcnRlclByb3h5IiwiX2hlbHBlcnMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9kZWZpbmVQcm9wZXJ0eSIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJDaGFuZ2VkRmlsZXNDb3VudFZpZXciLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJhdXRvYmluZCIsImhhbmRsZUNsaWNrIiwiYWRkRXZlbnQiLCJwYWNrYWdlIiwiY29tcG9uZW50IiwiZGlkQ2xpY2siLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwicmVmIiwiY2xhc3NOYW1lIiwib25DbGljayIsImljb24iLCJjaGFuZ2VkRmlsZXNDb3VudCIsIm1lcmdlQ29uZmxpY3RzUHJlc2VudCIsImV4cG9ydHMiLCJQcm9wVHlwZXMiLCJudW1iZXIiLCJpc1JlcXVpcmVkIiwiZnVuYyIsImJvb2wiXSwic291cmNlcyI6WyJjaGFuZ2VkLWZpbGVzLWNvdW50LXZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgT2N0aWNvbiBmcm9tICcuLi9hdG9tL29jdGljb24nO1xuaW1wb3J0IHthZGRFdmVudH0gZnJvbSAnLi4vcmVwb3J0ZXItcHJveHknO1xuaW1wb3J0IHthdXRvYmluZH0gZnJvbSAnLi4vaGVscGVycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYW5nZWRGaWxlc0NvdW50VmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY2hhbmdlZEZpbGVzQ291bnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBkaWRDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBtZXJnZUNvbmZsaWN0c1ByZXNlbnQ6IFByb3BUeXBlcy5ib29sLFxuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBjaGFuZ2VkRmlsZXNDb3VudDogMCxcbiAgICBtZXJnZUNvbmZsaWN0c1ByZXNlbnQ6IGZhbHNlLFxuICAgIGRpZENsaWNrOiAoKSA9PiB7fSxcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIGF1dG9iaW5kKHRoaXMsICdoYW5kbGVDbGljaycpO1xuICB9XG5cbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgYWRkRXZlbnQoJ2NsaWNrJywge3BhY2thZ2U6ICdnaXRodWInLCBjb21wb25lbnQ6ICdDaGFuZ2VkRmlsZUNvdW50Vmlldyd9KTtcbiAgICB0aGlzLnByb3BzLmRpZENsaWNrKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxidXR0b25cbiAgICAgICAgcmVmPVwiY2hhbmdlZEZpbGVzXCJcbiAgICAgICAgY2xhc3NOYW1lPVwiZ2l0aHViLUNoYW5nZWRGaWxlc0NvdW50IGlubGluZS1ibG9ja1wiXG4gICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9PlxuICAgICAgICA8T2N0aWNvbiBpY29uPVwiZ2l0LWNvbW1pdFwiIC8+XG4gICAgICAgIHtgR2l0ICgke3RoaXMucHJvcHMuY2hhbmdlZEZpbGVzQ291bnR9KWB9XG4gICAgICAgIHt0aGlzLnByb3BzLm1lcmdlQ29uZmxpY3RzUHJlc2VudCAmJiA8T2N0aWNvbiBpY29uPVwiYWxlcnRcIiAvPn1cbiAgICAgIDwvYnV0dG9uPlxuICAgICk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsUUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsY0FBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksUUFBQSxHQUFBSixPQUFBO0FBQW9DLFNBQUFELHVCQUFBTSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBQUEsU0FBQUcsZ0JBQUFILEdBQUEsRUFBQUksR0FBQSxFQUFBQyxLQUFBLElBQUFELEdBQUEsR0FBQUUsY0FBQSxDQUFBRixHQUFBLE9BQUFBLEdBQUEsSUFBQUosR0FBQSxJQUFBTyxNQUFBLENBQUFDLGNBQUEsQ0FBQVIsR0FBQSxFQUFBSSxHQUFBLElBQUFDLEtBQUEsRUFBQUEsS0FBQSxFQUFBSSxVQUFBLFFBQUFDLFlBQUEsUUFBQUMsUUFBQSxvQkFBQVgsR0FBQSxDQUFBSSxHQUFBLElBQUFDLEtBQUEsV0FBQUwsR0FBQTtBQUFBLFNBQUFNLGVBQUFNLEdBQUEsUUFBQVIsR0FBQSxHQUFBUyxZQUFBLENBQUFELEdBQUEsMkJBQUFSLEdBQUEsZ0JBQUFBLEdBQUEsR0FBQVUsTUFBQSxDQUFBVixHQUFBO0FBQUEsU0FBQVMsYUFBQUUsS0FBQSxFQUFBQyxJQUFBLGVBQUFELEtBQUEsaUJBQUFBLEtBQUEsa0JBQUFBLEtBQUEsTUFBQUUsSUFBQSxHQUFBRixLQUFBLENBQUFHLE1BQUEsQ0FBQUMsV0FBQSxPQUFBRixJQUFBLEtBQUFHLFNBQUEsUUFBQUMsR0FBQSxHQUFBSixJQUFBLENBQUFLLElBQUEsQ0FBQVAsS0FBQSxFQUFBQyxJQUFBLDJCQUFBSyxHQUFBLHNCQUFBQSxHQUFBLFlBQUFFLFNBQUEsNERBQUFQLElBQUEsZ0JBQUFGLE1BQUEsR0FBQVUsTUFBQSxFQUFBVCxLQUFBO0FBRXJCLE1BQU1VLHFCQUFxQixTQUFTQyxjQUFLLENBQUNDLFNBQVMsQ0FBQztFQWFqRUMsV0FBV0EsQ0FBQ0MsS0FBSyxFQUFFO0lBQ2pCLEtBQUssQ0FBQ0EsS0FBSyxDQUFDO0lBQ1osSUFBQUMsaUJBQVEsRUFBQyxJQUFJLEVBQUUsYUFBYSxDQUFDO0VBQy9CO0VBRUFDLFdBQVdBLENBQUEsRUFBRztJQUNaLElBQUFDLHVCQUFRLEVBQUMsT0FBTyxFQUFFO01BQUNDLE9BQU8sRUFBRSxRQUFRO01BQUVDLFNBQVMsRUFBRTtJQUFzQixDQUFDLENBQUM7SUFDekUsSUFBSSxDQUFDTCxLQUFLLENBQUNNLFFBQVEsRUFBRTtFQUN2QjtFQUVBQyxNQUFNQSxDQUFBLEVBQUc7SUFDUCxPQUNFM0MsTUFBQSxDQUFBUyxPQUFBLENBQUFtQyxhQUFBO01BQ0VDLEdBQUcsRUFBQyxjQUFjO01BQ2xCQyxTQUFTLEVBQUMsdUNBQXVDO01BQ2pEQyxPQUFPLEVBQUUsSUFBSSxDQUFDVDtJQUFZLEdBQzFCdEMsTUFBQSxDQUFBUyxPQUFBLENBQUFtQyxhQUFBLENBQUN4QyxRQUFBLENBQUFLLE9BQU87TUFBQ3VDLElBQUksRUFBQztJQUFZLEVBQUcsRUFDM0IsUUFBTyxJQUFJLENBQUNaLEtBQUssQ0FBQ2EsaUJBQWtCLEdBQUUsRUFDdkMsSUFBSSxDQUFDYixLQUFLLENBQUNjLHFCQUFxQixJQUFJbEQsTUFBQSxDQUFBUyxPQUFBLENBQUFtQyxhQUFBLENBQUN4QyxRQUFBLENBQUFLLE9BQU87TUFBQ3VDLElBQUksRUFBQztJQUFPLEVBQUcsQ0FDdEQ7RUFFYjtBQUNGO0FBQUNHLE9BQUEsQ0FBQTFDLE9BQUEsR0FBQXVCLHFCQUFBO0FBQUF0QixlQUFBLENBbkNvQnNCLHFCQUFxQixlQUNyQjtFQUNqQmlCLGlCQUFpQixFQUFFRyxrQkFBUyxDQUFDQyxNQUFNLENBQUNDLFVBQVU7RUFDOUNaLFFBQVEsRUFBRVUsa0JBQVMsQ0FBQ0csSUFBSSxDQUFDRCxVQUFVO0VBQ25DSixxQkFBcUIsRUFBRUUsa0JBQVMsQ0FBQ0k7QUFDbkMsQ0FBQztBQUFBOUMsZUFBQSxDQUxrQnNCLHFCQUFxQixrQkFPbEI7RUFDcEJpQixpQkFBaUIsRUFBRSxDQUFDO0VBQ3BCQyxxQkFBcUIsRUFBRSxLQUFLO0VBQzVCUixRQUFRLEVBQUVBLENBQUEsS0FBTSxDQUFDO0FBQ25CLENBQUMifQ==