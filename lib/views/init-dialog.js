"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _atom = require("atom");
var _tabGroup = _interopRequireDefault(require("../tab-group"));
var _tabbable = require("./tabbable");
var _dialogView = _interopRequireDefault(require("./dialog-view"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class InitDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "accept", () => {
      const destPath = this.destinationPath.getText();
      if (destPath.length === 0) {
        return Promise.resolve();
      }
      return this.props.request.accept(destPath);
    });
    _defineProperty(this, "setAcceptEnablement", () => {
      const enablement = !this.destinationPath.isEmpty();
      if (enablement !== this.state.acceptEnabled) {
        this.setState({
          acceptEnabled: enablement
        });
      }
    });
    this.tabGroup = new _tabGroup.default();
    this.destinationPath = new _atom.TextBuffer({
      text: this.props.request.getParams().dirPath
    });
    this.sub = this.destinationPath.onDidChange(this.setAcceptEnablement);
    this.state = {
      acceptEnabled: !this.destinationPath.isEmpty()
    };
  }
  render() {
    return _react.default.createElement(_dialogView.default, {
      progressMessage: "Initializing...",
      acceptEnabled: this.state.acceptEnabled,
      acceptClassName: "icon icon-repo-create",
      acceptText: "Init",
      accept: this.accept,
      cancel: this.props.request.cancel,
      tabGroup: this.tabGroup,
      inProgress: this.props.inProgress,
      error: this.props.error,
      workspace: this.props.workspace,
      commands: this.props.commands
    }, _react.default.createElement("label", {
      className: "github-DialogLabel"
    }, "Initialize git repository in directory", _react.default.createElement(_tabbable.TabbableTextEditor, {
      tabGroup: this.tabGroup,
      commands: this.props.commands,
      autofocus: true,
      mini: true,
      preselect: true,
      readOnly: this.props.inProgress,
      buffer: this.destinationPath
    })));
  }
  componentDidMount() {
    this.tabGroup.autofocus();
  }
  componentWillUnmount() {
    this.sub.dispose();
  }
}
exports.default = InitDialog;
_defineProperty(InitDialog, "propTypes", {
  // Model
  request: _propTypes.default.shape({
    getParams: _propTypes.default.func.isRequired,
    accept: _propTypes.default.func.isRequired,
    cancel: _propTypes.default.func.isRequired
  }).isRequired,
  inProgress: _propTypes.default.bool,
  error: _propTypes.default.instanceOf(Error),
  // Atom environment
  workspace: _propTypes.default.object.isRequired,
  commands: _propTypes.default.object.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfYXRvbSIsIl90YWJHcm91cCIsIl90YWJiYWJsZSIsIl9kaWFsb2dWaWV3Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ0IiwiaSIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsInIiLCJlIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiSW5pdERpYWxvZyIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsImRlc3RQYXRoIiwiZGVzdGluYXRpb25QYXRoIiwiZ2V0VGV4dCIsImxlbmd0aCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVxdWVzdCIsImFjY2VwdCIsImVuYWJsZW1lbnQiLCJpc0VtcHR5Iiwic3RhdGUiLCJhY2NlcHRFbmFibGVkIiwic2V0U3RhdGUiLCJ0YWJHcm91cCIsIlRhYkdyb3VwIiwiVGV4dEJ1ZmZlciIsInRleHQiLCJnZXRQYXJhbXMiLCJkaXJQYXRoIiwic3ViIiwib25EaWRDaGFuZ2UiLCJzZXRBY2NlcHRFbmFibGVtZW50IiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsInByb2dyZXNzTWVzc2FnZSIsImFjY2VwdENsYXNzTmFtZSIsImFjY2VwdFRleHQiLCJjYW5jZWwiLCJpblByb2dyZXNzIiwiZXJyb3IiLCJ3b3Jrc3BhY2UiLCJjb21tYW5kcyIsImNsYXNzTmFtZSIsIlRhYmJhYmxlVGV4dEVkaXRvciIsImF1dG9mb2N1cyIsIm1pbmkiLCJwcmVzZWxlY3QiLCJyZWFkT25seSIsImJ1ZmZlciIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJkaXNwb3NlIiwiZXhwb3J0cyIsIlByb3BUeXBlcyIsInNoYXBlIiwiZnVuYyIsImlzUmVxdWlyZWQiLCJib29sIiwiaW5zdGFuY2VPZiIsIkVycm9yIiwib2JqZWN0Il0sInNvdXJjZXMiOlsiaW5pdC1kaWFsb2cuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge1RleHRCdWZmZXJ9IGZyb20gJ2F0b20nO1xuXG5pbXBvcnQgVGFiR3JvdXAgZnJvbSAnLi4vdGFiLWdyb3VwJztcbmltcG9ydCB7VGFiYmFibGVUZXh0RWRpdG9yfSBmcm9tICcuL3RhYmJhYmxlJztcbmltcG9ydCBEaWFsb2dWaWV3IGZyb20gJy4vZGlhbG9nLXZpZXcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbml0RGlhbG9nIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAvLyBNb2RlbFxuICAgIHJlcXVlc3Q6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBnZXRQYXJhbXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBhY2NlcHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBjYW5jZWw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgfSkuaXNSZXF1aXJlZCxcbiAgICBpblByb2dyZXNzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBlcnJvcjogUHJvcFR5cGVzLmluc3RhbmNlT2YoRXJyb3IpLFxuXG4gICAgLy8gQXRvbSBlbnZpcm9ubWVudFxuICAgIHdvcmtzcGFjZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGNvbW1hbmRzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMudGFiR3JvdXAgPSBuZXcgVGFiR3JvdXAoKTtcblxuICAgIHRoaXMuZGVzdGluYXRpb25QYXRoID0gbmV3IFRleHRCdWZmZXIoe1xuICAgICAgdGV4dDogdGhpcy5wcm9wcy5yZXF1ZXN0LmdldFBhcmFtcygpLmRpclBhdGgsXG4gICAgfSk7XG5cbiAgICB0aGlzLnN1YiA9IHRoaXMuZGVzdGluYXRpb25QYXRoLm9uRGlkQ2hhbmdlKHRoaXMuc2V0QWNjZXB0RW5hYmxlbWVudCk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgYWNjZXB0RW5hYmxlZDogIXRoaXMuZGVzdGluYXRpb25QYXRoLmlzRW1wdHkoKSxcbiAgICB9O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8RGlhbG9nVmlld1xuICAgICAgICBwcm9ncmVzc01lc3NhZ2U9XCJJbml0aWFsaXppbmcuLi5cIlxuICAgICAgICBhY2NlcHRFbmFibGVkPXt0aGlzLnN0YXRlLmFjY2VwdEVuYWJsZWR9XG4gICAgICAgIGFjY2VwdENsYXNzTmFtZT1cImljb24gaWNvbi1yZXBvLWNyZWF0ZVwiXG4gICAgICAgIGFjY2VwdFRleHQ9XCJJbml0XCJcbiAgICAgICAgYWNjZXB0PXt0aGlzLmFjY2VwdH1cbiAgICAgICAgY2FuY2VsPXt0aGlzLnByb3BzLnJlcXVlc3QuY2FuY2VsfVxuICAgICAgICB0YWJHcm91cD17dGhpcy50YWJHcm91cH1cbiAgICAgICAgaW5Qcm9ncmVzcz17dGhpcy5wcm9wcy5pblByb2dyZXNzfVxuICAgICAgICBlcnJvcj17dGhpcy5wcm9wcy5lcnJvcn1cbiAgICAgICAgd29ya3NwYWNlPXt0aGlzLnByb3BzLndvcmtzcGFjZX1cbiAgICAgICAgY29tbWFuZHM9e3RoaXMucHJvcHMuY29tbWFuZHN9PlxuXG4gICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJnaXRodWItRGlhbG9nTGFiZWxcIj5cbiAgICAgICAgICBJbml0aWFsaXplIGdpdCByZXBvc2l0b3J5IGluIGRpcmVjdG9yeVxuICAgICAgICAgIDxUYWJiYWJsZVRleHRFZGl0b3JcbiAgICAgICAgICAgIHRhYkdyb3VwPXt0aGlzLnRhYkdyb3VwfVxuICAgICAgICAgICAgY29tbWFuZHM9e3RoaXMucHJvcHMuY29tbWFuZHN9XG4gICAgICAgICAgICBhdXRvZm9jdXNcbiAgICAgICAgICAgIG1pbmlcbiAgICAgICAgICAgIHByZXNlbGVjdFxuICAgICAgICAgICAgcmVhZE9ubHk9e3RoaXMucHJvcHMuaW5Qcm9ncmVzc31cbiAgICAgICAgICAgIGJ1ZmZlcj17dGhpcy5kZXN0aW5hdGlvblBhdGh9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9sYWJlbD5cblxuICAgICAgPC9EaWFsb2dWaWV3PlxuICAgICk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnRhYkdyb3VwLmF1dG9mb2N1cygpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5zdWIuZGlzcG9zZSgpO1xuICB9XG5cbiAgYWNjZXB0ID0gKCkgPT4ge1xuICAgIGNvbnN0IGRlc3RQYXRoID0gdGhpcy5kZXN0aW5hdGlvblBhdGguZ2V0VGV4dCgpO1xuICAgIGlmIChkZXN0UGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wcm9wcy5yZXF1ZXN0LmFjY2VwdChkZXN0UGF0aCk7XG4gIH1cblxuICBzZXRBY2NlcHRFbmFibGVtZW50ID0gKCkgPT4ge1xuICAgIGNvbnN0IGVuYWJsZW1lbnQgPSAhdGhpcy5kZXN0aW5hdGlvblBhdGguaXNFbXB0eSgpO1xuICAgIGlmIChlbmFibGVtZW50ICE9PSB0aGlzLnN0YXRlLmFjY2VwdEVuYWJsZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2FjY2VwdEVuYWJsZWQ6IGVuYWJsZW1lbnR9KTtcbiAgICB9XG4gIH1cbn1cbiJd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