"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _moment = _interopRequireDefault(require("moment"));
var _classnames = _interopRequireDefault(require("classnames"));
var _nodeEmoji = require("node-emoji");
var _commands = _interopRequireWildcard(require("../atom/commands"));
var _refHolder = _interopRequireDefault(require("../models/ref-holder"));
var _commitView = _interopRequireDefault(require("./commit-view"));
var _timeago = _interopRequireDefault(require("./timeago"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class RecentCommitView extends _react.default.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "copyCommitSha", event => {
      event.stopPropagation();
      const {
        commit,
        clipboard
      } = this.props;
      clipboard.write(commit.sha);
    });
    _defineProperty(this, "copyCommitSubject", event => {
      event.stopPropagation();
      const {
        commit,
        clipboard
      } = this.props;
      clipboard.write(commit.messageSubject);
    });
    _defineProperty(this, "undoLastCommit", event => {
      event.stopPropagation();
      this.props.undoLastCommit();
    });
    this.refRoot = new _refHolder.default();
  }
  componentDidMount() {
    if (this.props.isSelected) {
      this.refRoot.map(root => root.scrollIntoViewIfNeeded(false));
    }
  }
  componentDidUpdate(prevProps) {
    if (this.props.isSelected && !prevProps.isSelected) {
      this.refRoot.map(root => root.scrollIntoViewIfNeeded(false));
    }
  }
  render() {
    const authorMoment = (0, _moment.default)(this.props.commit.getAuthorDate() * 1000);
    const fullMessage = this.props.commit.getFullMessage();
    return _react.default.createElement("li", {
      ref: this.refRoot.setter,
      className: (0, _classnames.default)('github-RecentCommit', {
        'most-recent': this.props.isMostRecent,
        'is-selected': this.props.isSelected
      }),
      onClick: this.props.openCommit
    }, _react.default.createElement(_commands.default, {
      registry: this.props.commands,
      target: this.refRoot
    }, _react.default.createElement(_commands.Command, {
      command: "github:copy-commit-sha",
      callback: this.copyCommitSha
    }), _react.default.createElement(_commands.Command, {
      command: "github:copy-commit-subject",
      callback: this.copyCommitSubject
    })), this.renderAuthors(), _react.default.createElement("span", {
      className: "github-RecentCommit-message",
      title: (0, _nodeEmoji.emojify)(fullMessage)
    }, (0, _nodeEmoji.emojify)(this.props.commit.getMessageSubject())), this.props.isMostRecent && _react.default.createElement("button", {
      className: "btn github-RecentCommit-undoButton",
      onClick: this.undoLastCommit
    }, "Undo"), _react.default.createElement(_timeago.default, {
      className: "github-RecentCommit-time",
      type: "time",
      displayStyle: "short",
      time: authorMoment,
      title: authorMoment.format('MMM Do, YYYY')
    }));
  }
  renderAuthor(author) {
    const email = author.getEmail();
    const avatarUrl = author.getAvatarUrl();
    return _react.default.createElement("img", {
      className: "github-RecentCommit-avatar",
      key: email,
      src: avatarUrl,
      title: email,
      alt: `${email}'s avatar'`
    });
  }
  renderAuthors() {
    const coAuthors = this.props.commit.getCoAuthors();
    const authors = [this.props.commit.getAuthor(), ...coAuthors];
    return _react.default.createElement("span", {
      className: "github-RecentCommit-authors"
    }, authors.map(this.renderAuthor));
  }
}
_defineProperty(RecentCommitView, "propTypes", {
  commands: _propTypes.default.object.isRequired,
  clipboard: _propTypes.default.object.isRequired,
  commit: _propTypes.default.object.isRequired,
  undoLastCommit: _propTypes.default.func.isRequired,
  isMostRecent: _propTypes.default.bool.isRequired,
  openCommit: _propTypes.default.func.isRequired,
  isSelected: _propTypes.default.bool.isRequired
});
class RecentCommitsView extends _react.default.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "openSelectedCommit", () => this.props.openCommit({
      sha: this.props.selectedCommitSha,
      preserveFocus: false
    }));
    this.refRoot = new _refHolder.default();
  }
  setFocus(focus) {
    if (focus === this.constructor.focus.RECENT_COMMIT) {
      return this.refRoot.map(element => {
        element.focus();
        return true;
      }).getOr(false);
    }
    return false;
  }
  getFocus(element) {
    return this.refRoot.map(e => e.contains(element)).getOr(false) ? this.constructor.focus.RECENT_COMMIT : null;
  }
  render() {
    return _react.default.createElement("div", {
      className: "github-RecentCommits",
      tabIndex: "-1",
      ref: this.refRoot.setter
    }, _react.default.createElement(_commands.default, {
      registry: this.props.commands,
      target: this.refRoot
    }, _react.default.createElement(_commands.Command, {
      command: "core:move-down",
      callback: this.props.selectNextCommit
    }), _react.default.createElement(_commands.Command, {
      command: "core:move-up",
      callback: this.props.selectPreviousCommit
    }), _react.default.createElement(_commands.Command, {
      command: "github:dive",
      callback: this.openSelectedCommit
    })), this.renderCommits());
  }
  renderCommits() {
    if (this.props.commits.length === 0) {
      if (this.props.isLoading) {
        return _react.default.createElement("div", {
          className: "github-RecentCommits-message"
        }, "Recent commits");
      } else {
        return _react.default.createElement("div", {
          className: "github-RecentCommits-message"
        }, "Make your first commit");
      }
    } else {
      return _react.default.createElement("ul", {
        className: "github-RecentCommits-list"
      }, this.props.commits.map((commit, i) => {
        return _react.default.createElement(RecentCommitView, {
          key: commit.getSha(),
          commands: this.props.commands,
          clipboard: this.props.clipboard,
          isMostRecent: i === 0,
          commit: commit,
          undoLastCommit: this.props.undoLastCommit,
          openCommit: () => this.props.openCommit({
            sha: commit.getSha(),
            preserveFocus: true
          }),
          isSelected: this.props.selectedCommitSha === commit.getSha()
        });
      }));
    }
  }
  advanceFocusFrom(focus) {
    if (focus === this.constructor.focus.RECENT_COMMIT) {
      return Promise.resolve(this.constructor.focus.RECENT_COMMIT);
    }
    return Promise.resolve(null);
  }
  retreatFocusFrom(focus) {
    if (focus === this.constructor.focus.RECENT_COMMIT) {
      return Promise.resolve(_commitView.default.lastFocus);
    }
    return Promise.resolve(null);
  }
}
exports.default = RecentCommitsView;
_defineProperty(RecentCommitsView, "propTypes", {
  // Model state
  commits: _propTypes.default.arrayOf(_propTypes.default.object).isRequired,
  isLoading: _propTypes.default.bool.isRequired,
  selectedCommitSha: _propTypes.default.string.isRequired,
  // Atom environment
  clipboard: _propTypes.default.object.isRequired,
  commands: _propTypes.default.object.isRequired,
  // Action methods
  undoLastCommit: _propTypes.default.func.isRequired,
  openCommit: _propTypes.default.func.isRequired,
  selectNextCommit: _propTypes.default.func.isRequired,
  selectPreviousCommit: _propTypes.default.func.isRequired
});
_defineProperty(RecentCommitsView, "focus", {
  RECENT_COMMIT: Symbol('recent_commit')
});
_defineProperty(RecentCommitsView, "firstFocus", RecentCommitsView.focus.RECENT_COMMIT);
_defineProperty(RecentCommitsView, "lastFocus", RecentCommitsView.focus.RECENT_COMMIT);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfbW9tZW50IiwiX2NsYXNzbmFtZXMiLCJfbm9kZUVtb2ppIiwiX2NvbW1hbmRzIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcmVmSG9sZGVyIiwiX2NvbW1pdFZpZXciLCJfdGltZWFnbyIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIm9iaiIsIl9kZWZpbmVQcm9wZXJ0eSIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJSZWNlbnRDb21taXRWaWV3IiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiZXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJjb21taXQiLCJjbGlwYm9hcmQiLCJ3cml0ZSIsInNoYSIsIm1lc3NhZ2VTdWJqZWN0IiwidW5kb0xhc3RDb21taXQiLCJyZWZSb290IiwiUmVmSG9sZGVyIiwiY29tcG9uZW50RGlkTW91bnQiLCJpc1NlbGVjdGVkIiwibWFwIiwicm9vdCIsInNjcm9sbEludG9WaWV3SWZOZWVkZWQiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJyZW5kZXIiLCJhdXRob3JNb21lbnQiLCJtb21lbnQiLCJnZXRBdXRob3JEYXRlIiwiZnVsbE1lc3NhZ2UiLCJnZXRGdWxsTWVzc2FnZSIsImNyZWF0ZUVsZW1lbnQiLCJyZWYiLCJzZXR0ZXIiLCJjbGFzc05hbWUiLCJjeCIsImlzTW9zdFJlY2VudCIsIm9uQ2xpY2siLCJvcGVuQ29tbWl0IiwicmVnaXN0cnkiLCJjb21tYW5kcyIsInRhcmdldCIsIkNvbW1hbmQiLCJjb21tYW5kIiwiY2FsbGJhY2siLCJjb3B5Q29tbWl0U2hhIiwiY29weUNvbW1pdFN1YmplY3QiLCJyZW5kZXJBdXRob3JzIiwidGl0bGUiLCJlbW9qaWZ5IiwiZ2V0TWVzc2FnZVN1YmplY3QiLCJ0eXBlIiwiZGlzcGxheVN0eWxlIiwidGltZSIsImZvcm1hdCIsInJlbmRlckF1dGhvciIsImF1dGhvciIsImVtYWlsIiwiZ2V0RW1haWwiLCJhdmF0YXJVcmwiLCJnZXRBdmF0YXJVcmwiLCJzcmMiLCJhbHQiLCJjb0F1dGhvcnMiLCJnZXRDb0F1dGhvcnMiLCJhdXRob3JzIiwiZ2V0QXV0aG9yIiwiUHJvcFR5cGVzIiwib2JqZWN0IiwiaXNSZXF1aXJlZCIsImZ1bmMiLCJib29sIiwiUmVjZW50Q29tbWl0c1ZpZXciLCJzZWxlY3RlZENvbW1pdFNoYSIsInByZXNlcnZlRm9jdXMiLCJzZXRGb2N1cyIsImZvY3VzIiwiUkVDRU5UX0NPTU1JVCIsImVsZW1lbnQiLCJnZXRPciIsImdldEZvY3VzIiwiY29udGFpbnMiLCJ0YWJJbmRleCIsInNlbGVjdE5leHRDb21taXQiLCJzZWxlY3RQcmV2aW91c0NvbW1pdCIsIm9wZW5TZWxlY3RlZENvbW1pdCIsInJlbmRlckNvbW1pdHMiLCJjb21taXRzIiwibGVuZ3RoIiwiaXNMb2FkaW5nIiwiZ2V0U2hhIiwiYWR2YW5jZUZvY3VzRnJvbSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmV0cmVhdEZvY3VzRnJvbSIsIkNvbW1pdFZpZXciLCJsYXN0Rm9jdXMiLCJleHBvcnRzIiwiYXJyYXlPZiIsInN0cmluZyJdLCJzb3VyY2VzIjpbInJlY2VudC1jb21taXRzLXZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQge2Vtb2ppZnl9IGZyb20gJ25vZGUtZW1vamknO1xuXG5pbXBvcnQgQ29tbWFuZHMsIHtDb21tYW5kfSBmcm9tICcuLi9hdG9tL2NvbW1hbmRzJztcbmltcG9ydCBSZWZIb2xkZXIgZnJvbSAnLi4vbW9kZWxzL3JlZi1ob2xkZXInO1xuXG5pbXBvcnQgQ29tbWl0VmlldyBmcm9tICcuL2NvbW1pdC12aWV3JztcbmltcG9ydCBUaW1lYWdvIGZyb20gJy4vdGltZWFnbyc7XG5cbmNsYXNzIFJlY2VudENvbW1pdFZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNvbW1hbmRzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgY2xpcGJvYXJkOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgY29tbWl0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgdW5kb0xhc3RDb21taXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaXNNb3N0UmVjZW50OiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIG9wZW5Db21taXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaXNTZWxlY3RlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMucmVmUm9vdCA9IG5ldyBSZWZIb2xkZXIoKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLmlzU2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMucmVmUm9vdC5tYXAocm9vdCA9PiByb290LnNjcm9sbEludG9WaWV3SWZOZWVkZWQoZmFsc2UpKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuaXNTZWxlY3RlZCAmJiAhcHJldlByb3BzLmlzU2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMucmVmUm9vdC5tYXAocm9vdCA9PiByb290LnNjcm9sbEludG9WaWV3SWZOZWVkZWQoZmFsc2UpKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgYXV0aG9yTW9tZW50ID0gbW9tZW50KHRoaXMucHJvcHMuY29tbWl0LmdldEF1dGhvckRhdGUoKSAqIDEwMDApO1xuICAgIGNvbnN0IGZ1bGxNZXNzYWdlID0gdGhpcy5wcm9wcy5jb21taXQuZ2V0RnVsbE1lc3NhZ2UoKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8bGlcbiAgICAgICAgcmVmPXt0aGlzLnJlZlJvb3Quc2V0dGVyfVxuICAgICAgICBjbGFzc05hbWU9e2N4KCdnaXRodWItUmVjZW50Q29tbWl0Jywge1xuICAgICAgICAgICdtb3N0LXJlY2VudCc6IHRoaXMucHJvcHMuaXNNb3N0UmVjZW50LFxuICAgICAgICAgICdpcy1zZWxlY3RlZCc6IHRoaXMucHJvcHMuaXNTZWxlY3RlZCxcbiAgICAgICAgfSl9XG4gICAgICAgIG9uQ2xpY2s9e3RoaXMucHJvcHMub3BlbkNvbW1pdH0+XG4gICAgICAgIDxDb21tYW5kcyByZWdpc3RyeT17dGhpcy5wcm9wcy5jb21tYW5kc30gdGFyZ2V0PXt0aGlzLnJlZlJvb3R9PlxuICAgICAgICAgIDxDb21tYW5kIGNvbW1hbmQ9XCJnaXRodWI6Y29weS1jb21taXQtc2hhXCIgY2FsbGJhY2s9e3RoaXMuY29weUNvbW1pdFNoYX0gLz5cbiAgICAgICAgICA8Q29tbWFuZCBjb21tYW5kPVwiZ2l0aHViOmNvcHktY29tbWl0LXN1YmplY3RcIiBjYWxsYmFjaz17dGhpcy5jb3B5Q29tbWl0U3ViamVjdH0gLz5cbiAgICAgICAgPC9Db21tYW5kcz5cbiAgICAgICAge3RoaXMucmVuZGVyQXV0aG9ycygpfVxuICAgICAgICA8c3BhblxuICAgICAgICAgIGNsYXNzTmFtZT1cImdpdGh1Yi1SZWNlbnRDb21taXQtbWVzc2FnZVwiXG4gICAgICAgICAgdGl0bGU9e2Vtb2ppZnkoZnVsbE1lc3NhZ2UpfT5cbiAgICAgICAgICB7ZW1vamlmeSh0aGlzLnByb3BzLmNvbW1pdC5nZXRNZXNzYWdlU3ViamVjdCgpKX1cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICB7dGhpcy5wcm9wcy5pc01vc3RSZWNlbnQgJiYgKFxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBnaXRodWItUmVjZW50Q29tbWl0LXVuZG9CdXR0b25cIlxuICAgICAgICAgICAgb25DbGljaz17dGhpcy51bmRvTGFzdENvbW1pdH0+XG4gICAgICAgICAgICBVbmRvXG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICl9XG4gICAgICAgIDxUaW1lYWdvXG4gICAgICAgICAgY2xhc3NOYW1lPVwiZ2l0aHViLVJlY2VudENvbW1pdC10aW1lXCJcbiAgICAgICAgICB0eXBlPVwidGltZVwiXG4gICAgICAgICAgZGlzcGxheVN0eWxlPVwic2hvcnRcIlxuICAgICAgICAgIHRpbWU9e2F1dGhvck1vbWVudH1cbiAgICAgICAgICB0aXRsZT17YXV0aG9yTW9tZW50LmZvcm1hdCgnTU1NIERvLCBZWVlZJyl9XG4gICAgICAgIC8+XG4gICAgICA8L2xpPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJBdXRob3IoYXV0aG9yKSB7XG4gICAgY29uc3QgZW1haWwgPSBhdXRob3IuZ2V0RW1haWwoKTtcbiAgICBjb25zdCBhdmF0YXJVcmwgPSBhdXRob3IuZ2V0QXZhdGFyVXJsKCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGltZyBjbGFzc05hbWU9XCJnaXRodWItUmVjZW50Q29tbWl0LWF2YXRhclwiXG4gICAgICAgIGtleT17ZW1haWx9XG4gICAgICAgIHNyYz17YXZhdGFyVXJsfVxuICAgICAgICB0aXRsZT17ZW1haWx9XG4gICAgICAgIGFsdD17YCR7ZW1haWx9J3MgYXZhdGFyJ2B9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJBdXRob3JzKCkge1xuICAgIGNvbnN0IGNvQXV0aG9ycyA9IHRoaXMucHJvcHMuY29tbWl0LmdldENvQXV0aG9ycygpO1xuICAgIGNvbnN0IGF1dGhvcnMgPSBbdGhpcy5wcm9wcy5jb21taXQuZ2V0QXV0aG9yKCksIC4uLmNvQXV0aG9yc107XG5cbiAgICByZXR1cm4gKFxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2l0aHViLVJlY2VudENvbW1pdC1hdXRob3JzXCI+XG4gICAgICAgIHthdXRob3JzLm1hcCh0aGlzLnJlbmRlckF1dGhvcil9XG4gICAgICA8L3NwYW4+XG4gICAgKTtcbiAgfVxuXG4gIGNvcHlDb21taXRTaGEgPSBldmVudCA9PiB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgY29uc3Qge2NvbW1pdCwgY2xpcGJvYXJkfSA9IHRoaXMucHJvcHM7XG4gICAgY2xpcGJvYXJkLndyaXRlKGNvbW1pdC5zaGEpO1xuICB9XG5cbiAgY29weUNvbW1pdFN1YmplY3QgPSBldmVudCA9PiB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgY29uc3Qge2NvbW1pdCwgY2xpcGJvYXJkfSA9IHRoaXMucHJvcHM7XG4gICAgY2xpcGJvYXJkLndyaXRlKGNvbW1pdC5tZXNzYWdlU3ViamVjdCk7XG4gIH1cblxuICB1bmRvTGFzdENvbW1pdCA9IGV2ZW50ID0+IHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLnByb3BzLnVuZG9MYXN0Q29tbWl0KCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVjZW50Q29tbWl0c1ZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8vIE1vZGVsIHN0YXRlXG4gICAgY29tbWl0czogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9iamVjdCkuaXNSZXF1aXJlZCxcbiAgICBpc0xvYWRpbmc6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgc2VsZWN0ZWRDb21taXRTaGE6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblxuICAgIC8vIEF0b20gZW52aXJvbm1lbnRcbiAgICBjbGlwYm9hcmQ6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBjb21tYW5kczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gICAgLy8gQWN0aW9uIG1ldGhvZHNcbiAgICB1bmRvTGFzdENvbW1pdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvcGVuQ29tbWl0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNlbGVjdE5leHRDb21taXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2VsZWN0UHJldmlvdXNDb21taXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgc3RhdGljIGZvY3VzID0ge1xuICAgIFJFQ0VOVF9DT01NSVQ6IFN5bWJvbCgncmVjZW50X2NvbW1pdCcpLFxuICB9O1xuXG4gIHN0YXRpYyBmaXJzdEZvY3VzID0gUmVjZW50Q29tbWl0c1ZpZXcuZm9jdXMuUkVDRU5UX0NPTU1JVDtcblxuICBzdGF0aWMgbGFzdEZvY3VzID0gUmVjZW50Q29tbWl0c1ZpZXcuZm9jdXMuUkVDRU5UX0NPTU1JVDtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnJlZlJvb3QgPSBuZXcgUmVmSG9sZGVyKCk7XG4gIH1cblxuICBzZXRGb2N1cyhmb2N1cykge1xuICAgIGlmIChmb2N1cyA9PT0gdGhpcy5jb25zdHJ1Y3Rvci5mb2N1cy5SRUNFTlRfQ09NTUlUKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWZSb290Lm1hcChlbGVtZW50ID0+IHtcbiAgICAgICAgZWxlbWVudC5mb2N1cygpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pLmdldE9yKGZhbHNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBnZXRGb2N1cyhlbGVtZW50KSB7XG4gICAgcmV0dXJuIHRoaXMucmVmUm9vdC5tYXAoZSA9PiBlLmNvbnRhaW5zKGVsZW1lbnQpKS5nZXRPcihmYWxzZSlcbiAgICAgID8gdGhpcy5jb25zdHJ1Y3Rvci5mb2N1cy5SRUNFTlRfQ09NTUlUXG4gICAgICA6IG51bGw7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2l0aHViLVJlY2VudENvbW1pdHNcIiB0YWJJbmRleD1cIi0xXCIgcmVmPXt0aGlzLnJlZlJvb3Quc2V0dGVyfT5cbiAgICAgICAgPENvbW1hbmRzIHJlZ2lzdHJ5PXt0aGlzLnByb3BzLmNvbW1hbmRzfSB0YXJnZXQ9e3RoaXMucmVmUm9vdH0+XG4gICAgICAgICAgPENvbW1hbmQgY29tbWFuZD1cImNvcmU6bW92ZS1kb3duXCIgY2FsbGJhY2s9e3RoaXMucHJvcHMuc2VsZWN0TmV4dENvbW1pdH0gLz5cbiAgICAgICAgICA8Q29tbWFuZCBjb21tYW5kPVwiY29yZTptb3ZlLXVwXCIgY2FsbGJhY2s9e3RoaXMucHJvcHMuc2VsZWN0UHJldmlvdXNDb21taXR9IC8+XG4gICAgICAgICAgPENvbW1hbmQgY29tbWFuZD1cImdpdGh1YjpkaXZlXCIgY2FsbGJhY2s9e3RoaXMub3BlblNlbGVjdGVkQ29tbWl0fSAvPlxuICAgICAgICA8L0NvbW1hbmRzPlxuICAgICAgICB7dGhpcy5yZW5kZXJDb21taXRzKCl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyQ29tbWl0cygpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5jb21taXRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuaXNMb2FkaW5nKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnaXRodWItUmVjZW50Q29tbWl0cy1tZXNzYWdlXCI+XG4gICAgICAgICAgICBSZWNlbnQgY29tbWl0c1xuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdpdGh1Yi1SZWNlbnRDb21taXRzLW1lc3NhZ2VcIj5cbiAgICAgICAgICAgIE1ha2UgeW91ciBmaXJzdCBjb21taXRcbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPHVsIGNsYXNzTmFtZT1cImdpdGh1Yi1SZWNlbnRDb21taXRzLWxpc3RcIj5cbiAgICAgICAgICB7dGhpcy5wcm9wcy5jb21taXRzLm1hcCgoY29tbWl0LCBpKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8UmVjZW50Q29tbWl0Vmlld1xuICAgICAgICAgICAgICAgIGtleT17Y29tbWl0LmdldFNoYSgpfVxuICAgICAgICAgICAgICAgIGNvbW1hbmRzPXt0aGlzLnByb3BzLmNvbW1hbmRzfVxuICAgICAgICAgICAgICAgIGNsaXBib2FyZD17dGhpcy5wcm9wcy5jbGlwYm9hcmR9XG4gICAgICAgICAgICAgICAgaXNNb3N0UmVjZW50PXtpID09PSAwfVxuICAgICAgICAgICAgICAgIGNvbW1pdD17Y29tbWl0fVxuICAgICAgICAgICAgICAgIHVuZG9MYXN0Q29tbWl0PXt0aGlzLnByb3BzLnVuZG9MYXN0Q29tbWl0fVxuICAgICAgICAgICAgICAgIG9wZW5Db21taXQ9eygpID0+IHRoaXMucHJvcHMub3BlbkNvbW1pdCh7c2hhOiBjb21taXQuZ2V0U2hhKCksIHByZXNlcnZlRm9jdXM6IHRydWV9KX1cbiAgICAgICAgICAgICAgICBpc1NlbGVjdGVkPXt0aGlzLnByb3BzLnNlbGVjdGVkQ29tbWl0U2hhID09PSBjb21taXQuZ2V0U2hhKCl9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pfVxuICAgICAgICA8L3VsPlxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBvcGVuU2VsZWN0ZWRDb21taXQgPSAoKSA9PiB0aGlzLnByb3BzLm9wZW5Db21taXQoe3NoYTogdGhpcy5wcm9wcy5zZWxlY3RlZENvbW1pdFNoYSwgcHJlc2VydmVGb2N1czogZmFsc2V9KVxuXG4gIGFkdmFuY2VGb2N1c0Zyb20oZm9jdXMpIHtcbiAgICBpZiAoZm9jdXMgPT09IHRoaXMuY29uc3RydWN0b3IuZm9jdXMuUkVDRU5UX0NPTU1JVCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmNvbnN0cnVjdG9yLmZvY3VzLlJFQ0VOVF9DT01NSVQpO1xuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gIH1cblxuICByZXRyZWF0Rm9jdXNGcm9tKGZvY3VzKSB7XG4gICAgaWYgKGZvY3VzID09PSB0aGlzLmNvbnN0cnVjdG9yLmZvY3VzLlJFQ0VOVF9DT01NSVQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoQ29tbWl0Vmlldy5sYXN0Rm9jdXMpO1xuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxP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