"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _propTypes2 = require("../prop-types");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class RemoteSelectorView extends _react.default.Component {
  render() {
    const {
      remotes,
      currentBranch,
      selectRemote
    } = this.props;
    // todo: ask Ash how to test this before merging.
    return _react.default.createElement("div", {
      className: "github-RemoteSelector"
    }, _react.default.createElement("div", {
      className: "github-GitHub-LargeIcon icon icon-mirror"
    }), _react.default.createElement("h1", null, "Select a Remote"), _react.default.createElement("div", {
      className: "initialize-repo-description"
    }, _react.default.createElement("span", null, "This repository has multiple remotes hosted at GitHub.com. Select a remote to see pull requests associated with the ", _react.default.createElement("strong", null, currentBranch.getName()), " branch:")), _react.default.createElement("ul", null, Array.from(remotes, remote => _react.default.createElement("li", {
      key: remote.getName()
    }, _react.default.createElement("button", {
      className: "btn btn-primary",
      onClick: e => selectRemote(e, remote)
    }, remote.getName(), " (", remote.getOwner(), "/", remote.getRepo(), ")")))));
  }
}
exports.default = RemoteSelectorView;
_defineProperty(RemoteSelectorView, "propTypes", {
  remotes: _propTypes2.RemoteSetPropType.isRequired,
  currentBranch: _propTypes2.BranchPropType.isRequired,
  selectRemote: _propTypes.default.func.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfcHJvcFR5cGVzMiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2RlZmluZVByb3BlcnR5Iiwia2V5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidCIsImkiLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJyIiwiZSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwiY2FsbCIsIlR5cGVFcnJvciIsIk51bWJlciIsIlJlbW90ZVNlbGVjdG9yVmlldyIsIlJlYWN0IiwiQ29tcG9uZW50IiwicmVuZGVyIiwicmVtb3RlcyIsImN1cnJlbnRCcmFuY2giLCJzZWxlY3RSZW1vdGUiLCJwcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJnZXROYW1lIiwiQXJyYXkiLCJmcm9tIiwicmVtb3RlIiwib25DbGljayIsImdldE93bmVyIiwiZ2V0UmVwbyIsImV4cG9ydHMiLCJSZW1vdGVTZXRQcm9wVHlwZSIsImlzUmVxdWlyZWQiLCJCcmFuY2hQcm9wVHlwZSIsIlByb3BUeXBlcyIsImZ1bmMiXSwic291cmNlcyI6WyJyZW1vdGUtc2VsZWN0b3Itdmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHtSZW1vdGVTZXRQcm9wVHlwZSwgQnJhbmNoUHJvcFR5cGV9IGZyb20gJy4uL3Byb3AtdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZW1vdGVTZWxlY3RvclZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHJlbW90ZXM6IFJlbW90ZVNldFByb3BUeXBlLmlzUmVxdWlyZWQsXG4gICAgY3VycmVudEJyYW5jaDogQnJhbmNoUHJvcFR5cGUuaXNSZXF1aXJlZCxcbiAgICBzZWxlY3RSZW1vdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge3JlbW90ZXMsIGN1cnJlbnRCcmFuY2gsIHNlbGVjdFJlbW90ZX0gPSB0aGlzLnByb3BzO1xuICAgIC8vIHRvZG86IGFzayBBc2ggaG93IHRvIHRlc3QgdGhpcyBiZWZvcmUgbWVyZ2luZy5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJnaXRodWItUmVtb3RlU2VsZWN0b3JcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnaXRodWItR2l0SHViLUxhcmdlSWNvbiBpY29uIGljb24tbWlycm9yXCIgLz5cbiAgICAgICAgPGgxPlNlbGVjdCBhIFJlbW90ZTwvaDE+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5pdGlhbGl6ZS1yZXBvLWRlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgPHNwYW4+VGhpcyByZXBvc2l0b3J5IGhhcyBtdWx0aXBsZSByZW1vdGVzIGhvc3RlZCBhdCBHaXRIdWIuY29tLlxuICAgICAgICAgIFNlbGVjdCBhIHJlbW90ZSB0byBzZWUgcHVsbCByZXF1ZXN0cyBhc3NvY2lhdGVkXG4gICAgICAgICAgd2l0aCB0aGUgPHN0cm9uZz57Y3VycmVudEJyYW5jaC5nZXROYW1lKCl9PC9zdHJvbmc+IGJyYW5jaDo8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDx1bD5cbiAgICAgICAgICB7QXJyYXkuZnJvbShyZW1vdGVzLCByZW1vdGUgPT4gKFxuICAgICAgICAgICAgPGxpIGtleT17cmVtb3RlLmdldE5hbWUoKX0+XG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1wcmltYXJ5XCIgb25DbGljaz17ZSA9PiBzZWxlY3RSZW1vdGUoZSwgcmVtb3RlKX0+XG4gICAgICAgICAgICAgICAge3JlbW90ZS5nZXROYW1lKCl9ICh7cmVtb3RlLmdldE93bmVyKCl9L3tyZW1vdGUuZ2V0UmVwbygpfSlcbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L3VsPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRSxXQUFBLEdBQUFGLE9BQUE7QUFBZ0UsU0FBQUQsdUJBQUFJLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFBQSxTQUFBRyxnQkFBQUgsR0FBQSxFQUFBSSxHQUFBLEVBQUFDLEtBQUEsSUFBQUQsR0FBQSxHQUFBRSxjQUFBLENBQUFGLEdBQUEsT0FBQUEsR0FBQSxJQUFBSixHQUFBLElBQUFPLE1BQUEsQ0FBQUMsY0FBQSxDQUFBUixHQUFBLEVBQUFJLEdBQUEsSUFBQUMsS0FBQSxFQUFBQSxLQUFBLEVBQUFJLFVBQUEsUUFBQUMsWUFBQSxRQUFBQyxRQUFBLG9CQUFBWCxHQUFBLENBQUFJLEdBQUEsSUFBQUMsS0FBQSxXQUFBTCxHQUFBO0FBQUEsU0FBQU0sZUFBQU0sQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLFlBQUEsQ0FBQUYsQ0FBQSx1Q0FBQUMsQ0FBQSxHQUFBQSxDQUFBLEdBQUFFLE1BQUEsQ0FBQUYsQ0FBQTtBQUFBLFNBQUFDLGFBQUFGLENBQUEsRUFBQUksQ0FBQSwyQkFBQUosQ0FBQSxLQUFBQSxDQUFBLFNBQUFBLENBQUEsTUFBQUssQ0FBQSxHQUFBTCxDQUFBLENBQUFNLE1BQUEsQ0FBQUMsV0FBQSxrQkFBQUYsQ0FBQSxRQUFBSixDQUFBLEdBQUFJLENBQUEsQ0FBQUcsSUFBQSxDQUFBUixDQUFBLEVBQUFJLENBQUEsdUNBQUFILENBQUEsU0FBQUEsQ0FBQSxZQUFBUSxTQUFBLHlFQUFBTCxDQUFBLEdBQUFELE1BQUEsR0FBQU8sTUFBQSxFQUFBVixDQUFBO0FBRWpELE1BQU1XLGtCQUFrQixTQUFTQyxjQUFLLENBQUNDLFNBQVMsQ0FBQztFQU85REMsTUFBTUEsQ0FBQSxFQUFHO0lBQ1AsTUFBTTtNQUFDQyxPQUFPO01BQUVDLGFBQWE7TUFBRUM7SUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDQyxLQUFLO0lBQ3pEO0lBQ0EsT0FDRW5DLE1BQUEsQ0FBQU8sT0FBQSxDQUFBNkIsYUFBQTtNQUFLQyxTQUFTLEVBQUM7SUFBdUIsR0FDcENyQyxNQUFBLENBQUFPLE9BQUEsQ0FBQTZCLGFBQUE7TUFBS0MsU0FBUyxFQUFDO0lBQTBDLENBQUUsQ0FBQyxFQUM1RHJDLE1BQUEsQ0FBQU8sT0FBQSxDQUFBNkIsYUFBQSw4QkFBdUIsQ0FBQyxFQUN4QnBDLE1BQUEsQ0FBQU8sT0FBQSxDQUFBNkIsYUFBQTtNQUFLQyxTQUFTLEVBQUM7SUFBNkIsR0FDMUNyQyxNQUFBLENBQUFPLE9BQUEsQ0FBQTZCLGFBQUEsdUlBRVNwQyxNQUFBLENBQUFPLE9BQUEsQ0FBQTZCLGFBQUEsaUJBQVNILGFBQWEsQ0FBQ0ssT0FBTyxDQUFDLENBQVUsQ0FBQyxZQUFjLENBQzlELENBQUMsRUFFTnRDLE1BQUEsQ0FBQU8sT0FBQSxDQUFBNkIsYUFBQSxhQUNHRyxLQUFLLENBQUNDLElBQUksQ0FBQ1IsT0FBTyxFQUFFUyxNQUFNLElBQ3pCekMsTUFBQSxDQUFBTyxPQUFBLENBQUE2QixhQUFBO01BQUkzQixHQUFHLEVBQUVnQyxNQUFNLENBQUNILE9BQU8sQ0FBQztJQUFFLEdBQ3hCdEMsTUFBQSxDQUFBTyxPQUFBLENBQUE2QixhQUFBO01BQVFDLFNBQVMsRUFBQyxpQkFBaUI7TUFBQ0ssT0FBTyxFQUFFcEIsQ0FBQyxJQUFJWSxZQUFZLENBQUNaLENBQUMsRUFBRW1CLE1BQU07SUFBRSxHQUN2RUEsTUFBTSxDQUFDSCxPQUFPLENBQUMsQ0FBQyxRQUFJRyxNQUFNLENBQUNFLFFBQVEsQ0FBQyxDQUFDLE9BQUdGLE1BQU0sQ0FBQ0csT0FBTyxDQUFDLENBQUMsS0FDbkQsQ0FDTixDQUNMLENBQ0MsQ0FDRCxDQUFDO0VBRVY7QUFDRjtBQUFDQyxPQUFBLENBQUF0QyxPQUFBLEdBQUFxQixrQkFBQTtBQUFBcEIsZUFBQSxDQWhDb0JvQixrQkFBa0IsZUFDbEI7RUFDakJJLE9BQU8sRUFBRWMsNkJBQWlCLENBQUNDLFVBQVU7RUFDckNkLGFBQWEsRUFBRWUsMEJBQWMsQ0FBQ0QsVUFBVTtFQUN4Q2IsWUFBWSxFQUFFZSxrQkFBUyxDQUFDQyxJQUFJLENBQUNIO0FBQy9CLENBQUMifQ==