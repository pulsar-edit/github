"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _donutChart = _interopRequireDefault(require("./donut-chart"));
var _helpers = require("../helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class StatusDonutChart extends _react.default.Component {
  render() {
    const slices = ['pending', 'failure', 'success'].reduce((acc, type) => {
      const count = this.props[type];
      if (count > 0) {
        acc.push({
          type,
          className: type,
          count
        });
      }
      return acc;
    }, []);
    return _react.default.createElement(_donutChart.default, _extends({}, (0, _helpers.unusedProps)(this.props, this.constructor.propTypes), {
      slices: slices
    }));
  }
}
exports.default = StatusDonutChart;
_defineProperty(StatusDonutChart, "propTypes", {
  pending: _propTypes.default.number,
  failure: _propTypes.default.number,
  success: _propTypes.default.number
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfZG9udXRDaGFydCIsIl9oZWxwZXJzIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ0IiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiciIsImUiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsIlR5cGVFcnJvciIsIk51bWJlciIsIlN0YXR1c0RvbnV0Q2hhcnQiLCJSZWFjdCIsIkNvbXBvbmVudCIsInJlbmRlciIsInNsaWNlcyIsInJlZHVjZSIsImFjYyIsInR5cGUiLCJjb3VudCIsInByb3BzIiwicHVzaCIsImNsYXNzTmFtZSIsImNyZWF0ZUVsZW1lbnQiLCJ1bnVzZWRQcm9wcyIsImNvbnN0cnVjdG9yIiwicHJvcFR5cGVzIiwiZXhwb3J0cyIsInBlbmRpbmciLCJQcm9wVHlwZXMiLCJudW1iZXIiLCJmYWlsdXJlIiwic3VjY2VzcyJdLCJzb3VyY2VzIjpbInN0YXR1cy1kb251dC1jaGFydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBEb251dENoYXJ0IGZyb20gJy4vZG9udXQtY2hhcnQnO1xuXG5pbXBvcnQge3VudXNlZFByb3BzfSBmcm9tICcuLi9oZWxwZXJzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdHVzRG9udXRDaGFydCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgcGVuZGluZzogUHJvcFR5cGVzLm51bWJlcixcbiAgICBmYWlsdXJlOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHN1Y2Nlc3M6IFByb3BUeXBlcy5udW1iZXIsXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qgc2xpY2VzID0gWydwZW5kaW5nJywgJ2ZhaWx1cmUnLCAnc3VjY2VzcyddLnJlZHVjZSgoYWNjLCB0eXBlKSA9PiB7XG4gICAgICBjb25zdCBjb3VudCA9IHRoaXMucHJvcHNbdHlwZV07XG4gICAgICBpZiAoY291bnQgPiAwKSB7XG4gICAgICAgIGFjYy5wdXNoKHt0eXBlLCBjbGFzc05hbWU6IHR5cGUsIGNvdW50fSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKTtcblxuICAgIHJldHVybiA8RG9udXRDaGFydCB7Li4udW51c2VkUHJvcHModGhpcy5wcm9wcywgdGhpcy5jb25zdHJ1Y3Rvci5wcm9wVHlwZXMpfSBzbGljZXM9e3NsaWNlc30gLz47XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsV0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUcsUUFBQSxHQUFBSCxPQUFBO0FBQXVDLFNBQUFELHVCQUFBSyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBQUEsU0FBQUcsU0FBQSxJQUFBQSxRQUFBLEdBQUFDLE1BQUEsQ0FBQUMsTUFBQSxHQUFBRCxNQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQSxlQUFBQyxNQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxH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