"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BareCommitCommentThreadView = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactRelay = require("react-relay");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _commitCommentView = _interopRequireDefault(require("./commit-comment-view"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class BareCommitCommentThreadView extends _react.default.Component {
  render() {
    const {
      item
    } = this.props;
    return _react.default.createElement("div", {
      className: "commit-comment-thread timeline-item"
    }, item.comments.edges.map((edge, i) => _react.default.createElement(_commitCommentView.default, {
      isReply: i !== 0,
      key: edge.node.id,
      item: edge.node,
      switchToIssueish: this.props.switchToIssueish
    })));
  }
}
exports.BareCommitCommentThreadView = BareCommitCommentThreadView;
_defineProperty(BareCommitCommentThreadView, "propTypes", {
  item: _propTypes.default.shape({
    commit: _propTypes.default.shape({
      oid: _propTypes.default.string.isRequired
    }).isRequired,
    comments: _propTypes.default.shape({
      edges: _propTypes.default.arrayOf(_propTypes.default.shape({
        node: _propTypes.default.object.isRequired
      }).isRequired).isRequired
    }).isRequired
  }).isRequired,
  switchToIssueish: _propTypes.default.func.isRequired
});
var _default = (0, _reactRelay.createFragmentContainer)(BareCommitCommentThreadView, {
  item: function () {
    const node = require("./__generated__/commitCommentThreadView_item.graphql");
    if (node.hash && node.hash !== "2f881b33df634a755a5d66b192c2791b") {
      console.error("The definition of 'commitCommentThreadView_item' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }
    return require("./__generated__/commitCommentThreadView_item.graphql");
  }
});
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdFJlbGF5IiwiX3Byb3BUeXBlcyIsIl9jb21taXRDb21tZW50VmlldyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2RlZmluZVByb3BlcnR5Iiwia2V5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiYXJnIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiY2FsbCIsIlR5cGVFcnJvciIsIk51bWJlciIsIkJhcmVDb21taXRDb21tZW50VGhyZWFkVmlldyIsIlJlYWN0IiwiQ29tcG9uZW50IiwicmVuZGVyIiwiaXRlbSIsInByb3BzIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImNvbW1lbnRzIiwiZWRnZXMiLCJtYXAiLCJlZGdlIiwiaSIsImlzUmVwbHkiLCJub2RlIiwiaWQiLCJzd2l0Y2hUb0lzc3VlaXNoIiwiZXhwb3J0cyIsIlByb3BUeXBlcyIsInNoYXBlIiwiY29tbWl0Iiwib2lkIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsImFycmF5T2YiLCJvYmplY3QiLCJmdW5jIiwiX2RlZmF1bHQiLCJjcmVhdGVGcmFnbWVudENvbnRhaW5lciIsImhhc2giLCJjb25zb2xlIiwiZXJyb3IiXSwic291cmNlcyI6WyJjb21taXQtY29tbWVudC10aHJlYWQtdmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtncmFwaHFsLCBjcmVhdGVGcmFnbWVudENvbnRhaW5lcn0gZnJvbSAncmVhY3QtcmVsYXknO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IENvbW1pdENvbW1lbnRWaWV3IGZyb20gJy4vY29tbWl0LWNvbW1lbnQtdmlldyc7XG5cbmV4cG9ydCBjbGFzcyBCYXJlQ29tbWl0Q29tbWVudFRocmVhZFZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGl0ZW06IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBjb21taXQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIG9pZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgfSkuaXNSZXF1aXJlZCxcbiAgICAgIGNvbW1lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICBlZGdlczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgIG5vZGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICAgICAgICB9KS5pc1JlcXVpcmVkLFxuICAgICAgICApLmlzUmVxdWlyZWQsXG4gICAgICB9KS5pc1JlcXVpcmVkLFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgc3dpdGNoVG9Jc3N1ZWlzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7aXRlbX0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbW1pdC1jb21tZW50LXRocmVhZCB0aW1lbGluZS1pdGVtXCI+XG4gICAgICAgIHtpdGVtLmNvbW1lbnRzLmVkZ2VzLm1hcCgoZWRnZSwgaSkgPT4gKFxuICAgICAgICAgIDxDb21taXRDb21tZW50Vmlld1xuICAgICAgICAgICAgaXNSZXBseT17aSAhPT0gMH1cbiAgICAgICAgICAgIGtleT17ZWRnZS5ub2RlLmlkfVxuICAgICAgICAgICAgaXRlbT17ZWRnZS5ub2RlfVxuICAgICAgICAgICAgc3dpdGNoVG9Jc3N1ZWlzaD17dGhpcy5wcm9wcy5zd2l0Y2hUb0lzc3VlaXNofVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZyYWdtZW50Q29udGFpbmVyKEJhcmVDb21taXRDb21tZW50VGhyZWFkVmlldywge1xuICBpdGVtOiBncmFwaHFsYFxuICAgIGZyYWdtZW50IGNvbW1pdENvbW1lbnRUaHJlYWRWaWV3X2l0ZW0gb24gUHVsbFJlcXVlc3RDb21taXRDb21tZW50VGhyZWFkIHtcbiAgICAgIGNvbW1pdCB7IG9pZCB9XG4gICAgICBjb21tZW50cyhmaXJzdDogMTAwKSB7XG4gICAgICAgIGVkZ2VzIHtcbiAgICAgICAgICBub2RlIHtcbiAgICAgICAgICAgIGlkXG4gICAgICAgICAgICAuLi5jb21taXRDb21tZW50Vmlld19pdGVtXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICBgLFxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFdBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFVBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFHLGtCQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBc0QsU0FBQUQsdUJBQUFLLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFBQSxTQUFBRyxnQkFBQUgsR0FBQSxFQUFBSSxHQUFBLEVBQUFDLEtBQUEsSUFBQUQsR0FBQSxHQUFBRSxjQUFBLENBQUFGLEdBQUEsT0FBQUEsR0FBQSxJQUFBSixHQUFBLElBQUFPLE1BQUEsQ0FBQUMsY0FBQSxDQUFBUixHQUFBLEVBQUFJLEdBQUEsSUFBQUMsS0FBQSxFQUFBQSxLQUFBLEVBQUFJLFVBQUEsUUFBQUMsWUFBQSxR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