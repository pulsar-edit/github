"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BareCommitCommentThreadView = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactRelay = require("react-relay");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _commitCommentView = _interopRequireDefault(require("./commit-comment-view"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class BareCommitCommentThreadView extends _react.default.Component {
  render() {
    const {
      item
    } = this.props;
    return _react.default.createElement("div", {
      className: "commit-comment-thread timeline-item"
    }, item.comments.edges.map((edge, i) => _react.default.createElement(_commitCommentView.default, {
      isReply: i !== 0,
      key: edge.node.id,
      item: edge.node,
      switchToIssueish: this.props.switchToIssueish
    })));
  }
}
exports.BareCommitCommentThreadView = BareCommitCommentThreadView;
_defineProperty(BareCommitCommentThreadView, "propTypes", {
  item: _propTypes.default.shape({
    commit: _propTypes.default.shape({
      oid: _propTypes.default.string.isRequired
    }).isRequired,
    comments: _propTypes.default.shape({
      edges: _propTypes.default.arrayOf(_propTypes.default.shape({
        node: _propTypes.default.object.isRequired
      }).isRequired).isRequired
    }).isRequired
  }).isRequired,
  switchToIssueish: _propTypes.default.func.isRequired
});
var _default = (0, _reactRelay.createFragmentContainer)(BareCommitCommentThreadView, {
  item: function () {
    const node = require("./__generated__/commitCommentThreadView_item.graphql");
    if (node.hash && node.hash !== "2f881b33df634a755a5d66b192c2791b") {
      console.error("The definition of 'commitCommentThreadView_item' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }
    return require("./__generated__/commitCommentThreadView_item.graphql");
  }
});
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdFJlbGF5IiwiX3Byb3BUeXBlcyIsIl9jb21taXRDb21tZW50VmlldyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2RlZmluZVByb3BlcnR5Iiwia2V5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidCIsImkiLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJyIiwiZSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwiY2FsbCIsIlR5cGVFcnJvciIsIk51bWJlciIsIkJhcmVDb21taXRDb21tZW50VGhyZWFkVmlldyIsIlJlYWN0IiwiQ29tcG9uZW50IiwicmVuZGVyIiwiaXRlbSIsInByb3BzIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImNvbW1lbnRzIiwiZWRnZXMiLCJtYXAiLCJlZGdlIiwiaXNSZXBseSIsIm5vZGUiLCJpZCIsInN3aXRjaFRvSXNzdWVpc2giLCJleHBvcnRzIiwiUHJvcFR5cGVzIiwic2hhcGUiLCJjb21taXQiLCJvaWQiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwiYXJyYXlPZiIsIm9iamVjdCIsImZ1bmMiLCJfZGVmYXVsdCIsImNyZWF0ZUZyYWdtZW50Q29udGFpbmVyIiwiaGFzaCIsImNvbnNvbGUiLCJlcnJvciJdLCJzb3VyY2VzIjpbImNvbW1pdC1jb21tZW50LXRocmVhZC12aWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2dyYXBocWwsIGNyZWF0ZUZyYWdtZW50Q29udGFpbmVyfSBmcm9tICdyZWFjdC1yZWxheSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgQ29tbWl0Q29tbWVudFZpZXcgZnJvbSAnLi9jb21taXQtY29tbWVudC12aWV3JztcblxuZXhwb3J0IGNsYXNzIEJhcmVDb21taXRDb21tZW50VGhyZWFkVmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgaXRlbTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGNvbW1pdDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgb2lkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICB9KS5pc1JlcXVpcmVkLFxuICAgICAgY29tbWVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIGVkZ2VzOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICAgICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgbm9kZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgICAgICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgICAgICkuaXNSZXF1aXJlZCxcbiAgICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgfSkuaXNSZXF1aXJlZCxcbiAgICBzd2l0Y2hUb0lzc3VlaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtpdGVtfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29tbWl0LWNvbW1lbnQtdGhyZWFkIHRpbWVsaW5lLWl0ZW1cIj5cbiAgICAgICAge2l0ZW0uY29tbWVudHMuZWRnZXMubWFwKChlZGdlLCBpKSA9PiAoXG4gICAgICAgICAgPENvbW1pdENvbW1lbnRWaWV3XG4gICAgICAgICAgICBpc1JlcGx5PXtpICE9PSAwfVxuICAgICAgICAgICAga2V5PXtlZGdlLm5vZGUuaWR9XG4gICAgICAgICAgICBpdGVtPXtlZGdlLm5vZGV9XG4gICAgICAgICAgICBzd2l0Y2hUb0lzc3VlaXNoPXt0aGlzLnByb3BzLnN3aXRjaFRvSXNzdWVpc2h9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRnJhZ21lbnRDb250YWluZXIoQmFyZUNvbW1pdENvbW1lbnRUaHJlYWRWaWV3LCB7XG4gIGl0ZW06IGdyYXBocWxgXG4gICAgZnJhZ21lbnQgY29tbWl0Q29tbWVudFRocmVhZFZpZXdfaXRlbSBvbiBQdWxsUmVxdWVzdENvbW1pdENvbW1lbnRUaHJlYWQge1xuICAgICAgY29tbWl0IHsgb2lkIH1cbiAgICAgIGNvbW1lbnRzKGZpcnN0OiAxMDApIHtcbiAgICAgICAgZWRnZXMge1xuICAgICAgICAgIG5vZGUge1xuICAgICAgICAgICAgaWRcbiAgICAgICAgICAgIC4uLmNvbW1pdENvbW1lbnRWaWV3X2l0ZW1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIGAsXG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsVUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUcsa0JBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUFzRCxTQUFBRCx1QkFBQUssR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUFBLFNBQUFHLGdCQUFBSCxHQUFBLEVBQUFJLEdBQUEsRUFBQUMsS0FBQSxJQUFBRCxHQUFBLEdBQUFFLGNBQUEsQ0FBQUYsR0FBQSxPQUFBQSxHQUFBLElBQUFKLEdBQUEsSUFBQU8sTUFBQSxDQUFBQyxjQUFBLENBQUFSLEdBQUEsRUFBQUksR0FBQSxJQUFBQyxLQUFBLEVBQUFBLEtBQUEsRUFBQUksVUFBQSxRQUFBQyxZQUFBLFFBQUFDLFFBQUEsb0JBQUFYLEdBQUEsQ0FBQUksR0FBQSxJ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