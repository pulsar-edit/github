"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BareCommitView = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactRelay = require("react-relay");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _octicon = _interopRequireDefault(require("../../atom/octicon"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class BareCommitView extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "openCommitDetailItem", () => this.props.openCommit({
      sha: this.props.commit.sha
    }));
  }
  authoredByCommitter(commit) {
    if (commit.authoredByCommitter) {
      return true;
    }
    // If you commit on GitHub online the committer details would be:
    //
    //    name: "GitHub"
    //    email: "noreply@github.com"
    //    user: null
    //
    if (commit.committer.email === 'noreply@github.com') {
      return true;
    }
    if (commit.committer.name === 'GitHub' && commit.committer.user === null) {
      return true;
    }
    return false;
  }
  renderCommitter(commit) {
    if (!this.authoredByCommitter(commit)) {
      return _react.default.createElement("img", {
        className: "author-avatar",
        alt: "author's avatar",
        src: commit.committer.avatarUrl,
        title: commit.committer.user ? commit.committer.user.login : commit.committer.name
      });
    } else {
      return null;
    }
  }
  render() {
    const commit = this.props.commit;
    return _react.default.createElement("div", {
      className: "commit"
    }, _react.default.createElement(_octicon.default, {
      className: "pre-timeline-item-icon",
      icon: "git-commit"
    }), _react.default.createElement("span", {
      className: "commit-author"
    }, _react.default.createElement("img", {
      className: "author-avatar",
      alt: "author's avatar",
      src: commit.author.avatarUrl,
      title: commit.author.user ? commit.author.user.login : commit.author.name
    }), this.renderCommitter(commit)), _react.default.createElement("p", {
      className: "commit-message-headline"
    }, this.props.onBranch ? _react.default.createElement("button", {
      className: "open-commit-detail-button",
      title: commit.message,
      dangerouslySetInnerHTML: {
        __html: commit.messageHeadlineHTML
      },
      onClick: this.openCommitDetailItem
    }) : _react.default.createElement("span", {
      title: commit.message,
      dangerouslySetInnerHTML: {
        __html: commit.messageHeadlineHTML
      }
    })), _react.default.createElement("a", {
      className: "commit-sha",
      href: commit.commitUrl
    }, commit.sha.slice(0, 8)));
  }
}
exports.BareCommitView = BareCommitView;
_defineProperty(BareCommitView, "propTypes", {
  commit: _propTypes.default.object.isRequired,
  onBranch: _propTypes.default.bool.isRequired,
  openCommit: _propTypes.default.func.isRequired
});
var _default = (0, _reactRelay.createFragmentContainer)(BareCommitView, {
  commit: function () {
    const node = require("./__generated__/commitView_commit.graphql");
    if (node.hash && node.hash !== "9d2823ee95f39173f656043ddfc8d47c") {
      console.error("The definition of 'commitView_commit' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }
    return require("./__generated__/commitView_commit.graphql");
  }
});
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdFJlbGF5IiwiX3Byb3BUeXBlcyIsIl9vY3RpY29uIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ0IiwiaSIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsInIiLCJlIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiQmFyZUNvbW1pdFZpZXciLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiYXJncyIsInByb3BzIiwib3BlbkNvbW1pdCIsInNoYSIsImNvbW1pdCIsImF1dGhvcmVkQnlDb21taXR0ZXIiLCJjb21taXR0ZXIiLCJlbWFpbCIsIm5hbWUiLCJ1c2VyIiwicmVuZGVyQ29tbWl0dGVyIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImFsdCIsInNyYyIsImF2YXRhclVybCIsInRpdGxlIiwibG9naW4iLCJyZW5kZXIiLCJpY29uIiwiYXV0aG9yIiwib25CcmFuY2giLCJtZXNzYWdlIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJtZXNzYWdlSGVhZGxpbmVIVE1MIiwib25DbGljayIsIm9wZW5Db21taXREZXRhaWxJdGVtIiwiaHJlZiIsImNvbW1pdFVybCIsInNsaWNlIiwiZXhwb3J0cyIsIlByb3BUeXBlcyIsIm9iamVjdCIsImlzUmVxdWlyZWQiLCJib29sIiwiZnVuYyIsIl9kZWZhdWx0IiwiY3JlYXRlRnJhZ21lbnRDb250YWluZXIiLCJub2RlIiwiaGFzaCIsImNvbnNvbGUiLCJlcnJvciJdLCJzb3VyY2VzIjpbImNvbW1pdC12aWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2dyYXBocWwsIGNyZWF0ZUZyYWdtZW50Q29udGFpbmVyfSBmcm9tICdyZWFjdC1yZWxheSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgT2N0aWNvbiBmcm9tICcuLi8uLi9hdG9tL29jdGljb24nO1xuXG5leHBvcnQgY2xhc3MgQmFyZUNvbW1pdFZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNvbW1pdDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIG9uQnJhbmNoOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIG9wZW5Db21taXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH1cblxuICBhdXRob3JlZEJ5Q29tbWl0dGVyKGNvbW1pdCkge1xuICAgIGlmIChjb21taXQuYXV0aG9yZWRCeUNvbW1pdHRlcikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIElmIHlvdSBjb21taXQgb24gR2l0SHViIG9ubGluZSB0aGUgY29tbWl0dGVyIGRldGFpbHMgd291bGQgYmU6XG4gICAgLy9cbiAgICAvLyAgICBuYW1lOiBcIkdpdEh1YlwiXG4gICAgLy8gICAgZW1haWw6IFwibm9yZXBseUBnaXRodWIuY29tXCJcbiAgICAvLyAgICB1c2VyOiBudWxsXG4gICAgLy9cbiAgICBpZiAoY29tbWl0LmNvbW1pdHRlci5lbWFpbCA9PT0gJ25vcmVwbHlAZ2l0aHViLmNvbScpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoY29tbWl0LmNvbW1pdHRlci5uYW1lID09PSAnR2l0SHViJyAmJiBjb21taXQuY29tbWl0dGVyLnVzZXIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIG9wZW5Db21taXREZXRhaWxJdGVtID0gKCkgPT4gdGhpcy5wcm9wcy5vcGVuQ29tbWl0KHtzaGE6IHRoaXMucHJvcHMuY29tbWl0LnNoYX0pXG5cbiAgcmVuZGVyQ29tbWl0dGVyKGNvbW1pdCkge1xuICAgIGlmICghdGhpcy5hdXRob3JlZEJ5Q29tbWl0dGVyKGNvbW1pdCkpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxpbWdcbiAgICAgICAgICBjbGFzc05hbWU9XCJhdXRob3ItYXZhdGFyXCIgYWx0PVwiYXV0aG9yJ3MgYXZhdGFyXCIgc3JjPXtjb21taXQuY29tbWl0dGVyLmF2YXRhclVybH1cbiAgICAgICAgICB0aXRsZT17Y29tbWl0LmNvbW1pdHRlci51c2VyID8gY29tbWl0LmNvbW1pdHRlci51c2VyLmxvZ2luIDogY29tbWl0LmNvbW1pdHRlci5uYW1lfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGNvbW1pdCA9IHRoaXMucHJvcHMuY29tbWl0O1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbW1pdFwiPlxuICAgICAgICA8T2N0aWNvbiBjbGFzc05hbWU9XCJwcmUtdGltZWxpbmUtaXRlbS1pY29uXCIgaWNvbj1cImdpdC1jb21taXRcIiAvPlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJjb21taXQtYXV0aG9yXCI+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYXV0aG9yLWF2YXRhclwiIGFsdD1cImF1dGhvcidzIGF2YXRhclwiIHNyYz17Y29tbWl0LmF1dGhvci5hdmF0YXJVcmx9XG4gICAgICAgICAgICB0aXRsZT17Y29tbWl0LmF1dGhvci51c2VyID8gY29tbWl0LmF1dGhvci51c2VyLmxvZ2luIDogY29tbWl0LmF1dGhvci5uYW1lfVxuICAgICAgICAgIC8+XG4gICAgICAgICAge3RoaXMucmVuZGVyQ29tbWl0dGVyKGNvbW1pdCl9XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwiY29tbWl0LW1lc3NhZ2UtaGVhZGxpbmVcIj5cbiAgICAgICAgICB7dGhpcy5wcm9wcy5vbkJyYW5jaFxuICAgICAgICAgICAgPyAoXG4gICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJvcGVuLWNvbW1pdC1kZXRhaWwtYnV0dG9uXCJcbiAgICAgICAgICAgICAgICB0aXRsZT17Y29tbWl0Lm1lc3NhZ2V9XG4gICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IGNvbW1pdC5tZXNzYWdlSGVhZGxpbmVIVE1MfX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9wZW5Db21taXREZXRhaWxJdGVtfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiAoXG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgdGl0bGU9e2NvbW1pdC5tZXNzYWdlfVxuICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBjb21taXQubWVzc2FnZUhlYWRsaW5lSFRNTH19XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICA8L3A+XG4gICAgICAgIDxhIGNsYXNzTmFtZT1cImNvbW1pdC1zaGFcIiBocmVmPXtjb21taXQuY29tbWl0VXJsfT57Y29tbWl0LnNoYS5zbGljZSgwLCA4KX08L2E+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZyYWdtZW50Q29udGFpbmVyKEJhcmVDb21taXRWaWV3LCB7XG4gIGNvbW1pdDogZ3JhcGhxbGBcbiAgICBmcmFnbWVudCBjb21taXRWaWV3X2NvbW1pdCBvbiBDb21taXQge1xuICAgICAgYXV0aG9yIHtcbiAgICAgICAgbmFtZSBhdmF0YXJVcmxcbiAgICAgICAgdXNlciB7XG4gICAgICAgICAgbG9naW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29tbWl0dGVyIHtcbiAgICAgICAgbmFtZSBhdmF0YXJVcmxcbiAgICAgICAgdXNlciB7XG4gICAgICAgICAgbG9naW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYXV0aG9yZWRCeUNvbW1pdHRlclxuICAgICAgc2hhOm9pZCBtZXNzYWdlIG1lc3NhZ2VIZWFkbGluZUhUTUwgY29tbWl0VXJsXG4gICAgfVxuICBgLFxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFdBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFVBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFHLFFBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUF5QyxTQUFBRCx1QkFBQUssR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUFBLFNBQUFHLGdCQUFBSCxHQUFBLEVBQUFJLEdBQUEsRUFBQUMsS0FBQSxJQUFBRCxHQUFBLEdBQUFFLGNBQUEsQ0FBQUYsR0FBQSxPQUFBQSxHQUFBLElBQUFKLEdBQUEsSUFBQU8sTUFBQSxDQUFBQyxjQUFBLENBQUFSLEdBQUEsRUFBQUksR0FBQSxJQUFBQyxLQUFBLEVBQUFBLEtBQUEsRUFBQUksVUFBQSxRQUFBQyxZQUFBLFFBQUFDLFFBQUEsb0JBQUFYLEdBQUEsQ0FBQUksR0FBQSxJQUFBQyxLQUFBLFdBQUFMLEdBQUE7QUFBQSxTQUFBTSxlQUFBTSxDQUFBLFFBQUFDLENBQUEsR0FBQUMsWUFBQSxDQUFBRixDQUFBLHVDQUFBQyxDQUFBLEdBQUFBLENBQUEsR0FBQUUsTUFBQSxDQUFBRixDQUFBO0FBQUEsU0FBQUMsYUFBQUYs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