"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BareIssueCommentView = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactRelay = require("react-relay");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _octicon = _interopRequireDefault(require("../../atom/octicon"));
var _timeago = _interopRequireDefault(require("../timeago"));
var _githubDotcomMarkdown = _interopRequireDefault(require("../github-dotcom-markdown"));
var _helpers = require("../../helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class BareIssueCommentView extends _react.default.Component {
  render() {
    const comment = this.props.item;
    const author = comment.author || _helpers.GHOST_USER;
    return _react.default.createElement("div", {
      className: "issue timeline-item"
    }, _react.default.createElement("div", {
      className: "info-row"
    }, _react.default.createElement(_octicon.default, {
      className: "pre-timeline-item-icon",
      icon: "comment"
    }), _react.default.createElement("img", {
      className: "author-avatar",
      src: author.avatarUrl,
      alt: author.login,
      title: author.login
    }), _react.default.createElement("span", {
      className: "comment-message-header"
    }, author.login, " commented", ' ', _react.default.createElement("a", {
      href: comment.url
    }, _react.default.createElement(_timeago.default, {
      time: comment.createdAt
    })))), _react.default.createElement(_githubDotcomMarkdown.default, {
      html: comment.bodyHTML,
      switchToIssueish: this.props.switchToIssueish
    }));
  }
}
exports.BareIssueCommentView = BareIssueCommentView;
_defineProperty(BareIssueCommentView, "propTypes", {
  switchToIssueish: _propTypes.default.func.isRequired,
  item: _propTypes.default.shape({
    author: _propTypes.default.shape({
      avatarUrl: _propTypes.default.string.isRequired,
      login: _propTypes.default.string.isRequired
    }),
    bodyHTML: _propTypes.default.string.isRequired,
    createdAt: _propTypes.default.string.isRequired,
    url: _propTypes.default.string.isRequired
  }).isRequired
});
var _default = (0, _reactRelay.createFragmentContainer)(BareIssueCommentView, {
  item: function () {
    const node = require("./__generated__/issueCommentView_item.graphql");
    if (node.hash && node.hash !== "adc36c52f51de14256693ab9e4eb84bb") {
      console.error("The definition of 'issueCommentView_item' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }
    return require("./__generated__/issueCommentView_item.graphql");
  }
});
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdFJlbGF5IiwiX3Byb3BUeXBlcyIsIl9vY3RpY29uIiwiX3RpbWVhZ28iLCJfZ2l0aHViRG90Y29tTWFya2Rvd24iLCJfaGVscGVycyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2RlZmluZVByb3BlcnR5Iiwia2V5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiYXJnIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiY2FsbCIsIlR5cGVFcnJvciIsIk51bWJlciIsIkJhcmVJc3N1ZUNvbW1lbnRWaWV3IiwiUmVhY3QiLCJDb21wb25lbnQiLCJyZW5kZXIiLCJjb21tZW50IiwicHJvcHMiLCJpdGVtIiwiYXV0aG9yIiwiR0hPU1RfVVNFUiIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJpY29uIiwic3JjIiwiYXZhdGFyVXJsIiwiYWx0IiwibG9naW4iLCJ0aXRsZSIsImhyZWYiLCJ1cmwiLCJ0aW1lIiwiY3JlYXRlZEF0IiwiaHRtbCIsImJvZHlIVE1MIiwic3dpdGNoVG9Jc3N1ZWlzaCIsImV4cG9ydHMiLCJQcm9wVHlwZXMiLCJmdW5jIiwiaXNSZXF1aXJlZCIsInNoYXBlIiwic3RyaW5nIiwiX2RlZmF1bHQiLCJjcmVhdGVGcmFnbWVudENvbnRhaW5lciIsIm5vZGUiLCJoYXNoIiwiY29uc29sZSIsImVycm9yIl0sInNvdXJjZXMiOlsiaXNzdWUtY29tbWVudC12aWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2dyYXBocWwsIGNyZWF0ZUZyYWdtZW50Q29udGFpbmVyfSBmcm9tICdyZWFjdC1yZWxheSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgT2N0aWNvbiBmcm9tICcuLi8uLi9hdG9tL29jdGljb24nO1xuaW1wb3J0IFRpbWVhZ28gZnJvbSAnLi4vdGltZWFnbyc7XG5pbXBvcnQgR2l0aHViRG90Y29tTWFya2Rvd24gZnJvbSAnLi4vZ2l0aHViLWRvdGNvbS1tYXJrZG93bic7XG5pbXBvcnQge0dIT1NUX1VTRVJ9IGZyb20gJy4uLy4uL2hlbHBlcnMnO1xuXG5leHBvcnQgY2xhc3MgQmFyZUlzc3VlQ29tbWVudFZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHN3aXRjaFRvSXNzdWVpc2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaXRlbTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGF1dGhvcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgYXZhdGFyVXJsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgIGxvZ2luOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICB9KSxcbiAgICAgIGJvZHlIVE1MOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBjcmVhdGVkQXQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIHVybDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgY29tbWVudCA9IHRoaXMucHJvcHMuaXRlbTtcbiAgICBjb25zdCBhdXRob3IgPSBjb21tZW50LmF1dGhvciB8fCBHSE9TVF9VU0VSO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaXNzdWUgdGltZWxpbmUtaXRlbVwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm8tcm93XCI+XG4gICAgICAgICAgPE9jdGljb24gY2xhc3NOYW1lPVwicHJlLXRpbWVsaW5lLWl0ZW0taWNvblwiIGljb249XCJjb21tZW50XCIgLz5cbiAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImF1dGhvci1hdmF0YXJcIiBzcmM9e2F1dGhvci5hdmF0YXJVcmx9XG4gICAgICAgICAgICBhbHQ9e2F1dGhvci5sb2dpbn0gdGl0bGU9e2F1dGhvci5sb2dpbn1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImNvbW1lbnQtbWVzc2FnZS1oZWFkZXJcIj5cbiAgICAgICAgICAgIHthdXRob3IubG9naW59IGNvbW1lbnRlZFxuICAgICAgICAgICAgeycgJ308YSBocmVmPXtjb21tZW50LnVybH0+PFRpbWVhZ28gdGltZT17Y29tbWVudC5jcmVhdGVkQXR9IC8+PC9hPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxHaXRodWJEb3Rjb21NYXJrZG93biBodG1sPXtjb21tZW50LmJvZHlIVE1MfSBzd2l0Y2hUb0lzc3VlaXNoPXt0aGlzLnByb3BzLnN3aXRjaFRvSXNzdWVpc2h9IC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZyYWdtZW50Q29udGFpbmVyKEJhcmVJc3N1ZUNvbW1lbnRWaWV3LCB7XG4gIGl0ZW06IGdyYXBocWxgXG4gICAgZnJhZ21lbnQgaXNzdWVDb21tZW50Vmlld19pdGVtIG9uIElzc3VlQ29tbWVudCB7XG4gICAgICBhdXRob3Ige1xuICAgICAgICBhdmF0YXJVcmwgbG9naW5cbiAgICAgIH1cbiAgICAgIGJvZHlIVE1MIGNyZWF0ZWRBdCB1cmxcbiAgICB9XG4gIGAsXG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBRCxPQUFB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