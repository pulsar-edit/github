"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reporterProxy = require("../reporter-proxy");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ReviewsFooterView extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "logStartReviewClick", () => {
      (0, _reporterProxy.addEvent)('start-pr-review', {
        package: 'github',
        component: this.constructor.name
      });
    });
  }
  render() {
    return _react.default.createElement("footer", {
      className: "github-ReviewsFooterView-footer"
    }, _react.default.createElement("span", {
      className: "github-ReviewsFooterView-footerTitle"
    }, "Reviews"), _react.default.createElement("span", {
      className: "github-ReviewsFooterView"
    }, _react.default.createElement("span", {
      className: "github-ReviewsFooterView-commentCount"
    }, "Resolved", ' ', _react.default.createElement("span", {
      className: "github-ReviewsFooterView-commentsResolved"
    }, this.props.commentsResolved), ' ', "of", ' ', _react.default.createElement("span", {
      className: "github-ReviewsFooterView-totalComments"
    }, this.props.totalComments), ' ', "comments"), _react.default.createElement("progress", {
      className: "github-ReviewsFooterView-progessBar",
      value: this.props.commentsResolved,
      max: this.props.totalComments
    }, ' ', "comments", ' ')), _react.default.createElement("button", {
      className: "github-ReviewsFooterView-openReviewsButton btn btn-primary",
      onClick: this.props.openReviews
    }, "See reviews"), _react.default.createElement("a", {
      href: this.props.pullRequestURL,
      className: "github-ReviewsFooterView-reviewChangesButton btn",
      onClick: this.logStartReviewClick
    }, "Start a new review"));
  }
}
exports.default = ReviewsFooterView;
_defineProperty(ReviewsFooterView, "propTypes", {
  commentsResolved: _propTypes.default.number.isRequired,
  totalComments: _propTypes.default.number.isRequired,
  pullRequestURL: _propTypes.default.string.isRequired,
  // Controller actions
  openReviews: _propTypes.default.func.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfcmVwb3J0ZXJQcm94eSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2RlZmluZVByb3BlcnR5Iiwia2V5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiYXJnIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiY2FsbCIsIlR5cGVFcnJvciIsIk51bWJlciIsIlJldmlld3NGb290ZXJWaWV3IiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsImFyZ3MiLCJhZGRFdmVudCIsInBhY2thZ2UiLCJjb21wb25lbnQiLCJuYW1lIiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInByb3BzIiwiY29tbWVudHNSZXNvbHZlZCIsInRvdGFsQ29tbWVudHMiLCJtYXgiLCJvbkNsaWNrIiwib3BlblJldmlld3MiLCJocmVmIiwicHVsbFJlcXVlc3RVUkwiLCJsb2dTdGFydFJldmlld0NsaWNrIiwiZXhwb3J0cyIsIlByb3BUeXBlcyIsIm51bWJlciIsImlzUmVxdWlyZWQiLCJzdHJpbmciLCJmdW5jIl0sInNvdXJjZXMiOlsicmV2aWV3cy1mb290ZXItdmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHthZGRFdmVudH0gZnJvbSAnLi4vcmVwb3J0ZXItcHJveHknO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXZpZXdzRm9vdGVyVmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY29tbWVudHNSZXNvbHZlZDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIHRvdGFsQ29tbWVudHM6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBwdWxsUmVxdWVzdFVSTDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuXG4gICAgLy8gQ29udHJvbGxlciBhY3Rpb25zXG4gICAgb3BlblJldmlld3M6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgbG9nU3RhcnRSZXZpZXdDbGljayA9ICgpID0+IHtcbiAgICBhZGRFdmVudCgnc3RhcnQtcHItcmV2aWV3Jywge3BhY2thZ2U6ICdnaXRodWInLCBjb21wb25lbnQ6IHRoaXMuY29uc3RydWN0b3IubmFtZX0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Zm9vdGVyIGNsYXNzTmFtZT1cImdpdGh1Yi1SZXZpZXdzRm9vdGVyVmlldy1mb290ZXJcIj5cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2l0aHViLVJldmlld3NGb290ZXJWaWV3LWZvb3RlclRpdGxlXCI+XG4gICAgICAgICAgUmV2aWV3c1xuICAgICAgICA8L3NwYW4+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdpdGh1Yi1SZXZpZXdzRm9vdGVyVmlld1wiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdpdGh1Yi1SZXZpZXdzRm9vdGVyVmlldy1jb21tZW50Q291bnRcIj5cbiAgICAgICAgICBSZXNvbHZlZHsnICd9XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnaXRodWItUmV2aWV3c0Zvb3RlclZpZXctY29tbWVudHNSZXNvbHZlZFwiPlxuICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jb21tZW50c1Jlc29sdmVkfVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgeycgJ31vZnsnICd9XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnaXRodWItUmV2aWV3c0Zvb3RlclZpZXctdG90YWxDb21tZW50c1wiPlxuICAgICAgICAgICAgICB7dGhpcy5wcm9wcy50b3RhbENvbW1lbnRzfVxuICAgICAgICAgICAgPC9zcGFuPnsnICd9Y29tbWVudHNcbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPHByb2dyZXNzIGNsYXNzTmFtZT1cImdpdGh1Yi1SZXZpZXdzRm9vdGVyVmlldy1wcm9nZXNzQmFyXCJcbiAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLmNvbW1lbnRzUmVzb2x2ZWR9IG1heD17dGhpcy5wcm9wcy50b3RhbENvbW1lbnRzfT5cbiAgICAgICAgICAgIHsnICd9Y29tbWVudHN7JyAnfVxuICAgICAgICAgIDwvcHJvZ3Jlc3M+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJnaXRodWItUmV2aWV3c0Zvb3RlclZpZXctb3BlblJldmlld3NCdXR0b24gYnRuIGJ0bi1wcmltYXJ5XCJcbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByb3BzLm9wZW5SZXZpZXdzfT5TZWUgcmV2aWV3czwvYnV0dG9uPlxuICAgICAgICA8YSBocmVmPXt0aGlzLnByb3BzLnB1bGxSZXF1ZXN0VVJMfVxuICAgICAgICAgIGNsYXNzTmFtZT1cImdpdGh1Yi1SZXZpZXdzRm9vdGVyVmlldy1yZXZpZXdDaGFuZ2VzQnV0dG9uIGJ0blwiXG4gICAgICAgICAgb25DbGljaz17dGhpcy5sb2dTdGFydFJldmlld0NsaWNrfT5cbiAgICAgICAgICAgIFN0YXJ0IGEgbmV3IHJldmlld1xuICAgICAgICA8L2E+XG4gICAgICA8L2Zvb3Rlcj5cbiAgICApO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FB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