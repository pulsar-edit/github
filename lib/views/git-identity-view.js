"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _atomTextEditor = _interopRequireDefault(require("../atom/atom-text-editor"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class GitIdentityView extends _react.default.Component {
  render() {
    return _react.default.createElement("div", {
      className: "github-GitIdentity"
    }, _react.default.createElement("h1", {
      className: "github-GitIdentity-title"
    }, "Git Identity"), _react.default.createElement("p", {
      className: "github-GitIdentity-explanation"
    }, "Please set the username and email address that you wish to use to author git commits. This will write to the", _react.default.createElement("code", null, "user.name"), " and ", _react.default.createElement("code", null, "user.email"), " values in your git configuration at the chosen scope."), _react.default.createElement("div", {
      className: "github-GitIdentity-text"
    }, _react.default.createElement(_atomTextEditor.default, {
      mini: true,
      placeholderText: "name",
      buffer: this.props.usernameBuffer
    }), _react.default.createElement(_atomTextEditor.default, {
      mini: true,
      placeholderText: "email address",
      buffer: this.props.emailBuffer
    })), _react.default.createElement("div", {
      className: "github-GitIdentity-buttons"
    }, _react.default.createElement("button", {
      className: "btn",
      onClick: this.props.close
    }, "Cancel"), _react.default.createElement("button", {
      className: "btn btn-primary",
      title: "Configure git for this repository",
      onClick: this.props.setLocal,
      disabled: !this.props.canWriteLocal
    }, "Use for this repository"), _react.default.createElement("button", {
      className: "btn btn-primary",
      title: "Configure git globally for your operating system user account",
      onClick: this.props.setGlobal
    }, "Use for all repositories")));
  }
}
exports.default = GitIdentityView;
_defineProperty(GitIdentityView, "propTypes", {
  // Model
  usernameBuffer: _propTypes.default.object.isRequired,
  emailBuffer: _propTypes.default.object.isRequired,
  canWriteLocal: _propTypes.default.bool.isRequired,
  // Action methods
  setLocal: _propTypes.default.func.isRequired,
  setGlobal: _propTypes.default.func.isRequired,
  close: _propTypes.default.func.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfYXRvbVRleHRFZGl0b3IiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9kZWZpbmVQcm9wZXJ0eSIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJHaXRJZGVudGl0eVZpZXciLCJSZWFjdCIsIkNvbXBvbmVudCIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJtaW5pIiwicGxhY2Vob2xkZXJUZXh0IiwiYnVmZmVyIiwicHJvcHMiLCJ1c2VybmFtZUJ1ZmZlciIsImVtYWlsQnVmZmVyIiwib25DbGljayIsImNsb3NlIiwidGl0bGUiLCJzZXRMb2NhbCIsImRpc2FibGVkIiwiY2FuV3JpdGVMb2NhbCIsInNldEdsb2JhbCIsImV4cG9ydHMiLCJQcm9wVHlwZXMiLCJvYmplY3QiLCJpc1JlcXVpcmVkIiwiYm9vbCIsImZ1bmMiXSwic291cmNlcyI6WyJnaXQtaWRlbnRpdHktdmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBBdG9tVGV4dEVkaXRvciBmcm9tICcuLi9hdG9tL2F0b20tdGV4dC1lZGl0b3InO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHaXRJZGVudGl0eVZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8vIE1vZGVsXG4gICAgdXNlcm5hbWVCdWZmZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBlbWFpbEJ1ZmZlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGNhbldyaXRlTG9jYWw6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgICAvLyBBY3Rpb24gbWV0aG9kc1xuICAgIHNldExvY2FsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNldEdsb2JhbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBjbG9zZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2l0aHViLUdpdElkZW50aXR5XCI+XG4gICAgICAgIDxoMSBjbGFzc05hbWU9XCJnaXRodWItR2l0SWRlbnRpdHktdGl0bGVcIj5cbiAgICAgICAgICBHaXQgSWRlbnRpdHlcbiAgICAgICAgPC9oMT5cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwiZ2l0aHViLUdpdElkZW50aXR5LWV4cGxhbmF0aW9uXCI+XG4gICAgICAgICAgUGxlYXNlIHNldCB0aGUgdXNlcm5hbWUgYW5kIGVtYWlsIGFkZHJlc3MgdGhhdCB5b3Ugd2lzaCB0byB1c2UgdG8gYXV0aG9yIGdpdCBjb21taXRzLiBUaGlzIHdpbGwgd3JpdGUgdG8gdGhlXG4gICAgICAgICAgPGNvZGU+dXNlci5uYW1lPC9jb2RlPiBhbmQgPGNvZGU+dXNlci5lbWFpbDwvY29kZT4gdmFsdWVzIGluIHlvdXIgZ2l0IGNvbmZpZ3VyYXRpb24gYXQgdGhlIGNob3NlbiBzY29wZS5cbiAgICAgICAgPC9wPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdpdGh1Yi1HaXRJZGVudGl0eS10ZXh0XCI+XG4gICAgICAgICAgPEF0b21UZXh0RWRpdG9yIG1pbmkgcGxhY2Vob2xkZXJUZXh0PVwibmFtZVwiIGJ1ZmZlcj17dGhpcy5wcm9wcy51c2VybmFtZUJ1ZmZlcn0gLz5cbiAgICAgICAgICA8QXRvbVRleHRFZGl0b3IgbWluaSBwbGFjZWhvbGRlclRleHQ9XCJlbWFpbCBhZGRyZXNzXCIgYnVmZmVyPXt0aGlzLnByb3BzLmVtYWlsQnVmZmVyfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnaXRodWItR2l0SWRlbnRpdHktYnV0dG9uc1wiPlxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17dGhpcy5wcm9wcy5jbG9zZX0+XG4gICAgICAgICAgICBDYW5jZWxcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLXByaW1hcnlcIlxuICAgICAgICAgICAgdGl0bGU9XCJDb25maWd1cmUgZ2l0IGZvciB0aGlzIHJlcG9zaXRvcnlcIlxuICAgICAgICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5zZXRMb2NhbH1cbiAgICAgICAgICAgIGRpc2FibGVkPXshdGhpcy5wcm9wcy5jYW5Xcml0ZUxvY2FsfT5cbiAgICAgICAgICAgIFVzZSBmb3IgdGhpcyByZXBvc2l0b3J5XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1wcmltYXJ5XCJcbiAgICAgICAgICAgIHRpdGxlPVwiQ29uZmlndXJlIGdpdCBnbG9iYWxseSBmb3IgeW91ciBvcGVyYXRpbmcgc3lzdGVtIHVzZXIgYWNjb3VudFwiXG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByb3BzLnNldEdsb2JhbH0+XG4gICAgICAgICAgICBVc2UgZm9yIGFsbCByZXBvc2l0b3JpZXNcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iXSwibWFw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