"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRepository = createRepository;
exports.publishRepository = publishRepository;
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _createDialogContainer = _interopRequireDefault(require("../containers/create-dialog-container"));
var _createRepository = _interopRequireDefault(require("../mutations/create-repository"));
var _propTypes2 = require("../prop-types");
var _reporterProxy = require("../reporter-proxy");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class CreateDialog extends _react.default.Component {
  render() {
    return _react.default.createElement(_createDialogContainer.default, this.props);
  }
}
exports.default = CreateDialog;
_defineProperty(CreateDialog, "propTypes", {
  // Model
  loginModel: _propTypes2.GithubLoginModelPropType.isRequired,
  request: _propTypes.default.object.isRequired,
  error: _propTypes.default.instanceOf(Error),
  inProgress: _propTypes.default.bool.isRequired,
  // Atom environment
  currentWindow: _propTypes.default.object.isRequired,
  workspace: _propTypes.default.object.isRequired,
  commands: _propTypes.default.object.isRequired,
  config: _propTypes.default.object.isRequired
});
async function createRepository({
  ownerID,
  name,
  visibility,
  localPath,
  protocol,
  sourceRemoteName
}, {
  clone,
  relayEnvironment
}) {
  await _fsExtra.default.ensureDir(localPath, 0o755);
  const result = await (0, _createRepository.default)(relayEnvironment, {
    name,
    ownerID,
    visibility
  });
  const sourceURL = result.createRepository.repository[protocol === 'ssh' ? 'sshUrl' : 'url'];
  await clone(sourceURL, localPath, sourceRemoteName);
  (0, _reporterProxy.addEvent)('create-github-repository', {
    package: 'github'
  });
}
async function publishRepository({
  ownerID,
  name,
  visibility,
  protocol,
  sourceRemoteName
}, {
  repository,
  relayEnvironment
}) {
  let defaultBranchName, wasEmpty;
  if (repository.isEmpty()) {
    wasEmpty = true;
    await repository.init();
    defaultBranchName = 'master';
  } else {
    wasEmpty = false;
    const branchSet = await repository.getBranches();
    const branchNames = new Set(branchSet.getNames());
    if (branchNames.has('master')) {
      defaultBranchName = 'master';
    } else {
      const head = branchSet.getHeadBranch();
      if (head.isPresent()) {
        defaultBranchName = head.getName();
      }
    }
  }
  if (!defaultBranchName) {
    throw new Error('Unable to determine the desired default branch from the repository');
  }
  const result = await (0, _createRepository.default)(relayEnvironment, {
    name,
    ownerID,
    visibility
  });
  const sourceURL = result.createRepository.repository[protocol === 'ssh' ? 'sshUrl' : 'url'];
  const remote = await repository.addRemote(sourceRemoteName, sourceURL);
  if (wasEmpty) {
    (0, _reporterProxy.addEvent)('publish-github-repository', {
      package: 'github'
    });
  } else {
    await repository.push(defaultBranchName, {
      remote,
      setUpstream: true
    });
    (0, _reporterProxy.addEvent)('init-publish-github-repository', {
      package: 'github'
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfZnNFeHRyYSIsIl9jcmVhdGVEaWFsb2dDb250YWluZXIiLCJfY3JlYXRlUmVwb3NpdG9yeSIsIl9wcm9wVHlwZXMyIiwiX3JlcG9ydGVyUHJveHkiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9kZWZpbmVQcm9wZXJ0eSIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJDcmVhdGVEaWFsb2ciLCJSZWFjdCIsIkNvbXBvbmVudCIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJwcm9wcyIsImV4cG9ydHMiLCJsb2dpbk1vZGVsIiwiR2l0aHViTG9naW5Nb2RlbFByb3BUeXBlIiwiaXNSZXF1aXJlZCIsInJlcXVlc3QiLCJQcm9wVHlwZXMiLCJvYmplY3QiLCJlcnJvciIsImluc3RhbmNlT2YiLCJFcnJvciIsImluUHJvZ3Jlc3MiLCJib29sIiwiY3VycmVudFdpbmRvdyIsIndvcmtzcGFjZSIsImNvbW1hbmRzIiwiY29uZmlnIiwiY3JlYXRlUmVwb3NpdG9yeSIsIm93bmVySUQiLCJuYW1lIiwidmlzaWJpbGl0eSIsImxvY2FsUGF0aCIsInByb3RvY29sIiwic291cmNlUmVtb3RlTmFtZSIsImNsb25lIiwicmVsYXlFbnZpcm9ubWVudCIsImZzIiwiZW5zdXJlRGlyIiwicmVzdWx0IiwiY3JlYXRlUmVwb3NpdG9yeU11dGF0aW9uIiwic291cmNlVVJMIiwicmVwb3NpdG9yeSIsImFkZEV2ZW50IiwicGFja2FnZSIsInB1Ymxpc2hSZXBvc2l0b3J5IiwiZGVmYXVsdEJyYW5jaE5hbWUiLCJ3YXNFbXB0eSIsImlzRW1wdHkiLCJpbml0IiwiYnJhbmNoU2V0IiwiZ2V0QnJhbmNoZXMiLCJicmFuY2hOYW1lcyIsIlNldCIsImdldE5hbWVzIiwiaGFzIiwiaGVhZCIsImdldEhlYWRCcmFuY2giLCJpc1ByZXNlbnQiLCJnZXROYW1lIiwicmVtb3RlIiwiYWRkUmVtb3RlIiwicHVzaCIsInNldFVwc3RyZWFtIl0sInNvdXJjZXMiOlsiY3JlYXRlLWRpYWxvZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5cbmltcG9ydCBDcmVhdGVEaWFsb2dDb250YWluZXIgZnJvbSAnLi4vY29udGFpbmVycy9jcmVhdGUtZGlhbG9nLWNvbnRhaW5lcic7XG5pbXBvcnQgY3JlYXRlUmVwb3NpdG9yeU11dGF0aW9uIGZyb20gJy4uL211dGF0aW9ucy9jcmVhdGUtcmVwb3NpdG9yeSc7XG5pbXBvcnQge0dpdGh1YkxvZ2luTW9kZWxQcm9wVHlwZX0gZnJvbSAnLi4vcHJvcC10eXBlcyc7XG5pbXBvcnQge2FkZEV2ZW50fSBmcm9tICcuLi9yZXBvcnRlci1wcm94eSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENyZWF0ZURpYWxvZyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLy8gTW9kZWxcbiAgICBsb2dpbk1vZGVsOiBHaXRodWJMb2dpbk1vZGVsUHJvcFR5cGUuaXNSZXF1aXJlZCxcbiAgICByZXF1ZXN0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgZXJyb3I6IFByb3BUeXBlcy5pbnN0YW5jZU9mKEVycm9yKSxcbiAgICBpblByb2dyZXNzOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuXG4gICAgLy8gQXRvbSBlbnZpcm9ubWVudFxuICAgIGN1cnJlbnRXaW5kb3c6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICB3b3Jrc3BhY2U6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBjb21tYW5kczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGNvbmZpZzogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiA8Q3JlYXRlRGlhbG9nQ29udGFpbmVyIHsuLi50aGlzLnByb3BzfSAvPjtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlUmVwb3NpdG9yeShcbiAge293bmVySUQsIG5hbWUsIHZpc2liaWxpdHksIGxvY2FsUGF0aCwgcHJvdG9jb2wsIHNvdXJjZVJlbW90ZU5hbWV9LFxuICB7Y2xvbmUsIHJlbGF5RW52aXJvbm1lbnR9LFxuKSB7XG4gIGF3YWl0IGZzLmVuc3VyZURpcihsb2NhbFBhdGgsIDBvNzU1KTtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY3JlYXRlUmVwb3NpdG9yeU11dGF0aW9uKHJlbGF5RW52aXJvbm1lbnQsIHtuYW1lLCBvd25lcklELCB2aXNpYmlsaXR5fSk7XG4gIGNvbnN0IHNvdXJjZVVSTCA9IHJlc3VsdC5jcmVhdGVSZXBvc2l0b3J5LnJlcG9zaXRvcnlbcHJvdG9jb2wgPT09ICdzc2gnID8gJ3NzaFVybCcgOiAndXJsJ107XG4gIGF3YWl0IGNsb25lKHNvdXJjZVVSTCwgbG9jYWxQYXRoLCBzb3VyY2VSZW1vdGVOYW1lKTtcbiAgYWRkRXZlbnQoJ2NyZWF0ZS1naXRodWItcmVwb3NpdG9yeScsIHtwYWNrYWdlOiAnZ2l0aHViJ30pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHVibGlzaFJlcG9zaXRvcnkoXG4gIHtvd25lcklELCBuYW1lLCB2aXNpYmlsaXR5LCBwcm90b2NvbCwgc291cmNlUmVtb3RlTmFtZX0sXG4gIHtyZXBvc2l0b3J5LCByZWxheUVudmlyb25tZW50fSxcbikge1xuICBsZXQgZGVmYXVsdEJyYW5jaE5hbWUsIHdhc0VtcHR5O1xuICBpZiAocmVwb3NpdG9yeS5pc0VtcHR5KCkpIHtcbiAgICB3YXNFbXB0eSA9IHRydWU7XG4gICAgYXdhaXQgcmVwb3NpdG9yeS5pbml0KCk7XG4gICAgZGVmYXVsdEJyYW5jaE5hbWUgPSAnbWFzdGVyJztcbiAgfSBlbHNlIHtcbiAgICB3YXNFbXB0eSA9IGZhbHNlO1xuICAgIGNvbnN0IGJyYW5jaFNldCA9IGF3YWl0IHJlcG9zaXRvcnkuZ2V0QnJhbmNoZXMoKTtcbiAgICBjb25zdCBicmFuY2hOYW1lcyA9IG5ldyBTZXQoYnJhbmNoU2V0LmdldE5hbWVzKCkpO1xuICAgIGlmIChicmFuY2hOYW1lcy5oYXMoJ21hc3RlcicpKSB7XG4gICAgICBkZWZhdWx0QnJhbmNoTmFtZSA9ICdtYXN0ZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBoZWFkID0gYnJhbmNoU2V0LmdldEhlYWRCcmFuY2goKTtcbiAgICAgIGlmIChoZWFkLmlzUHJlc2VudCgpKSB7XG4gICAgICAgIGRlZmF1bHRCcmFuY2hOYW1lID0gaGVhZC5nZXROYW1lKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghZGVmYXVsdEJyYW5jaE5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBkZXRlcm1pbmUgdGhlIGRlc2lyZWQgZGVmYXVsdCBicmFuY2ggZnJvbSB0aGUgcmVwb3NpdG9yeScpO1xuICB9XG5cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY3JlYXRlUmVwb3NpdG9yeU11dGF0aW9uKHJlbGF5RW52aXJvbm1lbnQsIHtuYW1lLCBvd25lcklELCB2aXNpYmlsaXR5fSk7XG4gIGNvbnN0IHNvdXJjZVVSTCA9IHJlc3VsdC5jcmVhdGVSZXBvc2l0b3J5LnJlcG9zaXRvcnlbcHJvdG9jb2wgPT09ICdzc2gnID8gJ3NzaFVybCcgOiAndXJsJ107XG4gIGNvbnN0IHJlbW90ZSA9IGF3YWl0IHJlcG9zaXRvcnkuYWRkUmVtb3RlKHNvdXJjZVJlbW90ZU5hbWUsIHNvdXJjZVVSTCk7XG4gIGlmICh3YXNFbXB0eSkge1xuICAgIGFkZEV2ZW50KCdwdWJsaXNoLWdpdGh1Yi1yZXBvc2l0b3J5Jywge3BhY2thZ2U6ICdnaXRodWInfSk7XG4gIH0gZWxzZSB7XG4gICAgYXdhaXQgcmVwb3NpdG9yeS5wdXNoKGRlZmF1bHRCcmFuY2hOYW1lLCB7cmVtb3RlLCBzZXRVcHN0cmVhbTogdHJ1ZX0pO1xuICAgIGFkZEV2ZW50KCdpbml0LXB1Ymxpc2gtZ2l0aHViLXJlcG9zaXRvcnknLCB7cGFja2FnZTogJ2dpdGh1Yid9KTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFHLHNCQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxpQkFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssV0FBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sY0FBQSxHQUFBTixPQUFBO0FBQTJDLFNBQUFELHVCQUFBUSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBQUEsU0FBQUcsZ0JBQUFILEdBQUEsRUFBQUksR0FBQSxFQUFBQyxLQUFBLElBQUFELEdBQUEsR0FBQUUsY0FBQSxDQUFBRixHQUFBLE9BQUFBLEdBQUEsSUFBQUosR0FBQSxJQUFBTyxNQUFBLENBQUFDLGNBQUEsQ0FBQVIsR0FBQSxFQUFBSSxHQUFBLElBQUFDLEtBQUEsRUFBQUEsS0FBQSxFQUFBSSxVQUFBLFFBQUFDLFlBQUEsUUFBQUMsUUFBQSxvQkFBQVgsR0FBQSxDQUFB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