"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _eventKit = require("event-kit");
var _propTypes2 = require("../prop-types");
var _commitDetailContainer = _interopRequireDefault(require("../containers/commit-detail-container"));
var _refHolder = _interopRequireDefault(require("../models/ref-holder"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class CommitDetailItem extends _react.default.Component {
  static buildURI(workingDirectory, sha) {
    return `atom-github://commit-detail?workdir=${encodeURIComponent(workingDirectory)}&sha=${encodeURIComponent(sha)}`;
  }
  constructor(props) {
    super(props);
    _defineProperty(this, "destroy", () => {
      /* istanbul ignore else */
      if (!this.isDestroyed) {
        this.emitter.emit('did-destroy');
        this.isDestroyed = true;
      }
    });
    this.emitter = new _eventKit.Emitter();
    this.isDestroyed = false;
    this.hasTerminatedPendingState = false;
    this.shouldFocus = true;
    this.refInitialFocus = new _refHolder.default();
    this.refEditor = new _refHolder.default();
    this.refEditor.observe(editor => {
      if (editor.isAlive()) {
        this.emitter.emit('did-change-embedded-text-editor', editor);
      }
    });
  }
  terminatePendingState() {
    if (!this.hasTerminatedPendingState) {
      this.emitter.emit('did-terminate-pending-state');
      this.hasTerminatedPendingState = true;
    }
  }
  onDidTerminatePendingState(callback) {
    return this.emitter.on('did-terminate-pending-state', callback);
  }
  onDidDestroy(callback) {
    return this.emitter.on('did-destroy', callback);
  }
  render() {
    const repository = this.props.workdirContextPool.getContext(this.props.workingDirectory).getRepository();
    return _react.default.createElement(_commitDetailContainer.default, _extends({
      itemType: this.constructor,
      repository: repository
    }, this.props, {
      destroy: this.destroy,
      refEditor: this.refEditor,
      refInitialFocus: this.refInitialFocus
    }));
  }
  getTitle() {
    return `Commit: ${this.props.sha}`;
  }
  getIconName() {
    return 'git-commit';
  }
  observeEmbeddedTextEditor(cb) {
    this.refEditor.map(editor => editor.isAlive() && cb(editor));
    return this.emitter.on('did-change-embedded-text-editor', cb);
  }
  getWorkingDirectory() {
    return this.props.workingDirectory;
  }
  getSha() {
    return this.props.sha;
  }
  serialize() {
    return {
      deserializer: 'CommitDetailStub',
      uri: CommitDetailItem.buildURI(this.props.workingDirectory, this.props.sha)
    };
  }
  preventFocus() {
    this.shouldFocus = false;
  }
  focus() {
    this.refInitialFocus.getPromise().then(focusable => {
      if (!this.shouldFocus) {
        return;
      }
      focusable.focus();
    });
  }
}
exports.default = CommitDetailItem;
_defineProperty(CommitDetailItem, "propTypes", {
  workdirContextPool: _propTypes2.WorkdirContextPoolPropType.isRequired,
  workingDirectory: _propTypes.default.string.isRequired,
  sha: _propTypes.default.string.isRequired
});
_defineProperty(CommitDetailItem, "uriPattern", 'atom-github://commit-detail?workdir={workingDirectory}&sha={sha}');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfZXZlbnRLaXQiLCJfcHJvcFR5cGVzMiIsIl9jb21taXREZXRhaWxDb250YWluZXIiLCJfcmVmSG9sZGVyIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ0IiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiciIsImUiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsIlR5cGVFcnJvciIsIk51bWJlciIsIkNvbW1pdERldGFpbEl0ZW0iLCJSZWFjdCIsIkNvbXBvbmVudCIsImJ1aWxkVVJJIiwid29ya2luZ0RpcmVjdG9yeSIsInNoYSIsImVuY29kZVVSSUNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJpc0Rlc3Ryb3llZCIsImVtaXR0ZXIiLCJlbWl0IiwiRW1pdHRlciIsImhhc1Rlcm1pbmF0ZWRQZW5kaW5nU3RhdGUiLCJzaG91bGRGb2N1cyIsInJlZkluaXRpYWxGb2N1cyIsIlJlZkhvbGRlciIsInJlZkVkaXRvciIsIm9ic2VydmUiLCJlZGl0b3IiLCJpc0FsaXZlIiwidGVybWluYXRlUGVuZGluZ1N0YXRlIiwib25EaWRUZXJtaW5hdGVQZW5kaW5nU3RhdGUiLCJjYWxsYmFjayIsIm9uIiwib25EaWREZXN0cm95IiwicmVuZGVyIiwicmVwb3NpdG9yeSIsIndvcmtkaXJDb250ZXh0UG9vbCIsImdldENvbnRleHQiLCJnZXRSZXBvc2l0b3J5IiwiY3JlYXRlRWxlbWVudCIsIml0ZW1UeXBlIiwiZGVzdHJveSIsImdldFRpdGxlIiwiZ2V0SWNvbk5hbWUiLCJvYnNlcnZlRW1iZWRkZWRUZXh0RWRpdG9yIiwiY2IiLCJtYXAiLCJnZXRXb3JraW5nRGlyZWN0b3J5IiwiZ2V0U2hhIiwic2VyaWFsaXplIiwiZGVzZXJpYWxpemVyIiwidXJpIiwicHJldmVudEZvY3VzIiwiZm9jdXMiLCJnZXRQcm9taXNlIiwidGhlbiIsImZvY3VzYWJsZSIsImV4cG9ydHMiLCJXb3JrZGlyQ29udGV4dFBvb2xQcm9wVHlwZSIsImlzUmVxdWlyZWQiLCJQcm9wVHlwZXMiLCJzdHJpbmciXSwic291cmNlcyI6WyJjb21taXQtZGV0YWlsLWl0ZW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge0VtaXR0ZXJ9IGZyb20gJ2V2ZW50LWtpdCc7XG5cbmltcG9ydCB7V29ya2RpckNvbnRleHRQb29sUHJvcFR5cGV9IGZyb20gJy4uL3Byb3AtdHlwZXMnO1xuaW1wb3J0IENvbW1pdERldGFpbENvbnRhaW5lciBmcm9tICcuLi9jb250YWluZXJzL2NvbW1pdC1kZXRhaWwtY29udGFpbmVyJztcbmltcG9ydCBSZWZIb2xkZXIgZnJvbSAnLi4vbW9kZWxzL3JlZi1ob2xkZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21taXREZXRhaWxJdGVtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICB3b3JrZGlyQ29udGV4dFBvb2w6IFdvcmtkaXJDb250ZXh0UG9vbFByb3BUeXBlLmlzUmVxdWlyZWQsXG4gICAgd29ya2luZ0RpcmVjdG9yeTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHNoYTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB9XG5cbiAgc3RhdGljIHVyaVBhdHRlcm4gPSAnYXRvbS1naXRodWI6Ly9jb21taXQtZGV0YWlsP3dvcmtkaXI9e3dvcmtpbmdEaXJlY3Rvcnl9JnNoYT17c2hhfSdcblxuICBzdGF0aWMgYnVpbGRVUkkod29ya2luZ0RpcmVjdG9yeSwgc2hhKSB7XG4gICAgcmV0dXJuIGBhdG9tLWdpdGh1YjovL2NvbW1pdC1kZXRhaWw/d29ya2Rpcj0ke2VuY29kZVVSSUNvbXBvbmVudCh3b3JraW5nRGlyZWN0b3J5KX0mc2hhPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHNoYSl9YDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcbiAgICB0aGlzLmlzRGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5oYXNUZXJtaW5hdGVkUGVuZGluZ1N0YXRlID0gZmFsc2U7XG4gICAgdGhpcy5zaG91bGRGb2N1cyA9IHRydWU7XG4gICAgdGhpcy5yZWZJbml0aWFsRm9jdXMgPSBuZXcgUmVmSG9sZGVyKCk7XG5cbiAgICB0aGlzLnJlZkVkaXRvciA9IG5ldyBSZWZIb2xkZXIoKTtcbiAgICB0aGlzLnJlZkVkaXRvci5vYnNlcnZlKGVkaXRvciA9PiB7XG4gICAgICBpZiAoZWRpdG9yLmlzQWxpdmUoKSkge1xuICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLWNoYW5nZS1lbWJlZGRlZC10ZXh0LWVkaXRvcicsIGVkaXRvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB0ZXJtaW5hdGVQZW5kaW5nU3RhdGUoKSB7XG4gICAgaWYgKCF0aGlzLmhhc1Rlcm1pbmF0ZWRQZW5kaW5nU3RhdGUpIHtcbiAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtdGVybWluYXRlLXBlbmRpbmctc3RhdGUnKTtcbiAgICAgIHRoaXMuaGFzVGVybWluYXRlZFBlbmRpbmdTdGF0ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgb25EaWRUZXJtaW5hdGVQZW5kaW5nU3RhdGUoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCdkaWQtdGVybWluYXRlLXBlbmRpbmctc3RhdGUnLCBjYWxsYmFjayk7XG4gIH1cblxuICBkZXN0cm95ID0gKCkgPT4ge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKCF0aGlzLmlzRGVzdHJveWVkKSB7XG4gICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLWRlc3Ryb3knKTtcbiAgICAgIHRoaXMuaXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIG9uRGlkRGVzdHJveShjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC1kZXN0cm95JywgY2FsbGJhY2spO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHJlcG9zaXRvcnkgPSB0aGlzLnByb3BzLndvcmtkaXJDb250ZXh0UG9vbC5nZXRDb250ZXh0KHRoaXMucHJvcHMud29ya2luZ0RpcmVjdG9yeSkuZ2V0UmVwb3NpdG9yeSgpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxDb21taXREZXRhaWxDb250YWluZXJcbiAgICAgICAgaXRlbVR5cGU9e3RoaXMuY29uc3RydWN0b3J9XG4gICAgICAgIHJlcG9zaXRvcnk9e3JlcG9zaXRvcnl9XG4gICAgICAgIHsuLi50aGlzLnByb3BzfVxuICAgICAgICBkZXN0cm95PXt0aGlzLmRlc3Ryb3l9XG4gICAgICAgIHJlZkVkaXRvcj17dGhpcy5yZWZFZGl0b3J9XG4gICAgICAgIHJlZkluaXRpYWxGb2N1cz17dGhpcy5yZWZJbml0aWFsRm9jdXN9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICBnZXRUaXRsZSgpIHtcbiAgICByZXR1cm4gYENvbW1pdDogJHt0aGlzLnByb3BzLnNoYX1gO1xuICB9XG5cbiAgZ2V0SWNvbk5hbWUoKSB7XG4gICAgcmV0dXJuICdnaXQtY29tbWl0JztcbiAgfVxuXG4gIG9ic2VydmVFbWJlZGRlZFRleHRFZGl0b3IoY2IpIHtcbiAgICB0aGlzLnJlZkVkaXRvci5tYXAoZWRpdG9yID0+IGVkaXRvci5pc0FsaXZlKCkgJiYgY2IoZWRpdG9yKSk7XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vbignZGlkLWNoYW5nZS1lbWJlZGRlZC10ZXh0LWVkaXRvcicsIGNiKTtcbiAgfVxuXG4gIGdldFdvcmtpbmdEaXJlY3RvcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMud29ya2luZ0RpcmVjdG9yeTtcbiAgfVxuXG4gIGdldFNoYSgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5zaGE7XG4gIH1cblxuICBzZXJpYWxpemUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlc2VyaWFsaXplcjogJ0NvbW1pdERldGFpbFN0dWInLFxuICAgICAgdXJpOiBDb21taXREZXRhaWxJdGVtLmJ1aWxkVVJJKHRoaXMucHJvcHMud29ya2luZ0RpcmVjdG9yeSwgdGhpcy5wcm9wcy5zaGEpLFxuICAgIH07XG4gIH1cblxuICBwcmV2ZW50Rm9jdXMoKSB7XG4gICAgdGhpcy5zaG91bGRGb2N1cyA9IGZhbHNlO1xuICB9XG5cbiAgZm9jdXMoKSB7XG4gICAgdGhpcy5yZWZJbml0aWFsRm9jdXMuZ2V0UHJvbWlzZSgpLnRoZW4oZm9jdXNhYmxlID0+IHtcbiAgICAgIGlmICghdGhpcy5zaG91bGRGb2N1cykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGZvY3VzYWJsZS5mb2N1cygpO1xuICAgIH0pO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFNBQUEsR0FBQUYsT0FBQTtBQUVBLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLHNCQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxV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