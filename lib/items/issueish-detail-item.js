"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _eventKit = require("event-kit");
var _helpers = require("../helpers");
var _propTypes2 = require("../prop-types");
var _reporterProxy = require("../reporter-proxy");
var _repository = _interopRequireDefault(require("../models/repository"));
var _endpoint = require("../models/endpoint");
var _issueishDetailContainer = _interopRequireDefault(require("../containers/issueish-detail-container"));
var _refHolder = _interopRequireDefault(require("../models/ref-holder"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class IssueishDetailItem extends _react.Component {
  static buildURI({
    host,
    owner,
    repo,
    number,
    workdir
  }) {
    const encodeOptionalParam = param => param ? encodeURIComponent(param) : '';
    return 'atom-github://issueish/' + encodeURIComponent(host) + '/' + encodeURIComponent(owner) + '/' + encodeURIComponent(repo) + '/' + encodeURIComponent(number) + '?workdir=' + encodeOptionalParam(workdir);
  }
  constructor(props) {
    super(props);
    _defineProperty(this, "destroy", () => {
      /* istanbul ignore else */
      if (!this.isDestroyed) {
        this.emitter.emit('did-destroy');
        this.isDestroyed = true;
      }
    });
    _defineProperty(this, "onTabSelected", index => new Promise(resolve => {
      this.setState({
        selectedTab: index,
        initChangedFilePath: '',
        initChangedFilePosition: 0
      }, resolve);
    }));
    _defineProperty(this, "onOpenFilesTab", callback => this.emitter.on('on-open-files-tab', callback));
    (0, _helpers.autobind)(this, 'switchToIssueish', 'handleTitleChanged');
    this.emitter = new _eventKit.Emitter();
    this.title = `${this.props.owner}/${this.props.repo}#${this.props.issueishNumber}`;
    this.hasTerminatedPendingState = false;
    const repository = this.props.workingDirectory === '' ? _repository.default.absent() : this.props.workdirContextPool.add(this.props.workingDirectory).getRepository();
    this.state = {
      host: this.props.host,
      owner: this.props.owner,
      repo: this.props.repo,
      issueishNumber: this.props.issueishNumber,
      repository,
      initChangedFilePath: '',
      initChangedFilePosition: 0,
      selectedTab: this.props.initSelectedTab
    };
    if (repository.isAbsent()) {
      this.switchToIssueish(this.props.owner, this.props.repo, this.props.issueishNumber);
    }
    this.refEditor = new _refHolder.default();
    this.refEditor.observe(editor => {
      if (editor.isAlive()) {
        this.emitter.emit('did-change-embedded-text-editor', editor);
      }
    });
  }
  render() {
    return _react.default.createElement(_issueishDetailContainer.default, {
      endpoint: (0, _endpoint.getEndpoint)(this.state.host),
      owner: this.state.owner,
      repo: this.state.repo,
      issueishNumber: this.state.issueishNumber,
      initChangedFilePath: this.state.initChangedFilePath,
      initChangedFilePosition: this.state.initChangedFilePosition,
      selectedTab: this.state.selectedTab,
      onTabSelected: this.onTabSelected,
      onOpenFilesTab: this.onOpenFilesTab,
      repository: this.state.repository,
      workspace: this.props.workspace,
      loginModel: this.props.loginModel,
      onTitleChange: this.handleTitleChanged,
      switchToIssueish: this.switchToIssueish,
      commands: this.props.commands,
      keymaps: this.props.keymaps,
      tooltips: this.props.tooltips,
      config: this.props.config,
      destroy: this.destroy,
      itemType: this.constructor,
      refEditor: this.refEditor,
      reportRelayError: this.props.reportRelayError
    });
  }
  async switchToIssueish(owner, repo, issueishNumber) {
    const pool = this.props.workdirContextPool;
    const prev = {
      owner: this.state.owner,
      repo: this.state.repo,
      issueishNumber: this.state.issueishNumber
    };
    const nextRepository = (await this.state.repository.hasGitHubRemote(this.state.host, owner, repo)) ? this.state.repository : (await pool.getMatchingContext(this.state.host, owner, repo)).getRepository();
    await new Promise(resolve => {
      this.setState((prevState, props) => {
        if (pool === props.workdirContextPool && prevState.owner === prev.owner && prevState.repo === prev.repo && prevState.issueishNumber === prev.issueishNumber) {
          (0, _reporterProxy.addEvent)('open-issueish-in-pane', {
            package: 'github',
            from: 'issueish-link',
            target: 'current-tab'
          });
          return {
            owner,
            repo,
            issueishNumber,
            repository: nextRepository
          };
        }
        return {};
      }, resolve);
    });
  }
  handleTitleChanged(title) {
    if (this.title !== title) {
      this.title = title;
      this.emitter.emit('did-change-title', title);
    }
  }
  onDidChangeTitle(cb) {
    return this.emitter.on('did-change-title', cb);
  }
  terminatePendingState() {
    if (!this.hasTerminatedPendingState) {
      this.emitter.emit('did-terminate-pending-state');
      this.hasTerminatedPendingState = true;
    }
  }
  onDidTerminatePendingState(callback) {
    return this.emitter.on('did-terminate-pending-state', callback);
  }
  onDidDestroy(callback) {
    return this.emitter.on('did-destroy', callback);
  }
  serialize() {
    return {
      uri: IssueishDetailItem.buildURI({
        host: this.props.host,
        owner: this.props.owner,
        repo: this.props.repo,
        number: this.props.issueishNumber,
        workdir: this.props.workingDirectory
      }),
      selectedTab: this.state.selectedTab,
      deserializer: 'IssueishDetailItem'
    };
  }
  getTitle() {
    return this.title;
  }
  observeEmbeddedTextEditor(cb) {
    this.refEditor.map(editor => editor.isAlive() && cb(editor));
    return this.emitter.on('did-change-embedded-text-editor', cb);
  }
  openFilesTab({
    changedFilePath,
    changedFilePosition
  }) {
    this.setState({
      selectedTab: IssueishDetailItem.tabs.FILES,
      initChangedFilePath: changedFilePath,
      initChangedFilePosition: changedFilePosition
    }, () => {
      this.emitter.emit('on-open-files-tab', {
        changedFilePath,
        changedFilePosition
      });
    });
  }
}
exports.default = IssueishDetailItem;
_defineProperty(IssueishDetailItem, "tabs", {
  OVERVIEW: 0,
  BUILD_STATUS: 1,
  COMMITS: 2,
  FILES: 3
});
_defineProperty(IssueishDetailItem, "propTypes", {
  // Issueish selection criteria
  // Parsed from item URI
  host: _propTypes.default.string.isRequired,
  owner: _propTypes.default.string.isRequired,
  repo: _propTypes.default.string.isRequired,
  issueishNumber: _propTypes.default.number.isRequired,
  workingDirectory: _propTypes.default.string.isRequired,
  // Package models
  workdirContextPool: _propTypes2.WorkdirContextPoolPropType.isRequired,
  loginModel: _propTypes2.GithubLoginModelPropType.isRequired,
  initSelectedTab: _propTypes.default.oneOf(Object.keys(IssueishDetailItem.tabs).map(k => IssueishDetailItem.tabs[k])),
  // Atom environment
  workspace: _propTypes.default.object.isRequired,
  commands: _propTypes.default.object.isRequired,
  keymaps: _propTypes.default.object.isRequired,
  tooltips: _propTypes.default.object.isRequired,
  config: _propTypes.default.object.isRequired,
  // Action methods
  reportRelayError: _propTypes.default.func.isRequired
});
_defineProperty(IssueishDetailItem, "defaultProps", {
  initSelectedTab: IssueishDetailItem.tabs.OVERVIEW
});
_defineProperty(IssueishDetailItem, "uriPattern", 'atom-github://issueish/{host}/{owner}/{repo}/{issueishNumber}?workdir={workingDirectory}');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJc3N1ZWlzaERldGFpbEl0ZW0iLCJDb21wb25lbnQiLCJidWlsZFVSSSIsImhvc3QiLCJvd25lciIsInJlcG8iLCJudW1iZXIiLCJ3b3JrZGlyIiwiZW5jb2RlT3B0aW9uYWxQYXJhbSIsInBhcmFtIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsImlzRGVzdHJveWVkIiwiZW1pdHRlciIsImVtaXQiLCJpbmRleCIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0U3RhdGUiLCJzZWxlY3RlZFRhYiIsImluaXRDaGFuZ2VkRmlsZVBhdGgiLCJpbml0Q2hhbmdlZEZpbGVQb3NpdGlvbiIsImNhbGxiYWNrIiwib24iLCJhdXRvYmluZCIsIkVtaXR0ZXIiLCJ0aXRsZSIsImlzc3VlaXNoTnVtYmVyIiwiaGFzVGVybWluYXRlZFBlbmRpbmdTdGF0ZSIsInJlcG9zaXRvcnkiLCJ3b3JraW5nRGlyZWN0b3J5IiwiUmVwb3NpdG9yeSIsImFic2VudCIsIndvcmtkaXJDb250ZXh0UG9vbCIsImFkZCIsImdldFJlcG9zaXRvcnkiLCJzdGF0ZSIsImluaXRTZWxlY3RlZFRhYiIsImlzQWJzZW50Iiwic3dpdGNoVG9Jc3N1ZWlzaCIsInJlZkVkaXRvciIsIlJlZkhvbGRlciIsIm9ic2VydmUiLCJlZGl0b3IiLCJpc0FsaXZlIiwicmVuZGVyIiwiZ2V0RW5kcG9pbnQiLCJvblRhYlNlbGVjdGVkIiwib25PcGVuRmlsZXNUYWIiLCJ3b3Jrc3BhY2UiLCJsb2dpbk1vZGVsIiwiaGFuZGxlVGl0bGVDaGFuZ2VkIiwiY29tbWFuZHMiLCJrZXltYXBzIiwidG9vbHRpcHMiLCJjb25maWciLCJkZXN0cm95IiwicmVwb3J0UmVsYXlFcnJvciIsInBvb2wiLCJwcmV2IiwibmV4dFJlcG9zaXRvcnkiLCJoYXNHaXRIdWJSZW1vdGUiLCJnZXRNYXRjaGluZ0NvbnRleHQiLCJwcmV2U3RhdGUiLCJhZGRFdmVudCIsInBhY2thZ2UiLCJmcm9tIiwidGFyZ2V0Iiwib25EaWRDaGFuZ2VUaXRsZSIsImNiIiwidGVybWluYXRlUGVuZGluZ1N0YXRlIiwib25EaWRUZXJtaW5hdGVQZW5kaW5nU3RhdGUiLCJvbkRpZERlc3Ryb3kiLCJzZXJpYWxpemUiLCJ1cmkiLCJkZXNlcmlhbGl6ZXIiLCJnZXRUaXRsZSIsIm9ic2VydmVFbWJlZGRlZFRleHRFZGl0b3IiLCJtYXAiLCJvcGVuRmlsZXNUYWIiLCJjaGFuZ2VkRmlsZVBhdGgiLCJjaGFuZ2VkRmlsZVBvc2l0aW9uIiwidGFicyIsIkZJTEVTIiwiT1ZFUlZJRVciLCJCVUlMRF9TVEFUVVMiLCJDT01NSVRTIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsIldvcmtkaXJDb250ZXh0UG9vbFByb3BUeXBlIiwiR2l0aHViTG9naW5Nb2RlbFByb3BUeXBlIiwib25lT2YiLCJPYmplY3QiLCJrZXlzIiwiayIsIm9iamVjdCIsImZ1bmMiXSwic291cmNlcyI6WyJpc3N1ZWlzaC1kZXRhaWwtaXRlbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge0VtaXR0ZXJ9IGZyb20gJ2V2ZW50LWtpdCc7XG5cbmltcG9ydCB7YXV0b2JpbmR9IGZyb20gJy4uL2hlbHBlcnMnO1xuaW1wb3J0IHtHaXRodWJMb2dpbk1vZGVsUHJvcFR5cGUsIFdvcmtkaXJDb250ZXh0UG9vbFByb3BUeXBlfSBmcm9tICcuLi9wcm9wLXR5cGVzJztcbmltcG9ydCB7YWRkRXZlbnR9IGZyb20gJy4uL3JlcG9ydGVyLXByb3h5JztcbmltcG9ydCBSZXBvc2l0b3J5IGZyb20gJy4uL21vZGVscy9yZXBvc2l0b3J5JztcbmltcG9ydCB7Z2V0RW5kcG9pbnR9IGZyb20gJy4uL21vZGVscy9lbmRwb2ludCc7XG5pbXBvcnQgSXNzdWVpc2hEZXRhaWxDb250YWluZXIgZnJvbSAnLi4vY29udGFpbmVycy9pc3N1ZWlzaC1kZXRhaWwtY29udGFpbmVyJztcbmltcG9ydCBSZWZIb2xkZXIgZnJvbSAnLi4vbW9kZWxzL3JlZi1ob2xkZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJc3N1ZWlzaERldGFpbEl0ZW0gZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgdGFicyA9IHtcbiAgICBPVkVSVklFVzogMCxcbiAgICBCVUlMRF9TVEFUVVM6IDEsXG4gICAgQ09NTUlUUzogMixcbiAgICBGSUxFUzogMyxcbiAgfVxuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLy8gSXNzdWVpc2ggc2VsZWN0aW9uIGNyaXRlcmlhXG4gICAgLy8gUGFyc2VkIGZyb20gaXRlbSBVUklcbiAgICBob3N0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgb3duZXI6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICByZXBvOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgaXNzdWVpc2hOdW1iZXI6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICB3b3JraW5nRGlyZWN0b3J5OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cbiAgICAvLyBQYWNrYWdlIG1vZGVsc1xuICAgIHdvcmtkaXJDb250ZXh0UG9vbDogV29ya2RpckNvbnRleHRQb29sUHJvcFR5cGUuaXNSZXF1aXJlZCxcbiAgICBsb2dpbk1vZGVsOiBHaXRodWJMb2dpbk1vZGVsUHJvcFR5cGUuaXNSZXF1aXJlZCxcbiAgICBpbml0U2VsZWN0ZWRUYWI6IFByb3BUeXBlcy5vbmVPZihcbiAgICAgIE9iamVjdC5rZXlzKElzc3VlaXNoRGV0YWlsSXRlbS50YWJzKS5tYXAoayA9PiBJc3N1ZWlzaERldGFpbEl0ZW0udGFic1trXSksXG4gICAgKSxcblxuICAgIC8vIEF0b20gZW52aXJvbm1lbnRcbiAgICB3b3Jrc3BhY2U6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBjb21tYW5kczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGtleW1hcHM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICB0b29sdGlwczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGNvbmZpZzogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gICAgLy8gQWN0aW9uIG1ldGhvZHNcbiAgICByZXBvcnRSZWxheUVycm9yOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBpbml0U2VsZWN0ZWRUYWI6IElzc3VlaXNoRGV0YWlsSXRlbS50YWJzLk9WRVJWSUVXLFxuICB9XG5cbiAgc3RhdGljIHVyaVBhdHRlcm4gPSAnYXRvbS1naXRodWI6Ly9pc3N1ZWlzaC97aG9zdH0ve293bmVyfS97cmVwb30ve2lzc3VlaXNoTnVtYmVyfT93b3JrZGlyPXt3b3JraW5nRGlyZWN0b3J5fSdcblxuICBzdGF0aWMgYnVpbGRVUkkoe2hvc3QsIG93bmVyLCByZXBvLCBudW1iZXIsIHdvcmtkaXJ9KSB7XG4gICAgY29uc3QgZW5jb2RlT3B0aW9uYWxQYXJhbSA9IHBhcmFtID0+IChwYXJhbSA/IGVuY29kZVVSSUNvbXBvbmVudChwYXJhbSkgOiAnJyk7XG5cbiAgICByZXR1cm4gJ2F0b20tZ2l0aHViOi8vaXNzdWVpc2gvJyArXG4gICAgICBlbmNvZGVVUklDb21wb25lbnQoaG9zdCkgKyAnLycgK1xuICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KG93bmVyKSArICcvJyArXG4gICAgICBlbmNvZGVVUklDb21wb25lbnQocmVwbykgKyAnLycgK1xuICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KG51bWJlcikgK1xuICAgICAgJz93b3JrZGlyPScgKyBlbmNvZGVPcHRpb25hbFBhcmFtKHdvcmtkaXIpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgYXV0b2JpbmQodGhpcywgJ3N3aXRjaFRvSXNzdWVpc2gnLCAnaGFuZGxlVGl0bGVDaGFuZ2VkJyk7XG5cbiAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpO1xuICAgIHRoaXMudGl0bGUgPSBgJHt0aGlzLnByb3BzLm93bmVyfS8ke3RoaXMucHJvcHMucmVwb30jJHt0aGlzLnByb3BzLmlzc3VlaXNoTnVtYmVyfWA7XG4gICAgdGhpcy5oYXNUZXJtaW5hdGVkUGVuZGluZ1N0YXRlID0gZmFsc2U7XG5cbiAgICBjb25zdCByZXBvc2l0b3J5ID0gdGhpcy5wcm9wcy53b3JraW5nRGlyZWN0b3J5ID09PSAnJ1xuICAgICAgPyBSZXBvc2l0b3J5LmFic2VudCgpXG4gICAgICA6IHRoaXMucHJvcHMud29ya2RpckNvbnRleHRQb29sLmFkZCh0aGlzLnByb3BzLndvcmtpbmdEaXJlY3RvcnkpLmdldFJlcG9zaXRvcnkoKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBob3N0OiB0aGlzLnByb3BzLmhvc3QsXG4gICAgICBvd25lcjogdGhpcy5wcm9wcy5vd25lcixcbiAgICAgIHJlcG86IHRoaXMucHJvcHMucmVwbyxcbiAgICAgIGlzc3VlaXNoTnVtYmVyOiB0aGlzLnByb3BzLmlzc3VlaXNoTnVtYmVyLFxuICAgICAgcmVwb3NpdG9yeSxcbiAgICAgIGluaXRDaGFuZ2VkRmlsZVBhdGg6ICcnLFxuICAgICAgaW5pdENoYW5nZWRGaWxlUG9zaXRpb246IDAsXG4gICAgICBzZWxlY3RlZFRhYjogdGhpcy5wcm9wcy5pbml0U2VsZWN0ZWRUYWIsXG4gICAgfTtcblxuICAgIGlmIChyZXBvc2l0b3J5LmlzQWJzZW50KCkpIHtcbiAgICAgIHRoaXMuc3dpdGNoVG9Jc3N1ZWlzaCh0aGlzLnByb3BzLm93bmVyLCB0aGlzLnByb3BzLnJlcG8sIHRoaXMucHJvcHMuaXNzdWVpc2hOdW1iZXIpO1xuICAgIH1cblxuICAgIHRoaXMucmVmRWRpdG9yID0gbmV3IFJlZkhvbGRlcigpO1xuICAgIHRoaXMucmVmRWRpdG9yLm9ic2VydmUoZWRpdG9yID0+IHtcbiAgICAgIGlmIChlZGl0b3IuaXNBbGl2ZSgpKSB7XG4gICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtY2hhbmdlLWVtYmVkZGVkLXRleHQtZWRpdG9yJywgZWRpdG9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPElzc3VlaXNoRGV0YWlsQ29udGFpbmVyXG4gICAgICAgIGVuZHBvaW50PXtnZXRFbmRwb2ludCh0aGlzLnN0YXRlLmhvc3QpfVxuICAgICAgICBvd25lcj17dGhpcy5zdGF0ZS5vd25lcn1cbiAgICAgICAgcmVwbz17dGhpcy5zdGF0ZS5yZXBvfVxuICAgICAgICBpc3N1ZWlzaE51bWJlcj17dGhpcy5zdGF0ZS5pc3N1ZWlzaE51bWJlcn1cbiAgICAgICAgaW5pdENoYW5nZWRGaWxlUGF0aD17dGhpcy5zdGF0ZS5pbml0Q2hhbmdlZEZpbGVQYXRofVxuICAgICAgICBpbml0Q2hhbmdlZEZpbGVQb3NpdGlvbj17dGhpcy5zdGF0ZS5pbml0Q2hhbmdlZEZpbGVQb3NpdGlvbn1cbiAgICAgICAgc2VsZWN0ZWRUYWI9e3RoaXMuc3RhdGUuc2VsZWN0ZWRUYWJ9XG4gICAgICAgIG9uVGFiU2VsZWN0ZWQ9e3RoaXMub25UYWJTZWxlY3RlZH1cbiAgICAgICAgb25PcGVuRmlsZXNUYWI9e3RoaXMub25PcGVuRmlsZXNUYWJ9XG5cbiAgICAgICAgcmVwb3NpdG9yeT17dGhpcy5zdGF0ZS5yZXBvc2l0b3J5fVxuICAgICAgICB3b3Jrc3BhY2U9e3RoaXMucHJvcHMud29ya3NwYWNlfVxuICAgICAgICBsb2dpbk1vZGVsPXt0aGlzLnByb3BzLmxvZ2luTW9kZWx9XG5cbiAgICAgICAgb25UaXRsZUNoYW5nZT17dGhpcy5oYW5kbGVUaXRsZUNoYW5nZWR9XG4gICAgICAgIHN3aXRjaFRvSXNzdWVpc2g9e3RoaXMuc3dpdGNoVG9Jc3N1ZWlzaH1cbiAgICAgICAgY29tbWFuZHM9e3RoaXMucHJvcHMuY29tbWFuZHN9XG4gICAgICAgIGtleW1hcHM9e3RoaXMucHJvcHMua2V5bWFwc31cbiAgICAgICAgdG9vbHRpcHM9e3RoaXMucHJvcHMudG9vbHRpcHN9XG4gICAgICAgIGNvbmZpZz17dGhpcy5wcm9wcy5jb25maWd9XG5cbiAgICAgICAgZGVzdHJveT17dGhpcy5kZXN0cm95fVxuICAgICAgICBpdGVtVHlwZT17dGhpcy5jb25zdHJ1Y3Rvcn1cbiAgICAgICAgcmVmRWRpdG9yPXt0aGlzLnJlZkVkaXRvcn1cbiAgICAgICAgcmVwb3J0UmVsYXlFcnJvcj17dGhpcy5wcm9wcy5yZXBvcnRSZWxheUVycm9yfVxuICAgICAgLz5cbiAgICApO1xuICB9XG5cbiAgYXN5bmMgc3dpdGNoVG9Jc3N1ZWlzaChvd25lciwgcmVwbywgaXNzdWVpc2hOdW1iZXIpIHtcbiAgICBjb25zdCBwb29sID0gdGhpcy5wcm9wcy53b3JrZGlyQ29udGV4dFBvb2w7XG4gICAgY29uc3QgcHJldiA9IHtcbiAgICAgIG93bmVyOiB0aGlzLnN0YXRlLm93bmVyLFxuICAgICAgcmVwbzogdGhpcy5zdGF0ZS5yZXBvLFxuICAgICAgaXNzdWVpc2hOdW1iZXI6IHRoaXMuc3RhdGUuaXNzdWVpc2hOdW1iZXIsXG4gICAgfTtcblxuICAgIGNvbnN0IG5leHRSZXBvc2l0b3J5ID0gYXdhaXQgdGhpcy5zdGF0ZS5yZXBvc2l0b3J5Lmhhc0dpdEh1YlJlbW90ZSh0aGlzLnN0YXRlLmhvc3QsIG93bmVyLCByZXBvKVxuICAgICAgPyB0aGlzLnN0YXRlLnJlcG9zaXRvcnlcbiAgICAgIDogKGF3YWl0IHBvb2wuZ2V0TWF0Y2hpbmdDb250ZXh0KHRoaXMuc3RhdGUuaG9zdCwgb3duZXIsIHJlcG8pKS5nZXRSZXBvc2l0b3J5KCk7XG5cbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoKHByZXZTdGF0ZSwgcHJvcHMpID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHBvb2wgPT09IHByb3BzLndvcmtkaXJDb250ZXh0UG9vbCAmJlxuICAgICAgICAgIHByZXZTdGF0ZS5vd25lciA9PT0gcHJldi5vd25lciAmJlxuICAgICAgICAgIHByZXZTdGF0ZS5yZXBvID09PSBwcmV2LnJlcG8gJiZcbiAgICAgICAgICBwcmV2U3RhdGUuaXNzdWVpc2hOdW1iZXIgPT09IHByZXYuaXNzdWVpc2hOdW1iZXJcbiAgICAgICAgKSB7XG4gICAgICAgICAgYWRkRXZlbnQoJ29wZW4taXNzdWVpc2gtaW4tcGFuZScsIHtwYWNrYWdlOiAnZ2l0aHViJywgZnJvbTogJ2lzc3VlaXNoLWxpbmsnLCB0YXJnZXQ6ICdjdXJyZW50LXRhYid9KTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3duZXIsXG4gICAgICAgICAgICByZXBvLFxuICAgICAgICAgICAgaXNzdWVpc2hOdW1iZXIsXG4gICAgICAgICAgICByZXBvc2l0b3J5OiBuZXh0UmVwb3NpdG9yeSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfSwgcmVzb2x2ZSk7XG4gICAgfSk7XG4gIH1cblxuICBoYW5kbGVUaXRsZUNoYW5nZWQodGl0bGUpIHtcbiAgICBpZiAodGhpcy50aXRsZSAhPT0gdGl0bGUpIHtcbiAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtY2hhbmdlLXRpdGxlJywgdGl0bGUpO1xuICAgIH1cbiAgfVxuXG4gIG9uRGlkQ2hhbmdlVGl0bGUoY2IpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCdkaWQtY2hhbmdlLXRpdGxlJywgY2IpO1xuICB9XG5cbiAgdGVybWluYXRlUGVuZGluZ1N0YXRlKCkge1xuICAgIGlmICghdGhpcy5oYXNUZXJtaW5hdGVkUGVuZGluZ1N0YXRlKSB7XG4gICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLXRlcm1pbmF0ZS1wZW5kaW5nLXN0YXRlJyk7XG4gICAgICB0aGlzLmhhc1Rlcm1pbmF0ZWRQZW5kaW5nU3RhdGUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIG9uRGlkVGVybWluYXRlUGVuZGluZ1N0YXRlKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vbignZGlkLXRlcm1pbmF0ZS1wZW5kaW5nLXN0YXRlJywgY2FsbGJhY2spO1xuICB9XG5cbiAgZGVzdHJveSA9ICgpID0+IHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICghdGhpcy5pc0Rlc3Ryb3llZCkge1xuICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2RpZC1kZXN0cm95Jyk7XG4gICAgICB0aGlzLmlzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBvbkRpZERlc3Ryb3koY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCdkaWQtZGVzdHJveScsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHNlcmlhbGl6ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXJpOiBJc3N1ZWlzaERldGFpbEl0ZW0uYnVpbGRVUkkoe1xuICAgICAgICBob3N0OiB0aGlzLnByb3BzLmhvc3QsXG4gICAgICAgIG93bmVyOiB0aGlzLnByb3BzLm93bmVyLFxuICAgICAgICByZXBvOiB0aGlzLnByb3BzLnJlcG8sXG4gICAgICAgIG51bWJlcjogdGhpcy5wcm9wcy5pc3N1ZWlzaE51bWJlcixcbiAgICAgICAgd29ya2RpcjogdGhpcy5wcm9wcy53b3JraW5nRGlyZWN0b3J5LFxuICAgICAgfSksXG4gICAgICBzZWxlY3RlZFRhYjogdGhpcy5zdGF0ZS5zZWxlY3RlZFRhYixcbiAgICAgIGRlc2VyaWFsaXplcjogJ0lzc3VlaXNoRGV0YWlsSXRlbScsXG4gICAgfTtcbiAgfVxuXG4gIGdldFRpdGxlKCkge1xuICAgIHJldHVybiB0aGlzLnRpdGxlO1xuICB9XG5cbiAgb2JzZXJ2ZUVtYmVkZGVkVGV4dEVkaXRvcihjYikge1xuICAgIHRoaXMucmVmRWRpdG9yLm1hcChlZGl0b3IgPT4gZWRpdG9yLmlzQWxpdmUoKSAmJiBjYihlZGl0b3IpKTtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCdkaWQtY2hhbmdlLWVtYmVkZGVkLXRleHQtZWRpdG9yJywgY2IpO1xuICB9XG5cbiAgb3BlbkZpbGVzVGFiKHtjaGFuZ2VkRmlsZVBhdGgsIGNoYW5nZWRGaWxlUG9zaXRpb259KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzZWxlY3RlZFRhYjogSXNzdWVpc2hEZXRhaWxJdGVtLnRhYnMuRklMRVMsXG4gICAgICBpbml0Q2hhbmdlZEZpbGVQYXRoOiBjaGFuZ2VkRmlsZVBhdGgsXG4gICAgICBpbml0Q2hhbmdlZEZpbGVQb3NpdGlvbjogY2hhbmdlZEZpbGVQb3NpdGlvbixcbiAgICB9LCAoKSA9PiB7XG4gICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnb24tb3Blbi1maWxlcy10YWInLCB7Y2hhbmdlZEZpbGVQYXRoLCBjaGFuZ2VkRmlsZVBvc2l0aW9ufSk7XG4gICAgfSk7XG4gIH1cblxuICBvblRhYlNlbGVjdGVkID0gaW5kZXggPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzZWxlY3RlZFRhYjogaW5kZXgsXG4gICAgICBpbml0Q2hhbmdlZEZpbGVQYXRoOiAnJyxcbiAgICAgIGluaXRDaGFuZ2VkRmlsZVBvc2l0aW9uOiAwLFxuICAgIH0sIHJlc29sdmUpO1xuICB9KTtcblxuICBvbk9wZW5GaWxlc1RhYiA9IGNhbGxiYWNrID0+IHRoaXMuZW1pdHRlci5vbignb24tb3Blbi1maWxlcy10YWInLCBjYWxsYmFjayk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQTZDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUU5QixNQUFNQSxrQkFBa0IsU0FBU0MsZ0JBQVMsQ0FB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