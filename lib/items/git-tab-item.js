"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _refHolder = _interopRequireDefault(require("../models/ref-holder"));
var _gitTabContainer = _interopRequireDefault(require("../containers/git-tab-container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class GitTabItem extends _react.default.Component {
  static buildURI() {
    return this.uriPattern;
  }
  constructor(props) {
    super(props);
    this.refController = new _refHolder.default();
  }
  render() {
    return _react.default.createElement(_gitTabContainer.default, _extends({
      controllerRef: this.refController
    }, this.props));
  }
  serialize() {
    return {
      deserializer: 'GitDockItem',
      uri: this.getURI()
    };
  }
  getTitle() {
    return 'Git';
  }
  getIconName() {
    return 'git-commit';
  }
  getDefaultLocation() {
    return 'right';
  }
  getPreferredWidth() {
    return 400;
  }
  getURI() {
    return this.constructor.uriPattern;
  }
  getWorkingDirectory() {
    return this.props.repository.getWorkingDirectoryPath();
  }

  // Forwarded to the controller instance when one is present

  rememberLastFocus(...args) {
    return this.refController.map(c => c.rememberLastFocus(...args));
  }
  restoreFocus(...args) {
    return this.refController.map(c => c.restoreFocus(...args));
  }
  hasFocus(...args) {
    return this.refController.map(c => c.hasFocus(...args));
  }
  focus() {
    return this.refController.map(c => c.restoreFocus());
  }
  focusAndSelectStagingItem(...args) {
    return this.refController.map(c => c.focusAndSelectStagingItem(...args));
  }
  focusAndSelectCommitPreviewButton() {
    return this.refController.map(c => c.focusAndSelectCommitPreviewButton());
  }
  quietlySelectItem(...args) {
    return this.refController.map(c => c.quietlySelectItem(...args));
  }
  focusAndSelectRecentCommit() {
    return this.refController.map(c => c.focusAndSelectRecentCommit());
  }
}
exports.default = GitTabItem;
_defineProperty(GitTabItem, "propTypes", {
  repository: _propTypes.default.object.isRequired
});
_defineProperty(GitTabItem, "uriPattern", 'atom-github://dock-item/git');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfcmVmSG9sZGVyIiwiX2dpdFRhYkNvbnRhaW5lciIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJiaW5kIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwiX2RlZmluZVByb3BlcnR5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidCIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsInIiLCJlIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJHaXRUYWJJdGVtIiwiUmVhY3QiLCJDb21wb25lbnQiLCJidWlsZFVSSSIsInVyaVBhdHRlcm4iLCJjb25zdHJ1Y3RvciIsInByb3BzIiwicmVmQ29udHJvbGxlciIsIlJlZkhvbGRlciIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJjb250cm9sbGVyUmVmIiwic2VyaWFsaXplIiwiZGVzZXJpYWxpemVyIiwidXJpIiwiZ2V0VVJJIiwiZ2V0VGl0bGUiLCJnZXRJY29uTmFtZSIsImdldERlZmF1bHRMb2NhdGlvbiIsImdldFByZWZlcnJlZFdpZHRoIiwiZ2V0V29ya2luZ0RpcmVjdG9yeSIsInJlcG9zaXRvcnkiLCJnZXRXb3JraW5nRGlyZWN0b3J5UGF0aCIsInJlbWVtYmVyTGFzdEZvY3VzIiwiYXJncyIsIm1hcCIsImMiLCJyZXN0b3JlRm9jdXMiLCJoYXNGb2N1cyIsImZvY3VzIiwiZm9jdXNBbmRTZWxlY3RTdGFnaW5nSXRlbSIsImZvY3VzQW5kU2VsZWN0Q29tbWl0UHJldmlld0J1dHRvbiIsInF1aWV0bHlTZWxlY3RJdGVtIiwiZm9jdXNBbmRTZWxlY3RSZWNlbnRDb21taXQiLCJleHBvcnRzIiwiUHJvcFR5cGVzIiwib2JqZWN0IiwiaXNSZXF1aXJlZCJdLCJzb3VyY2VzIjpbImdpdC10YWItaXRlbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IFJlZkhvbGRlciBmcm9tICcuLi9tb2RlbHMvcmVmLWhvbGRlcic7XG5pbXBvcnQgR2l0VGFiQ29udGFpbmVyIGZyb20gJy4uL2NvbnRhaW5lcnMvZ2l0LXRhYi1jb250YWluZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHaXRUYWJJdGVtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICByZXBvc2l0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIH1cblxuICBzdGF0aWMgdXJpUGF0dGVybiA9ICdhdG9tLWdpdGh1YjovL2RvY2staXRlbS9naXQnXG5cbiAgc3RhdGljIGJ1aWxkVVJJKCkge1xuICAgIHJldHVybiB0aGlzLnVyaVBhdHRlcm47XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMucmVmQ29udHJvbGxlciA9IG5ldyBSZWZIb2xkZXIoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEdpdFRhYkNvbnRhaW5lclxuICAgICAgICBjb250cm9sbGVyUmVmPXt0aGlzLnJlZkNvbnRyb2xsZXJ9XG4gICAgICAgIHsuLi50aGlzLnByb3BzfVxuICAgICAgLz5cbiAgICApO1xuICB9XG5cbiAgc2VyaWFsaXplKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkZXNlcmlhbGl6ZXI6ICdHaXREb2NrSXRlbScsXG4gICAgICB1cmk6IHRoaXMuZ2V0VVJJKCksXG4gICAgfTtcbiAgfVxuXG4gIGdldFRpdGxlKCkge1xuICAgIHJldHVybiAnR2l0JztcbiAgfVxuXG4gIGdldEljb25OYW1lKCkge1xuICAgIHJldHVybiAnZ2l0LWNvbW1pdCc7XG4gIH1cblxuICBnZXREZWZhdWx0TG9jYXRpb24oKSB7XG4gICAgcmV0dXJuICdyaWdodCc7XG4gIH1cblxuICBnZXRQcmVmZXJyZWRXaWR0aCgpIHtcbiAgICByZXR1cm4gNDAwO1xuICB9XG5cbiAgZ2V0VVJJKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnVyaVBhdHRlcm47XG4gIH1cblxuICBnZXRXb3JraW5nRGlyZWN0b3J5KCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnJlcG9zaXRvcnkuZ2V0V29ya2luZ0RpcmVjdG9yeVBhdGgoKTtcbiAgfVxuXG4gIC8vIEZvcndhcmRlZCB0byB0aGUgY29udHJvbGxlciBpbnN0YW5jZSB3aGVuIG9uZSBpcyBwcmVzZW50XG5cbiAgcmVtZW1iZXJMYXN0Rm9jdXMoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLnJlZkNvbnRyb2xsZXIubWFwKGMgPT4gYy5yZW1lbWJlckxhc3RGb2N1cyguLi5hcmdzKSk7XG4gIH1cblxuICByZXN0b3JlRm9jdXMoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLnJlZkNvbnRyb2xsZXIubWFwKGMgPT4gYy5yZXN0b3JlRm9jdXMoLi4uYXJncykpO1xuICB9XG5cbiAgaGFzRm9jdXMoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLnJlZkNvbnRyb2xsZXIubWFwKGMgPT4gYy5oYXNGb2N1cyguLi5hcmdzKSk7XG4gIH1cblxuICBmb2N1cygpIHtcbiAgICByZXR1cm4gdGhpcy5yZWZDb250cm9sbGVyLm1hcChjID0+IGMucmVzdG9yZUZvY3VzKCkpO1xuICB9XG5cbiAgZm9jdXNBbmRTZWxlY3RTdGFnaW5nSXRlbSguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMucmVmQ29udHJvbGxlci5tYXAoYyA9PiBjLmZvY3VzQW5kU2VsZWN0U3RhZ2luZ0l0ZW0oLi4uYXJncykpO1xuICB9XG5cbiAgZm9jdXNBbmRTZWxlY3RDb21taXRQcmV2aWV3QnV0dG9uKCkge1xuICAgIHJldHVybiB0aGlzLnJlZkNvbnRyb2xsZXIubWFwKGMgPT4gYy5mb2N1c0FuZFNlbGVjdENvbW1pdFByZXZpZXdCdXR0b24oKSk7XG4gIH1cblxuICBxdWlldGx5U2VsZWN0SXRlbSguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMucmVmQ29udHJvbGxlci5tYXAoYyA9PiBjLnF1aWV0bHlTZWxlY3RJdGVtKC4uLmFyZ3MpKTtcbiAgfVxuXG4gIGZvY3VzQW5kU2VsZWN0UmVjZW50Q29tbWl0KCkge1xuICAgIHJldHVybiB0aGlzLnJlZkNvbnRyb2xsZXIubWFwKGMgPT4gYy5mb2N1c0FuZFNlbGVjdFJlY2VudENvbW1pdCgpKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRSxVQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxnQkFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQThELFNBQUFELHVCQUFBSyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBQUEsU0FBQUcsU0FBQSxJQUFBQSxRQUFBLEdBQUFDLE1BQUEsQ0FBQUMsTUFBQSxHQUFBRCxNQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQSxlQUFBQyxNQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFBQUYsQ0FBQSxVQUFBRyxNQUFBLEdBQUFGLFNBQUEsQ0FBQUQsQ0FBQSxZQUFBSSxHQUFBLElBQUFELE1BQUEsUUFBQVAsTUFBQSxDQUFBUyxTQUFBLENBQUFD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