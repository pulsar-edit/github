"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class TabGroup {
  constructor() {
    this.nodesByElement = new Map();
    this.lastElement = null;
    this.autofocusTarget = null;
  }
  appendElement(element, autofocus) {
    const lastNode = this.nodesByElement.get(this.lastElement) || {
      next: element,
      previous: element
    };
    const next = lastNode.next;
    const previous = this.lastElement || element;
    this.nodesByElement.set(element, {
      next,
      previous
    });
    this.nodesByElement.get(lastNode.next).previous = element;
    lastNode.next = element;
    this.lastElement = element;
    if (autofocus && this.autofocusTarget === null) {
      this.autofocusTarget = element;
    }
  }
  removeElement(element) {
    const node = this.nodesByElement.get(element);
    if (node) {
      const beforeNode = this.nodesByElement.get(node.previous);
      const afterNode = this.nodesByElement.get(node.next);
      beforeNode.next = node.next;
      afterNode.previous = node.previous;
    }
    this.nodesByElement.delete(element);
  }
  after(element) {
    const node = this.nodesByElement.get(element) || {
      next: undefined
    };
    return node.next;
  }
  focusAfter(element) {
    const original = this.getCurrentFocus();
    let next = this.after(element);
    while (next && next !== element) {
      next.focus();
      if (this.getCurrentFocus() !== original) {
        return;
      }
      next = this.after(next);
    }
  }
  before(element) {
    const node = this.nodesByElement.get(element) || {
      previous: undefined
    };
    return node.previous;
  }
  focusBefore(element) {
    const original = this.getCurrentFocus();
    let previous = this.before(element);
    while (previous && previous !== element) {
      previous.focus();
      if (this.getCurrentFocus() !== original) {
        return;
      }
      previous = this.before(previous);
    }
  }
  autofocus() {
    this.autofocusTarget && this.autofocusTarget.focus();
  }

  /* istanbul ignore next */
  getCurrentFocus() {
    return document.activeElement;
  }
}
exports.default = TabGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUYWJHcm91cCIsImNvbnN0cnVjdG9yIiwibm9kZXNCeUVsZW1lbnQiLCJNYXAiLCJsYXN0RWxlbWVudCIsImF1dG9mb2N1c1RhcmdldCIsImFwcGVuZEVsZW1lbnQiLCJlbGVtZW50IiwiYXV0b2ZvY3VzIiwibGFzdE5vZGUiLCJnZXQiLCJuZXh0IiwicHJldmlvdXMiLCJzZXQiLCJyZW1vdmVFbGVtZW50Iiwibm9kZSIsImJlZm9yZU5vZGUiLCJhZnRlck5vZGUiLCJkZWxldGUiLCJhZnRlciIsInVuZGVmaW5lZCIsImZvY3VzQWZ0ZXIiLCJvcmlnaW5hbCIsImdldEN1cnJlbnRGb2N1cyIsImZvY3VzIiwiYmVmb3JlIiwiZm9jdXNCZWZvcmUiLCJkb2N1bWVudCIsImFjdGl2ZUVsZW1lbnQiXSwic291cmNlcyI6WyJ0YWItZ3JvdXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFiR3JvdXAge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm5vZGVzQnlFbGVtZW50ID0gbmV3IE1hcCgpO1xuICAgIHRoaXMubGFzdEVsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuYXV0b2ZvY3VzVGFyZ2V0ID0gbnVsbDtcbiAgfVxuXG4gIGFwcGVuZEVsZW1lbnQoZWxlbWVudCwgYXV0b2ZvY3VzKSB7XG4gICAgY29uc3QgbGFzdE5vZGUgPSB0aGlzLm5vZGVzQnlFbGVtZW50LmdldCh0aGlzLmxhc3RFbGVtZW50KSB8fCB7bmV4dDogZWxlbWVudCwgcHJldmlvdXM6IGVsZW1lbnR9O1xuICAgIGNvbnN0IG5leHQgPSBsYXN0Tm9kZS5uZXh0O1xuICAgIGNvbnN0IHByZXZpb3VzID0gdGhpcy5sYXN0RWxlbWVudCB8fCBlbGVtZW50O1xuXG4gICAgdGhpcy5ub2Rlc0J5RWxlbWVudC5zZXQoZWxlbWVudCwge25leHQsIHByZXZpb3VzfSk7XG4gICAgdGhpcy5ub2Rlc0J5RWxlbWVudC5nZXQobGFzdE5vZGUubmV4dCkucHJldmlvdXMgPSBlbGVtZW50O1xuICAgIGxhc3ROb2RlLm5leHQgPSBlbGVtZW50O1xuXG4gICAgdGhpcy5sYXN0RWxlbWVudCA9IGVsZW1lbnQ7XG5cbiAgICBpZiAoYXV0b2ZvY3VzICYmIHRoaXMuYXV0b2ZvY3VzVGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICB0aGlzLmF1dG9mb2N1c1RhcmdldCA9IGVsZW1lbnQ7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlRWxlbWVudChlbGVtZW50KSB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMubm9kZXNCeUVsZW1lbnQuZ2V0KGVsZW1lbnQpO1xuICAgIGlmIChub2RlKSB7XG4gICAgICBjb25zdCBiZWZvcmVOb2RlID0gdGhpcy5ub2Rlc0J5RWxlbWVudC5nZXQobm9kZS5wcmV2aW91cyk7XG4gICAgICBjb25zdCBhZnRlck5vZGUgPSB0aGlzLm5vZGVzQnlFbGVtZW50LmdldChub2RlLm5leHQpO1xuXG4gICAgICBiZWZvcmVOb2RlLm5leHQgPSBub2RlLm5leHQ7XG4gICAgICBhZnRlck5vZGUucHJldmlvdXMgPSBub2RlLnByZXZpb3VzO1xuICAgIH1cbiAgICB0aGlzLm5vZGVzQnlFbGVtZW50LmRlbGV0ZShlbGVtZW50KTtcbiAgfVxuXG4gIGFmdGVyKGVsZW1lbnQpIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5ub2Rlc0J5RWxlbWVudC5nZXQoZWxlbWVudCkgfHwge25leHQ6IHVuZGVmaW5lZH07XG4gICAgcmV0dXJuIG5vZGUubmV4dDtcbiAgfVxuXG4gIGZvY3VzQWZ0ZXIoZWxlbWVudCkge1xuICAgIGNvbnN0IG9yaWdpbmFsID0gdGhpcy5nZXRDdXJyZW50Rm9jdXMoKTtcbiAgICBsZXQgbmV4dCA9IHRoaXMuYWZ0ZXIoZWxlbWVudCk7XG4gICAgd2hpbGUgKG5leHQgJiYgbmV4dCAhPT0gZWxlbWVudCkge1xuICAgICAgbmV4dC5mb2N1cygpO1xuICAgICAgaWYgKHRoaXMuZ2V0Q3VycmVudEZvY3VzKCkgIT09IG9yaWdpbmFsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbmV4dCA9IHRoaXMuYWZ0ZXIobmV4dCk7XG4gICAgfVxuICB9XG5cbiAgYmVmb3JlKGVsZW1lbnQpIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5ub2Rlc0J5RWxlbWVudC5nZXQoZWxlbWVudCkgfHwge3ByZXZpb3VzOiB1bmRlZmluZWR9O1xuICAgIHJldHVybiBub2RlLnByZXZpb3VzO1xuICB9XG5cbiAgZm9jdXNCZWZvcmUoZWxlbWVudCkge1xuICAgIGNvbnN0IG9yaWdpbmFsID0gdGhpcy5nZXRDdXJyZW50Rm9jdXMoKTtcbiAgICBsZXQgcHJldmlvdXMgPSB0aGlzLmJlZm9yZShlbGVtZW50KTtcbiAgICB3aGlsZSAocHJldmlvdXMgJiYgcHJldmlvdXMgIT09IGVsZW1lbnQpIHtcbiAgICAgIHByZXZpb3VzLmZvY3VzKCk7XG4gICAgICBpZiAodGhpcy5nZXRDdXJyZW50Rm9jdXMoKSAhPT0gb3JpZ2luYWwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBwcmV2aW91cyA9IHRoaXMuYmVmb3JlKHByZXZpb3VzKTtcbiAgICB9XG4gIH1cblxuICBhdXRvZm9jdXMoKSB7XG4gICAgdGhpcy5hdXRvZm9jdXNUYXJnZXQgJiYgdGhpcy5hdXRvZm9jdXNUYXJnZXQuZm9jdXMoKTtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGdldEN1cnJlbnRGb2N1cygpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZSxNQUFNQSxRQUFRLENBQUM7RUFDNUJDLFdBQVcsR0FBRztJQUNaLElBQUksQ0FBQ0MsY0FBYyxHQUFHLElBQUlDLEdBQUcsRUFBRTtJQUMvQixJQUFJLENBQUNDLFdBQVcsR0FBRyxJQUFJO0lBQ3ZCLElBQUksQ0FBQ0MsZUFBZSxHQUFHLElBQUk7RUFDN0I7RUFFQUMsYUFBYSxDQUFDQyxPQUFPLEVBQUVDLFNB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