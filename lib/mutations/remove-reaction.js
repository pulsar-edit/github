"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRelay = require("react-relay");
/* istanbul ignore file */

const mutation = function () {
  const node = require("./__generated__/removeReactionMutation.graphql");
  if (node.hash && node.hash !== "f20b76a0ff63579992f4631894495523") {
    console.error("The definition of 'removeReactionMutation' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }
  return require("./__generated__/removeReactionMutation.graphql");
};
var _default = (environment, subjectId, content) => {
  const variables = {
    input: {
      content,
      subjectId
    }
  };
  function optimisticUpdater(store) {
    const subject = store.get(subjectId);
    const reactionGroups = subject.getLinkedRecords('reactionGroups') || [];
    const reactionGroup = reactionGroups.find(group => group.getValue('content') === content);
    if (!reactionGroup) {
      return;
    }
    reactionGroup.setValue(false, 'viewerHasReacted');
    const conn = reactionGroup.getLinkedRecord('users');
    conn.setValue(conn.getValue('totalCount') - 1, 'totalCount');
  }
  return new Promise((resolve, reject) => {
    (0, _reactRelay.commitMutation)(environment, {
      mutation,
      variables,
      optimisticUpdater,
      onCompleted: resolve,
      onError: reject
    });
  });
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtdXRhdGlvbiIsImVudmlyb25tZW50Iiwic3ViamVjdElkIiwiY29udGVudCIsInZhcmlhYmxlcyIsImlucHV0Iiwib3B0aW1pc3RpY1VwZGF0ZXIiLCJzdG9yZSIsInN1YmplY3QiLCJnZXQiLCJyZWFjdGlvbkdyb3VwcyIsImdldExpbmtlZFJlY29yZHMiLCJyZWFjdGlvbkdyb3VwIiwiZmluZCIsImdyb3VwIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsImNvbm4iLCJnZXRMaW5rZWRSZWNvcmQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNvbW1pdE11dGF0aW9uIiwib25Db21wbGV0ZWQiLCJvbkVycm9yIl0sInNvdXJjZXMiOlsicmVtb3ZlLXJlYWN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlICovXG5cbmltcG9ydCB7Y29tbWl0TXV0YXRpb24sIGdyYXBocWx9IGZyb20gJ3JlYWN0LXJlbGF5JztcblxuY29uc3QgbXV0YXRpb24gPSBncmFwaHFsYFxuICBtdXRhdGlvbiByZW1vdmVSZWFjdGlvbk11dGF0aW9uKCRpbnB1dDogUmVtb3ZlUmVhY3Rpb25JbnB1dCEpIHtcbiAgICByZW1vdmVSZWFjdGlvbihpbnB1dDogJGlucHV0KSB7XG4gICAgICBzdWJqZWN0IHtcbiAgICAgICAgcmVhY3Rpb25Hcm91cHMge1xuICAgICAgICAgIGNvbnRlbnRcbiAgICAgICAgICB2aWV3ZXJIYXNSZWFjdGVkXG4gICAgICAgICAgdXNlcnMge1xuICAgICAgICAgICAgdG90YWxDb3VudFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGRlZmF1bHQgKGVudmlyb25tZW50LCBzdWJqZWN0SWQsIGNvbnRlbnQpID0+IHtcbiAgY29uc3QgdmFyaWFibGVzID0ge1xuICAgIGlucHV0OiB7XG4gICAgICBjb250ZW50LFxuICAgICAgc3ViamVjdElkLFxuICAgIH0sXG4gIH07XG5cbiAgZnVuY3Rpb24gb3B0aW1pc3RpY1VwZGF0ZXIoc3RvcmUpIHtcbiAgICBjb25zdCBzdWJqZWN0ID0gc3RvcmUuZ2V0KHN1YmplY3RJZCk7XG4gICAgY29uc3QgcmVhY3Rpb25Hcm91cHMgPSBzdWJqZWN0LmdldExpbmtlZFJlY29yZHMoJ3JlYWN0aW9uR3JvdXBzJykgfHwgW107XG4gICAgY29uc3QgcmVhY3Rpb25Hcm91cCA9IHJlYWN0aW9uR3JvdXBzLmZpbmQoZ3JvdXAgPT4gZ3JvdXAuZ2V0VmFsdWUoJ2NvbnRlbnQnKSA9PT0gY29udGVudCk7XG4gICAgaWYgKCFyZWFjdGlvbkdyb3VwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmVhY3Rpb25Hcm91cC5zZXRWYWx1ZShmYWxzZSwgJ3ZpZXdlckhhc1JlYWN0ZWQnKTtcbiAgICBjb25zdCBjb25uID0gcmVhY3Rpb25Hcm91cC5nZXRMaW5rZWRSZWNvcmQoJ3VzZXJzJyk7XG4gICAgY29ubi5zZXRWYWx1ZShjb25uLmdldFZhbHVlKCd0b3RhbENvdW50JykgLSAxLCAndG90YWxDb3VudCcpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb21taXRNdXRhdGlvbihcbiAgICAgIGVudmlyb25tZW50LFxuICAgICAge1xuICAgICAgICBtdXRhdGlvbixcbiAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICBvcHRpbWlzdGljVXBkYXRlcixcbiAgICAgICAgb25Db21wbGV0ZWQ6IHJlc29sdmUsXG4gICAgICAgIG9uRXJyb3I6IHJlamVjdCxcbiAgICAgIH0sXG4gICAgKTtcbiAgfSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQTtBQUZBOztBQUlBLE1BQU1BLFFBQVE7RUFBQTtFQUFBO0lBQUE7RUFBQTtFQUFBO0FBQUEsQ0FjYjtBQUFDLGVBRWEsQ0FBQ0MsV0FBVyxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sS0FBSztFQUNsRCxNQUFNQyxTQUFTLEdBQUc7SUFDaEJDLEtBQUssRUFBRTtNQUNMRixPQUFPO01BQ1BEO0lBQ0Y7RUFDRixDQUFDO0VBRUQsU0FBU0ksaUJBQWlCLENBQUNDLEtBQUssRUFBRTtJQUNoQyxNQUFNQyxPQUFPLEdBQUdELEtBQUssQ0FBQ0UsR0FBRyxDQUFDUCxTQUFTLENBQUM7SUFDcEMsTUFBTVEsY0FBYyxHQUFHRixPQUFPLENBQUNHLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRTtJQUN2RSxNQUFNQyxhQUFhLEdBQUdGLGNBQWMsQ0FBQ0csSUFBSSxDQUFDQyxLQUFLLElBQUlBLEtBQUssQ0FBQ0MsUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLWixPQUFPLENBQUM7SUFDekYsSUFBSSxDQUFDUyxhQUFhLEVBQUU7TUFDbEI7SUFDRjtJQUVBQSxhQUFhLENBQUNJLFFBQVEsQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLENBQUM7SUFDakQsTUFBTUMsSUFBSSxHQUFHTCxhQUFhLENBQUNNLGVBQWUsQ0FBQyxPQUFPLENBQUM7SUFDbkRELElBQUksQ0FBQ0QsUUFBUSxDQUFDQyxJQUFJLENBQUNGLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsWUFBWSxDQUFDO0VBQzlEO0VBRUEsT0FBTyxJQUFJSSxPQUFPLENBQUMsQ0FBQ0MsT0FBTyxFQUFFQyxNQUFNLEtBQUs7SUFDdEMsSUFBQUMsMEJBQWMsRUFDWnJCLFdBQVcsRUFDWDtNQUNFRCxRQUFRO01BQ1JJLFNBQVM7TUFDVEUsaUJBQWlCO01BQ2pCaUIsV0FBVyxFQUFFSCxPQUFPO01BQ3BCSSxPQUFPLEVBQUVIO0lBQ1gsQ0FBQyxDQUNGO0VBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUFBIn0=