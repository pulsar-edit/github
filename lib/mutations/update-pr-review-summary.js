"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRelay = require("react-relay");
var _moment = _interopRequireDefault(require("moment"));
var _helpers = require("../helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/* istanbul ignore file */

const mutation = function () {
  const node = require("./__generated__/updatePrReviewSummaryMutation.graphql");
  if (node.hash && node.hash !== "ce6fa7b9b5a5709f8cc8001aa7ba8a15") {
    console.error("The definition of 'updatePrReviewSummaryMutation' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }
  return require("./__generated__/updatePrReviewSummaryMutation.graphql");
};
var _default = (environment, {
  reviewId,
  reviewBody
}) => {
  const variables = {
    input: {
      pullRequestReviewId: reviewId,
      body: reviewBody
    }
  };
  const optimisticResponse = {
    updatePullRequestReview: {
      pullRequestReview: {
        id: reviewId,
        lastEditedAt: (0, _moment.default)().toISOString(),
        body: reviewBody,
        bodyHTML: (0, _helpers.renderMarkdown)(reviewBody)
      }
    }
  };
  return new Promise((resolve, reject) => {
    (0, _reactRelay.commitMutation)(environment, {
      mutation,
      variables,
      optimisticResponse,
      onCompleted: resolve,
      onError: reject
    });
  });
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3RSZWxheSIsInJlcXVpcmUiLCJfbW9tZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9oZWxwZXJzIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJtdXRhdGlvbiIsIm5vZGUiLCJoYXNoIiwiY29uc29sZSIsImVycm9yIiwiX2RlZmF1bHQiLCJlbnZpcm9ubWVudCIsInJldmlld0lkIiwicmV2aWV3Qm9keSIsInZhcmlhYmxlcyIsImlucHV0IiwicHVsbFJlcXVlc3RSZXZpZXdJZCIsImJvZHkiLCJvcHRpbWlzdGljUmVzcG9uc2UiLCJ1cGRhdGVQdWxsUmVxdWVzdFJldmlldyIsInB1bGxSZXF1ZXN0UmV2aWV3IiwiaWQiLCJsYXN0RWRpdGVkQXQiLCJtb21lbnQiLCJ0b0lTT1N0cmluZyIsImJvZHlIVE1MIiwicmVuZGVyTWFya2Rvd24iLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNvbW1pdE11dGF0aW9uIiwib25Db21wbGV0ZWQiLCJvbkVycm9yIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVwZGF0ZS1wci1yZXZpZXctc3VtbWFyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZSAqL1xuXG5pbXBvcnQge2NvbW1pdE11dGF0aW9uLCBncmFwaHFsfSBmcm9tICdyZWFjdC1yZWxheSc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbmltcG9ydCB7cmVuZGVyTWFya2Rvd259IGZyb20gJy4uL2hlbHBlcnMnO1xuXG5jb25zdCBtdXRhdGlvbiA9IGdyYXBocWxgXG4gIG11dGF0aW9uIHVwZGF0ZVByUmV2aWV3U3VtbWFyeU11dGF0aW9uKCRpbnB1dDogVXBkYXRlUHVsbFJlcXVlc3RSZXZpZXdJbnB1dCEpIHtcbiAgICB1cGRhdGVQdWxsUmVxdWVzdFJldmlldyhpbnB1dDogJGlucHV0KSB7XG4gICAgICBwdWxsUmVxdWVzdFJldmlldyB7XG4gICAgICAgIGlkXG4gICAgICAgIGxhc3RFZGl0ZWRBdFxuICAgICAgICBib2R5XG4gICAgICAgIGJvZHlIVE1MXG4gICAgICB9XG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgZGVmYXVsdCAoZW52aXJvbm1lbnQsIHtyZXZpZXdJZCwgcmV2aWV3Qm9keX0pID0+IHtcbiAgY29uc3QgdmFyaWFibGVzID0ge1xuICAgIGlucHV0OiB7XG4gICAgICBwdWxsUmVxdWVzdFJldmlld0lkOiByZXZpZXdJZCxcbiAgICAgIGJvZHk6IHJldmlld0JvZHksXG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBvcHRpbWlzdGljUmVzcG9uc2UgPSB7XG4gICAgdXBkYXRlUHVsbFJlcXVlc3RSZXZpZXc6IHtcbiAgICAgIHB1bGxSZXF1ZXN0UmV2aWV3OiB7XG4gICAgICAgIGlkOiByZXZpZXdJZCxcbiAgICAgICAgbGFzdEVkaXRlZEF0OiBtb21lbnQoKS50b0lTT1N0cmluZygpLFxuICAgICAgICBib2R5OiByZXZpZXdCb2R5LFxuICAgICAgICBib2R5SFRNTDogcmVuZGVyTWFya2Rvd24ocmV2aWV3Qm9keSksXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb21taXRNdXRhdGlvbihcbiAgICAgIGVudmlyb25tZW50LFxuICAgICAge1xuICAgICAgICBtdXRhdGlvbixcbiAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICBvcHRpbWlzdGljUmVzcG9uc2UsXG4gICAgICAgIG9uQ29tcGxldGVkOiByZXNvbHZlLFxuICAgICAgICBvbkVycm9yOiByZWplY3QsXG4gICAgICB9LFxuICAgICk7XG4gIH0pO1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUEsSUFBQUEsV0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBRUEsSUFBQUcsUUFBQSxHQUFBSCxPQUFBO0FBQTBDLFNBQUFFLHVCQUFBRSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBTDFDOztBQU9BLE1BQU1HLFFBQVEsWUFBQUEsQ0FBQTtFQUFBLE1BQUFDLElBQUEsR0FBQVIsT0FBQTtFQUFBLElBQUFRLElBQUEsQ0FBQUMsSUFBQSxJQUFBRCxJQUFBLENBQUFDLElBQUE7SUFBQUMsT0FBQSxDQUFBQyxLQUFBO0VBQUE7RUFBQSxPQUFBWCxPQUFBO0FBQUEsQ0FXYjtBQUFDLElBQUFZLFFBQUEsR0FFYUEsQ0FBQ0MsV0FBVyxFQUFFO0VBQUNDLFFBQVE7RUFBRUM7QUFBVSxDQUFDLEtBQUs7RUFDdEQsTUFBTUMsU0FBUyxHQUFHO0lBQ2hCQyxLQUFLLEVBQUU7TUFDTEMsbUJBQW1CLEVBQUVKLFFBQVE7TUFDN0JLLElBQUksRUFBRUo7SUFDUjtFQUNGLENBQUM7RUFFRCxNQUFNSyxrQkFBa0IsR0FBRztJQUN6QkMsdUJBQXVCLEVBQUU7TUFDdkJDLGlCQUFpQixFQUFFO1FBQ2pCQyxFQUFFLEVBQUVULFFBQVE7UUFDWlUsWUFBWSxFQUFFLElBQUFDLGVBQU0sRUFBQyxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDO1FBQ3BDUCxJQUFJLEVBQUVKLFVBQVU7UUFDaEJZLFFBQVEsRUFBRSxJQUFBQyx1QkFBYyxFQUFDYixVQUFVO01BQ3JDO0lBQ0Y7RUFDRixDQUFDO0VBRUQsT0FBTyxJQUFJYyxPQUFPLENBQUMsQ0FBQ0MsT0FBTyxFQUFFQyxNQUFNLEtBQUs7SUFDdEMsSUFBQUMsMEJBQWMsRUFDWm5CLFdBQVcsRUFDWDtNQUNFTixRQUFRO01BQ1JTLFNBQVM7TUFDVEksa0JBQWtCO01BQ2xCYSxXQUFXLEVBQUVILE9BQU87TUFDcEJJLE9BQU8sRUFBRUg7SUFDWCxDQUNGLENBQUM7RUFDSCxDQUFDLENBQUM7QUFDSixDQUFDO0FBQUFJLE9BQUEsQ0FBQTdCLE9BQUEsR0FBQU0sUUFBQSJ9