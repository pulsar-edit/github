"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRelay = require("react-relay");
var _moment = _interopRequireDefault(require("moment"));
var _helpers = require("../helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/* istanbul ignore file */

const mutation = function () {
  const node = require("./__generated__/updatePrReviewCommentMutation.graphql");
  if (node.hash && node.hash !== "d7b4e823f4604a2b193a1faceb3fcfca") {
    console.error("The definition of 'updatePrReviewCommentMutation' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }
  return require("./__generated__/updatePrReviewCommentMutation.graphql");
};
var _default = (environment, {
  commentId,
  commentBody
}) => {
  const variables = {
    input: {
      pullRequestReviewCommentId: commentId,
      body: commentBody
    }
  };
  const optimisticResponse = {
    updatePullRequestReviewComment: {
      pullRequestReviewComment: {
        id: commentId,
        lastEditedAt: (0, _moment.default)().toISOString(),
        body: commentBody,
        bodyHTML: (0, _helpers.renderMarkdown)(commentBody)
      }
    }
  };
  return new Promise((resolve, reject) => {
    (0, _reactRelay.commitMutation)(environment, {
      mutation,
      variables,
      optimisticResponse,
      onCompleted: resolve,
      onError: reject
    });
  });
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3RSZWxheSIsInJlcXVpcmUiLCJfbW9tZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9oZWxwZXJzIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJtdXRhdGlvbiIsIm5vZGUiLCJoYXNoIiwiY29uc29sZSIsImVycm9yIiwiX2RlZmF1bHQiLCJlbnZpcm9ubWVudCIsImNvbW1lbnRJZCIsImNvbW1lbnRCb2R5IiwidmFyaWFibGVzIiwiaW5wdXQiLCJwdWxsUmVxdWVzdFJldmlld0NvbW1lbnRJZCIsImJvZHkiLCJvcHRpbWlzdGljUmVzcG9uc2UiLCJ1cGRhdGVQdWxsUmVxdWVzdFJldmlld0NvbW1lbnQiLCJwdWxsUmVxdWVzdFJldmlld0NvbW1lbnQiLCJpZCIsImxhc3RFZGl0ZWRBdCIsIm1vbWVudCIsInRvSVNPU3RyaW5nIiwiYm9keUhUTUwiLCJyZW5kZXJNYXJrZG93biIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY29tbWl0TXV0YXRpb24iLCJvbkNvbXBsZXRlZCIsIm9uRXJyb3IiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsidXBkYXRlLXByLXJldmlldy1jb21tZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlICovXG5cbmltcG9ydCB7Y29tbWl0TXV0YXRpb24sIGdyYXBocWx9IGZyb20gJ3JlYWN0LXJlbGF5JztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuaW1wb3J0IHtyZW5kZXJNYXJrZG93bn0gZnJvbSAnLi4vaGVscGVycyc7XG5cbmNvbnN0IG11dGF0aW9uID0gZ3JhcGhxbGBcbiAgbXV0YXRpb24gdXBkYXRlUHJSZXZpZXdDb21tZW50TXV0YXRpb24oJGlucHV0OiBVcGRhdGVQdWxsUmVxdWVzdFJldmlld0NvbW1lbnRJbnB1dCEpIHtcbiAgICB1cGRhdGVQdWxsUmVxdWVzdFJldmlld0NvbW1lbnQoaW5wdXQ6ICRpbnB1dCkge1xuICAgICAgcHVsbFJlcXVlc3RSZXZpZXdDb21tZW50IHtcbiAgICAgICAgaWRcbiAgICAgICAgbGFzdEVkaXRlZEF0XG4gICAgICAgIGJvZHlcbiAgICAgICAgYm9keUhUTUxcbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IChlbnZpcm9ubWVudCwge2NvbW1lbnRJZCwgY29tbWVudEJvZHl9KSA9PiB7XG4gIGNvbnN0IHZhcmlhYmxlcyA9IHtcbiAgICBpbnB1dDoge1xuICAgICAgcHVsbFJlcXVlc3RSZXZpZXdDb21tZW50SWQ6IGNvbW1lbnRJZCxcbiAgICAgIGJvZHk6IGNvbW1lbnRCb2R5LFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3Qgb3B0aW1pc3RpY1Jlc3BvbnNlID0ge1xuICAgIHVwZGF0ZVB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDoge1xuICAgICAgcHVsbFJlcXVlc3RSZXZpZXdDb21tZW50OiB7XG4gICAgICAgIGlkOiBjb21tZW50SWQsXG4gICAgICAgIGxhc3RFZGl0ZWRBdDogbW9tZW50KCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgYm9keTogY29tbWVudEJvZHksXG4gICAgICAgIGJvZHlIVE1MOiByZW5kZXJNYXJrZG93bihjb21tZW50Qm9keSksXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb21taXRNdXRhdGlvbihcbiAgICAgIGVudmlyb25tZW50LFxuICAgICAge1xuICAgICAgICBtdXRhdGlvbixcbiAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICBvcHRpbWlzdGljUmVzcG9uc2UsXG4gICAgICAgIG9uQ29tcGxldGVkOiByZXNvbHZlLFxuICAgICAgICBvbkVycm9yOiByZWplY3QsXG4gICAgICB9LFxuICAgICk7XG4gIH0pO1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUEsSUFBQUEsV0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBRUEsSUFBQUcsUUFBQSxHQUFBSCxPQUFBO0FBQTBDLFNBQUFFLHVCQUFBRSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBTDFDOztBQU9BLE1BQU1HLFFBQVEsWUFBQUEsQ0FBQTtFQUFBLE1BQUFDLElBQUEsR0FBQVIsT0FBQTtFQUFBLElBQUFRLElBQUEsQ0FBQUMsSUFBQSxJQUFBRCxJQUFBLENBQUFDLElBQUE7SUFBQUMsT0FBQSxDQUFBQyxLQUFBO0VBQUE7RUFBQSxPQUFBWCxPQUFBO0FBQUEsQ0FXYjtBQUFDLElBQUFZLFFBQUEsR0FFYUEsQ0FBQ0MsV0FBVyxFQUFFO0VBQUNDLFNBQVM7RUFBRUM7QUFBVyxDQUFDLEtBQUs7RUFDeEQsTUFBTUMsU0FBUyxHQUFHO0lBQ2hCQyxLQUFLLEVBQUU7TUFDTEMsMEJBQTBCLEVBQUVKLFNBQVM7TUFDckNLLElBQUksRUFBRUo7SUFDUjtFQUNGLENBQUM7RUFFRCxNQUFNSyxrQkFBa0IsR0FBRztJQUN6QkMsOEJBQThCLEVBQUU7TUFDOUJDLHdCQUF3QixFQUFFO1FBQ3hCQyxFQUFFLEVBQUVULFNBQVM7UUFDYlUsWUFBWSxFQUFFLElBQUFDLGVBQU0sR0FBRSxDQUFDQyxXQUFXLEVBQUU7UUFDcENQLElBQUksRUFBRUosV0FBVztRQUNqQlksUUFBUSxFQUFFLElBQUFDLHVCQUFjLEVBQUNiLFdBQVc7TUFDdEM7SUFDRjtFQUNGLENBQUM7RUFFRCxPQUFPLElBQUljLE9BQU8sQ0FBQyxDQUFDQyxPQUFPLEVBQUVDLE1BQU0sS0FBSztJQUN0QyxJQUFBQywwQkFBYyxFQUNabkIsV0FBVyxFQUNYO01BQ0VOLFFBQVE7TUFDUlMsU0FBUztNQUNUSSxrQkFBa0I7TUFDbEJhLFdBQVcsRUFBRUgsT0FBTztNQUNwQkksT0FBTyxFQUFFSDtJQUNYLENBQUMsQ0FDRjtFQUNILENBQUMsQ0FBQztBQUNKLENBQUM7QUFBQUksT0FBQSxDQUFBN0IsT0FBQSxHQUFBTSxRQUFBIn0=