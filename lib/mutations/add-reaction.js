"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRelay = require("react-relay");
/* istanbul ignore file */

const mutation = function () {
  const node = require("./__generated__/addReactionMutation.graphql");
  if (node.hash && node.hash !== "fc238aed25f2d7e854162002cb00b57f") {
    console.error("The definition of 'addReactionMutation' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }
  return require("./__generated__/addReactionMutation.graphql");
};
let placeholderID = 0;
var _default = (environment, subjectId, content) => {
  const variables = {
    input: {
      content,
      subjectId
    }
  };
  function optimisticUpdater(store) {
    const subject = store.get(subjectId);
    const reactionGroups = subject.getLinkedRecords('reactionGroups') || [];
    const reactionGroup = reactionGroups.find(group => group.getValue('content') === content);
    if (!reactionGroup) {
      const group = store.create(`add-reaction:reaction-group:${placeholderID++}`, 'ReactionGroup');
      group.setValue(true, 'viewerHasReacted');
      group.setValue(content, 'content');
      const conn = store.create(`add-reaction:reacting-user-conn:${placeholderID++}`, 'ReactingUserConnection');
      conn.setValue(1, 'totalCount');
      group.setLinkedRecord(conn, 'users');
      subject.setLinkedRecords([...reactionGroups, group], 'reactionGroups');
      return;
    }
    reactionGroup.setValue(true, 'viewerHasReacted');
    const conn = reactionGroup.getLinkedRecord('users');
    conn.setValue(conn.getValue('totalCount') + 1, 'totalCount');
  }
  return new Promise((resolve, reject) => {
    (0, _reactRelay.commitMutation)(environment, {
      mutation,
      variables,
      optimisticUpdater,
      onCompleted: resolve,
      onError: reject
    });
  });
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3RSZWxheSIsInJlcXVpcmUiLCJtdXRhdGlvbiIsIm5vZGUiLCJoYXNoIiwiY29uc29sZSIsImVycm9yIiwicGxhY2Vob2xkZXJJRCIsIl9kZWZhdWx0IiwiZW52aXJvbm1lbnQiLCJzdWJqZWN0SWQiLCJjb250ZW50IiwidmFyaWFibGVzIiwiaW5wdXQiLCJvcHRpbWlzdGljVXBkYXRlciIsInN0b3JlIiwic3ViamVjdCIsImdldCIsInJlYWN0aW9uR3JvdXBzIiwiZ2V0TGlua2VkUmVjb3JkcyIsInJlYWN0aW9uR3JvdXAiLCJmaW5kIiwiZ3JvdXAiLCJnZXRWYWx1ZSIsImNyZWF0ZSIsInNldFZhbHVlIiwiY29ubiIsInNldExpbmtlZFJlY29yZCIsInNldExpbmtlZFJlY29yZHMiLCJnZXRMaW5rZWRSZWNvcmQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNvbW1pdE11dGF0aW9uIiwib25Db21wbGV0ZWQiLCJvbkVycm9yIiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyJhZGQtcmVhY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogaXN0YW5idWwgaWdub3JlIGZpbGUgKi9cblxuaW1wb3J0IHtjb21taXRNdXRhdGlvbiwgZ3JhcGhxbH0gZnJvbSAncmVhY3QtcmVsYXknO1xuXG5jb25zdCBtdXRhdGlvbiA9IGdyYXBocWxgXG4gIG11dGF0aW9uIGFkZFJlYWN0aW9uTXV0YXRpb24oJGlucHV0OiBBZGRSZWFjdGlvbklucHV0ISkge1xuICAgIGFkZFJlYWN0aW9uKGlucHV0OiAkaW5wdXQpIHtcbiAgICAgIHN1YmplY3Qge1xuICAgICAgICByZWFjdGlvbkdyb3VwcyB7XG4gICAgICAgICAgY29udGVudFxuICAgICAgICAgIHZpZXdlckhhc1JlYWN0ZWRcbiAgICAgICAgICB1c2VycyB7XG4gICAgICAgICAgICB0b3RhbENvdW50XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5gO1xuXG5sZXQgcGxhY2Vob2xkZXJJRCA9IDA7XG5cbmV4cG9ydCBkZWZhdWx0IChlbnZpcm9ubWVudCwgc3ViamVjdElkLCBjb250ZW50KSA9PiB7XG4gIGNvbnN0IHZhcmlhYmxlcyA9IHtcbiAgICBpbnB1dDoge1xuICAgICAgY29udGVudCxcbiAgICAgIHN1YmplY3RJZCxcbiAgICB9LFxuICB9O1xuXG4gIGZ1bmN0aW9uIG9wdGltaXN0aWNVcGRhdGVyKHN0b3JlKSB7XG4gICAgY29uc3Qgc3ViamVjdCA9IHN0b3JlLmdldChzdWJqZWN0SWQpO1xuICAgIGNvbnN0IHJlYWN0aW9uR3JvdXBzID0gc3ViamVjdC5nZXRMaW5rZWRSZWNvcmRzKCdyZWFjdGlvbkdyb3VwcycpIHx8IFtdO1xuICAgIGNvbnN0IHJlYWN0aW9uR3JvdXAgPSByZWFjdGlvbkdyb3Vwcy5maW5kKGdyb3VwID0+IGdyb3VwLmdldFZhbHVlKCdjb250ZW50JykgPT09IGNvbnRlbnQpO1xuICAgIGlmICghcmVhY3Rpb25Hcm91cCkge1xuICAgICAgY29uc3QgZ3JvdXAgPSBzdG9yZS5jcmVhdGUoYGFkZC1yZWFjdGlvbjpyZWFjdGlvbi1ncm91cDoke3BsYWNlaG9sZGVySUQrK31gLCAnUmVhY3Rpb25Hcm91cCcpO1xuICAgICAgZ3JvdXAuc2V0VmFsdWUodHJ1ZSwgJ3ZpZXdlckhhc1JlYWN0ZWQnKTtcbiAgICAgIGdyb3VwLnNldFZhbHVlKGNvbnRlbnQsICdjb250ZW50Jyk7XG5cbiAgICAgIGNvbnN0IGNvbm4gPSBzdG9yZS5jcmVhdGUoYGFkZC1yZWFjdGlvbjpyZWFjdGluZy11c2VyLWNvbm46JHtwbGFjZWhvbGRlcklEKyt9YCwgJ1JlYWN0aW5nVXNlckNvbm5lY3Rpb24nKTtcbiAgICAgIGNvbm4uc2V0VmFsdWUoMSwgJ3RvdGFsQ291bnQnKTtcbiAgICAgIGdyb3VwLnNldExpbmtlZFJlY29yZChjb25uLCAndXNlcnMnKTtcblxuICAgICAgc3ViamVjdC5zZXRMaW5rZWRSZWNvcmRzKFsuLi5yZWFjdGlvbkdyb3VwcywgZ3JvdXBdLCAncmVhY3Rpb25Hcm91cHMnKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJlYWN0aW9uR3JvdXAuc2V0VmFsdWUodHJ1ZSwgJ3ZpZXdlckhhc1JlYWN0ZWQnKTtcbiAgICBjb25zdCBjb25uID0gcmVhY3Rpb25Hcm91cC5nZXRMaW5rZWRSZWNvcmQoJ3VzZXJzJyk7XG4gICAgY29ubi5zZXRWYWx1ZShjb25uLmdldFZhbHVlKCd0b3RhbENvdW50JykgKyAxLCAndG90YWxDb3VudCcpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb21taXRNdXRhdGlvbihcbiAgICAgIGVudmlyb25tZW50LFxuICAgICAge1xuICAgICAgICBtdXRhdGlvbixcbiAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICBvcHRpbWlzdGljVXBkYXRlcixcbiAgICAgICAgb25Db21wbGV0ZWQ6IHJlc29sdmUsXG4gICAgICAgIG9uRXJyb3I6IHJlamVjdCxcbiAgICAgIH0sXG4gICAgKTtcbiAgfSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSxJQUFBQSxXQUFBLEdBQUFDLE9BQUE7QUFGQTs7QUFJQSxNQUFNQyxRQUFRLFlBQUFBLENBQUE7RUFBQSxNQUFBQyxJQUFBLEdBQUFGLE9BQUE7RUFBQSxJQUFBRSxJQUFBLENBQUFDLElBQUEsSUFBQUQsSUFBQSxDQUFBQyxJQUFBO0lBQUFDLE9BQUEsQ0FBQUMsS0FBQTtFQUFBO0VBQUEsT0FBQUwsT0FBQTtBQUFBLENBY2I7QUFFRCxJQUFJTSxhQUFhLEdBQUcsQ0FBQztBQUFDLElBQUFDLFFBQUEsR0FFUEEsQ0FBQ0MsV0FBVyxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sS0FBSztFQUNsRCxNQUFNQyxTQUFTLEdBQUc7SUFDaEJDLEtBQUssRUFBRTtNQUNMRixPQUFPO01BQ1BEO0lBQ0Y7RUFDRixDQUFDO0VBRUQsU0FBU0ksaUJBQWlCQSxDQUFDQyxLQUFLLEVBQUU7SUFDaEMsTUFBTUMsT0FBTyxHQUFHRCxLQUFLLENBQUNFLEdBQUcsQ0FBQ1AsU0FBUyxDQUFDO0lBQ3BDLE1BQU1RLGNBQWMsR0FBR0YsT0FBTyxDQUFDRyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUU7SUFDdkUsTUFBTUMsYUFBYSxHQUFHRixjQUFjLENBQUNHLElBQUksQ0FBQ0MsS0FBSyxJQUFJQSxLQUFLLENBQUNDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBS1osT0FBTyxDQUFDO0lBQ3pGLElBQUksQ0FBQ1MsYUFBYSxFQUFFO01BQ2xCLE1BQU1FLEtBQUssR0FBR1AsS0FBSyxDQUFDUyxNQUFNLENBQUUsK0JBQThCakIsYUFBYSxFQUFHLEVBQUMsRUFBRSxlQUFlLENBQUM7TUFDN0ZlLEtBQUssQ0FBQ0csUUFBUSxDQUFDLElBQUksRUFBRSxrQkFBa0IsQ0FBQztNQUN4Q0gsS0FBSyxDQUFDRyxRQUFRLENBQUNkLE9BQU8sRUFBRSxTQUFTLENBQUM7TUFFbEMsTUFBTWUsSUFBSSxHQUFHWCxLQUFLLENBQUNTLE1BQU0sQ0FBRSxtQ0FBa0NqQixhQUFhLEVBQUcsRUFBQyxFQUFFLHdCQUF3QixDQUFDO01BQ3pHbUIsSUFBSSxDQUFDRCxRQUFRLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQztNQUM5QkgsS0FBSyxDQUFDSyxlQUFlLENBQUNELElBQUksRUFBRSxPQUFPLENBQUM7TUFFcENWLE9BQU8sQ0FBQ1ksZ0JBQWdCLENBQUMsQ0FBQyxHQUFHVixjQUFjLEVBQUVJLEtBQUssQ0FBQyxFQUFFLGdCQUFnQixDQUFDO01BRXRFO0lBQ0Y7SUFFQUYsYUFBYSxDQUFDSyxRQUFRLENBQUMsSUFBSSxFQUFFLGtCQUFrQixDQUFDO0lBQ2hELE1BQU1DLElBQUksR0FBR04sYUFBYSxDQUFDUyxlQUFlLENBQUMsT0FBTyxDQUFDO0lBQ25ESCxJQUFJLENBQUNELFFBQVEsQ0FBQ0MsSUFBSSxDQUFDSCxRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFlBQVksQ0FBQztFQUM5RDtFQUVBLE9BQU8sSUFBSU8sT0FBTyxDQUFDLENBQUNDLE9BQU8sRUFBRUMsTUFBTSxLQUFLO0lBQ3RDLElBQUFDLDBCQUFjLEVBQ1p4QixXQUFXLEVBQ1g7TUFDRVAsUUFBUTtNQUNSVSxTQUFTO01BQ1RFLGlCQUFpQjtNQUNqQm9CLFdBQVcsRUFBRUgsT0FBTztNQUNwQkksT0FBTyxFQUFFSDtJQUNYLENBQUMsQ0FDRjtFQUNILENBQUMsQ0FBQztBQUNKLENBQUM7QUFBQUksT0FBQSxDQUFBQyxPQUFBLEdBQUE3QixRQUFBIn0=