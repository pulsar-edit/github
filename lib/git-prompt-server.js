"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _net = _interopRequireDefault(require("net"));
var _eventKit = require("event-kit");
var _helpers = require("./helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class GitPromptServer {
  constructor(gitTempDir) {
    this.emitter = new _eventKit.Emitter();
    this.gitTempDir = gitTempDir;
    this.address = null;
  }
  async start(promptForInput) {
    this.promptForInput = promptForInput;
    await this.gitTempDir.ensure();
    this.server = await this.startListening(this.gitTempDir.getSocketOptions());
  }
  getAddress() {
    /* istanbul ignore if */
    if (!this.address) {
      throw new Error('Server is not listening');
    } else if (this.address.port) {
      // TCP socket
      return `tcp:${this.address.port}`;
    } else {
      // Unix domain socket
      return `unix:${(0, _helpers.normalizeGitHelperPath)(this.address)}`;
    }
  }
  startListening(socketOptions) {
    return new Promise(resolve => {
      const server = _net.default.createServer({
        allowHalfOpen: true
      }, connection => {
        connection.setEncoding('utf8');
        let payload = '';
        connection.on('data', data => {
          payload += data;
        });
        connection.on('end', () => {
          this.handleData(connection, payload);
        });
      });
      server.listen(socketOptions, () => {
        this.address = server.address();
        resolve(server);
      });
    });
  }
  async handleData(connection, data) {
    let query;
    try {
      query = JSON.parse(data);
      const answer = await this.promptForInput(query);
      await new Promise(resolve => {
        connection.end(JSON.stringify(answer), 'utf8', resolve);
      });
    } catch (e) {
      this.emitter.emit('did-cancel', query.pid ? {
        handlerPid: query.pid
      } : undefined);
    }
  }
  onDidCancel(cb) {
    return this.emitter.on('did-cancel', cb);
  }
  async terminate() {
    await new Promise(resolve => this.server.close(resolve));
    this.emitter.dispose();
  }
}
exports.default = GitPromptServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHaXRQcm9tcHRTZXJ2ZXIiLCJjb25zdHJ1Y3RvciIsImdpdFRlbXBEaXIiLCJlbWl0dGVyIiwiRW1pdHRlciIsImFkZHJlc3MiLCJzdGFydCIsInByb21wdEZvcklucHV0IiwiZW5zdXJlIiwic2VydmVyIiwic3RhcnRMaXN0ZW5pbmciLCJnZXRTb2NrZXRPcHRpb25zIiwiZ2V0QWRkcmVzcyIsIkVycm9yIiwicG9ydCIsIm5vcm1hbGl6ZUdpdEhlbHBlclBhdGgiLCJzb2NrZXRPcHRpb25zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJuZXQiLCJjcmVhdGVTZXJ2ZXIiLCJhbGxvd0hhbGZPcGVuIiwiY29ubmVjdGlvbiIsInNldEVuY29kaW5nIiwicGF5bG9hZCIsIm9uIiwiZGF0YSIsImhhbmRsZURhdGEiLCJsaXN0ZW4iLCJxdWVyeSIsIkpTT04iLCJwYXJzZSIsImFuc3dlciIsImVuZCIsInN0cmluZ2lmeSIsImUiLCJlbWl0IiwicGlkIiwiaGFuZGxlclBpZCIsInVuZGVmaW5lZCIsIm9uRGlkQ2FuY2VsIiwiY2IiLCJ0ZXJtaW5hdGUiLCJjbG9zZSIsImRpc3Bvc2UiXSwic291cmNlcyI6WyJnaXQtcHJvbXB0LXNlcnZlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbmV0IGZyb20gJ25ldCc7XG5pbXBvcnQge0VtaXR0ZXJ9IGZyb20gJ2V2ZW50LWtpdCc7XG5pbXBvcnQge25vcm1hbGl6ZUdpdEhlbHBlclBhdGh9IGZyb20gJy4vaGVscGVycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdpdFByb21wdFNlcnZlciB7XG4gIGNvbnN0cnVjdG9yKGdpdFRlbXBEaXIpIHtcbiAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpO1xuICAgIHRoaXMuZ2l0VGVtcERpciA9IGdpdFRlbXBEaXI7XG4gICAgdGhpcy5hZGRyZXNzID0gbnVsbDtcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0KHByb21wdEZvcklucHV0KSB7XG4gICAgdGhpcy5wcm9tcHRGb3JJbnB1dCA9IHByb21wdEZvcklucHV0O1xuXG4gICAgYXdhaXQgdGhpcy5naXRUZW1wRGlyLmVuc3VyZSgpO1xuICAgIHRoaXMuc2VydmVyID0gYXdhaXQgdGhpcy5zdGFydExpc3RlbmluZyh0aGlzLmdpdFRlbXBEaXIuZ2V0U29ja2V0T3B0aW9ucygpKTtcbiAgfVxuXG4gIGdldEFkZHJlc3MoKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF0aGlzLmFkZHJlc3MpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU2VydmVyIGlzIG5vdCBsaXN0ZW5pbmcnKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuYWRkcmVzcy5wb3J0KSB7XG4gICAgICAvLyBUQ1Agc29ja2V0XG4gICAgICByZXR1cm4gYHRjcDoke3RoaXMuYWRkcmVzcy5wb3J0fWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVuaXggZG9tYWluIHNvY2tldFxuICAgICAgcmV0dXJuIGB1bml4OiR7bm9ybWFsaXplR2l0SGVscGVyUGF0aCh0aGlzLmFkZHJlc3MpfWA7XG4gICAgfVxuICB9XG5cbiAgc3RhcnRMaXN0ZW5pbmcoc29ja2V0T3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIGNvbnN0IHNlcnZlciA9IG5ldC5jcmVhdGVTZXJ2ZXIoe2FsbG93SGFsZk9wZW46IHRydWV9LCBjb25uZWN0aW9uID0+IHtcbiAgICAgICAgY29ubmVjdGlvbi5zZXRFbmNvZGluZygndXRmOCcpO1xuXG4gICAgICAgIGxldCBwYXlsb2FkID0gJyc7XG4gICAgICAgIGNvbm5lY3Rpb24ub24oJ2RhdGEnLCBkYXRhID0+IHtcbiAgICAgICAgICBwYXlsb2FkICs9IGRhdGE7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbm5lY3Rpb24ub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICB0aGlzLmhhbmRsZURhdGEoY29ubmVjdGlvbiwgcGF5bG9hZCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHNlcnZlci5saXN0ZW4oc29ja2V0T3B0aW9ucywgKCkgPT4ge1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBzZXJ2ZXIuYWRkcmVzcygpO1xuICAgICAgICByZXNvbHZlKHNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGhhbmRsZURhdGEoY29ubmVjdGlvbiwgZGF0YSkge1xuICAgIGxldCBxdWVyeTtcbiAgICB0cnkge1xuICAgICAgcXVlcnkgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgY29uc3QgYW5zd2VyID0gYXdhaXQgdGhpcy5wcm9tcHRGb3JJbnB1dChxdWVyeSk7XG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgY29ubmVjdGlvbi5lbmQoSlNPTi5zdHJpbmdpZnkoYW5zd2VyKSwgJ3V0ZjgnLCByZXNvbHZlKTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtY2FuY2VsJywgcXVlcnkucGlkID8ge2hhbmRsZXJQaWQ6IHF1ZXJ5LnBpZH0gOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgfVxuXG4gIG9uRGlkQ2FuY2VsKGNiKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vbignZGlkLWNhbmNlbCcsIGNiKTtcbiAgfVxuXG4gIGFzeW5jIHRlcm1pbmF0ZSgpIHtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHRoaXMuc2VydmVyLmNsb3NlKHJlc29sdmUpKTtcbiAgICB0aGlzLmVtaXR0ZXIuZGlzcG9zZSgpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUFpRDtBQUVsQyxNQUFNQSxlQUFlLENBQUM7RUFDbkNDLFdBQVcsQ0FBQ0MsVUFBVSxFQUFFO0lBQ3RCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlDLGlCQUFPLEVBQUU7SUFDNUIsSUFBSSxDQUFD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