"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _helpers = require("./helpers");
const refreshMapPerUniqueId = new WeakMap();
class PeriodicRefresher {
  static getRefreshMap(uniqueId) {
    let refreshMap = refreshMapPerUniqueId.get(uniqueId);
    if (!refreshMap) {
      refreshMap = new Map();
      refreshMapPerUniqueId.set(uniqueId, refreshMap);
    }
    return refreshMap;
  }
  constructor(uniqueId, options) {
    (0, _helpers.autobind)(this, 'refreshNow');
    this.options = options;
    this._refreshesPerId = PeriodicRefresher.getRefreshMap(uniqueId);
  }
  start() {
    if (!this._timer) {
      this._scheduleNext();
    }
  }
  _clearTimer() {
    if (this._timer) {
      clearTimeout(this._timer);
      delete this._timer;
    }
  }
  _scheduleNext() {
    this._timer = setTimeout(this.refreshNow, this.options.interval());
  }
  refreshNow(force = false) {
    const currentId = this.options.getCurrentId();
    const lastRefreshForId = this._refreshesPerId.get(currentId) || 0;
    const delta = performance.now() - lastRefreshForId;
    if (force || delta > this.options.minimumIntervalPerId) {
      this._refreshesPerId.set(currentId, performance.now());
      this.options.refresh();
    }
    // Schedule another refresh if one is already scheduled
    if (this._timer) {
      this._clearTimer();
      this._scheduleNext();
    }
  }
  destroy() {
    this._clearTimer();
  }
}
exports.default = PeriodicRefresher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWZyZXNoTWFwUGVyVW5pcXVlSWQiLCJXZWFrTWFwIiwiUGVyaW9kaWNSZWZyZXNoZXIiLCJnZXRSZWZyZXNoTWFwIiwidW5pcXVlSWQiLCJyZWZyZXNoTWFwIiwiZ2V0IiwiTWFwIiwic2V0IiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiYXV0b2JpbmQiLCJfcmVmcmVzaGVzUGVySWQiLCJzdGFydCIsIl90aW1lciIsIl9zY2hlZHVsZU5leHQiLCJfY2xlYXJUaW1lciIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJyZWZyZXNoTm93IiwiaW50ZXJ2YWwiLCJmb3JjZSIsImN1cnJlbnRJZCIsImdldEN1cnJlbnRJZCIsImxhc3RSZWZyZXNoRm9ySWQiLCJkZWx0YSIsInBlcmZvcm1hbmNlIiwibm93IiwibWluaW11bUludGVydmFsUGVySWQiLCJyZWZyZXNoIiwiZGVzdHJveSJdLCJzb3VyY2VzIjpbInBlcmlvZGljLXJlZnJlc2hlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2F1dG9iaW5kfSBmcm9tICcuL2hlbHBlcnMnO1xuXG5jb25zdCByZWZyZXNoTWFwUGVyVW5pcXVlSWQgPSBuZXcgV2Vha01hcCgpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZXJpb2RpY1JlZnJlc2hlciB7XG4gIHN0YXRpYyBnZXRSZWZyZXNoTWFwKHVuaXF1ZUlkKSB7XG4gICAgbGV0IHJlZnJlc2hNYXAgPSByZWZyZXNoTWFwUGVyVW5pcXVlSWQuZ2V0KHVuaXF1ZUlkKTtcbiAgICBpZiAoIXJlZnJlc2hNYXApIHtcbiAgICAgIHJlZnJlc2hNYXAgPSBuZXcgTWFwKCk7XG4gICAgICByZWZyZXNoTWFwUGVyVW5pcXVlSWQuc2V0KHVuaXF1ZUlkLCByZWZyZXNoTWFwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVmcmVzaE1hcDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHVuaXF1ZUlkLCBvcHRpb25zKSB7XG4gICAgYXV0b2JpbmQodGhpcywgJ3JlZnJlc2hOb3cnKTtcblxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5fcmVmcmVzaGVzUGVySWQgPSBQZXJpb2RpY1JlZnJlc2hlci5nZXRSZWZyZXNoTWFwKHVuaXF1ZUlkKTtcbiAgfVxuXG4gIHN0YXJ0KCkge1xuICAgIGlmICghdGhpcy5fdGltZXIpIHtcbiAgICAgIHRoaXMuX3NjaGVkdWxlTmV4dCgpO1xuICAgIH1cbiAgfVxuXG4gIF9jbGVhclRpbWVyKCkge1xuICAgIGlmICh0aGlzLl90aW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKTtcbiAgICAgIGRlbGV0ZSB0aGlzLl90aW1lcjtcbiAgICB9XG4gIH1cblxuICBfc2NoZWR1bGVOZXh0KCkge1xuICAgIHRoaXMuX3RpbWVyID0gc2V0VGltZW91dCh0aGlzLnJlZnJlc2hOb3csIHRoaXMub3B0aW9ucy5pbnRlcnZhbCgpKTtcbiAgfVxuXG4gIHJlZnJlc2hOb3coZm9yY2UgPSBmYWxzZSkge1xuICAgIGNvbnN0IGN1cnJlbnRJZCA9IHRoaXMub3B0aW9ucy5nZXRDdXJyZW50SWQoKTtcbiAgICBjb25zdCBsYXN0UmVmcmVzaEZvcklkID0gdGhpcy5fcmVmcmVzaGVzUGVySWQuZ2V0KGN1cnJlbnRJZCkgfHwgMDtcbiAgICBjb25zdCBkZWx0YSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gbGFzdFJlZnJlc2hGb3JJZDtcbiAgICBpZiAoZm9yY2UgfHwgZGVsdGEgPiB0aGlzLm9wdGlvbnMubWluaW11bUludGVydmFsUGVySWQpIHtcbiAgICAgIHRoaXMuX3JlZnJlc2hlc1BlcklkLnNldChjdXJyZW50SWQsIHBlcmZvcm1hbmNlLm5vdygpKTtcbiAgICAgIHRoaXMub3B0aW9ucy5yZWZyZXNoKCk7XG4gICAgfVxuICAgIC8vIFNjaGVkdWxlIGFub3RoZXIgcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBzY2hlZHVsZWRcbiAgICBpZiAodGhpcy5fdGltZXIpIHtcbiAgICAgIHRoaXMuX2NsZWFyVGltZXIoKTtcbiAgICAgIHRoaXMuX3NjaGVkdWxlTmV4dCgpO1xuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fY2xlYXJUaW1lcigpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBRUEsTUFBTUEscUJBQXFCLEdBQUcsSUFBSUMsT0FBTyxFQUFFO0FBRTVCLE1BQU1DLGlCQUFpQixDQUFDO0VBQ3JDLE9BQU9DLGFBQWEsQ0FBQ0MsUUFBUSxFQUFFO0lBQzdCLElBQUlDLFVBQVUsR0FBR0wscUJBQXFCLENBQUNNLEdBQUcsQ0FBQ0YsUUFBUSxDQUFDO0lBQ3BELElBQUksQ0FBQ0MsVUFBVSxFQUFFO01BQ2ZBLFVBQVUsR0FBRyxJQUFJRSxHQUFHLEVBQUU7TUFDdEJQLHFCQUFxQixDQUFDUSxHQUFHLENBQUNKLFFBQVEsRUFBRUMsVUFBVSxDQUFDO0lBQ2pEO0lBRUEsT0FBT0EsVUFBVTtFQUNuQjtFQUVBSSxXQUFXLENBQUNMLFFBQVEsRUFBRU0sT0FBTyxFQUFFO0lBQzdCLElBQUFDLGlCQUFRLEVBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQztJQUU1QixJQUFJLENBQUNELE9BQU8sR0FBR0EsT0FBTztJQUN0QixJQUFJLENBQUNFLGVBQWUsR0FBR1YsaUJBQWlCLENBQUNDLGFBQWEsQ0FBQ0MsUUFBUSxDQUFDO0VBQ2xFO0VBRUFTLEtBQUssR0FBRztJQUNOLElBQUksQ0FBQyxJQUFJLENBQUNDLE1BQU0sRUFBRTtNQUNoQixJQUFJLENBQUNDLGFBQWEsRUFBRTtJQUN0QjtFQUNGO0VBRUFDLFdBQVcsR0FBRztJQUNaLElBQUksSUFBSSxDQUFDRixNQUFNLEVBQUU7TUFDZkcsWUFBWSxDQUFDLElBQUksQ0FBQ0gsTUFBTSxDQUFDO01BQ3pCLE9BQU8sSUFBSSxDQUFDQSxNQUFNO0lBQ3BCO0VBQ0Y7RUFFQUMsYUFBYSxHQUFHO0lBQ2QsSUFBSSxDQUFDRCxNQUFNLEdBQUdJLFVBQVUsQ0FBQyxJQUFJLENBQUNDLFVBQVUsRUFBRSxJQUFJLENBQUNULE9BQU8sQ0FBQ1UsUUFBUSxFQUFFLENBQUM7RUFDcEU7RUFFQUQsVUFBVSxDQUFDRSxLQUFLLEdBQUcsS0FBSyxFQUFFO0lBQ3hCLE1BQU1DLFNBQVMsR0FBRyxJQUFJLENBQUNaLE9BQU8sQ0FBQ2EsWUFBWSxFQUFFO0lBQzdDLE1BQU1DLGdCQUFnQixHQUFHLElBQUksQ0FBQ1osZUFBZSxDQUFDTixHQUFHLENBQUNnQixTQUFTLENBQUMsSUFBSSxDQUFDO0lBQ2pFLE1BQU1HLEtBQUssR0FBR0MsV0FBVyxDQUFDQyxHQUFHLEVBQUUsR0FBR0gsZ0JBQWdCO0lBQ2xELElBQUlILEtBQUssSUFBSUksS0FBSyxHQUFHLElBQUksQ0FBQ2YsT0FBTyxDQUFDa0Isb0JBQW9CLEVBQUU7TUFDdEQsSUFBSSxDQUFDaEIsZUFBZSxDQUFDSixHQUFHLENBQUNjLFNBQVMsRUFBRUksV0FBVyxDQUFDQyxHQUFHLEVBQUUsQ0FBQztNQUN0RCxJQUFJLENBQUNqQixPQUFPLENBQUNtQixPQUFPLEVBQUU7SUFDeEI7SUFDQTtJQUNBLElBQUksSUFBSSxDQUFDZixNQUFNLEVBQUU7TUFDZixJQUFJLENBQUNFLFdBQVcsRUFBRTtNQUNsQixJQUFJLENBQUNELGFBQWEsRUFBRTtJQUN0QjtFQUNGO0VBRUFlLE9BQU8sR0FBRztJQUNSLElBQUksQ0FBQ2QsV0FBVyxFQUFFO0VBQ3BCO0FBQ0Y7QUFBQyJ9