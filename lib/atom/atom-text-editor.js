"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TextEditorContext = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _atom = require("atom");
var _eventKit = require("event-kit");
var _refHolder = _interopRequireDefault(require("../models/ref-holder"));
var _propTypes2 = require("../prop-types");
var _helpers = require("../helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const editorUpdateProps = {
  mini: _propTypes.default.bool,
  readOnly: _propTypes.default.bool,
  placeholderText: _propTypes.default.string,
  lineNumberGutterVisible: _propTypes.default.bool,
  autoHeight: _propTypes.default.bool,
  autoWidth: _propTypes.default.bool,
  softWrapped: _propTypes.default.bool
};
const editorCreationProps = _objectSpread({
  buffer: _propTypes.default.object
}, editorUpdateProps);
const EMPTY_CLASS = 'github-AtomTextEditor-empty';
const TextEditorContext = _react.default.createContext();
exports.TextEditorContext = TextEditorContext;
class AtomTextEditor extends _react.default.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "observeSelections", selection => {
      const selectionSubs = new _eventKit.CompositeDisposable(selection.onDidChangeRange(this.props.didChangeSelectionRange), selection.onDidDestroy(() => {
        selectionSubs.dispose();
        this.subs.remove(selectionSubs);
        this.props.didDestroySelection(selection);
      }));
      this.subs.add(selectionSubs);
      this.props.didAddSelection(selection);
    });
    _defineProperty(this, "observeEmptiness", () => {
      this.getRefModel().map(editor => {
        if (editor.isEmpty() && this.props.hideEmptiness) {
          this.getRefElement().map(element => element.classList.add(EMPTY_CLASS));
        } else {
          this.getRefElement().map(element => element.classList.remove(EMPTY_CLASS));
        }
        return null;
      });
    });
    this.subs = new _eventKit.CompositeDisposable();
    this.refParent = new _refHolder.default();
    this.refElement = null;
    this.refModel = null;
  }
  render() {
    return _react.default.createElement(_react.Fragment, null, _react.default.createElement("div", {
      className: "github-AtomTextEditor-container",
      ref: this.refParent.setter
    }), _react.default.createElement(TextEditorContext.Provider, {
      value: this.getRefModel()
    }, this.props.children));
  }
  componentDidMount() {
    const modelProps = (0, _helpers.extractProps)(this.props, editorCreationProps);
    this.refParent.map(element => {
      const editor = new _atom.TextEditor(modelProps);
      editor.getElement().tabIndex = this.props.tabIndex;
      if (this.props.className) {
        editor.getElement().classList.add(this.props.className);
      }
      if (this.props.preselect) {
        editor.selectAll();
      }
      element.appendChild(editor.getElement());
      this.getRefModel().setter(editor);
      this.getRefElement().setter(editor.getElement());
      this.subs.add(editor.onDidChangeCursorPosition(this.props.didChangeCursorPosition), editor.observeSelections(this.observeSelections), editor.onDidChange(this.observeEmptiness));
      if (editor.isEmpty() && this.props.hideEmptiness) {
        editor.getElement().classList.add(EMPTY_CLASS);
      }
      return null;
    });
  }
  componentDidUpdate() {
    const modelProps = (0, _helpers.extractProps)(this.props, editorUpdateProps);
    this.getRefModel().map(editor => editor.update(modelProps));

    // When you look into the abyss, the abyss also looks into you
    this.observeEmptiness();
  }
  componentWillUnmount() {
    this.getRefModel().map(editor => editor.destroy());
    this.subs.dispose();
  }
  contains(element) {
    return this.getRefElement().map(e => e.contains(element)).getOr(false);
  }
  focus() {
    this.getRefElement().map(e => e.focus());
  }
  getRefModel() {
    if (this.props.refModel) {
      return this.props.refModel;
    }
    if (!this.refModel) {
      this.refModel = new _refHolder.default();
    }
    return this.refModel;
  }
  getRefElement() {
    if (this.props.refElement) {
      return this.props.refElement;
    }
    if (!this.refElement) {
      this.refElement = new _refHolder.default();
    }
    return this.refElement;
  }
  getModel() {
    return this.getRefModel().getOr(undefined);
  }
}
exports.default = AtomTextEditor;
_defineProperty(AtomTextEditor, "propTypes", _objectSpread({}, editorCreationProps, {
  didChangeCursorPosition: _propTypes.default.func,
  didAddSelection: _propTypes.default.func,
  didChangeSelectionRange: _propTypes.default.func,
  didDestroySelection: _propTypes.default.func,
  hideEmptiness: _propTypes.default.bool,
  preselect: _propTypes.default.bool,
  className: _propTypes.default.string,
  tabIndex: _propTypes.default.number,
  refModel: _propTypes2.RefHolderPropType,
  refElement: _propTypes2.RefHolderPropType,
  children: _propTypes.default.node
}));
_defineProperty(AtomTextEditor, "defaultProps", {
  didChangeCursorPosition: () => {},
  didAddSelection: () => {},
  didChangeSelectionRange: () => {},
  didDestroySelection: () => {},
  hideEmptiness: false,
  preselect: false,
  tabIndex: 0
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hdG9tIiwiX2V2ZW50S2l0IiwiX3JlZkhvbGRlciIsIl9wcm9wVHlwZXMyIiwiX2hlbHBlcnMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJvd25LZXlzIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsIlR5cGVFcnJvciIsIk51bWJlciIsImVkaXRvclVwZGF0ZVByb3BzIiwibWluaSIsIlByb3BUeXBlcyIsImJvb2wiLCJyZWFkT25seSIsInBsYWNlaG9sZGVyVGV4dCIsInN0cmluZyIsImxpbmVOdW1iZXJHdXR0ZXJWaXNpYmxlIiwiYXV0b0hlaWdodCIsImF1dG9XaWR0aCIsInNvZnRXcmFwcGVkIiwiZWRpdG9yQ3JlYXRpb25Qcm9wcyIsImJ1ZmZlciIsIm9iamVjdCIsIkVNUFRZX0NMQVNTIiwiVGV4dEVkaXRvckNvbnRleHQiLCJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJleHBvcnRzIiwiQXRvbVRleHRFZGl0b3IiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic2VsZWN0aW9uIiwic2VsZWN0aW9uU3VicyIsIkNvbXBvc2l0ZURpc3Bvc2FibGUiLCJvbkRpZENoYW5nZVJhbmdlIiwiZGlkQ2hhbmdlU2VsZWN0aW9uUmFuZ2UiLCJvbkRpZERlc3Ryb3kiLCJkaXNwb3NlIiwic3VicyIsInJlbW92ZSIsImRpZERlc3Ryb3lTZWxlY3Rpb24iLCJhZGQiLCJkaWRBZGRTZWxlY3Rpb24iLCJnZXRSZWZNb2RlbCIsIm1hcCIsImVkaXRvciIsImlzRW1wdHkiLCJoaWRlRW1wdGluZXNzIiwiZ2V0UmVmRWxlbWVudCIsImVsZW1lbnQiLCJjbGFzc0xpc3QiLCJyZWZQYXJlbnQiLCJSZWZIb2xkZXIiLCJyZWZFbGVtZW50IiwicmVmTW9kZWwiLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiRnJhZ21lbnQiLCJjbGFzc05hbWUiLCJyZWYiLCJzZXR0ZXIiLCJQcm92aWRlciIsImNoaWxkcmVuIiwiY29tcG9uZW50RGlkTW91bnQiLCJtb2RlbFByb3BzIiwiZXh0cmFjdFByb3BzIiwiVGV4dEVkaXRvciIsImdldEVsZW1lbnQiLCJ0YWJJbmRleCIsInByZXNlbGVjdCIsInNlbGVjdEFsbCIsImFwcGVuZENoaWxkIiwib25EaWRDaGFuZ2VDdXJzb3JQb3NpdGlvbiIsImRpZENoYW5nZUN1cnNvclBvc2l0aW9uIiwib2JzZXJ2ZVNlbGVjdGlvbnMiLCJvbkRpZENoYW5nZSIsIm9ic2VydmVFbXB0aW5lc3MiLCJjb21wb25lbnREaWRVcGRhdGUiLCJ1cGRhdGUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImRlc3Ryb3kiLCJjb250YWlucyIsImdldE9yIiwiZm9jdXMiLCJnZXRNb2RlbCIsImZ1bmMiLCJudW1iZXIiLCJSZWZIb2xkZXJQcm9wVHlwZSIsIm5vZGUiXSwic291cmNlcyI6WyJhdG9tLXRleHQtZWRpdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge0ZyYWdtZW50fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtUZXh0RWRpdG9yfSBmcm9tICdhdG9tJztcbmltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZX0gZnJvbSAnZXZlbnQta2l0JztcblxuaW1wb3J0IFJlZkhvbGRlciBmcm9tICcuLi9tb2RlbHMvcmVmLWhvbGRlcic7XG5pbXBvcnQge1JlZkhvbGRlclByb3BUeXBlfSBmcm9tICcuLi9wcm9wLXR5cGVzJztcbmltcG9ydCB7ZXh0cmFjdFByb3BzfSBmcm9tICcuLi9oZWxwZXJzJztcblxuY29uc3QgZWRpdG9yVXBkYXRlUHJvcHMgPSB7XG4gIG1pbmk6IFByb3BUeXBlcy5ib29sLFxuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG4gIHBsYWNlaG9sZGVyVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgbGluZU51bWJlckd1dHRlclZpc2libGU6IFByb3BUeXBlcy5ib29sLFxuICBhdXRvSGVpZ2h0OiBQcm9wVHlwZXMuYm9vbCxcbiAgYXV0b1dpZHRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgc29mdFdyYXBwZWQ6IFByb3BUeXBlcy5ib29sLFxufTtcblxuY29uc3QgZWRpdG9yQ3JlYXRpb25Qcm9wcyA9IHtcbiAgYnVmZmVyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAuLi5lZGl0b3JVcGRhdGVQcm9wcyxcbn07XG5cbmNvbnN0IEVNUFRZX0NMQVNTID0gJ2dpdGh1Yi1BdG9tVGV4dEVkaXRvci1lbXB0eSc7XG5cbmV4cG9ydCBjb25zdCBUZXh0RWRpdG9yQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXRvbVRleHRFZGl0b3IgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC4uLmVkaXRvckNyZWF0aW9uUHJvcHMsXG5cbiAgICBkaWRDaGFuZ2VDdXJzb3JQb3NpdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZGlkQWRkU2VsZWN0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBkaWRDaGFuZ2VTZWxlY3Rpb25SYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZGlkRGVzdHJveVNlbGVjdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICBoaWRlRW1wdGluZXNzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBwcmVzZWxlY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0YWJJbmRleDogUHJvcFR5cGVzLm51bWJlcixcblxuICAgIHJlZk1vZGVsOiBSZWZIb2xkZXJQcm9wVHlwZSxcbiAgICByZWZFbGVtZW50OiBSZWZIb2xkZXJQcm9wVHlwZSxcblxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgZGlkQ2hhbmdlQ3Vyc29yUG9zaXRpb246ICgpID0+IHt9LFxuICAgIGRpZEFkZFNlbGVjdGlvbjogKCkgPT4ge30sXG4gICAgZGlkQ2hhbmdlU2VsZWN0aW9uUmFuZ2U6ICgpID0+IHt9LFxuICAgIGRpZERlc3Ryb3lTZWxlY3Rpb246ICgpID0+IHt9LFxuXG4gICAgaGlkZUVtcHRpbmVzczogZmFsc2UsXG4gICAgcHJlc2VsZWN0OiBmYWxzZSxcbiAgICB0YWJJbmRleDogMCxcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdWJzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKTtcblxuICAgIHRoaXMucmVmUGFyZW50ID0gbmV3IFJlZkhvbGRlcigpO1xuICAgIHRoaXMucmVmRWxlbWVudCA9IG51bGw7XG4gICAgdGhpcy5yZWZNb2RlbCA9IG51bGw7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxGcmFnbWVudD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnaXRodWItQXRvbVRleHRFZGl0b3ItY29udGFpbmVyXCIgcmVmPXt0aGlzLnJlZlBhcmVudC5zZXR0ZXJ9IC8+XG4gICAgICAgIDxUZXh0RWRpdG9yQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17dGhpcy5nZXRSZWZNb2RlbCgpfT5cbiAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgPC9UZXh0RWRpdG9yQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgIDwvRnJhZ21lbnQ+XG4gICAgKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IG1vZGVsUHJvcHMgPSBleHRyYWN0UHJvcHModGhpcy5wcm9wcywgZWRpdG9yQ3JlYXRpb25Qcm9wcyk7XG5cbiAgICB0aGlzLnJlZlBhcmVudC5tYXAoZWxlbWVudCA9PiB7XG4gICAgICBjb25zdCBlZGl0b3IgPSBuZXcgVGV4dEVkaXRvcihtb2RlbFByb3BzKTtcbiAgICAgIGVkaXRvci5nZXRFbGVtZW50KCkudGFiSW5kZXggPSB0aGlzLnByb3BzLnRhYkluZGV4O1xuICAgICAgaWYgKHRoaXMucHJvcHMuY2xhc3NOYW1lKSB7XG4gICAgICAgIGVkaXRvci5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZCh0aGlzLnByb3BzLmNsYXNzTmFtZSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wcm9wcy5wcmVzZWxlY3QpIHtcbiAgICAgICAgZWRpdG9yLnNlbGVjdEFsbCgpO1xuICAgICAgfVxuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChlZGl0b3IuZ2V0RWxlbWVudCgpKTtcbiAgICAgIHRoaXMuZ2V0UmVmTW9kZWwoKS5zZXR0ZXIoZWRpdG9yKTtcbiAgICAgIHRoaXMuZ2V0UmVmRWxlbWVudCgpLnNldHRlcihlZGl0b3IuZ2V0RWxlbWVudCgpKTtcblxuICAgICAgdGhpcy5zdWJzLmFkZChcbiAgICAgICAgZWRpdG9yLm9uRGlkQ2hhbmdlQ3Vyc29yUG9zaXRpb24odGhpcy5wcm9wcy5kaWRDaGFuZ2VDdXJzb3JQb3NpdGlvbiksXG4gICAgICAgIGVkaXRvci5vYnNlcnZlU2VsZWN0aW9ucyh0aGlzLm9ic2VydmVTZWxlY3Rpb25zKSxcbiAgICAgICAgZWRpdG9yLm9uRGlkQ2hhbmdlKHRoaXMub2JzZXJ2ZUVtcHRpbmVzcyksXG4gICAgICApO1xuXG4gICAgICBpZiAoZWRpdG9yLmlzRW1wdHkoKSAmJiB0aGlzLnByb3BzLmhpZGVFbXB0aW5lc3MpIHtcbiAgICAgICAgZWRpdG9yLmdldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKEVNUFRZX0NMQVNTKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSk7XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgY29uc3QgbW9kZWxQcm9wcyA9IGV4dHJhY3RQcm9wcyh0aGlzLnByb3BzLCBlZGl0b3JVcGRhdGVQcm9wcyk7XG4gICAgdGhpcy5nZXRSZWZNb2RlbCgpLm1hcChlZGl0b3IgPT4gZWRpdG9yLnVwZGF0ZShtb2RlbFByb3BzKSk7XG5cbiAgICAvLyBXaGVuIHlvdSBsb29rIGludG8gdGhlIGFieXNzLCB0aGUgYWJ5c3MgYWxzbyBsb29rcyBpbnRvIHlvdVxuICAgIHRoaXMub2JzZXJ2ZUVtcHRpbmVzcygpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5nZXRSZWZNb2RlbCgpLm1hcChlZGl0b3IgPT4gZWRpdG9yLmRlc3Ryb3koKSk7XG4gICAgdGhpcy5zdWJzLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIG9ic2VydmVTZWxlY3Rpb25zID0gc2VsZWN0aW9uID0+IHtcbiAgICBjb25zdCBzZWxlY3Rpb25TdWJzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoXG4gICAgICBzZWxlY3Rpb24ub25EaWRDaGFuZ2VSYW5nZSh0aGlzLnByb3BzLmRpZENoYW5nZVNlbGVjdGlvblJhbmdlKSxcbiAgICAgIHNlbGVjdGlvbi5vbkRpZERlc3Ryb3koKCkgPT4ge1xuICAgICAgICBzZWxlY3Rpb25TdWJzLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5zdWJzLnJlbW92ZShzZWxlY3Rpb25TdWJzKTtcbiAgICAgICAgdGhpcy5wcm9wcy5kaWREZXN0cm95U2VsZWN0aW9uKHNlbGVjdGlvbik7XG4gICAgICB9KSxcbiAgICApO1xuICAgIHRoaXMuc3Vicy5hZGQoc2VsZWN0aW9uU3Vicyk7XG4gICAgdGhpcy5wcm9wcy5kaWRBZGRTZWxlY3Rpb24oc2VsZWN0aW9uKTtcbiAgfVxuXG4gIG9ic2VydmVFbXB0aW5lc3MgPSAoKSA9PiB7XG4gICAgdGhpcy5nZXRSZWZNb2RlbCgpLm1hcChlZGl0b3IgPT4ge1xuICAgICAgaWYgKGVkaXRvci5pc0VtcHR5KCkgJiYgdGhpcy5wcm9wcy5oaWRlRW1wdGluZXNzKSB7XG4gICAgICAgIHRoaXMuZ2V0UmVmRWxlbWVudCgpLm1hcChlbGVtZW50ID0+IGVsZW1lbnQuY2xhc3NMaXN0LmFkZChFTVBUWV9DTEFTUykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5nZXRSZWZFbGVtZW50KCkubWFwKGVsZW1lbnQgPT4gZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKEVNUFRZX0NMQVNTKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnRhaW5zKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRSZWZFbGVtZW50KCkubWFwKGUgPT4gZS5jb250YWlucyhlbGVtZW50KSkuZ2V0T3IoZmFsc2UpO1xuICB9XG5cbiAgZm9jdXMoKSB7XG4gICAgdGhpcy5nZXRSZWZFbGVtZW50KCkubWFwKGUgPT4gZS5mb2N1cygpKTtcbiAgfVxuXG4gIGdldFJlZk1vZGVsKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnJlZk1vZGVsKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5yZWZNb2RlbDtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucmVmTW9kZWwpIHtcbiAgICAgIHRoaXMucmVmTW9kZWwgPSBuZXcgUmVmSG9sZGVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVmTW9kZWw7XG4gIH1cblxuICBnZXRSZWZFbGVtZW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLnJlZkVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLnJlZkVsZW1lbnQ7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnJlZkVsZW1lbnQpIHtcbiAgICAgIHRoaXMucmVmRWxlbWVudCA9IG5ldyBSZWZIb2xkZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5yZWZFbGVtZW50O1xuICB9XG5cbiAgZ2V0TW9kZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UmVmTW9kZWwoKS5nZXRPcih1bmRlZmluZWQpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLEtBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLFNBQUEsR0FBQUosT0FBQTtBQUVBLElBQUFLLFVBQUEsR0FBQUgsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFNLFdBQUEsR0FBQU4sT0FBQTtBQUNBLElBQUFPLFFBQUEsR0FBQVAsT0FBQTtBQUF3QyxTQUFBRSx1QkFBQU0sR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUFBLFNBQUFHLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLENBQUFDLENBQUEs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