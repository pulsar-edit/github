"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _eventKit = require("event-kit");
var _propTypes2 = require("../prop-types");
var _helpers = require("../helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const VERBATIM_OPTION_PROPS = ['title', 'html', 'placement', 'trigger', 'keyBindingCommand', 'keyBindingTarget'];
const OPTION_PROPS = [...VERBATIM_OPTION_PROPS, 'tooltips', 'className', 'showDelay', 'hideDelay'];
class Tooltip extends _react.default.Component {
  constructor(props, context) {
    super(props, context);
    this.refSub = new _eventKit.Disposable();
    this.tipSub = new _eventKit.Disposable();
    this.domNode = null;
    if (this.props.children !== undefined) {
      this.domNode = document.createElement('div');
      this.domNode.className = 'react-atom-tooltip';
    }
    this.lastTooltipProps = {};
  }
  componentDidMount() {
    this.setupTooltip();
  }
  render() {
    if (this.props.children !== undefined) {
      return _reactDom.default.createPortal(this.props.children, this.domNode);
    } else {
      return null;
    }
  }
  componentDidUpdate() {
    if (this.shouldRecreateTooltip()) {
      this.refSub.dispose();
      this.tipSub.dispose();
      this.setupTooltip();
    }
  }
  componentWillUnmount() {
    this.refSub.dispose();
    this.tipSub.dispose();
  }
  getTooltipProps() {
    const p = {};
    for (const key of OPTION_PROPS) {
      p[key] = this.props[key];
    }
    return p;
  }
  shouldRecreateTooltip() {
    return OPTION_PROPS.some(key => this.lastTooltipProps[key] !== this.props[key]);
  }
  setupTooltip() {
    this.lastTooltipProps = this.getTooltipProps();
    const options = {};
    VERBATIM_OPTION_PROPS.forEach(key => {
      if (this.props[key] !== undefined) {
        options[key] = this.props[key];
      }
    });
    if (this.props.className !== undefined) {
      options.class = this.props.className;
    }
    if (this.props.showDelay !== undefined || this.props.hideDelay !== undefined) {
      const delayDefaults = (this.props.trigger === 'hover' || this.props.trigger === undefined) && {
        show: 1000,
        hide: 100
      } || {
        show: 0,
        hide: 0
      };
      options.delay = {
        show: this.props.showDelay !== undefined ? this.props.showDelay : delayDefaults.show,
        hide: this.props.hideDelay !== undefined ? this.props.hideDelay : delayDefaults.hide
      };
    }
    if (this.props.children !== undefined) {
      options.item = (0, _helpers.createItem)(this.domNode, this.props.itemHolder);
    }
    this.refSub = this.props.target.observe(t => {
      this.tipSub.dispose();
      this.tipSub = this.props.manager.add(t, options);
      const h = this.props.tooltipHolder;
      if (h) {
        h.setter(this.tipSub);
      }
    });
  }
}
exports.default = Tooltip;
_defineProperty(Tooltip, "propTypes", {
  manager: _propTypes.default.object.isRequired,
  target: _propTypes2.RefHolderPropType.isRequired,
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),
  html: _propTypes.default.bool,
  className: _propTypes.default.string,
  placement: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),
  trigger: _propTypes.default.oneOf(['hover', 'click', 'focus', 'manual']),
  showDelay: _propTypes.default.number,
  hideDelay: _propTypes.default.number,
  keyBindingCommand: _propTypes.default.string,
  keyBindingTarget: _propTypes.default.element,
  children: _propTypes.default.element,
  itemHolder: _propTypes2.RefHolderPropType,
  tooltipHolder: _propTypes2.RefHolderPropType
});
_defineProperty(Tooltip, "defaultProps", {
  getItemComponent: () => {}
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdERvbSIsIl9wcm9wVHlwZXMiLCJfZXZlbnRLaXQiLCJfcHJvcFR5cGVzMiIsIl9oZWxwZXJzIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ0IiwiaSIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsInIiLCJlIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiVkVSQkFUSU1fT1BUSU9OX1BST1BTIiwiT1BUSU9OX1BST1BTIiwiVG9vbHRpcCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsImNvbnRleHQiLCJyZWZTdWIiLCJEaXNwb3NhYmxlIiwidGlwU3ViIiwiZG9tTm9kZSIsImNoaWxkcmVuIiwidW5kZWZpbmVkIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwibGFzdFRvb2x0aXBQcm9wcyIsImNvbXBvbmVudERpZE1vdW50Iiwic2V0dXBUb29sdGlwIiwicmVuZGVyIiwiUmVhY3RET00iLCJjcmVhdGVQb3J0YWwiLCJjb21wb25lbnREaWRVcGRhdGUiLCJzaG91bGRSZWNyZWF0ZVRvb2x0aXAiLCJkaXNwb3NlIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJnZXRUb29sdGlwUHJvcHMiLCJwIiwic29tZSIsIm9wdGlvbnMiLCJmb3JFYWNoIiwiY2xhc3MiLCJzaG93RGVsYXkiLCJoaWRlRGVsYXkiLCJkZWxheURlZmF1bHRzIiwidHJpZ2dlciIsInNob3ciLCJoaWRlIiwiZGVsYXkiLCJpdGVtIiwiY3JlYXRlSXRlbSIsIml0ZW1Ib2xkZXIiLCJ0YXJnZXQiLCJvYnNlcnZlIiwibWFuYWdlciIsImFkZCIsImgiLCJ0b29sdGlwSG9sZGVyIiwic2V0dGVyIiwiZXhwb3J0cyIsIlByb3BUeXBlcyIsIm9iamVjdCIsImlzUmVxdWlyZWQiLCJSZWZIb2xkZXJQcm9wVHlwZSIsInRpdGxlIiwib25lT2ZUeXBlIiwic3RyaW5nIiwiZnVuYyIsImh0bWwiLCJib29sIiwicGxhY2VtZW50Iiwib25lT2YiLCJudW1iZXIiLCJrZXlCaW5kaW5nQ29tbWFuZCIsImtleUJpbmRpbmdUYXJnZXQiLCJlbGVtZW50IiwiZ2V0SXRlbUNvbXBvbmVudCJdLCJzb3VyY2VzIjpbInRvb2x0aXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7RGlzcG9zYWJsZX0gZnJvbSAnZXZlbnQta2l0JztcblxuaW1wb3J0IHtSZWZIb2xkZXJQcm9wVHlwZX0gZnJvbSAnLi4vcHJvcC10eXBlcyc7XG5pbXBvcnQge2NyZWF0ZUl0ZW19IGZyb20gJy4uL2hlbHBlcnMnO1xuXG5jb25zdCBWRVJCQVRJTV9PUFRJT05fUFJPUFMgPSBbXG4gICd0aXRsZScsICdodG1sJywgJ3BsYWNlbWVudCcsICd0cmlnZ2VyJywgJ2tleUJpbmRpbmdDb21tYW5kJywgJ2tleUJpbmRpbmdUYXJnZXQnLFxuXTtcblxuY29uc3QgT1BUSU9OX1BST1BTID0gW1xuICAuLi5WRVJCQVRJTV9PUFRJT05fUFJPUFMsXG4gICd0b29sdGlwcycsICdjbGFzc05hbWUnLCAnc2hvd0RlbGF5JywgJ2hpZGVEZWxheScsXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb29sdGlwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBtYW5hZ2VyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgdGFyZ2V0OiBSZWZIb2xkZXJQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICAgIHRpdGxlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICBdKSxcbiAgICBodG1sOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgcGxhY2VtZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICBdKSxcbiAgICB0cmlnZ2VyOiBQcm9wVHlwZXMub25lT2YoWydob3ZlcicsICdjbGljaycsICdmb2N1cycsICdtYW51YWwnXSksXG4gICAgc2hvd0RlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGhpZGVEZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgICBrZXlCaW5kaW5nQ29tbWFuZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBrZXlCaW5kaW5nVGFyZ2V0OiBQcm9wVHlwZXMuZWxlbWVudCxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQsXG4gICAgaXRlbUhvbGRlcjogUmVmSG9sZGVyUHJvcFR5cGUsXG4gICAgdG9vbHRpcEhvbGRlcjogUmVmSG9sZGVyUHJvcFR5cGUsXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGdldEl0ZW1Db21wb25lbnQ6ICgpID0+IHt9LFxuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMsIGNvbnRleHQpIHtcbiAgICBzdXBlcihwcm9wcywgY29udGV4dCk7XG5cbiAgICB0aGlzLnJlZlN1YiA9IG5ldyBEaXNwb3NhYmxlKCk7XG4gICAgdGhpcy50aXBTdWIgPSBuZXcgRGlzcG9zYWJsZSgpO1xuXG4gICAgdGhpcy5kb21Ob2RlID0gbnVsbDtcbiAgICBpZiAodGhpcy5wcm9wcy5jaGlsZHJlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmRvbU5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRoaXMuZG9tTm9kZS5jbGFzc05hbWUgPSAncmVhY3QtYXRvbS10b29sdGlwJztcbiAgICB9XG5cbiAgICB0aGlzLmxhc3RUb29sdGlwUHJvcHMgPSB7fTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuc2V0dXBUb29sdGlwKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuY2hpbGRyZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFJlYWN0RE9NLmNyZWF0ZVBvcnRhbChcbiAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgdGhpcy5kb21Ob2RlLFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGlmICh0aGlzLnNob3VsZFJlY3JlYXRlVG9vbHRpcCgpKSB7XG4gICAgICB0aGlzLnJlZlN1Yi5kaXNwb3NlKCk7XG4gICAgICB0aGlzLnRpcFN1Yi5kaXNwb3NlKCk7XG4gICAgICB0aGlzLnNldHVwVG9vbHRpcCgpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMucmVmU3ViLmRpc3Bvc2UoKTtcbiAgICB0aGlzLnRpcFN1Yi5kaXNwb3NlKCk7XG4gIH1cblxuICBnZXRUb29sdGlwUHJvcHMoKSB7XG4gICAgY29uc3QgcCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9QVElPTl9QUk9QUykge1xuICAgICAgcFtrZXldID0gdGhpcy5wcm9wc1trZXldO1xuICAgIH1cbiAgICByZXR1cm4gcDtcbiAgfVxuXG4gIHNob3VsZFJlY3JlYXRlVG9vbHRpcCgpIHtcbiAgICByZXR1cm4gT1BUSU9OX1BST1BTLnNvbWUoa2V5ID0+IHRoaXMubGFzdFRvb2x0aXBQcm9wc1trZXldICE9PSB0aGlzLnByb3BzW2tleV0pO1xuICB9XG5cbiAgc2V0dXBUb29sdGlwKCkge1xuICAgIHRoaXMubGFzdFRvb2x0aXBQcm9wcyA9IHRoaXMuZ2V0VG9vbHRpcFByb3BzKCk7XG5cbiAgICBjb25zdCBvcHRpb25zID0ge307XG4gICAgVkVSQkFUSU1fT1BUSU9OX1BST1BTLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmICh0aGlzLnByb3BzW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvcHRpb25zW2tleV0gPSB0aGlzLnByb3BzW2tleV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMuY2xhc3NOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9wdGlvbnMuY2xhc3MgPSB0aGlzLnByb3BzLmNsYXNzTmFtZTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd0RlbGF5ICE9PSB1bmRlZmluZWQgfHwgdGhpcy5wcm9wcy5oaWRlRGVsYXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgZGVsYXlEZWZhdWx0cyA9ICh0aGlzLnByb3BzLnRyaWdnZXIgPT09ICdob3ZlcicgfHwgdGhpcy5wcm9wcy50cmlnZ2VyID09PSB1bmRlZmluZWQpXG4gICAgICAgICYmIHtzaG93OiAxMDAwLCBoaWRlOiAxMDB9XG4gICAgICAgIHx8IHtzaG93OiAwLCBoaWRlOiAwfTtcblxuICAgICAgb3B0aW9ucy5kZWxheSA9IHtcbiAgICAgICAgc2hvdzogdGhpcy5wcm9wcy5zaG93RGVsYXkgIT09IHVuZGVmaW5lZCA/IHRoaXMucHJvcHMuc2hvd0RlbGF5IDogZGVsYXlEZWZhdWx0cy5zaG93LFxuICAgICAgICBoaWRlOiB0aGlzLnByb3BzLmhpZGVEZWxheSAhPT0gdW5kZWZpbmVkID8gdGhpcy5wcm9wcy5oaWRlRGVsYXkgOiBkZWxheURlZmF1bHRzLmhpZGUsXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wcy5jaGlsZHJlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvcHRpb25zLml0ZW0gPSBjcmVhdGVJdGVtKHRoaXMuZG9tTm9kZSwgdGhpcy5wcm9wcy5pdGVtSG9sZGVyKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlZlN1YiA9IHRoaXMucHJvcHMudGFyZ2V0Lm9ic2VydmUodCA9PiB7XG4gICAgICB0aGlzLnRpcFN1Yi5kaXNwb3NlKCk7XG4gICAgICB0aGlzLnRpcFN1YiA9IHRoaXMucHJvcHMubWFuYWdlci5hZGQodCwgb3B0aW9ucyk7XG4gICAgICBjb25zdCBoID0gdGhpcy5wcm9wcy50b29sdGlwSG9sZGVyO1xuICAgICAgaWYgKGgpIHtcbiAgICAgICAgaC5zZXR0ZXIodGhpcy50aXBTdWIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFNBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFVBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFNBQUEsR0FBQUgsT0FBQTtBQUVBLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLFFBQUEsR0FBQUwsT0FBQTtBQUFzQyxTQUFBRCx1QkFBQU8sR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUFBLFNBQUFHLGdCQUFBSCxHQUFBLEVBQUFJLEdBQUEsRUFBQUMsS0FBQSxJQUFBRCxHQUFBLEdBQUFFLGNBQUEsQ0FBQUYsR0FBQSxPQUFBQSxHQUFBLElBQUFKLEdBQUEsSUFBQU8sTUFBQSxDQUFBQyxjQUFBLENBQUFSLEdBQUEsRUFBQUksR0FBQSxJQUFBQyxLQUFBLEVBQUFBLEtBQUEsRUFBQUksVUFBQSxRQUFBQyxZQUFBLFFBQUFDLFFBQUEsb0JBQUFYLEdBQUEsQ0FBQUks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