"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _eventKit = require("event-kit");
var _propTypes2 = require("../prop-types");
var _helpers = require("../helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const VERBATIM_OPTION_PROPS = ['title', 'html', 'placement', 'trigger', 'keyBindingCommand', 'keyBindingTarget'];
const OPTION_PROPS = [...VERBATIM_OPTION_PROPS, 'tooltips', 'className', 'showDelay', 'hideDelay'];
class Tooltip extends _react.default.Component {
  constructor(props, context) {
    super(props, context);
    this.refSub = new _eventKit.Disposable();
    this.tipSub = new _eventKit.Disposable();
    this.domNode = null;
    if (this.props.children !== undefined) {
      this.domNode = document.createElement('div');
      this.domNode.className = 'react-atom-tooltip';
    }
    this.lastTooltipProps = {};
  }
  componentDidMount() {
    this.setupTooltip();
  }
  render() {
    if (this.props.children !== undefined) {
      return _reactDom.default.createPortal(this.props.children, this.domNode);
    } else {
      return null;
    }
  }
  componentDidUpdate() {
    if (this.shouldRecreateTooltip()) {
      this.refSub.dispose();
      this.tipSub.dispose();
      this.setupTooltip();
    }
  }
  componentWillUnmount() {
    this.refSub.dispose();
    this.tipSub.dispose();
  }
  getTooltipProps() {
    const p = {};
    for (const key of OPTION_PROPS) {
      p[key] = this.props[key];
    }
    return p;
  }
  shouldRecreateTooltip() {
    return OPTION_PROPS.some(key => this.lastTooltipProps[key] !== this.props[key]);
  }
  setupTooltip() {
    this.lastTooltipProps = this.getTooltipProps();
    const options = {};
    VERBATIM_OPTION_PROPS.forEach(key => {
      if (this.props[key] !== undefined) {
        options[key] = this.props[key];
      }
    });
    if (this.props.className !== undefined) {
      options.class = this.props.className;
    }
    if (this.props.showDelay !== undefined || this.props.hideDelay !== undefined) {
      const delayDefaults = (this.props.trigger === 'hover' || this.props.trigger === undefined) && {
        show: 1000,
        hide: 100
      } || {
        show: 0,
        hide: 0
      };
      options.delay = {
        show: this.props.showDelay !== undefined ? this.props.showDelay : delayDefaults.show,
        hide: this.props.hideDelay !== undefined ? this.props.hideDelay : delayDefaults.hide
      };
    }
    if (this.props.children !== undefined) {
      options.item = (0, _helpers.createItem)(this.domNode, this.props.itemHolder);
    }
    this.refSub = this.props.target.observe(t => {
      this.tipSub.dispose();
      this.tipSub = this.props.manager.add(t, options);
      const h = this.props.tooltipHolder;
      if (h) {
        h.setter(this.tipSub);
      }
    });
  }
}
exports.default = Tooltip;
_defineProperty(Tooltip, "propTypes", {
  manager: _propTypes.default.object.isRequired,
  target: _propTypes2.RefHolderPropType.isRequired,
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),
  html: _propTypes.default.bool,
  className: _propTypes.default.string,
  placement: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),
  trigger: _propTypes.default.oneOf(['hover', 'click', 'focus', 'manual']),
  showDelay: _propTypes.default.number,
  hideDelay: _propTypes.default.number,
  keyBindingCommand: _propTypes.default.string,
  keyBindingTarget: _propTypes.default.element,
  children: _propTypes.default.element,
  itemHolder: _propTypes2.RefHolderPropType,
  tooltipHolder: _propTypes2.RefHolderPropType
});
_defineProperty(Tooltip, "defaultProps", {
  getItemComponent: () => {}
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdERvbSIsIl9wcm9wVHlwZXMiLCJfZXZlbnRLaXQiLCJfcHJvcFR5cGVzMiIsIl9oZWxwZXJzIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiVkVSQkFUSU1fT1BUSU9OX1BST1BTIiwiT1BUSU9OX1BST1BTIiwiVG9vbHRpcCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsImNvbnRleHQiLCJyZWZTdWIiLCJEaXNwb3NhYmxlIiwidGlwU3ViIiwiZG9tTm9kZSIsImNoaWxkcmVuIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwibGFzdFRvb2x0aXBQcm9wcyIsImNvbXBvbmVudERpZE1vdW50Iiwic2V0dXBUb29sdGlwIiwicmVuZGVyIiwiUmVhY3RET00iLCJjcmVhdGVQb3J0YWwiLCJjb21wb25lbnREaWRVcGRhdGUiLCJzaG91bGRSZWNyZWF0ZVRvb2x0aXAiLCJkaXNwb3NlIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJnZXRUb29sdGlwUHJvcHMiLCJwIiwic29tZSIsIm9wdGlvbnMiLCJmb3JFYWNoIiwiY2xhc3MiLCJzaG93RGVsYXkiLCJoaWRlRGVsYXkiLCJkZWxheURlZmF1bHRzIiwidHJpZ2dlciIsInNob3ciLCJoaWRlIiwiZGVsYXkiLCJpdGVtIiwiY3JlYXRlSXRlbSIsIml0ZW1Ib2xkZXIiLCJ0YXJnZXQiLCJvYnNlcnZlIiwidCIsIm1hbmFnZXIiLCJhZGQiLCJoIiwidG9vbHRpcEhvbGRlciIsInNldHRlciIsImV4cG9ydHMiLCJQcm9wVHlwZXMiLCJvYmplY3QiLCJpc1JlcXVpcmVkIiwiUmVmSG9sZGVyUHJvcFR5cGUiLCJ0aXRsZSIsIm9uZU9mVHlwZSIsInN0cmluZyIsImZ1bmMiLCJodG1sIiwiYm9vbCIsInBsYWNlbWVudCIsIm9uZU9mIiwibnVtYmVyIiwia2V5QmluZGluZ0NvbW1hbmQiLCJrZXlCaW5kaW5nVGFyZ2V0IiwiZWxlbWVudCIsImdldEl0ZW1Db21wb25lbnQiXSwic291cmNlcyI6WyJ0b29sdGlwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge0Rpc3Bvc2FibGV9IGZyb20gJ2V2ZW50LWtpdCc7XG5cbmltcG9ydCB7UmVmSG9sZGVyUHJvcFR5cGV9IGZyb20gJy4uL3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtjcmVhdGVJdGVtfSBmcm9tICcuLi9oZWxwZXJzJztcblxuY29uc3QgVkVSQkFUSU1fT1BUSU9OX1BST1BTID0gW1xuICAndGl0bGUnLCAnaHRtbCcsICdwbGFjZW1lbnQnLCAndHJpZ2dlcicsICdrZXlCaW5kaW5nQ29tbWFuZCcsICdrZXlCaW5kaW5nVGFyZ2V0Jyxcbl07XG5cbmNvbnN0IE9QVElPTl9QUk9QUyA9IFtcbiAgLi4uVkVSQkFUSU1fT1BUSU9OX1BST1BTLFxuICAndG9vbHRpcHMnLCAnY2xhc3NOYW1lJywgJ3Nob3dEZWxheScsICdoaWRlRGVsYXknLFxuXTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9vbHRpcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgbWFuYWdlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHRhcmdldDogUmVmSG9sZGVyUHJvcFR5cGUuaXNSZXF1aXJlZCxcbiAgICB0aXRsZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgXSksXG4gICAgaHRtbDogUHJvcFR5cGVzLmJvb2wsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHBsYWNlbWVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgXSksXG4gICAgdHJpZ2dlcjogUHJvcFR5cGVzLm9uZU9mKFsnaG92ZXInLCAnY2xpY2snLCAnZm9jdXMnLCAnbWFudWFsJ10pLFxuICAgIHNob3dEZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgICBoaWRlRGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gICAga2V5QmluZGluZ0NvbW1hbmQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAga2V5QmluZGluZ1RhcmdldDogUHJvcFR5cGVzLmVsZW1lbnQsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LFxuICAgIGl0ZW1Ib2xkZXI6IFJlZkhvbGRlclByb3BUeXBlLFxuICAgIHRvb2x0aXBIb2xkZXI6IFJlZkhvbGRlclByb3BUeXBlLFxuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBnZXRJdGVtQ29tcG9uZW50OiAoKSA9PiB7fSxcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzLCBjb250ZXh0KSB7XG4gICAgc3VwZXIocHJvcHMsIGNvbnRleHQpO1xuXG4gICAgdGhpcy5yZWZTdWIgPSBuZXcgRGlzcG9zYWJsZSgpO1xuICAgIHRoaXMudGlwU3ViID0gbmV3IERpc3Bvc2FibGUoKTtcblxuICAgIHRoaXMuZG9tTm9kZSA9IG51bGw7XG4gICAgaWYgKHRoaXMucHJvcHMuY2hpbGRyZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5kb21Ob2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLmRvbU5vZGUuY2xhc3NOYW1lID0gJ3JlYWN0LWF0b20tdG9vbHRpcCc7XG4gICAgfVxuXG4gICAgdGhpcy5sYXN0VG9vbHRpcFByb3BzID0ge307XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnNldHVwVG9vbHRpcCgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmNoaWxkcmVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBSZWFjdERPTS5jcmVhdGVQb3J0YWwoXG4gICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHRoaXMuZG9tTm9kZSxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5zaG91bGRSZWNyZWF0ZVRvb2x0aXAoKSkge1xuICAgICAgdGhpcy5yZWZTdWIuZGlzcG9zZSgpO1xuICAgICAgdGhpcy50aXBTdWIuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5zZXR1cFRvb2x0aXAoKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnJlZlN1Yi5kaXNwb3NlKCk7XG4gICAgdGhpcy50aXBTdWIuZGlzcG9zZSgpO1xuICB9XG5cbiAgZ2V0VG9vbHRpcFByb3BzKCkge1xuICAgIGNvbnN0IHAgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPUFRJT05fUFJPUFMpIHtcbiAgICAgIHBba2V5XSA9IHRoaXMucHJvcHNba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG4gIH1cblxuICBzaG91bGRSZWNyZWF0ZVRvb2x0aXAoKSB7XG4gICAgcmV0dXJuIE9QVElPTl9QUk9QUy5zb21lKGtleSA9PiB0aGlzLmxhc3RUb29sdGlwUHJvcHNba2V5XSAhPT0gdGhpcy5wcm9wc1trZXldKTtcbiAgfVxuXG4gIHNldHVwVG9vbHRpcCgpIHtcbiAgICB0aGlzLmxhc3RUb29sdGlwUHJvcHMgPSB0aGlzLmdldFRvb2x0aXBQcm9wcygpO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuICAgIFZFUkJBVElNX09QVElPTl9QUk9QUy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAodGhpcy5wcm9wc1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb3B0aW9uc1trZXldID0gdGhpcy5wcm9wc1trZXldO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLmNsYXNzTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvcHRpb25zLmNsYXNzID0gdGhpcy5wcm9wcy5jbGFzc05hbWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLnNob3dEZWxheSAhPT0gdW5kZWZpbmVkIHx8IHRoaXMucHJvcHMuaGlkZURlbGF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IGRlbGF5RGVmYXVsdHMgPSAodGhpcy5wcm9wcy50cmlnZ2VyID09PSAnaG92ZXInIHx8IHRoaXMucHJvcHMudHJpZ2dlciA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAmJiB7c2hvdzogMTAwMCwgaGlkZTogMTAwfVxuICAgICAgICB8fCB7c2hvdzogMCwgaGlkZTogMH07XG5cbiAgICAgIG9wdGlvbnMuZGVsYXkgPSB7XG4gICAgICAgIHNob3c6IHRoaXMucHJvcHMuc2hvd0RlbGF5ICE9PSB1bmRlZmluZWQgPyB0aGlzLnByb3BzLnNob3dEZWxheSA6IGRlbGF5RGVmYXVsdHMuc2hvdyxcbiAgICAgICAgaGlkZTogdGhpcy5wcm9wcy5oaWRlRGVsYXkgIT09IHVuZGVmaW5lZCA/IHRoaXMucHJvcHMuaGlkZURlbGF5IDogZGVsYXlEZWZhdWx0cy5oaWRlLFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMuY2hpbGRyZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgb3B0aW9ucy5pdGVtID0gY3JlYXRlSXRlbSh0aGlzLmRvbU5vZGUsIHRoaXMucHJvcHMuaXRlbUhvbGRlcik7XG4gICAgfVxuXG4gICAgdGhpcy5yZWZTdWIgPSB0aGlzLnByb3BzLnRhcmdldC5vYnNlcnZlKHQgPT4ge1xuICAgICAgdGhpcy50aXBTdWIuZGlzcG9zZSgpO1xuICAgICAgdGhpcy50aXBTdWIgPSB0aGlzLnByb3BzLm1hbmFnZXIuYWRkKHQsIG9wdGlvbnMpO1xuICAgICAgY29uc3QgaCA9IHRoaXMucHJvcHMudG9vbHRpcEhvbGRlcjtcbiAgICAgIGlmIChoKSB7XG4gICAgICAgIGguc2V0dGVyKHRoaXMudGlwU3ViKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxTQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxVQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxTQUFBLEdBQUFILE9BQUE7QUFFQSxJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxRQUFBLEdBQUFMLE9BQUE7QUFBc0MsU0FBQUQsdUJBQUFPLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFBQSxTQUFBRyxnQkFBQUgsR0FBQSxFQUFBSSxHQUFBLEVBQUFDLEtBQUEsSUFBQUQsR0FBQSxHQUFBRSxjQUFBLENBQUFGLEdBQUEsT0FBQUEsR0FBQSxJQUFBSixHQUFBLElBQUFPLE1BQUEsQ0FBQUMsY0FBQSxDQUFBUixHQUFBLEVBQUFJLEdBQUEsSUFBQUMsS0FBQSxFQUFBQSxLQUFBLEVBQUFJLFVBQUEsUUFBQUMsWUFBQSxRQUFBQyxR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