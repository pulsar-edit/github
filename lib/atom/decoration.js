"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _eventKit = require("event-kit");
var _classnames = _interopRequireDefault(require("classnames"));
var _helpers = require("../helpers");
var _propTypes2 = require("../prop-types");
var _atomTextEditor = require("./atom-text-editor");
var _marker = require("./marker");
var _refHolder = _interopRequireDefault(require("../models/ref-holder"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const decorationPropTypes = {
  type: _propTypes.default.oneOf(['line', 'line-number', 'highlight', 'overlay', 'gutter', 'block']).isRequired,
  className: _propTypes.default.string,
  style: _propTypes.default.string,
  onlyHead: _propTypes.default.bool,
  onlyEmpty: _propTypes.default.bool,
  onlyNonEmpty: _propTypes.default.bool,
  omitEmptyLastRow: _propTypes.default.bool,
  position: _propTypes.default.oneOf(['head', 'tail', 'before', 'after']),
  order: _propTypes.default.number,
  avoidOverflow: _propTypes.default.bool,
  gutterName: _propTypes.default.string
};
class BareDecoration extends _react.default.Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty(this, "observeParents", () => {
      this.decorationHolder.map(decoration => decoration.destroy());
      const editorValid = this.props.editorHolder.map(editor => !editor.isDestroyed()).getOr(false);
      const decorableValid = this.props.decorableHolder.map(decorable => !decorable.isDestroyed()).getOr(false);

      // Ensure the Marker or MarkerLayer corresponds to the context's TextEditor
      const decorableMatches = this.props.decorableHolder.map(decorable => this.props.editorHolder.map(editor => {
        const layer = decorable.layer || decorable;
        const displayLayer = editor.getMarkerLayer(layer.id);
        if (!displayLayer) {
          return false;
        }
        if (displayLayer !== layer && displayLayer.bufferMarkerLayer !== layer) {
          return false;
        }
        return true;
      }).getOr(false)).getOr(false);
      if (!editorValid || !decorableValid || !decorableMatches) {
        return;
      }

      // delay decoration creation when it's a gutter type;
      // instead wait for the Gutter to be added to the editor first
      if (this.props.type === 'gutter') {
        if (!this.props.gutterName) {
          throw new Error('You are trying to decorate a gutter but did not supply gutterName prop.');
        }
        this.props.editorHolder.map(editor => {
          this.gutterSub = editor.observeGutters(gutter => {
            if (gutter.name === this.props.gutterName) {
              this.createDecoration();
            }
          });
          return null;
        });
        return;
      }
      this.createDecoration();
    });
    this.decorationHolder = new _refHolder.default();
    this.editorSub = new _eventKit.Disposable();
    this.decorableSub = new _eventKit.Disposable();
    this.gutterSub = new _eventKit.Disposable();
    this.domNode = null;
    this.item = null;
    if (['gutter', 'overlay', 'block'].includes(this.props.type)) {
      this.domNode = document.createElement('div');
      this.domNode.className = (0, _classnames.default)('react-atom-decoration', this.props.className);
    }
  }
  usesItem() {
    return this.domNode !== null;
  }
  componentDidMount() {
    this.editorSub = this.props.editorHolder.observe(this.observeParents);
    this.decorableSub = this.props.decorableHolder.observe(this.observeParents);
  }
  componentDidUpdate(prevProps) {
    if (this.props.editorHolder !== prevProps.editorHolder) {
      this.editorSub.dispose();
      this.editorSub = this.props.editorHolder.observe(this.observeParents);
    }
    if (this.props.decorableHolder !== prevProps.decorableHolder) {
      this.decorableSub.dispose();
      this.decorableSub = this.props.decorableHolder.observe(this.observeParents);
    }
    if (Object.keys(decorationPropTypes).some(key => this.props[key] !== prevProps[key])) {
      this.decorationHolder.map(decoration => decoration.destroy());
      this.createDecoration();
    }
  }
  render() {
    if (this.usesItem()) {
      return _reactDom.default.createPortal(this.props.children, this.domNode);
    } else {
      return null;
    }
  }
  createDecoration() {
    if (this.usesItem() && !this.item) {
      this.item = (0, _helpers.createItem)(this.domNode, this.props.itemHolder);
    }
    const opts = this.getDecorationOpts(this.props);
    const editor = this.props.editorHolder.get();
    const decorable = this.props.decorableHolder.get();
    this.decorationHolder.setter(editor[this.props.decorateMethod](decorable, opts));
  }
  componentWillUnmount() {
    this.decorationHolder.map(decoration => decoration.destroy());
    this.editorSub.dispose();
    this.decorableSub.dispose();
    this.gutterSub.dispose();
  }
  getDecorationOpts(props) {
    return _objectSpread({}, (0, _helpers.extractProps)(props, decorationPropTypes, {
      className: 'class'
    }), {
      item: this.item
    });
  }
}
_defineProperty(BareDecoration, "propTypes", _objectSpread({
  editorHolder: _propTypes2.RefHolderPropType.isRequired,
  decorableHolder: _propTypes2.RefHolderPropType.isRequired,
  decorateMethod: _propTypes.default.oneOf(['decorateMarker', 'decorateMarkerLayer']),
  itemHolder: _propTypes2.RefHolderPropType,
  children: _propTypes.default.node
}, decorationPropTypes));
_defineProperty(BareDecoration, "defaultProps", {
  decorateMethod: 'decorateMarker'
});
class Decoration extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      editorHolder: _refHolder.default.on(this.props.editor),
      decorableHolder: _refHolder.default.on(this.props.decorable)
    };
  }
  static getDerivedStateFromProps(props, state) {
    const editorChanged = state.editorHolder.map(editor => editor !== props.editor).getOr(props.editor !== undefined);
    const decorableChanged = state.decorableHolder.map(decorable => decorable !== props.decorable).getOr(props.decorable !== undefined);
    if (!editorChanged && !decorableChanged) {
      return null;
    }
    const nextState = {};
    if (editorChanged) {
      nextState.editorHolder = _refHolder.default.on(props.editor);
    }
    if (decorableChanged) {
      nextState.decorableHolder = _refHolder.default.on(props.decorable);
    }
    return nextState;
  }
  render() {
    return _react.default.createElement(_atomTextEditor.TextEditorContext.Consumer, null, editorHolder => _react.default.createElement(_marker.DecorableContext.Consumer, null, decorable => {
      let holder = null;
      let decorateMethod = null;
      if (!this.state.decorableHolder.isEmpty()) {
        holder = this.state.decorableHolder;
        decorateMethod = this.props.decorateMethod;
      } else {
        holder = decorable.holder;
        decorateMethod = decorable.decorateMethod;
      }
      return _react.default.createElement(BareDecoration, _extends({
        editorHolder: editorHolder || this.state.editorHolder,
        decorableHolder: holder,
        decorateMethod: decorateMethod
      }, this.props));
    }));
  }
}
exports.default = Decoration;
_defineProperty(Decoration, "propTypes", {
  editor: _propTypes.default.object,
  decorable: _propTypes.default.object,
  decorateMethod: _propTypes.default.oneOf(['decorateMarker', 'decorateMarkerLayer'])
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdERvbSIsIl9wcm9wVHlwZXMiLCJfZXZlbnRLaXQiLCJfY2xhc3NuYW1lcyIsIl9oZWxwZXJzIiwiX3Byb3BUeXBlczIiLCJfYXRvbVRleHRFZGl0b3IiLCJfbWFya2VyIiwiX3JlZkhvbGRlciIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJiaW5kIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5Iiwib3duS2V5cyIsImUiLCJyIiwidCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJfb2JqZWN0U3ByZWFkIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJkZWNvcmF0aW9uUHJvcFR5cGVzIiwidHlwZSIsIlByb3BUeXBlcyIsIm9uZU9mIiwiaXNSZXF1aXJlZCIsImNsYXNzTmFtZSIsInN0cmluZyIsInN0eWxlIiwib25seUhlYWQiLCJib29sIiwib25seUVtcHR5Iiwib25seU5vbkVtcHR5Iiwib21pdEVtcHR5TGFzdFJvdyIsInBvc2l0aW9uIiwib3JkZXIiLCJudW1iZXIiLCJhdm9pZE92ZXJmbG93IiwiZ3V0dGVyTmFtZSIsIkJhcmVEZWNvcmF0aW9uIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiY29udGV4dCIsImRlY29yYXRpb25Ib2xkZXIiLCJtYXAiLCJkZWNvcmF0aW9uIiwiZGVzdHJveSIsImVkaXRvclZhbGlkIiwiZWRpdG9ySG9sZGVyIiwiZWRpdG9yIiwiaXNEZXN0cm95ZWQiLCJnZXRPciIsImRlY29yYWJsZVZhbGlkIiwiZGVjb3JhYmxlSG9sZGVyIiwiZGVjb3JhYmxlIiwiZGVjb3JhYmxlTWF0Y2hlcyIsImxheWVyIiwiZGlzcGxheUxheWVyIiwiZ2V0TWFya2VyTGF5ZXIiLCJpZCIsImJ1ZmZlck1hcmtlckxheWVyIiwiRXJyb3IiLCJndXR0ZXJTdWIiLCJvYnNlcnZlR3V0dGVycyIsImd1dHRlciIsIm5hbWUiLCJjcmVhdGVEZWNvcmF0aW9uIiwiUmVmSG9sZGVyIiwiZWRpdG9yU3ViIiwiRGlzcG9zYWJsZSIsImRlY29yYWJsZVN1YiIsImRvbU5vZGUiLCJpdGVtIiwiaW5jbHVkZXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjeCIsInVzZXNJdGVtIiwiY29tcG9uZW50RGlkTW91bnQiLCJvYnNlcnZlIiwib2JzZXJ2ZVBhcmVudHMiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJkaXNwb3NlIiwic29tZSIsInJlbmRlciIsIlJlYWN0RE9NIiwiY3JlYXRlUG9ydGFsIiwiY2hpbGRyZW4iLCJjcmVhdGVJdGVtIiwiaXRlbUhvbGRlciIsIm9wdHMiLCJnZXREZWNvcmF0aW9uT3B0cyIsImdldCIsInNldHRlciIsImRlY29yYXRlTWV0aG9kIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJleHRyYWN0UHJvcHMiLCJSZWZIb2xkZXJQcm9wVHlwZSIsIm5vZGUiLCJEZWNvcmF0aW9uIiwic3RhdGUiLCJvbiIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImVkaXRvckNoYW5nZWQiLCJkZWNvcmFibGVDaGFuZ2VkIiwibmV4dFN0YXRlIiwiVGV4dEVkaXRvckNvbnRleHQiLCJDb25zdW1lciIsIkRlY29yYWJsZUNvbnRleHQiLCJob2xkZXIiLCJpc0VtcHR5IiwiZXhwb3J0cyIsIm9iamVjdCJdLCJzb3VyY2VzIjpbImRlY29yYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7RGlzcG9zYWJsZX0gZnJvbSAnZXZlbnQta2l0JztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IHtjcmVhdGVJdGVtLCBleHRyYWN0UHJvcHN9IGZyb20gJy4uL2hlbHBlcnMnO1xuaW1wb3J0IHtSZWZIb2xkZXJQcm9wVHlwZX0gZnJvbSAnLi4vcHJvcC10eXBlcyc7XG5pbXBvcnQge1RleHRFZGl0b3JDb250ZXh0fSBmcm9tICcuL2F0b20tdGV4dC1lZGl0b3InO1xuaW1wb3J0IHtEZWNvcmFibGVDb250ZXh0fSBmcm9tICcuL21hcmtlcic7XG5pbXBvcnQgUmVmSG9sZGVyIGZyb20gJy4uL21vZGVscy9yZWYtaG9sZGVyJztcblxuY29uc3QgZGVjb3JhdGlvblByb3BUeXBlcyA9IHtcbiAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFsnbGluZScsICdsaW5lLW51bWJlcicsICdoaWdobGlnaHQnLCAnb3ZlcmxheScsICdndXR0ZXInLCAnYmxvY2snXSkuaXNSZXF1aXJlZCxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzdHlsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25seUhlYWQ6IFByb3BUeXBlcy5ib29sLFxuICBvbmx5RW1wdHk6IFByb3BUeXBlcy5ib29sLFxuICBvbmx5Tm9uRW1wdHk6IFByb3BUeXBlcy5ib29sLFxuICBvbWl0RW1wdHlMYXN0Um93OiBQcm9wVHlwZXMuYm9vbCxcbiAgcG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2hlYWQnLCAndGFpbCcsICdiZWZvcmUnLCAnYWZ0ZXInXSksXG4gIG9yZGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICBhdm9pZE92ZXJmbG93OiBQcm9wVHlwZXMuYm9vbCxcbiAgZ3V0dGVyTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmNsYXNzIEJhcmVEZWNvcmF0aW9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBlZGl0b3JIb2xkZXI6IFJlZkhvbGRlclByb3BUeXBlLmlzUmVxdWlyZWQsXG4gICAgZGVjb3JhYmxlSG9sZGVyOiBSZWZIb2xkZXJQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICAgIGRlY29yYXRlTWV0aG9kOiBQcm9wVHlwZXMub25lT2YoWydkZWNvcmF0ZU1hcmtlcicsICdkZWNvcmF0ZU1hcmtlckxheWVyJ10pLFxuICAgIGl0ZW1Ib2xkZXI6IFJlZkhvbGRlclByb3BUeXBlLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICAuLi5kZWNvcmF0aW9uUHJvcFR5cGVzLFxuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBkZWNvcmF0ZU1ldGhvZDogJ2RlY29yYXRlTWFya2VyJyxcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzLCBjb250ZXh0KSB7XG4gICAgc3VwZXIocHJvcHMsIGNvbnRleHQpO1xuXG4gICAgdGhpcy5kZWNvcmF0aW9uSG9sZGVyID0gbmV3IFJlZkhvbGRlcigpO1xuICAgIHRoaXMuZWRpdG9yU3ViID0gbmV3IERpc3Bvc2FibGUoKTtcbiAgICB0aGlzLmRlY29yYWJsZVN1YiA9IG5ldyBEaXNwb3NhYmxlKCk7XG4gICAgdGhpcy5ndXR0ZXJTdWIgPSBuZXcgRGlzcG9zYWJsZSgpO1xuXG4gICAgdGhpcy5kb21Ob2RlID0gbnVsbDtcbiAgICB0aGlzLml0ZW0gPSBudWxsO1xuXG4gICAgaWYgKFsnZ3V0dGVyJywgJ292ZXJsYXknLCAnYmxvY2snXS5pbmNsdWRlcyh0aGlzLnByb3BzLnR5cGUpKSB7XG4gICAgICB0aGlzLmRvbU5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRoaXMuZG9tTm9kZS5jbGFzc05hbWUgPSBjeCgncmVhY3QtYXRvbS1kZWNvcmF0aW9uJywgdGhpcy5wcm9wcy5jbGFzc05hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHVzZXNJdGVtKCkge1xuICAgIHJldHVybiB0aGlzLmRvbU5vZGUgIT09IG51bGw7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmVkaXRvclN1YiA9IHRoaXMucHJvcHMuZWRpdG9ySG9sZGVyLm9ic2VydmUodGhpcy5vYnNlcnZlUGFyZW50cyk7XG4gICAgdGhpcy5kZWNvcmFibGVTdWIgPSB0aGlzLnByb3BzLmRlY29yYWJsZUhvbGRlci5vYnNlcnZlKHRoaXMub2JzZXJ2ZVBhcmVudHMpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLmVkaXRvckhvbGRlciAhPT0gcHJldlByb3BzLmVkaXRvckhvbGRlcikge1xuICAgICAgdGhpcy5lZGl0b3JTdWIuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5lZGl0b3JTdWIgPSB0aGlzLnByb3BzLmVkaXRvckhvbGRlci5vYnNlcnZlKHRoaXMub2JzZXJ2ZVBhcmVudHMpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmRlY29yYWJsZUhvbGRlciAhPT0gcHJldlByb3BzLmRlY29yYWJsZUhvbGRlcikge1xuICAgICAgdGhpcy5kZWNvcmFibGVTdWIuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5kZWNvcmFibGVTdWIgPSB0aGlzLnByb3BzLmRlY29yYWJsZUhvbGRlci5vYnNlcnZlKHRoaXMub2JzZXJ2ZVBhcmVudHMpO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIE9iamVjdC5rZXlzKGRlY29yYXRpb25Qcm9wVHlwZXMpLnNvbWUoa2V5ID0+IHRoaXMucHJvcHNba2V5XSAhPT0gcHJldlByb3BzW2tleV0pXG4gICAgKSB7XG4gICAgICB0aGlzLmRlY29yYXRpb25Ib2xkZXIubWFwKGRlY29yYXRpb24gPT4gZGVjb3JhdGlvbi5kZXN0cm95KCkpO1xuICAgICAgdGhpcy5jcmVhdGVEZWNvcmF0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLnVzZXNJdGVtKCkpIHtcbiAgICAgIHJldHVybiBSZWFjdERPTS5jcmVhdGVQb3J0YWwoXG4gICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHRoaXMuZG9tTm9kZSxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIG9ic2VydmVQYXJlbnRzID0gKCkgPT4ge1xuICAgIHRoaXMuZGVjb3JhdGlvbkhvbGRlci5tYXAoZGVjb3JhdGlvbiA9PiBkZWNvcmF0aW9uLmRlc3Ryb3koKSk7XG5cbiAgICBjb25zdCBlZGl0b3JWYWxpZCA9IHRoaXMucHJvcHMuZWRpdG9ySG9sZGVyLm1hcChlZGl0b3IgPT4gIWVkaXRvci5pc0Rlc3Ryb3llZCgpKS5nZXRPcihmYWxzZSk7XG4gICAgY29uc3QgZGVjb3JhYmxlVmFsaWQgPSB0aGlzLnByb3BzLmRlY29yYWJsZUhvbGRlci5tYXAoZGVjb3JhYmxlID0+ICFkZWNvcmFibGUuaXNEZXN0cm95ZWQoKSkuZ2V0T3IoZmFsc2UpO1xuXG4gICAgLy8gRW5zdXJlIHRoZSBNYXJrZXIgb3IgTWFya2VyTGF5ZXIgY29ycmVzcG9uZHMgdG8gdGhlIGNvbnRleHQncyBUZXh0RWRpdG9yXG4gICAgY29uc3QgZGVjb3JhYmxlTWF0Y2hlcyA9IHRoaXMucHJvcHMuZGVjb3JhYmxlSG9sZGVyLm1hcChkZWNvcmFibGUgPT4gdGhpcy5wcm9wcy5lZGl0b3JIb2xkZXIubWFwKGVkaXRvciA9PiB7XG4gICAgICBjb25zdCBsYXllciA9IGRlY29yYWJsZS5sYXllciB8fCBkZWNvcmFibGU7XG4gICAgICBjb25zdCBkaXNwbGF5TGF5ZXIgPSBlZGl0b3IuZ2V0TWFya2VyTGF5ZXIobGF5ZXIuaWQpO1xuICAgICAgaWYgKCFkaXNwbGF5TGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGRpc3BsYXlMYXllciAhPT0gbGF5ZXIgJiYgZGlzcGxheUxheWVyLmJ1ZmZlck1hcmtlckxheWVyICE9PSBsYXllcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KS5nZXRPcihmYWxzZSkpLmdldE9yKGZhbHNlKTtcblxuICAgIGlmICghZWRpdG9yVmFsaWQgfHwgIWRlY29yYWJsZVZhbGlkIHx8ICFkZWNvcmFibGVNYXRjaGVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gZGVsYXkgZGVjb3JhdGlvbiBjcmVhdGlvbiB3aGVuIGl0J3MgYSBndXR0ZXIgdHlwZTtcbiAgICAvLyBpbnN0ZWFkIHdhaXQgZm9yIHRoZSBHdXR0ZXIgdG8gYmUgYWRkZWQgdG8gdGhlIGVkaXRvciBmaXJzdFxuICAgIGlmICh0aGlzLnByb3BzLnR5cGUgPT09ICdndXR0ZXInKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMuZ3V0dGVyTmFtZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBhcmUgdHJ5aW5nIHRvIGRlY29yYXRlIGEgZ3V0dGVyIGJ1dCBkaWQgbm90IHN1cHBseSBndXR0ZXJOYW1lIHByb3AuJyk7XG4gICAgICB9XG4gICAgICB0aGlzLnByb3BzLmVkaXRvckhvbGRlci5tYXAoZWRpdG9yID0+IHtcbiAgICAgICAgdGhpcy5ndXR0ZXJTdWIgPSBlZGl0b3Iub2JzZXJ2ZUd1dHRlcnMoZ3V0dGVyID0+IHtcbiAgICAgICAgICBpZiAoZ3V0dGVyLm5hbWUgPT09IHRoaXMucHJvcHMuZ3V0dGVyTmFtZSkge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVEZWNvcmF0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmNyZWF0ZURlY29yYXRpb24oKTtcbiAgfVxuXG4gIGNyZWF0ZURlY29yYXRpb24oKSB7XG4gICAgaWYgKHRoaXMudXNlc0l0ZW0oKSAmJiAhdGhpcy5pdGVtKSB7XG4gICAgICB0aGlzLml0ZW0gPSBjcmVhdGVJdGVtKHRoaXMuZG9tTm9kZSwgdGhpcy5wcm9wcy5pdGVtSG9sZGVyKTtcbiAgICB9XG5cbiAgICBjb25zdCBvcHRzID0gdGhpcy5nZXREZWNvcmF0aW9uT3B0cyh0aGlzLnByb3BzKTtcbiAgICBjb25zdCBlZGl0b3IgPSB0aGlzLnByb3BzLmVkaXRvckhvbGRlci5nZXQoKTtcbiAgICBjb25zdCBkZWNvcmFibGUgPSB0aGlzLnByb3BzLmRlY29yYWJsZUhvbGRlci5nZXQoKTtcbiAgICB0aGlzLmRlY29yYXRpb25Ib2xkZXIuc2V0dGVyKFxuICAgICAgZWRpdG9yW3RoaXMucHJvcHMuZGVjb3JhdGVNZXRob2RdKGRlY29yYWJsZSwgb3B0cyksXG4gICAgKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuZGVjb3JhdGlvbkhvbGRlci5tYXAoZGVjb3JhdGlvbiA9PiBkZWNvcmF0aW9uLmRlc3Ryb3koKSk7XG4gICAgdGhpcy5lZGl0b3JTdWIuZGlzcG9zZSgpO1xuICAgIHRoaXMuZGVjb3JhYmxlU3ViLmRpc3Bvc2UoKTtcbiAgICB0aGlzLmd1dHRlclN1Yi5kaXNwb3NlKCk7XG4gIH1cblxuICBnZXREZWNvcmF0aW9uT3B0cyhwcm9wcykge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5leHRyYWN0UHJvcHMocHJvcHMsIGRlY29yYXRpb25Qcm9wVHlwZXMsIHtjbGFzc05hbWU6ICdjbGFzcyd9KSxcbiAgICAgIGl0ZW06IHRoaXMuaXRlbSxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERlY29yYXRpb24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGVkaXRvcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBkZWNvcmFibGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgZGVjb3JhdGVNZXRob2Q6IFByb3BUeXBlcy5vbmVPZihbJ2RlY29yYXRlTWFya2VyJywgJ2RlY29yYXRlTWFya2VyTGF5ZXInXSksXG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBlZGl0b3JIb2xkZXI6IFJlZkhvbGRlci5vbih0aGlzLnByb3BzLmVkaXRvciksXG4gICAgICBkZWNvcmFibGVIb2xkZXI6IFJlZkhvbGRlci5vbih0aGlzLnByb3BzLmRlY29yYWJsZSksXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgY29uc3QgZWRpdG9yQ2hhbmdlZCA9IHN0YXRlLmVkaXRvckhvbGRlclxuICAgICAgLm1hcChlZGl0b3IgPT4gZWRpdG9yICE9PSBwcm9wcy5lZGl0b3IpXG4gICAgICAuZ2V0T3IocHJvcHMuZWRpdG9yICE9PSB1bmRlZmluZWQpO1xuICAgIGNvbnN0IGRlY29yYWJsZUNoYW5nZWQgPSBzdGF0ZS5kZWNvcmFibGVIb2xkZXJcbiAgICAgIC5tYXAoZGVjb3JhYmxlID0+IGRlY29yYWJsZSAhPT0gcHJvcHMuZGVjb3JhYmxlKVxuICAgICAgLmdldE9yKHByb3BzLmRlY29yYWJsZSAhPT0gdW5kZWZpbmVkKTtcblxuICAgIGlmICghZWRpdG9yQ2hhbmdlZCAmJiAhZGVjb3JhYmxlQ2hhbmdlZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgbmV4dFN0YXRlID0ge307XG4gICAgaWYgKGVkaXRvckNoYW5nZWQpIHtcbiAgICAgIG5leHRTdGF0ZS5lZGl0b3JIb2xkZXIgPSBSZWZIb2xkZXIub24ocHJvcHMuZWRpdG9yKTtcbiAgICB9XG4gICAgaWYgKGRlY29yYWJsZUNoYW5nZWQpIHtcbiAgICAgIG5leHRTdGF0ZS5kZWNvcmFibGVIb2xkZXIgPSBSZWZIb2xkZXIub24ocHJvcHMuZGVjb3JhYmxlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFRleHRFZGl0b3JDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICB7ZWRpdG9ySG9sZGVyID0+IChcbiAgICAgICAgICA8RGVjb3JhYmxlQ29udGV4dC5Db25zdW1lcj5cbiAgICAgICAgICAgIHtkZWNvcmFibGUgPT4ge1xuICAgICAgICAgICAgICBsZXQgaG9sZGVyID0gbnVsbDtcbiAgICAgICAgICAgICAgbGV0IGRlY29yYXRlTWV0aG9kID0gbnVsbDtcbiAgICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmRlY29yYWJsZUhvbGRlci5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICBob2xkZXIgPSB0aGlzLnN0YXRlLmRlY29yYWJsZUhvbGRlcjtcbiAgICAgICAgICAgICAgICBkZWNvcmF0ZU1ldGhvZCA9IHRoaXMucHJvcHMuZGVjb3JhdGVNZXRob2Q7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaG9sZGVyID0gZGVjb3JhYmxlLmhvbGRlcjtcbiAgICAgICAgICAgICAgICBkZWNvcmF0ZU1ldGhvZCA9IGRlY29yYWJsZS5kZWNvcmF0ZU1ldGhvZDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPEJhcmVEZWNvcmF0aW9uXG4gICAgICAgICAgICAgICAgICBlZGl0b3JIb2xkZXI9e2VkaXRvckhvbGRlciB8fCB0aGlzLnN0YXRlLmVkaXRvckhvbGRlcn1cbiAgICAgICAgICAgICAgICAgIGRlY29yYWJsZUhvbGRlcj17aG9sZGVyfVxuICAgICAgICAgICAgICAgICAgZGVjb3JhdGVNZXRob2Q9e2RlY29yYXRlTWV0aG9kfVxuICAgICAgICAgICAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPC9EZWNvcmFibGVDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICApfVxuICAgICAgPC9UZXh0RWRpdG9yQ29udGV4dC5Db25zdW1lcj5cbiAgICApO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFNBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFVBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFNBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLFdBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFLLFFBQUEsR0FBQUwsT0FBQTtBQUNBLElBQUFNLFdBQUEsR0FBQU4sT0FBQTtBQUNBLElBQUFPLGVBQUEsR0FBQVAsT0FBQTtBQUNBLElBQUFRLE9BQUEsR0FBQVIsT0FBQTtBQUNBLElBQUFTLFVBQUEsR0FBQVYsc0JBQUEsQ0FBQUMsT0FBQTtBQUE2QyxTQUFBRCx1QkFBQVcsR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUFBLFNBQUFHLFNBQUEsSUFBQUEsUUFBQSxHQUFBQyxNQUFBLENBQUFDLE1BQUEsR0FBQUQsTUFBQSxDQUFBQyxNQUFBLENBQUFDLElBQUEsZUFBQUMsTUFBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQUMsU0FBQSxDQUFBQyxN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