"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _propTypes = _interopRequireDefault(require("prop-types"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class SimpleTooltip extends _react.default.Component {
  componentDidMount() {
    this.disposable = this.props.tooltips.add(_reactDom.default.findDOMNode(this.child), {
      title: () => this.props.title
    });
  }
  componentWillUnmount() {
    this.disposable.dispose();
  }
  componentDidUpdate(prevProps) {
    if (prevProps.title !== this.props.title) {
      this.disposable.dispose();
      this.disposable = this.props.tooltips.add(_reactDom.default.findDOMNode(this.child), {
        title: () => this.props.title
      });
    }
  }
  render() {
    const child = _react.default.Children.only(this.props.children);
    return _react.default.cloneElement(child, {
      ref: e => {
        this.child = e;
      }
    });
  }
}
exports.default = SimpleTooltip;
_defineProperty(SimpleTooltip, "propTypes", {
  tooltips: _propTypes.default.object.isRequired,
  children: _propTypes.default.node.isRequired,
  title: _propTypes.default.string.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdERvbSIsIl9wcm9wVHlwZXMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9kZWZpbmVQcm9wZXJ0eSIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJTaW1wbGVUb29sdGlwIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb21wb25lbnREaWRNb3VudCIsImRpc3Bvc2FibGUiLCJwcm9wcyIsInRvb2x0aXBzIiwiYWRkIiwiUmVhY3RET00iLCJmaW5kRE9NTm9kZSIsImNoaWxkIiwidGl0bGUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImRpc3Bvc2UiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJyZW5kZXIiLCJDaGlsZHJlbiIsIm9ubHkiLCJjaGlsZHJlbiIsImNsb25lRWxlbWVudCIsInJlZiIsImUiLCJleHBvcnRzIiwiUHJvcFR5cGVzIiwib2JqZWN0IiwiaXNSZXF1aXJlZCIsIm5vZGUiLCJzdHJpbmciXSwic291cmNlcyI6WyJzaW1wbGUtdG9vbHRpcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaW1wbGVUb29sdGlwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICB0b29sdGlwczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICAgIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmRpc3Bvc2FibGUgPSB0aGlzLnByb3BzLnRvb2x0aXBzLmFkZChSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzLmNoaWxkKSwge3RpdGxlOiAoKSA9PiB0aGlzLnByb3BzLnRpdGxlfSk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmIChwcmV2UHJvcHMudGl0bGUgIT09IHRoaXMucHJvcHMudGl0bGUpIHtcbiAgICAgIHRoaXMuZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICB0aGlzLmRpc3Bvc2FibGUgPSB0aGlzLnByb3BzLnRvb2x0aXBzLmFkZChSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzLmNoaWxkKSwge3RpdGxlOiAoKSA9PiB0aGlzLnByb3BzLnRpdGxlfSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGNoaWxkID0gUmVhY3QuQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7cmVmOiBlID0+IHsgdGhpcy5jaGlsZCA9IGU7IH19KTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxTQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxVQUFBLEdBQUFILHNCQUFBLENB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