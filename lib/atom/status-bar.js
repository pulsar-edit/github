"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _propTypes = _interopRequireDefault(require("prop-types"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class StatusBar extends _react.default.Component {
  constructor(props) {
    super(props);
    this.domNode = document.createElement('div');
    this.domNode.classList.add('react-atom-status-bar');
    if (props.className) {
      this.domNode.classList.add(props.className);
    }
    this.tile = null;
  }
  componentDidMount() {
    this.consumeStatusBar();
  }
  render() {
    return _reactDom.default.createPortal(this.props.children, this.domNode);
  }
  consumeStatusBar() {
    if (this.tile) {
      return;
    }
    if (!this.props.statusBar) {
      return;
    }
    this.tile = this.props.statusBar.addRightTile({
      item: this.domNode,
      priority: -50
    });
    this.props.onConsumeStatusBar(this.props.statusBar);
  }
  componentWillUnmount() {
    this.tile && this.tile.destroy();
  }
}
exports.default = StatusBar;
_defineProperty(StatusBar, "propTypes", {
  children: _propTypes.default.element.isRequired,
  statusBar: _propTypes.default.object,
  onConsumeStatusBar: _propTypes.default.func,
  className: _propTypes.default.string
});
_defineProperty(StatusBar, "defaultProps", {
  onConsumeStatusBar: statusBar => {}
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdERvbSIsIl9wcm9wVHlwZXMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9kZWZpbmVQcm9wZXJ0eSIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJTdGF0dXNCYXIiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJkb21Ob2RlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiY2xhc3NOYW1lIiwidGlsZSIsImNvbXBvbmVudERpZE1vdW50IiwiY29uc3VtZVN0YXR1c0JhciIsInJlbmRlciIsIlJlYWN0RE9NIiwiY3JlYXRlUG9ydGFsIiwiY2hpbGRyZW4iLCJzdGF0dXNCYXIiLCJhZGRSaWdodFRpbGUiLCJpdGVtIiwicHJpb3JpdHkiLCJvbkNvbnN1bWVTdGF0dXNCYXIiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImRlc3Ryb3kiLCJleHBvcnRzIiwiUHJvcFR5cGVzIiwiZWxlbWVudCIsImlzUmVxdWlyZWQiLCJvYmplY3QiLCJmdW5jIiwic3RyaW5nIl0sInNvdXJjZXMiOlsic3RhdHVzLWJhci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0dXNCYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkLFxuICAgIHN0YXR1c0JhcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvbkNvbnN1bWVTdGF0dXNCYXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgb25Db25zdW1lU3RhdHVzQmFyOiBzdGF0dXNCYXIgPT4ge30sXG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuZG9tTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuZG9tTm9kZS5jbGFzc0xpc3QuYWRkKCdyZWFjdC1hdG9tLXN0YXR1cy1iYXInKTtcbiAgICBpZiAocHJvcHMuY2xhc3NOYW1lKSB7XG4gICAgICB0aGlzLmRvbU5vZGUuY2xhc3NMaXN0LmFkZChwcm9wcy5jbGFzc05hbWUpO1xuICAgIH1cbiAgICB0aGlzLnRpbGUgPSBudWxsO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5jb25zdW1lU3RhdHVzQmFyKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0RE9NLmNyZWF0ZVBvcnRhbChcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW4sXG4gICAgICB0aGlzLmRvbU5vZGUsXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN1bWVTdGF0dXNCYXIoKSB7XG4gICAgaWYgKHRoaXMudGlsZSkgeyByZXR1cm47IH1cbiAgICBpZiAoIXRoaXMucHJvcHMuc3RhdHVzQmFyKSB7IHJldHVybjsgfVxuXG4gICAgdGhpcy50aWxlID0gdGhpcy5wcm9wcy5zdGF0dXNCYXIuYWRkUmlnaHRUaWxlKHtpdGVtOiB0aGlzLmRvbU5vZGUsIHByaW9yaXR5OiAtNTB9KTtcbiAgICB0aGlzLnByb3BzLm9uQ29uc3VtZVN0YXR1c0Jhcih0aGlzLnByb3BzLnN0YXR1c0Jhcik7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnRpbGUgJiYgdGhpcy50aWxlLmRlc3Ryb3koKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxTQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxVQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBbUMsU0FBQUQsdUJBQUFJLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFBQSxTQUFBRyxnQkFBQUgsR0FBQSxFQUFBSSxHQUFBLEVBQUFDLEtBQUEsSUFBQUQsR0FBQSxHQUFBRSxjQUFBLENBQUFGLEdBQUEsT0FBQUEsR0FBQSxJQUFBSixHQUFBLElBQUFPLE1BQUEsQ0FBQUMsY0FBQSxDQUFBUixHQUFBLEVBQUFJLEdBQUEsSUFBQUMsS0FBQSxFQUFBQSxLQUFBLEVBQUFJLFVBQUEsUUFBQUMsWUFBQSxRQUFBQyxRQUFBLG9CQUFBWCxHQUFBLENBQUFJLEdBQUEsSUFBQUMsS0FBQSxXQUFBTCxHQUFBO0FBQUEsU0FBQU0sZUFBQU0sR0FBQSxRQUFBUixHQUFBLEdBQUFTLFlBQUEsQ0FBQUQsR0FBQSwyQkFBQVIsR0FBQSxnQkFBQUEsR0FBQSxHQUFBVSxNQUFBLENBQUFWLEdBQUE7QUFBQSxTQUFBUyxhQUFBRSxLQUFBLEVBQUFDLElBQUEsZUFBQUQsS0FBQSxpQkFBQUEsS0FBQSxrQkFBQUEsS0FBQSxNQUFBRSxJQUFBLEdBQUFGLEtBQUEsQ0FBQUcsTUFBQSxDQUFBQyxXQUFBLE9BQUFGLElBQUEsS0FBQUcsU0FBQSxRQUFBQyxHQUFBLEdBQUFKLElBQUEsQ0FBQUssSUFBQSxDQUFBUCxLQUFBLEVBQUFDLElBQUEsMkJBQUFLLEdBQUEsc0JBQUFBLEdBQUEsWUFBQUUsU0FBQSw0REFBQVAsSUFBQSxnQkFBQUYsTUFBQSxHQUFBVSxNQUFBLEVBQUFULEtBQUE7QUFFcEIsTUFBTVUsU0FBUyxTQUFTQyxjQUFLLENBQUNDLFNBQVMsQ0FBQztFQVlyREMsV0FBV0EsQ0FBQ0MsS0FBSyxFQUFFO0lBQ2pCLEtBQUssQ0FBQ0EsS0FBSyxDQUFDO0lBRVosSUFBSSxDQUFDQyxPQUFPLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLEtBQUssQ0FBQztJQUM1QyxJQUFJLENBQUNGLE9BQU8sQ0FBQ0csU0FBUyxDQUFDQyxHQUFHLENBQUMsdUJBQXVCLENBQUM7SUFDbkQsSUFBSUwsS0FBSyxDQUFDTSxTQUFTLEVBQUU7TUFDbkIsSUFBSSxDQUFDTCxPQUFPLENBQUNHLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDTCxLQUFLLENBQUNNLFNBQVMsQ0FBQztJQUM3QztJQUNBLElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUk7RUFDbEI7RUFFQUMsaUJBQWlCQSxDQUFBLEVBQUc7SUFDbEIsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQyxDQUFDO0VBQ3pCO0VBRUFDLE1BQU1BLENBQUEsRUFBRztJQUNQLE9BQU9DLGlCQUFRLENBQUNDLFlBQVksQ0FDMUIsSUFBSSxDQUFDWixLQUFLLENBQUNhLFFBQVEsRUFDbkIsSUFBSSxDQUFDWixPQUNQLENBQUM7RUFDSDtFQUVBUSxnQkFBZ0JBLENBQUEsRUFBRztJQUNqQixJQUFJLElBQUksQ0FBQ0YsSUFBSSxFQUFFO01BQUU7SUFBUTtJQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDUCxLQUFLLENBQUNjLFNBQVMsRUFBRTtNQUFFO0lBQVE7SUFFckMsSUFBSSxDQUFDUCxJQUFJLEdBQUcsSUFBSSxDQUFDUCxLQUFLLENBQUNjLFNBQVMsQ0FBQ0MsWUFBWSxDQUFDO01BQUNDLElBQUksRUFBRSxJQUFJLENBQUNmLE9BQU87TUFBRWdCLFFBQVEsRUFBRSxDQUFDO0lBQUUsQ0FBQyxDQUFDO0lBQ2xGLElBQUksQ0FBQ2pCLEtBQUssQ0FBQ2tCLGtCQUFrQixDQUFDLElBQUksQ0FBQ2xCLEtBQUssQ0FBQ2MsU0FBUyxDQUFDO0VBQ3JEO0VBRUFLLG9CQUFvQkEsQ0FBQSxFQUFHO0lBQ3JCLElBQUksQ0FBQ1osSUFBSSxJQUFJLElBQUksQ0FBQ0EsSUFBSSxDQUFDYSxPQUFPLENBQUMsQ0FBQztFQUNsQztBQUNGO0FBQUNDLE9BQUEsQ0FBQWhELE9BQUEsR0FBQXVCLFNBQUE7QUFBQXRCLGVBQUEsQ0E3Q29Cc0IsU0FBUyxlQUNUO0VBQ2pCaUIsUUFBUSxFQUFFUyxrQkFBUyxDQUFDQyxPQUFPLENBQUNDLFVBQVU7RUFDdENWLFNBQVMsRUFBRVEsa0JBQVMsQ0FBQ0csTUFBTTtFQUMzQlAsa0JBQWtCLEVBQUVJLGtCQUFTLENBQUNJLElBQUk7RUFDbENwQixTQUFTLEVBQUVnQixrQkFBUyxDQUFDSztBQUN2QixDQUFDO0FBQUFyRCxlQUFBLENBTmtCc0IsU0FBUyxrQkFRTjtFQUNwQnNCLGtCQUFrQixFQUFFSixTQUFTLElBQUksQ0FBQztBQUNwQyxDQUFDIn0=