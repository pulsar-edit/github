"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Octicon;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
/* eslint-disable max-len */
const SVG = {
  unlock: {
    viewBox: '0 0 24 16',
    element: _react.default.createElement("path", {
      fillRule: "evenodd",
      d: "m 13.4,13 h -1 v -1 h 1 z m 6,-7 h 1 c 0.55,0 1,0.45 1,1 v 7 c 0,0.55 -0.45,1 -1,1 h -10 c -0.55,0 -1,-0.45 -1,-1 V 7 c 0,-0.55 0.45,-1 1,-1 h 1 V 4.085901 C 11.4,2.1862908 9.8780193,2.4095693 8.904902,2.4143325 8.0404588,2.4185637 6.3689542,2.1882296 6.3689542,4.085901 V 7.4918301 L 4.2521568,7.4509801 4.2930068,4.045051 C 4.3176792,1.987953 5.080245,-0.02206145 8.792353,-0.03403364 13.536238,-0.0493335 13.21,3.1688541 13.21,4.085901 V 6 h -0.01 4.41 m 2.79,1 h -9 v 7 h 9 z m -7,1 h -1 v 1 h 1 z m 0,2 h -1 v 1 h 1 z"
    })
  }
};
/* eslint-enable max-len */

function Octicon(_ref) {
  let {
      icon
    } = _ref,
    others = _objectWithoutProperties(_ref, ["icon"]);
  const classes = (0, _classnames.default)('icon', `icon-${icon}`, others.className);
  const svgContent = SVG[icon];
  if (svgContent) {
    return _react.default.createElement("svg", _extends({}, others, {
      viewBox: svgContent.viewBox,
      xmlns: "http://www.w3.org/2000/svg",
      className: classes
    }), svgContent.element);
  }
  return _react.default.createElement("span", _extends({}, others, {
    className: classes
  }));
}
Octicon.propTypes = {
  icon: _propTypes.default.string.isRequired
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfY2xhc3NuYW1lcyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJiaW5kIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNvdXJjZVN5bWJvbEtleXMiLCJpbmRleE9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzb3VyY2VLZXlzIiwia2V5cyIsIlNWRyIsInVubG9jayIsInZpZXdCb3giLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImZpbGxSdWxlIiwiZCIsIk9jdGljb24iLCJfcmVmIiwiaWNvbiIsIm90aGVycyIsImNsYXNzZXMiLCJjeCIsImNsYXNzTmFtZSIsInN2Z0NvbnRlbnQiLCJ4bWxucyIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsInN0cmluZyIsImlzUmVxdWlyZWQiXSwic291cmNlcyI6WyJvY3RpY29uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5jb25zdCBTVkcgPSB7XG4gIHVubG9jazoge1xuICAgIHZpZXdCb3g6ICcwIDAgMjQgMTYnLFxuICAgIGVsZW1lbnQ6IChcbiAgICAgIDxwYXRoXG4gICAgICAgIGZpbGxSdWxlPVwiZXZlbm9kZFwiXG4gICAgICAgIGQ9XCJtIDEzLjQsMTMgaCAtMSB2IC0xIGggMSB6IG0gNiwtNyBoIDEgYyAwLjU1LDAgMSwwLjQ1IDEsMSB2IDcgYyAwLDAuNTUgLTAuNDUsMSAtMSwxIGggLTEwIGMgLTAuNTUsMCAtMSwtMC40NSAtMSwtMSBWIDcgYyAwLC0wLjU1IDAuNDUsLTEgMSwtMSBoIDEgViA0LjA4NTkwMSBDIDExLjQsMi4xODYyOTA4IDkuODc4MDE5MywyLjQwOTU2OTMgOC45MDQ5MDIsMi40MTQzMzI1IDguMDQwNDU4OCwyLjQxODU2MzcgNi4zNjg5NTQyLDIuMTg4MjI5NiA2LjM2ODk1NDIsNC4wODU5MDEgViA3LjQ5MTgzMDEgTCA0LjI1MjE1NjgsNy40NTA5ODAxIDQuMjkzMDA2OCw0LjA0NTA1MSBDIDQuMzE3Njc5MiwxLjk4Nzk1MyA1LjA4MDI0NSwtMC4wMjIwNjE0NSA4Ljc5MjM1MywtMC4wMzQwMzM2NCAxMy41MzYyMzgsLTAuMDQ5MzMzNSAxMy4yMSwzLjE2ODg1NDEgMTMuMjEsNC4wODU5MDEgViA2IGggLTAuMDEgNC40MSBtIDIuNzksMSBoIC05IHYgNyBoIDkgeiBtIC03LDEgaCAtMSB2IDEgaCAxIHogbSAwLDIgaCAtMSB2IDEgaCAxIHpcIlxuICAgICAgLz5cbiAgICApLFxuICB9LFxufTtcbi8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBPY3RpY29uKHtpY29uLCAuLi5vdGhlcnN9KSB7XG4gIGNvbnN0IGNsYXNzZXMgPSBjeCgnaWNvbicsIGBpY29uLSR7aWNvbn1gLCBvdGhlcnMuY2xhc3NOYW1lKTtcblxuICBjb25zdCBzdmdDb250ZW50ID0gU1ZHW2ljb25dO1xuICBpZiAoc3ZnQ29udGVudCkge1xuICAgIHJldHVybiAoXG4gICAgICA8c3ZnIHsuLi5vdGhlcnN9IHZpZXdCb3g9e3N2Z0NvbnRlbnQudmlld0JveH0geG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGNsYXNzTmFtZT17Y2xhc3Nlc30+XG4gICAgICAgIHtzdmdDb250ZW50LmVsZW1lbnR9XG4gICAgICA8L3N2Zz5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIDxzcGFuIHsuLi5vdGhlcnN9IGNsYXNzTmFtZT17Y2xhc3Nlc30gLz47XG59XG5cbk9jdGljb24ucHJvcFR5cGVzID0ge1xuICBpY29uOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxXQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBNEIsU0FBQUQsdUJBQUFJLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFBQSxTQUFBRyxTQUFBLElBQUFBLFFBQUEsR0FBQUMsTUFBQSxDQUFBQyxNQUFBLEdBQUFELE1BQUEsQ0FBQUMsTUFBQSxDQUFBQyxJQUFBLGVBQUFDLE1BQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxFQUFBRixDQUFBLFVBQUFHLE1BQUEsR0FBQUYsU0FBQSxDQUFBRCxDQUFBLFlBQUFJLEdBQUEsSUFBQUQsTUFBQSxRQUFBUCxNQUFBLENBQUFTLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFKLE1BQUEsRUFBQUMsR0FBQSxLQUFBTCxNQUFBLENBQUFLLEdBQUEsSUFBQUQsTUFBQSxDQUFBQyxHQUFBLGdCQUFBTCxNQUFBLFlBQUFKLFFBQUEsQ0FBQWEsS0FBQSxPQUFBUCxTQUFBO0FBQUEsU0FBQVEseUJBQUFOLE1BQUEsRUFBQU8sUUFBQSxRQUFBUCxNQUFBLHlCQUFBSixNQUFBLEdBQUFZLDZCQUFBLENBQUFSLE1BQUEsRUFBQU8sUUFBQSxPQUFBTixHQUFBLEVBQUFKLENBQUEsTUFBQUosTUFBQSxDQUFBZ0IscUJBQUEsUUFBQUMsZ0JBQUEsR0FBQWpCLE1BQUEsQ0FBQWdCLHFCQUFBLENBQUFULE1BQUEsUUFBQUgsQ0FBQSxNQUFBQSxDQUFBLEdBQUFhLGdCQUFBLENBQUFYLE1BQUEsRUFBQUYsQ0FBQSxNQUFBSSxHQUFBLEdBQUFTLGdCQUFBLENBQUFiLENBQUEsT0FBQVUsUUFBQSxDQUFBSSxPQUFBLENBQUFWLEdBQUEsdUJBQUFSLE1BQUEsQ0FBQVMsU0FBQSxDQUFBVSxvQkFBQSxDQUFBUixJQUFBLENBQUFKLE1BQUEsRUFBQUMsR0FBQSxhQUFBTCxNQUFBLENBQUFLLEdBQUEsSUFBQUQsTUFBQSxDQUFBQyxHQUFBLGNBQUFMLE1BQUE7QUFBQSxTQUFBWSw4QkFBQVIsTUFBQSxFQUFBTyxRQUFBLFFBQUFQLE1BQUEseUJBQUFKLE1BQUEsV0FBQWlCLFVBQUEsR0FBQXBCLE1BQUEsQ0FBQXFCLElBQUEsQ0FBQWQsTUFBQSxPQUFBQyxHQUFBLEVBQUFKLENBQUEsT0FBQUEsQ0FBQSxNQUFBQSxDQUFBLEdBQUFnQixVQUFBLENBQUFkLE1BQUEsRUFBQUYsQ0FBQSxNQUFBSSxHQUFBLEdBQUFZLFVBQUEsQ0FBQWhCLENBQUEsT0FBQVUsUUFBQSxDQUFBSSxPQUFBLENBQUFWLEdBQUEsa0JBQUFMLE1BQUEsQ0FBQUssR0FBQSxJQUFBRCxNQUFBLENBQUFDLEdBQUEsWUFBQUwsTUFBQTtBQUU1QjtBQUNBLE1BQU1tQixHQUFHLEdBQUc7RUFDVkMsTUFBTSxFQUFFO0lBQ05DLE9BQU8sRUFBRSxXQUFXO0lBQ3BCQyxPQUFPLEVBQ0xsQyxNQUFBLENBQUFPLE9BQUEsQ0FBQTRCLGFBQUE7TUFDRUMsUUFBUSxFQUFDLFNBQVM7TUFDbEJDLENBQUMsRUFBQztJQUE0Z0I7RUFHcGhCO0FBQ0YsQ0FBQztBQUNEOztBQUVlLFNBQVNDLE9BQU9BLENBQUFDLElBQUEsRUFBb0I7RUFBQSxJQUFuQjtNQUFDQztJQUFlLENBQUMsR0FBQUQsSUFBQTtJQUFQRSxNQUFNLEdBQUFuQix3QkFBQSxDQUFBaUIsSUFBQTtFQUM5QyxNQUFNRyxPQUFPLEdBQUcsSUFBQUMsbUJBQUUsRUFBQyxNQUFNLEVBQUcsUUFBT0gsSUFBSyxFQUFDLEVBQUVDLE1BQU0sQ0FBQ0csU0FBUyxDQUFDO0VBRTVELE1BQU1DLFVBQVUsR0FBR2QsR0FBRyxDQUFDUyxJQUFJLENBQUM7RUFDNUIsSUFBSUssVUFBVSxFQUFFO0lBQ2QsT0FDRTdDLE1BQUEsQ0FBQU8sT0FBQSxDQUFBNEIsYUFBQSxRQUFBM0IsUUFBQSxLQUFTaUMsTUFBTTtNQUFFUixPQUFPLEVBQUVZLFVBQVUsQ0FBQ1osT0FBUTtNQUFDYSxLQUFLLEVBQUMsNEJBQTRCO01BQUNGLFNBQVMsRUFBRUY7SUFBUSxJQUNqR0csVUFBVSxDQUFDWCxPQUFPLENBQ2Y7RUFFVjtFQUVBLE9BQU9sQyxNQUFBLENBQUFPLE9BQUEsQ0FBQTRCLGFBQUEsU0FBQTNCLFFBQUEsS0FBVWlDLE1BQU07SUFBRUcsU0FBUyxFQUFFRjtFQUFRLEdBQUc7QUFDakQ7QUFFQUosT0FBTyxDQUFDUyxTQUFTLEdBQUc7RUFDbEJQLElBQUksRUFBRVEsa0JBQVMsQ0FBQ0MsTUFBTSxDQUFDQztBQUN6QixDQUFDIn0=