"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DecorableContext = exports.MarkerContext = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _eventKit = require("event-kit");
var _helpers = require("../helpers");
var _propTypes2 = require("../prop-types");
var _refHolder = _interopRequireDefault(require("../models/ref-holder"));
var _atomTextEditor = require("./atom-text-editor");
var _markerLayer = require("./marker-layer");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const MarkablePropType = _propTypes.default.shape({
  markBufferRange: _propTypes.default.func.isRequired
});
const markerProps = {
  exclusive: _propTypes.default.bool,
  reversed: _propTypes.default.bool,
  invalidate: _propTypes.default.oneOf(['never', 'surround', 'overlap', 'inside', 'touch'])
};
const MarkerContext = _react.default.createContext();
exports.MarkerContext = MarkerContext;
const DecorableContext = _react.default.createContext();
exports.DecorableContext = DecorableContext;
class BareMarker extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _helpers.autobind)(this, 'createMarker', 'didChange');
    this.markerSubs = new _eventKit.CompositeDisposable();
    this.subs = new _eventKit.CompositeDisposable();
    this.markerHolder = new _refHolder.default();
    this.markerHolder.observe(marker => {
      this.props.handleMarker(marker);
    });
    this.decorable = {
      holder: this.markerHolder,
      decorateMethod: 'decorateMarker'
    };
  }
  componentDidMount() {
    this.observeMarkable();
  }
  render() {
    return _react.default.createElement(MarkerContext.Provider, {
      value: this.markerHolder
    }, _react.default.createElement(DecorableContext.Provider, {
      value: this.decorable
    }, this.props.children));
  }
  componentDidUpdate(prevProps) {
    if (prevProps.markableHolder !== this.props.markableHolder) {
      this.observeMarkable();
    }
    if (Object.keys(markerProps).some(key => prevProps[key] !== this.props[key])) {
      this.markerHolder.map(marker => marker.setProperties((0, _helpers.extractProps)(this.props, markerProps)));
    }
    this.updateMarkerPosition();
  }
  componentWillUnmount() {
    this.subs.dispose();
  }
  observeMarkable() {
    this.subs.dispose();
    this.subs = new _eventKit.CompositeDisposable();
    this.subs.add(this.props.markableHolder.observe(this.createMarker));
  }
  createMarker() {
    this.markerSubs.dispose();
    this.markerSubs = new _eventKit.CompositeDisposable();
    this.subs.add(this.markerSubs);
    const options = (0, _helpers.extractProps)(this.props, markerProps);
    this.props.markableHolder.map(markable => {
      let marker;
      if (this.props.id !== undefined) {
        marker = markable.getMarker(this.props.id);
        if (!marker) {
          throw new Error(`Invalid marker ID: ${this.props.id}`);
        }
        marker.setProperties(options);
      } else {
        marker = markable.markBufferRange(this.props.bufferRange, options);
        this.markerSubs.add(new _eventKit.Disposable(() => marker.destroy()));
      }
      this.markerSubs.add(marker.onDidChange(this.didChange));
      this.markerHolder.setter(marker);
      this.props.handleID(marker.id);
      return null;
    });
  }
  updateMarkerPosition() {
    this.markerHolder.map(marker => marker.setBufferRange(this.props.bufferRange));
  }
  didChange(event) {
    const reversed = this.markerHolder.map(marker => marker.isReversed()).getOr(false);
    const oldBufferStartPosition = reversed ? event.oldHeadBufferPosition : event.oldTailBufferPosition;
    const oldBufferEndPosition = reversed ? event.oldTailBufferPosition : event.oldHeadBufferPosition;
    const newBufferStartPosition = reversed ? event.newHeadBufferPosition : event.newTailBufferPosition;
    const newBufferEndPosition = reversed ? event.newTailBufferPosition : event.newHeadBufferPosition;
    this.props.onDidChange(_objectSpread({
      oldRange: new Range(oldBufferStartPosition, oldBufferEndPosition),
      newRange: new Range(newBufferStartPosition, newBufferEndPosition)
    }, event));
  }
}
_defineProperty(BareMarker, "propTypes", _objectSpread({}, markerProps, {
  id: _propTypes.default.number,
  bufferRange: _propTypes2.RangePropType,
  markableHolder: _propTypes2.RefHolderPropType,
  children: _propTypes.default.node,
  onDidChange: _propTypes.default.func,
  handleID: _propTypes.default.func,
  handleMarker: _propTypes.default.func
}));
_defineProperty(BareMarker, "defaultProps", {
  onDidChange: () => {},
  handleID: () => {},
  handleMarker: () => {}
});
class Marker extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      markableHolder: _refHolder.default.on(props.layer || props.editor)
    };
  }
  static getDerivedStateFromProps(props, state) {
    const markable = props.layer || props.editor;
    if (state.markableHolder.map(m => m === markable).getOr(markable === undefined)) {
      return {};
    }
    return {
      markableHolder: _refHolder.default.on(markable)
    };
  }
  render() {
    if (!this.state.markableHolder.isEmpty()) {
      return _react.default.createElement(BareMarker, _extends({}, this.props, {
        markableHolder: this.state.markableHolder
      }));
    }
    return _react.default.createElement(_markerLayer.MarkerLayerContext.Consumer, null, layerHolder => {
      if (layerHolder) {
        return _react.default.createElement(BareMarker, _extends({}, this.props, {
          markableHolder: layerHolder
        }));
      } else {
        return _react.default.createElement(_atomTextEditor.TextEditorContext.Consumer, null, editorHolder => _react.default.createElement(BareMarker, _extends({}, this.props, {
          markableHolder: editorHolder
        })));
      }
    });
  }
}
exports.default = Marker;
_defineProperty(Marker, "propTypes", {
  editor: MarkablePropType,
  layer: MarkablePropType
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXJrYWJsZVByb3BUeXBlIiwiUHJvcFR5cGVzIiwic2hhcGUiLCJtYXJrQnVmZmVyUmFuZ2UiLCJmdW5jIiwiaXNSZXF1aXJlZCIsIm1hcmtlclByb3BzIiwiZXhjbHVzaXZlIiwiYm9vbCIsInJldmVyc2VkIiwiaW52YWxpZGF0ZSIsIm9uZU9mIiwiTWFya2VyQ29udGV4dCIsIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsIkRlY29yYWJsZUNvbnRleHQiLCJCYXJlTWFya2VyIiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsImF1dG9iaW5kIiwibWFya2VyU3VicyIsIkNvbXBvc2l0ZURpc3Bvc2FibGUiLCJzdWJzIiwibWFya2VySG9sZGVyIiwiUmVmSG9sZGVyIiwib2JzZXJ2ZSIsIm1hcmtlciIsImhhbmRsZU1hcmtlciIsImRlY29yYWJsZSIsImhvbGRlciIsImRlY29yYXRlTWV0aG9kIiwiY29tcG9uZW50RGlkTW91bnQiLCJvYnNlcnZlTWFya2FibGUiLCJyZW5kZXIiLCJjaGlsZHJlbiIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsIm1hcmthYmxlSG9sZGVyIiwiT2JqZWN0Iiwia2V5cyIsInNvbWUiLCJrZXkiLCJtYXAiLCJzZXRQcm9wZXJ0aWVzIiwiZXh0cmFjdFByb3BzIiwidXBkYXRlTWFya2VyUG9zaXRpb24iLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImRpc3Bvc2UiLCJhZGQiLCJjcmVhdGVNYXJrZXIiLCJvcHRpb25zIiwibWFya2FibGUiLCJpZCIsInVuZGVmaW5lZCIsImdldE1hcmtlciIsIkVycm9yIiwiYnVmZmVyUmFuZ2UiLCJEaXNwb3NhYmxlIiwiZGVzdHJveSIsIm9uRGlkQ2hhbmdlIiwiZGlkQ2hhbmdlIiwic2V0dGVyIiwiaGFuZGxlSUQiLCJzZXRCdWZmZXJSYW5nZSIsImV2ZW50IiwiaXNSZXZlcnNlZCIsImdldE9yIiwib2xkQnVmZmVyU3RhcnRQb3NpdGlvbiIsIm9sZEhlYWRCdWZmZXJQb3NpdGlvbiIsIm9sZFRhaWxCdWZmZXJQb3NpdGlvbiIsIm9sZEJ1ZmZlckVuZFBvc2l0aW9uIiwibmV3QnVmZmVyU3RhcnRQb3NpdGlvbiIsIm5ld0hlYWRCdWZmZXJQb3NpdGlvbiIsIm5ld1RhaWxCdWZmZXJQb3NpdGlvbiIsIm5ld0J1ZmZlckVuZFBvc2l0aW9uIiwib2xkUmFuZ2UiLCJSYW5nZSIsIm5ld1JhbmdlIiwibnVtYmVyIiwiUmFuZ2VQcm9wVHlwZSIsIlJlZkhvbGRlclByb3BUeXBlIiwibm9kZSIsIk1hcmtlciIsInN0YXRlIiwib24iLCJsYXllciIsImVkaXRvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm0iLCJpc0VtcHR5IiwibGF5ZXJIb2xkZXIiLCJlZGl0b3JIb2xkZXIiXSwic291cmNlcyI6WyJtYXJrZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge0NvbXBvc2l0ZURpc3Bvc2FibGUsIERpc3Bvc2FibGV9IGZyb20gJ2V2ZW50LWtpdCc7XG5cbmltcG9ydCB7YXV0b2JpbmQsIGV4dHJhY3RQcm9wc30gZnJvbSAnLi4vaGVscGVycyc7XG5pbXBvcnQge1JlZkhvbGRlclByb3BUeXBlLCBSYW5nZVByb3BUeXBlfSBmcm9tICcuLi9wcm9wLXR5cGVzJztcbmltcG9ydCBSZWZIb2xkZXIgZnJvbSAnLi4vbW9kZWxzL3JlZi1ob2xkZXInO1xuaW1wb3J0IHtUZXh0RWRpdG9yQ29udGV4dH0gZnJvbSAnLi9hdG9tLXRleHQtZWRpdG9yJztcbmltcG9ydCB7TWFya2VyTGF5ZXJDb250ZXh0fSBmcm9tICcuL21hcmtlci1sYXllcic7XG5cbmNvbnN0IE1hcmthYmxlUHJvcFR5cGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBtYXJrQnVmZmVyUmFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59KTtcblxuY29uc3QgbWFya2VyUHJvcHMgPSB7XG4gIGV4Y2x1c2l2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIHJldmVyc2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgaW52YWxpZGF0ZTogUHJvcFR5cGVzLm9uZU9mKFsnbmV2ZXInLCAnc3Vycm91bmQnLCAnb3ZlcmxhcCcsICdpbnNpZGUnLCAndG91Y2gnXSksXG59O1xuXG5leHBvcnQgY29uc3QgTWFya2VyQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoKTtcblxuZXhwb3J0IGNvbnN0IERlY29yYWJsZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5cbmNsYXNzIEJhcmVNYXJrZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC4uLm1hcmtlclByb3BzLFxuICAgIGlkOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGJ1ZmZlclJhbmdlOiBSYW5nZVByb3BUeXBlLFxuICAgIG1hcmthYmxlSG9sZGVyOiBSZWZIb2xkZXJQcm9wVHlwZSxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgb25EaWRDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhbmRsZUlEOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYW5kbGVNYXJrZXI6IFByb3BUeXBlcy5mdW5jLFxuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBvbkRpZENoYW5nZTogKCkgPT4ge30sXG4gICAgaGFuZGxlSUQ6ICgpID0+IHt9LFxuICAgIGhhbmRsZU1hcmtlcjogKCkgPT4ge30sXG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIGF1dG9iaW5kKHRoaXMsICdjcmVhdGVNYXJrZXInLCAnZGlkQ2hhbmdlJyk7XG5cbiAgICB0aGlzLm1hcmtlclN1YnMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xuICAgIHRoaXMuc3VicyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKCk7XG5cbiAgICB0aGlzLm1hcmtlckhvbGRlciA9IG5ldyBSZWZIb2xkZXIoKTtcbiAgICB0aGlzLm1hcmtlckhvbGRlci5vYnNlcnZlKG1hcmtlciA9PiB7XG4gICAgICB0aGlzLnByb3BzLmhhbmRsZU1hcmtlcihtYXJrZXIpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5kZWNvcmFibGUgPSB7XG4gICAgICBob2xkZXI6IHRoaXMubWFya2VySG9sZGVyLFxuICAgICAgZGVjb3JhdGVNZXRob2Q6ICdkZWNvcmF0ZU1hcmtlcicsXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMub2JzZXJ2ZU1hcmthYmxlKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxNYXJrZXJDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt0aGlzLm1hcmtlckhvbGRlcn0+XG4gICAgICAgIDxEZWNvcmFibGVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt0aGlzLmRlY29yYWJsZX0+XG4gICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgIDwvRGVjb3JhYmxlQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgIDwvTWFya2VyQ29udGV4dC5Qcm92aWRlcj5cbiAgICApO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmIChwcmV2UHJvcHMubWFya2FibGVIb2xkZXIgIT09IHRoaXMucHJvcHMubWFya2FibGVIb2xkZXIpIHtcbiAgICAgIHRoaXMub2JzZXJ2ZU1hcmthYmxlKCk7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKG1hcmtlclByb3BzKS5zb21lKGtleSA9PiBwcmV2UHJvcHNba2V5XSAhPT0gdGhpcy5wcm9wc1trZXldKSkge1xuICAgICAgdGhpcy5tYXJrZXJIb2xkZXIubWFwKG1hcmtlciA9PiBtYXJrZXIuc2V0UHJvcGVydGllcyhleHRyYWN0UHJvcHModGhpcy5wcm9wcywgbWFya2VyUHJvcHMpKSk7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVNYXJrZXJQb3NpdGlvbigpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5zdWJzLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIG9ic2VydmVNYXJrYWJsZSgpIHtcbiAgICB0aGlzLnN1YnMuZGlzcG9zZSgpO1xuICAgIHRoaXMuc3VicyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKCk7XG4gICAgdGhpcy5zdWJzLmFkZCh0aGlzLnByb3BzLm1hcmthYmxlSG9sZGVyLm9ic2VydmUodGhpcy5jcmVhdGVNYXJrZXIpKTtcbiAgfVxuXG4gIGNyZWF0ZU1hcmtlcigpIHtcbiAgICB0aGlzLm1hcmtlclN1YnMuZGlzcG9zZSgpO1xuICAgIHRoaXMubWFya2VyU3VicyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKCk7XG4gICAgdGhpcy5zdWJzLmFkZCh0aGlzLm1hcmtlclN1YnMpO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IGV4dHJhY3RQcm9wcyh0aGlzLnByb3BzLCBtYXJrZXJQcm9wcyk7XG5cbiAgICB0aGlzLnByb3BzLm1hcmthYmxlSG9sZGVyLm1hcChtYXJrYWJsZSA9PiB7XG4gICAgICBsZXQgbWFya2VyO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1hcmtlciA9IG1hcmthYmxlLmdldE1hcmtlcih0aGlzLnByb3BzLmlkKTtcbiAgICAgICAgaWYgKCFtYXJrZXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbWFya2VyIElEOiAke3RoaXMucHJvcHMuaWR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgbWFya2VyLnNldFByb3BlcnRpZXMob3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXJrZXIgPSBtYXJrYWJsZS5tYXJrQnVmZmVyUmFuZ2UodGhpcy5wcm9wcy5idWZmZXJSYW5nZSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMubWFya2VyU3Vicy5hZGQobmV3IERpc3Bvc2FibGUoKCkgPT4gbWFya2VyLmRlc3Ryb3koKSkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm1hcmtlclN1YnMuYWRkKG1hcmtlci5vbkRpZENoYW5nZSh0aGlzLmRpZENoYW5nZSkpO1xuICAgICAgdGhpcy5tYXJrZXJIb2xkZXIuc2V0dGVyKG1hcmtlcik7XG4gICAgICB0aGlzLnByb3BzLmhhbmRsZUlEKG1hcmtlci5pZCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZU1hcmtlclBvc2l0aW9uKCkge1xuICAgIHRoaXMubWFya2VySG9sZGVyLm1hcChtYXJrZXIgPT4gbWFya2VyLnNldEJ1ZmZlclJhbmdlKHRoaXMucHJvcHMuYnVmZmVyUmFuZ2UpKTtcbiAgfVxuXG4gIGRpZENoYW5nZShldmVudCkge1xuICAgIGNvbnN0IHJldmVyc2VkID0gdGhpcy5tYXJrZXJIb2xkZXIubWFwKG1hcmtlciA9PiBtYXJrZXIuaXNSZXZlcnNlZCgpKS5nZXRPcihmYWxzZSk7XG5cbiAgICBjb25zdCBvbGRCdWZmZXJTdGFydFBvc2l0aW9uID0gcmV2ZXJzZWQgPyBldmVudC5vbGRIZWFkQnVmZmVyUG9zaXRpb24gOiBldmVudC5vbGRUYWlsQnVmZmVyUG9zaXRpb247XG4gICAgY29uc3Qgb2xkQnVmZmVyRW5kUG9zaXRpb24gPSByZXZlcnNlZCA/IGV2ZW50Lm9sZFRhaWxCdWZmZXJQb3NpdGlvbiA6IGV2ZW50Lm9sZEhlYWRCdWZmZXJQb3NpdGlvbjtcblxuICAgIGNvbnN0IG5ld0J1ZmZlclN0YXJ0UG9zaXRpb24gPSByZXZlcnNlZCA/IGV2ZW50Lm5ld0hlYWRCdWZmZXJQb3NpdGlvbiA6IGV2ZW50Lm5ld1RhaWxCdWZmZXJQb3NpdGlvbjtcbiAgICBjb25zdCBuZXdCdWZmZXJFbmRQb3NpdGlvbiA9IHJldmVyc2VkID8gZXZlbnQubmV3VGFpbEJ1ZmZlclBvc2l0aW9uIDogZXZlbnQubmV3SGVhZEJ1ZmZlclBvc2l0aW9uO1xuXG4gICAgdGhpcy5wcm9wcy5vbkRpZENoYW5nZSh7XG4gICAgICBvbGRSYW5nZTogbmV3IFJhbmdlKG9sZEJ1ZmZlclN0YXJ0UG9zaXRpb24sIG9sZEJ1ZmZlckVuZFBvc2l0aW9uKSxcbiAgICAgIG5ld1JhbmdlOiBuZXcgUmFuZ2UobmV3QnVmZmVyU3RhcnRQb3NpdGlvbiwgbmV3QnVmZmVyRW5kUG9zaXRpb24pLFxuICAgICAgLi4uZXZlbnQsXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFya2VyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBlZGl0b3I6IE1hcmthYmxlUHJvcFR5cGUsXG4gICAgbGF5ZXI6IE1hcmthYmxlUHJvcFR5cGUsXG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBtYXJrYWJsZUhvbGRlcjogUmVmSG9sZGVyLm9uKHByb3BzLmxheWVyIHx8IHByb3BzLmVkaXRvciksXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgY29uc3QgbWFya2FibGUgPSBwcm9wcy5sYXllciB8fCBwcm9wcy5lZGl0b3I7XG5cbiAgICBpZiAoc3RhdGUubWFya2FibGVIb2xkZXIubWFwKG0gPT4gbSA9PT0gbWFya2FibGUpLmdldE9yKG1hcmthYmxlID09PSB1bmRlZmluZWQpKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1hcmthYmxlSG9sZGVyOiBSZWZIb2xkZXIub24obWFya2FibGUpLFxuICAgIH07XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLm1hcmthYmxlSG9sZGVyLmlzRW1wdHkoKSkge1xuICAgICAgcmV0dXJuIDxCYXJlTWFya2VyIHsuLi50aGlzLnByb3BzfSBtYXJrYWJsZUhvbGRlcj17dGhpcy5zdGF0ZS5tYXJrYWJsZUhvbGRlcn0gLz47XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxNYXJrZXJMYXllckNvbnRleHQuQ29uc3VtZXI+XG4gICAgICAgIHtsYXllckhvbGRlciA9PiB7XG4gICAgICAgICAgaWYgKGxheWVySG9sZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gPEJhcmVNYXJrZXIgey4uLnRoaXMucHJvcHN9IG1hcmthYmxlSG9sZGVyPXtsYXllckhvbGRlcn0gLz47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxUZXh0RWRpdG9yQ29udGV4dC5Db25zdW1lcj5cbiAgICAgICAgICAgICAgICB7ZWRpdG9ySG9sZGVyID0+IDxCYXJlTWFya2VyIHsuLi50aGlzLnByb3BzfSBtYXJrYWJsZUhvbGRlcj17ZWRpdG9ySG9sZGVyfSAvPn1cbiAgICAgICAgICAgICAgPC9UZXh0RWRpdG9yQ29udGV4dC5Db25zdW1lcj5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9fVxuICAgICAgPC9NYXJrZXJMYXllckNvbnRleHQuQ29uc3VtZXI+XG4gICAgKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQWtEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRWxELE1BQU1BLGdCQUFnQixHQUFHQyxrQkFBUyxDQUFDQyxLQUFLLENBQUM7RUFDdkNDLGVBQWUsRUFBRUYsa0JBQVMsQ0FBQ0csSUFBSSxDQUFDQztBQUNsQyxDQUFDLENBQUM7QUFFRixNQUFNQyxXQUFXLEdBQUc7RUFDbEJDLFNBQVMsRUFBRU4sa0JBQVMsQ0FBQ08sSUFBSTtFQUN6QkMsUUFBUSxFQUFFUixrQkFBUyxDQUFDTyxJQUFJO0VBQ3hCRSxVQUFVLEVBQUVU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