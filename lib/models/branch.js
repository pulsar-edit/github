"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nullBranch = exports.default = void 0;
const DETACHED = Symbol('detached');
const REMOTE_TRACKING = Symbol('remote-tracking');
class Branch {
  constructor(name, upstream = nullBranch, push = upstream, head = false, attributes = {}) {
    this.name = name;
    this.upstream = upstream;
    this.push = push;
    this.head = head;
    this.attributes = attributes;
  }
  static createDetached(describe) {
    return new Branch(describe, nullBranch, nullBranch, true, {
      [DETACHED]: true
    });
  }
  static createRemoteTracking(refName, remoteName, remoteRef) {
    return new Branch(refName, nullBranch, nullBranch, false, {
      [REMOTE_TRACKING]: {
        remoteName,
        remoteRef
      }
    });
  }
  getName() {
    return this.name;
  }
  getShortRef() {
    return this.getName().replace(/^(refs\/)?((heads|remotes)\/)?/, '');
  }
  getFullRef() {
    if (this.isDetached()) {
      return '';
    }
    if (this.isRemoteTracking()) {
      if (this.name.startsWith('refs/')) {
        return this.name;
      } else if (this.name.startsWith('remotes/')) {
        return `refs/${this.name}`;
      }
      return `refs/remotes/${this.name}`;
    }
    if (this.name.startsWith('refs/')) {
      return this.name;
    } else if (this.name.startsWith('heads/')) {
      return `refs/${this.name}`;
    } else {
      return `refs/heads/${this.name}`;
    }
  }
  getRemoteName() {
    if (!this.isRemoteTracking()) {
      return '';
    }
    return this.attributes[REMOTE_TRACKING].remoteName || '';
  }
  getRemoteRef() {
    if (!this.isRemoteTracking()) {
      return '';
    }
    return this.attributes[REMOTE_TRACKING].remoteRef || '';
  }
  getShortRemoteRef() {
    return this.getRemoteRef().replace(/^(refs\/)?((heads|remotes)\/)?/, '');
  }
  getRefSpec(action) {
    if (this.isRemoteTracking()) {
      return '';
    }
    const remoteBranch = action === 'PUSH' ? this.push : this.upstream;
    const remoteBranchName = remoteBranch.getShortRemoteRef();
    const localBranchName = this.getName();
    if (remoteBranchName && remoteBranchName !== localBranchName) {
      if (action === 'PUSH') {
        return `${localBranchName}:${remoteBranchName}`;
      } else if (action === 'PULL') {
        return `${remoteBranchName}:${localBranchName}`;
      }
    }
    return localBranchName;
  }
  getSha() {
    return this.attributes.sha || '';
  }
  getUpstream() {
    return this.upstream;
  }
  getPush() {
    return this.push;
  }
  isHead() {
    return this.head;
  }
  isDetached() {
    return this.attributes[DETACHED] !== undefined;
  }
  isRemoteTracking() {
    return this.attributes[REMOTE_TRACKING] !== undefined;
  }
  isPresent() {
    return true;
  }
}
exports.default = Branch;
const nullBranch = {
  getName() {
    return '';
  },
  getShortRef() {
    return '';
  },
  getFullRef() {
    return '';
  },
  getSha() {
    return '';
  },
  getUpstream() {
    return this;
  },
  getPush() {
    return this;
  },
  isHead() {
    return false;
  },
  getRemoteName() {
    return '';
  },
  getRemoteRef() {
    return '';
  },
  getShortRemoteRef() {
    return '';
  },
  isDetached() {
    return false;
  },
  isRemoteTracking() {
    return false;
  },
  isPresent() {
    return false;
  },
  inspect(depth, options) {
    return '{nullBranch}';
  }
};
exports.nullBranch = nullBranch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERVRBQ0hFRCIsIlN5bWJvbCIsIlJFTU9URV9UUkFDS0lORyIsIkJyYW5jaCIsImNvbnN0cnVjdG9yIiwibmFtZSIsInVwc3RyZWFtIiwibnVsbEJyYW5jaCIsInB1c2giLCJoZWFkIiwiYXR0cmlidXRlcyIsImNyZWF0ZURldGFjaGVkIiwiZGVzY3JpYmUiLCJjcmVhdGVSZW1vdGVUcmFja2luZyIsInJlZk5hbWUiLCJyZW1vdGVOYW1lIiwicmVtb3RlUmVmIiwiZ2V0TmFtZSIsImdldFNob3J0UmVmIiwicmVwbGFjZSIsImdldEZ1bGxSZWYiLCJpc0RldGFjaGVkIiwiaXNSZW1vdGVUcmFja2luZyIsInN0YXJ0c1dpdGgiLCJnZXRSZW1vdGVOYW1lIiwiZ2V0UmVtb3RlUmVmIiwiZ2V0U2hvcnRSZW1vdGVSZWYiLCJnZXRSZWZTcGVjIiwiYWN0aW9uIiwicmVtb3RlQnJhbmNoIiwicmVtb3RlQnJhbmNoTmFtZSIsImxvY2FsQnJhbmNoTmFtZSIsImdldFNoYSIsInNoYSIsImdldFVwc3RyZWFtIiwiZ2V0UHVzaCIsImlzSGVhZCIsInVuZGVmaW5lZCIsImlzUHJlc2VudCIsImV4cG9ydHMiLCJkZWZhdWx0IiwiaW5zcGVjdCIsImRlcHRoIiwib3B0aW9ucyJdLCJzb3VyY2VzIjpbImJyYW5jaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBERVRBQ0hFRCA9IFN5bWJvbCgnZGV0YWNoZWQnKTtcbmNvbnN0IFJFTU9URV9UUkFDS0lORyA9IFN5bWJvbCgncmVtb3RlLXRyYWNraW5nJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYW5jaCB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIHVwc3RyZWFtID0gbnVsbEJyYW5jaCwgcHVzaCA9IHVwc3RyZWFtLCBoZWFkID0gZmFsc2UsIGF0dHJpYnV0ZXMgPSB7fSkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy51cHN0cmVhbSA9IHVwc3RyZWFtO1xuICAgIHRoaXMucHVzaCA9IHB1c2g7XG4gICAgdGhpcy5oZWFkID0gaGVhZDtcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZURldGFjaGVkKGRlc2NyaWJlKSB7XG4gICAgcmV0dXJuIG5ldyBCcmFuY2goZGVzY3JpYmUsIG51bGxCcmFuY2gsIG51bGxCcmFuY2gsIHRydWUsIHtbREVUQUNIRURdOiB0cnVlfSk7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlUmVtb3RlVHJhY2tpbmcocmVmTmFtZSwgcmVtb3RlTmFtZSwgcmVtb3RlUmVmKSB7XG4gICAgcmV0dXJuIG5ldyBCcmFuY2gocmVmTmFtZSwgbnVsbEJyYW5jaCwgbnVsbEJyYW5jaCwgZmFsc2UsIHtbUkVNT1RFX1RSQUNLSU5HXToge3JlbW90ZU5hbWUsIHJlbW90ZVJlZn19KTtcbiAgfVxuXG4gIGdldE5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgfVxuXG4gIGdldFNob3J0UmVmKCkge1xuICAgIHJldHVybiB0aGlzLmdldE5hbWUoKS5yZXBsYWNlKC9eKHJlZnNcXC8pPygoaGVhZHN8cmVtb3RlcylcXC8pPy8sICcnKTtcbiAgfVxuXG4gIGdldEZ1bGxSZWYoKSB7XG4gICAgaWYgKHRoaXMuaXNEZXRhY2hlZCgpKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNSZW1vdGVUcmFja2luZygpKSB7XG4gICAgICBpZiAodGhpcy5uYW1lLnN0YXJ0c1dpdGgoJ3JlZnMvJykpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5uYW1lLnN0YXJ0c1dpdGgoJ3JlbW90ZXMvJykpIHtcbiAgICAgICAgcmV0dXJuIGByZWZzLyR7dGhpcy5uYW1lfWA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYHJlZnMvcmVtb3Rlcy8ke3RoaXMubmFtZX1gO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm5hbWUuc3RhcnRzV2l0aCgncmVmcy8nKSkge1xuICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubmFtZS5zdGFydHNXaXRoKCdoZWFkcy8nKSkge1xuICAgICAgcmV0dXJuIGByZWZzLyR7dGhpcy5uYW1lfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBgcmVmcy9oZWFkcy8ke3RoaXMubmFtZX1gO1xuICAgIH1cbiAgfVxuXG4gIGdldFJlbW90ZU5hbWUoKSB7XG4gICAgaWYgKCF0aGlzLmlzUmVtb3RlVHJhY2tpbmcoKSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW1JFTU9URV9UUkFDS0lOR10ucmVtb3RlTmFtZSB8fCAnJztcbiAgfVxuXG4gIGdldFJlbW90ZVJlZigpIHtcbiAgICBpZiAoIXRoaXMuaXNSZW1vdGVUcmFja2luZygpKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbUkVNT1RFX1RSQUNLSU5HXS5yZW1vdGVSZWYgfHwgJyc7XG4gIH1cblxuICBnZXRTaG9ydFJlbW90ZVJlZigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRSZW1vdGVSZWYoKS5yZXBsYWNlKC9eKHJlZnNcXC8pPygoaGVhZHN8cmVtb3RlcylcXC8pPy8sICcnKTtcbiAgfVxuXG4gIGdldFJlZlNwZWMoYWN0aW9uKSB7XG4gICAgaWYgKHRoaXMuaXNSZW1vdGVUcmFja2luZygpKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGNvbnN0IHJlbW90ZUJyYW5jaCA9IGFjdGlvbiA9PT0gJ1BVU0gnID8gdGhpcy5wdXNoIDogdGhpcy51cHN0cmVhbTtcbiAgICBjb25zdCByZW1vdGVCcmFuY2hOYW1lID0gcmVtb3RlQnJhbmNoLmdldFNob3J0UmVtb3RlUmVmKCk7XG4gICAgY29uc3QgbG9jYWxCcmFuY2hOYW1lID0gdGhpcy5nZXROYW1lKCk7XG4gICAgaWYgKHJlbW90ZUJyYW5jaE5hbWUgJiYgcmVtb3RlQnJhbmNoTmFtZSAhPT0gbG9jYWxCcmFuY2hOYW1lKSB7XG4gICAgICBpZiAoYWN0aW9uID09PSAnUFVTSCcpIHtcbiAgICAgICAgcmV0dXJuIGAke2xvY2FsQnJhbmNoTmFtZX06JHtyZW1vdGVCcmFuY2hOYW1lfWA7XG4gICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gJ1BVTEwnKSB7XG4gICAgICAgIHJldHVybiBgJHtyZW1vdGVCcmFuY2hOYW1lfToke2xvY2FsQnJhbmNoTmFtZX1gO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG9jYWxCcmFuY2hOYW1lO1xuICB9XG5cbiAgZ2V0U2hhKCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuc2hhIHx8ICcnO1xuICB9XG5cbiAgZ2V0VXBzdHJlYW0oKSB7XG4gICAgcmV0dXJuIHRoaXMudXBzdHJlYW07XG4gIH1cblxuICBnZXRQdXNoKCkge1xuICAgIHJldHVybiB0aGlzLnB1c2g7XG4gIH1cblxuICBpc0hlYWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVhZDtcbiAgfVxuXG4gIGlzRGV0YWNoZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlc1tERVRBQ0hFRF0gIT09IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlzUmVtb3RlVHJhY2tpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlc1tSRU1PVEVfVFJBQ0tJTkddICE9PSB1bmRlZmluZWQ7XG4gIH1cblxuICBpc1ByZXNlbnQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxufVxuXG5leHBvcnQgY29uc3QgbnVsbEJyYW5jaCA9IHtcbiAgZ2V0TmFtZSgpIHtcbiAgICByZXR1cm4gJyc7XG4gIH0sXG5cbiAgZ2V0U2hvcnRSZWYoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9LFxuXG4gIGdldEZ1bGxSZWYoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9LFxuXG4gIGdldFNoYSgpIHtcbiAgICByZXR1cm4gJyc7XG4gIH0sXG5cbiAgZ2V0VXBzdHJlYW0oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgZ2V0UHVzaCgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBpc0hlYWQoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGdldFJlbW90ZU5hbWUoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9LFxuXG4gIGdldFJlbW90ZVJlZigpIHtcbiAgICByZXR1cm4gJyc7XG4gIH0sXG5cbiAgZ2V0U2hvcnRSZW1vdGVSZWYoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9LFxuXG4gIGlzRGV0YWNoZWQoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGlzUmVtb3RlVHJhY2tpbmcoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGlzUHJlc2VudCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgaW5zcGVjdChkZXB0aCwgb3B0aW9ucykge1xuICAgIHJldHVybiAne251bGxCcmFuY2h9JztcbiAgfSxcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE1BQU1BLFFBQVEsR0FBR0MsTUFBTSxDQUFDLFVBQVUsQ0FBQztBQUNuQyxNQUFNQyxlQUFlLEdBQUdELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQztBQUVsQyxNQUFNRSxNQUFNLENBQUM7RUFDMUJDLFdBQVdBLENBQUNDLElBQUksRUFBRUMsUUFBUSxHQUFHQyxVQUFVLEVBQUVDLElBQUksR0FBR0YsUUFBUSxFQUFFRyxJQUFJLEdBQUcsS0FBSyxFQUFFQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLEVBQUU7SUFDdkYsSUFBSSxDQUFDTCxJQUFJLEdBQUdBLElBQUk7SUFDaEIsSUFBSSxDQUFDQyxRQUFRLEdBQUdBLFFBQVE7SUFDeEIsSUFBSSxDQUFDRSxJQUFJLEdBQUdBLElBQUk7SUFDaEIsSUFBSSxDQUFDQyxJQUFJLEdBQUdBLElBQUk7SUFDaEIsSUFBSSxDQUFDQyxVQUFVLEdBQUdBLFVBQVU7RUFDOUI7RUFFQSxPQUFPQyxjQUFjQSxDQUFDQyxRQUFRLEVBQUU7SUFDOUIsT0FBTyxJQUFJVCxNQUFNLENBQUNTLFFBQVEsRUFBRUwsVUFBVSxFQUFFQSxVQUFVLEVBQUUsSUFBSSxFQUFFO01BQUMsQ0FBQ1AsUUFBUSxHQUFHO0lBQUksQ0FBQyxDQUFDO0VBQy9FO0VBRUEsT0FBT2Esb0JBQW9CQSxDQUFDQyxPQUFPLEVBQUVDLFVBQVUsRUFBRUMsU0FBUyxFQUFFO0lBQzFELE9BQU8sSUFBSWIsTUFBTSxDQUFDVyxPQUFPLEVBQUVQLFVBQVUsRUFBRUEsVUFBVSxFQUFFLEtBQUssRUFBRTtNQUFDLENBQUNMLGVBQWUsR0FBRztRQUFDYSxVQUFVO1FBQUVDO01BQVM7SUFBQyxDQUFDLENBQUM7RUFDekc7RUFFQUMsT0FBT0EsQ0FBQSxFQUFHO0lBQ1IsT0FBTyxJQUFJLENBQUNaLElBQUk7RUFDbEI7RUFFQWEsV0FBV0EsQ0FBQSxFQUFHO0lBQ1osT0FBTyxJQUFJLENBQUNELE9BQU8sQ0FBQyxDQUFDLENBQUNFLE9BQU8sQ0FBQyxnQ0FBZ0MsRUFBRSxFQUFFLENBQUM7RUFDckU7RUFFQUMsVUFBVUEsQ0FBQSxFQUFHO0lBQ1gsSUFBSSxJQUFJLENBQUNDLFVBQVUsQ0FBQyxDQUFDLEVBQUU7TUFDckIsT0FBTyxFQUFFO0lBQ1g7SUFFQSxJQUFJLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFO01BQzNCLElBQUksSUFBSSxDQUFDakIsSUFBSSxDQUFDa0IsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ2pDLE9BQU8sSUFBSSxDQUFDbEIsSUFBSTtNQUNsQixDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUNBLElBQUksQ0FBQ2tCLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUMzQyxPQUFRLFFBQU8sSUFBSSxDQUFDbEIsSUFBSyxFQUFDO01BQzVCO01BQ0EsT0FBUSxnQkFBZSxJQUFJLENBQUNBLElBQUssRUFBQztJQUNwQztJQUVBLElBQUksSUFBSSxDQUFDQSxJQUFJLENBQUNrQixVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7TUFDakMsT0FBTyxJQUFJLENBQUNsQixJQUFJO0lBQ2xCLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQ0EsSUFBSSxDQUFDa0IsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO01BQ3pDLE9BQVEsUUFBTyxJQUFJLENBQUNsQixJQUFLLEVBQUM7SUFDNUIsQ0FBQyxNQUFNO01BQ0wsT0FBUSxjQUFhLElBQUksQ0FBQ0EsSUFBSyxFQUFDO0lBQ2xDO0VBQ0Y7RUFFQW1CLGFBQWFBLENBQUEsRUFBRztJQUNkLElBQUksQ0FBQyxJQUFJLENBQUNGLGdCQUFnQixDQUFDLENBQUMsRUFBRTtNQUM1QixPQUFPLEVBQUU7SUFDWDtJQUNBLE9BQU8sSUFBSSxDQUFDWixVQUFVLENBQUNSLGVBQWUsQ0FBQyxDQUFDYSxVQUFVLElBQUksRUFBRTtFQUMxRDtFQUVBVSxZQUFZQSxDQUFBLEVBQUc7SUFDYixJQUFJLENBQUMsSUFBSSxDQUFDSCxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUU7TUFDNUIsT0FBTyxFQUFFO0lBQ1g7SUFDQSxPQUFPLElBQUksQ0FBQ1osVUFBVSxDQUFDUixlQUFlLENBQUMsQ0FBQ2MsU0FBUyxJQUFJLEVBQUU7RUFDekQ7RUFFQVUsaUJBQWlCQSxDQUFBLEVBQUc7SUFDbEIsT0FBTyxJQUFJLENBQUNELFlBQVksQ0FBQyxDQUFDLENBQUNOLE9BQU8sQ0FBQyxnQ0FBZ0MsRUFBRSxFQUFFLENBQUM7RUFDMUU7RUFFQVEsVUFBVUEsQ0FBQ0MsTUFBTSxFQUFFO0lBQ2pCLElBQUksSUFBSSxDQUFDTixnQkFBZ0IsQ0FBQyxDQUFDLEVBQUU7TUFDM0IsT0FBTyxFQUFFO0lBQ1g7SUFDQSxNQUFNTyxZQUFZLEdBQUdELE1BQU0sS0FBSyxNQUFNLEdBQUcsSUFBSSxDQUFDcEIsSUFBSSxHQUFHLElBQUksQ0FBQ0YsUUFBUTtJQUNsRSxNQUFNd0IsZ0JBQWdCLEdBQUdELFlBQVksQ0FBQ0gsaUJBQWlCLENBQUMsQ0FBQztJQUN6RCxNQUFNSyxlQUFlLEdBQUcsSUFBSSxDQUFDZCxPQUFPLENBQUMsQ0FBQztJQUN0QyxJQUFJYSxnQkFBZ0IsSUFBSUEsZ0JBQWdCLEtBQUtDLGVBQWUsRUFBRTtNQUM1RCxJQUFJSCxNQUFNLEtBQUssTUFBTSxFQUFFO1FBQ3JCLE9BQVEsR0FBRUcsZUFBZ0IsSUFBR0QsZ0JBQWlCLEVBQUM7TUFDakQsQ0FBQyxNQUFNLElBQUlGLE1BQU0sS0FBSyxNQUFNLEVBQUU7UUFDNUIsT0FBUSxHQUFFRSxnQkFBaUIsSUFBR0MsZUFBZ0IsRUFBQztNQUNqRDtJQUNGO0lBQ0EsT0FBT0EsZUFBZTtFQUN4QjtFQUVBQyxNQUFNQSxDQUFBLEVBQUc7SUFDUCxPQUFPLElBQUksQ0FBQ3RCLFVBQVUsQ0FBQ3VCLEdBQUcsSUFBSSxFQUFFO0VBQ2xDO0VBRUFDLFdBQVdBLENBQUEsRUFBRztJQUNaLE9BQU8sSUFBSSxDQUFDNUIsUUFBUTtFQUN0QjtFQUVBNkIsT0FBT0EsQ0FBQSxFQUFHO0lBQ1IsT0FBTyxJQUFJLENBQUMzQixJQUFJO0VBQ2xCO0VBRUE0QixNQUFNQSxDQUFBLEVBQUc7SUFDUCxPQUFPLElBQUksQ0FBQzNCLElBQUk7RUFDbEI7RUFFQVksVUFBVUEsQ0FBQSxFQUFHO0lBQ1gsT0FBTyxJQUFJLENBQUNYLFVBQVUsQ0FBQ1YsUUFBUSxDQUFDLEtBQUtxQyxTQUFTO0VBQ2hEO0VBRUFmLGdCQUFnQkEsQ0FBQSxFQUFHO0lBQ2pCLE9BQU8sSUFBSSxDQUFDWixVQUFVLENBQUNSLGVBQWUsQ0FBQyxLQUFLbUMsU0FBUztFQUN2RDtFQUVBQyxTQUFTQSxDQUFBLEVBQUc7SUFDVixPQUFPLElBQUk7RUFDYjtBQUVGO0FBQUNDLE9BQUEsQ0FBQUMsT0FBQSxHQUFBckMsTUFBQTtBQUVNLE1BQU1JLFVBQVUsR0FBRztFQUN4QlUsT0FBT0EsQ0FBQSxFQUFHO0lBQ1IsT0FBTyxFQUFFO0VBQ1gsQ0FBQztFQUVEQyxXQUFXQSxDQUFBLEVBQUc7SUFDWixPQUFPLEVBQUU7RUFDWCxDQUFDO0VBRURFLFVBQVVBLENBQUEsRUFBRztJQUNYLE9BQU8sRUFBRTtFQUNYLENBQUM7RUFFRFksTUFBTUEsQ0FBQSxFQUFHO0lBQ1AsT0FBTyxFQUFFO0VBQ1gsQ0FBQztFQUVERSxXQUFXQSxDQUFBLEVBQUc7SUFDWixPQUFPLElBQUk7RUFDYixDQUFDO0VBRURDLE9BQU9BLENBQUEsRUFBRztJQUNSLE9BQU8sSUFBSTtFQUNiLENBQUM7RUFFREMsTUFBTUEsQ0FBQSxFQUFHO0lBQ1AsT0FBTyxLQUFLO0VBQ2QsQ0FBQztFQUVEWixhQUFhQSxDQUFBLEVBQUc7SUFDZCxPQUFPLEVBQUU7RUFDWCxDQUFDO0VBRURDLFlBQVlBLENBQUEsRUFBRztJQUNiLE9BQU8sRUFBRTtFQUNYLENBQUM7RUFFREMsaUJBQWlCQSxDQUFBLEVBQUc7SUFDbEIsT0FBTyxFQUFFO0VBQ1gsQ0FBQztFQUVETCxVQUFVQSxDQUFBLEVBQUc7SUFDWCxPQUFPLEtBQUs7RUFDZCxDQUFDO0VBRURDLGdCQUFnQkEsQ0FBQSxFQUFHO0lBQ2pCLE9BQU8sS0FBSztFQUNkLENBQUM7RUFFRGdCLFNBQVNBLENBQUEsRUFBRztJQUNWLE9BQU8sS0FBSztFQUNkLENBQUM7RUFFREcsT0FBT0EsQ0FBQ0MsS0FBSyxFQUFFQyxPQUFPLEVBQUU7SUFDdEIsT0FBTyxjQUFjO0VBQ3ZCO0FBQ0YsQ0FBQztBQUFDSixPQUFBLENBQUFoQyxVQUFBLEdBQUFBLFVBQUEifQ==