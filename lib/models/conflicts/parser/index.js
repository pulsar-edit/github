"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConflictParser = void 0;
var _noopVisitor = require("./noop-visitor");
var _position = require("../position");
class Result {
  constructor(remainingSteps) {
    this.steps = remainingSteps;
  }
  wasSuccessful() {
    return this.steps.length === 0;
  }
}
class ConflictParser {
  constructor(adapter, visitor, isRebase) {
    this.adapter = adapter;
    this.visitor = visitor;
    this.isRebase = isRebase;
    this.lastBoundary = null;
    this.steps = [];
    if (this.isRebase) {
      this.steps.push(parser => parser.visitHeaderSide(_position.TOP, 'visitTheirSide'));
      this.steps.push(parser => parser.visitBaseAndSeparator());
      this.steps.push(parser => parser.visitFooterSide(_position.BOTTOM, 'visitOurSide'));
    } else {
      this.steps.push(parser => parser.visitHeaderSide(_position.TOP, 'visitOurSide'));
      this.steps.push(parser => parser.visitBaseAndSeparator());
      this.steps.push(parser => parser.visitFooterSide(_position.BOTTOM, 'visitTheirSide'));
    }
  }
  continueFrom(result) {
    this.steps = result.steps;
    return this.parse();
  }
  parse() {
    for (let i = 0; i < this.steps.length; i++) {
      if (!this.steps[i](this)) {
        return new Result(this.steps.slice(i));
      }
    }
    return new Result([]);
  }

  // Visit a side that begins with a banner and description as its first line.
  visitHeaderSide(position, visitMethod) {
    const sideRowStart = this.adapter.getCurrentRow();
    this.adapter.advanceRow();
    if (this.advanceToBoundary('|=') === null) {
      return false;
    }
    const sideRowEnd = this.adapter.getCurrentRow();
    this.visitor[visitMethod](position, sideRowStart, sideRowStart + 1, sideRowEnd);
    return true;
  }

  // Visit the base side from diff3 output, if one is present, then visit the separator.
  visitBaseAndSeparator() {
    if (this.lastBoundary === '|') {
      if (!this.visitBaseSide()) {
        return false;
      }
    }
    return this.visitSeparator();
  }

  // Visit a base side from diff3 output.
  visitBaseSide() {
    const sideRowStart = this.adapter.getCurrentRow();
    this.adapter.advanceRow();
    let b = this.advanceToBoundary('<=');
    if (b === null) {
      return false;
    }
    while (b === '<') {
      // Embedded recursive conflict within a base side, caused by a criss-cross merge.
      // Advance the input adapter beyond it without marking anything.
      const subParser = new ConflictParser(this.adapter, new _noopVisitor.NoopVisitor(), this.isRebase);
      if (!subParser.parse().wasSuccessful()) {
        return false;
      }
      b = this.advanceToBoundary('<=');
      if (b === null) {
        return false;
      }
    }
    const sideRowEnd = this.adapter.getCurrentRow();
    this.visitor.visitBaseSide(sideRowStart, sideRowStart + 1, sideRowEnd);
    return true;
  }

  // Visit a "========" separator.
  visitSeparator() {
    const sepRowStart = this.adapter.getCurrentRow();
    this.adapter.advanceRow();
    const sepRowEnd = this.adapter.getCurrentRow();
    this.visitor.visitSeparator(sepRowStart, sepRowEnd);
    return true;
  }

  // Visit a side with a banner and description as its last line.
  visitFooterSide(position, visitMethod) {
    const sideRowStart = this.adapter.getCurrentRow();
    if (this.advanceToBoundary('>') === null) {
      return false;
    }
    this.adapter.advanceRow();
    const sideRowEnd = this.adapter.getCurrentRow();
    this.visitor[visitMethod](position, sideRowEnd - 1, sideRowStart, sideRowEnd - 1);
    return true;
  }

  // Determine if the current row is a side boundary.
  //
  // boundaryKinds - [String] any combination of <, |, =, or > to limit the kinds of boundary detected.
  //
  // Returns the matching boundaryKinds character, or `null` if none match.
  isAtBoundary(boundaryKinds = '<|=>') {
    const line = this.adapter.getCurrentLine();
    for (let i = 0; i < boundaryKinds.length; i++) {
      const b = boundaryKinds[i];
      if (line.startsWith(b.repeat(7))) {
        return b;
      }
    }
    return null;
  }

  // Increment the current row until the current line matches one of the provided boundary kinds, or until there are no
  // more lines in the editor.
  //
  // boundaryKinds - [String] any combination of <, |, =, or > to limit the kinds of boundaries that halt the
  //   progression.
  //
  // Returns the matching boundaryKinds character, or 'null' if there are no matches to the end of the editor.
  advanceToBoundary(boundaryKinds = '<|=>') {
    let b = this.isAtBoundary(boundaryKinds);
    while (b === null) {
      this.adapter.advanceRow();
      if (this.adapter.isAtEnd()) {
        return null;
      }
      b = this.isAtBoundary(boundaryKinds);
    }
    this.lastBoundary = b;
    return b;
  }
}
exports.ConflictParser = ConflictParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZXN1bHQiLCJjb25zdHJ1Y3RvciIsInJlbWFpbmluZ1N0ZXBzIiwic3RlcHMiLCJ3YXNTdWNjZXNzZnVsIiwibGVuZ3RoIiwiQ29uZmxpY3RQYXJzZXIiLCJhZGFwdGVyIiwidmlzaXRvciIsImlzUmViYXNlIiwibGFzdEJvdW5kYXJ5IiwicHVzaCIsInBhcnNlciIsInZpc2l0SGVhZGVyU2lkZSIsIlRPUCIsInZpc2l0QmFzZUFuZFNlcGFyYXRvciIsInZpc2l0Rm9vdGVyU2lkZSIsIkJPVFRPTSIsImNvbnRpbnVlRnJvbSIsInJlc3VsdCIsInBhcnNlIiwiaSIsInNsaWNlIiwicG9zaXRpb24iLCJ2aXNpdE1ldGhvZCIsInNpZGVSb3dTdGFydCIsImdldEN1cnJlbnRSb3ciLCJhZHZhbmNlUm93IiwiYWR2YW5jZVRvQm91bmRhcnkiLCJzaWRlUm93RW5kIiwidmlzaXRCYXNlU2lkZSIsInZpc2l0U2VwYXJhdG9yIiwiYiIsInN1YlBhcnNlciIsIk5vb3BWaXNpdG9yIiwic2VwUm93U3RhcnQiLCJzZXBSb3dFbmQiLCJpc0F0Qm91bmRhcnkiLCJib3VuZGFyeUtpbmRzIiwibGluZSIsImdldEN1cnJlbnRMaW5lIiwic3RhcnRzV2l0aCIsInJlcGVhdCIsImlzQXRFbmQiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge05vb3BWaXNpdG9yfSBmcm9tICcuL25vb3AtdmlzaXRvcic7XG5pbXBvcnQge1RPUCwgQk9UVE9NfSBmcm9tICcuLi9wb3NpdGlvbic7XG5cbmNsYXNzIFJlc3VsdCB7XG4gIGNvbnN0cnVjdG9yKHJlbWFpbmluZ1N0ZXBzKSB7XG4gICAgdGhpcy5zdGVwcyA9IHJlbWFpbmluZ1N0ZXBzO1xuICB9XG5cbiAgd2FzU3VjY2Vzc2Z1bCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGVwcy5sZW5ndGggPT09IDA7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbmZsaWN0UGFyc2VyIHtcbiAgY29uc3RydWN0b3IoYWRhcHRlciwgdmlzaXRvciwgaXNSZWJhc2UpIHtcbiAgICB0aGlzLmFkYXB0ZXIgPSBhZGFwdGVyO1xuICAgIHRoaXMudmlzaXRvciA9IHZpc2l0b3I7XG4gICAgdGhpcy5pc1JlYmFzZSA9IGlzUmViYXNlO1xuXG4gICAgdGhpcy5sYXN0Qm91bmRhcnkgPSBudWxsO1xuICAgIHRoaXMuc3RlcHMgPSBbXTtcblxuICAgIGlmICh0aGlzLmlzUmViYXNlKSB7XG4gICAgICB0aGlzLnN0ZXBzLnB1c2gocGFyc2VyID0+IHBhcnNlci52aXNpdEhlYWRlclNpZGUoVE9QLCAndmlzaXRUaGVpclNpZGUnKSk7XG4gICAgICB0aGlzLnN0ZXBzLnB1c2gocGFyc2VyID0+IHBhcnNlci52aXNpdEJhc2VBbmRTZXBhcmF0b3IoKSk7XG4gICAgICB0aGlzLnN0ZXBzLnB1c2gocGFyc2VyID0+IHBhcnNlci52aXNpdEZvb3RlclNpZGUoQk9UVE9NLCAndmlzaXRPdXJTaWRlJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0ZXBzLnB1c2gocGFyc2VyID0+IHBhcnNlci52aXNpdEhlYWRlclNpZGUoVE9QLCAndmlzaXRPdXJTaWRlJykpO1xuICAgICAgdGhpcy5zdGVwcy5wdXNoKHBhcnNlciA9PiBwYXJzZXIudmlzaXRCYXNlQW5kU2VwYXJhdG9yKCkpO1xuICAgICAgdGhpcy5zdGVwcy5wdXNoKHBhcnNlciA9PiBwYXJzZXIudmlzaXRGb290ZXJTaWRlKEJPVFRPTSwgJ3Zpc2l0VGhlaXJTaWRlJykpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnRpbnVlRnJvbShyZXN1bHQpIHtcbiAgICB0aGlzLnN0ZXBzID0gcmVzdWx0LnN0ZXBzO1xuICAgIHJldHVybiB0aGlzLnBhcnNlKCk7XG4gIH1cblxuICBwYXJzZSgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RlcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghdGhpcy5zdGVwc1tpXSh0aGlzKSkge1xuICAgICAgICByZXR1cm4gbmV3IFJlc3VsdCh0aGlzLnN0ZXBzLnNsaWNlKGkpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSZXN1bHQoW10pO1xuICB9XG5cbiAgLy8gVmlzaXQgYSBzaWRlIHRoYXQgYmVnaW5zIHdpdGggYSBiYW5uZXIgYW5kIGRlc2NyaXB0aW9uIGFzIGl0cyBmaXJzdCBsaW5lLlxuICB2aXNpdEhlYWRlclNpZGUocG9zaXRpb24sIHZpc2l0TWV0aG9kKSB7XG4gICAgY29uc3Qgc2lkZVJvd1N0YXJ0ID0gdGhpcy5hZGFwdGVyLmdldEN1cnJlbnRSb3coKTtcbiAgICB0aGlzLmFkYXB0ZXIuYWR2YW5jZVJvdygpO1xuXG4gICAgaWYgKHRoaXMuYWR2YW5jZVRvQm91bmRhcnkoJ3w9JykgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBzaWRlUm93RW5kID0gdGhpcy5hZGFwdGVyLmdldEN1cnJlbnRSb3coKTtcblxuICAgIHRoaXMudmlzaXRvclt2aXNpdE1ldGhvZF0ocG9zaXRpb24sIHNpZGVSb3dTdGFydCwgc2lkZVJvd1N0YXJ0ICsgMSwgc2lkZVJvd0VuZCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBWaXNpdCB0aGUgYmFzZSBzaWRlIGZyb20gZGlmZjMgb3V0cHV0LCBpZiBvbmUgaXMgcHJlc2VudCwgdGhlbiB2aXNpdCB0aGUgc2VwYXJhdG9yLlxuICB2aXNpdEJhc2VBbmRTZXBhcmF0b3IoKSB7XG4gICAgaWYgKHRoaXMubGFzdEJvdW5kYXJ5ID09PSAnfCcpIHtcbiAgICAgIGlmICghdGhpcy52aXNpdEJhc2VTaWRlKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnZpc2l0U2VwYXJhdG9yKCk7XG4gIH1cblxuICAvLyBWaXNpdCBhIGJhc2Ugc2lkZSBmcm9tIGRpZmYzIG91dHB1dC5cbiAgdmlzaXRCYXNlU2lkZSgpIHtcbiAgICBjb25zdCBzaWRlUm93U3RhcnQgPSB0aGlzLmFkYXB0ZXIuZ2V0Q3VycmVudFJvdygpO1xuICAgIHRoaXMuYWRhcHRlci5hZHZhbmNlUm93KCk7XG5cbiAgICBsZXQgYiA9IHRoaXMuYWR2YW5jZVRvQm91bmRhcnkoJzw9Jyk7XG4gICAgaWYgKGIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB3aGlsZSAoYiA9PT0gJzwnKSB7XG4gICAgICAvLyBFbWJlZGRlZCByZWN1cnNpdmUgY29uZmxpY3Qgd2l0aGluIGEgYmFzZSBzaWRlLCBjYXVzZWQgYnkgYSBjcmlzcy1jcm9zcyBtZXJnZS5cbiAgICAgIC8vIEFkdmFuY2UgdGhlIGlucHV0IGFkYXB0ZXIgYmV5b25kIGl0IHdpdGhvdXQgbWFya2luZyBhbnl0aGluZy5cbiAgICAgIGNvbnN0IHN1YlBhcnNlciA9IG5ldyBDb25mbGljdFBhcnNlcih0aGlzLmFkYXB0ZXIsIG5ldyBOb29wVmlzaXRvcigpLCB0aGlzLmlzUmViYXNlKTtcbiAgICAgIGlmICghc3ViUGFyc2VyLnBhcnNlKCkud2FzU3VjY2Vzc2Z1bCgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgYiA9IHRoaXMuYWR2YW5jZVRvQm91bmRhcnkoJzw9Jyk7XG4gICAgICBpZiAoYiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2lkZVJvd0VuZCA9IHRoaXMuYWRhcHRlci5nZXRDdXJyZW50Um93KCk7XG4gICAgdGhpcy52aXNpdG9yLnZpc2l0QmFzZVNpZGUoc2lkZVJvd1N0YXJ0LCBzaWRlUm93U3RhcnQgKyAxLCBzaWRlUm93RW5kKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIFZpc2l0IGEgXCI9PT09PT09PVwiIHNlcGFyYXRvci5cbiAgdmlzaXRTZXBhcmF0b3IoKSB7XG4gICAgY29uc3Qgc2VwUm93U3RhcnQgPSB0aGlzLmFkYXB0ZXIuZ2V0Q3VycmVudFJvdygpO1xuICAgIHRoaXMuYWRhcHRlci5hZHZhbmNlUm93KCk7XG4gICAgY29uc3Qgc2VwUm93RW5kID0gdGhpcy5hZGFwdGVyLmdldEN1cnJlbnRSb3coKTtcblxuICAgIHRoaXMudmlzaXRvci52aXNpdFNlcGFyYXRvcihzZXBSb3dTdGFydCwgc2VwUm93RW5kKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIFZpc2l0IGEgc2lkZSB3aXRoIGEgYmFubmVyIGFuZCBkZXNjcmlwdGlvbiBhcyBpdHMgbGFzdCBsaW5lLlxuICB2aXNpdEZvb3RlclNpZGUocG9zaXRpb24sIHZpc2l0TWV0aG9kKSB7XG4gICAgY29uc3Qgc2lkZVJvd1N0YXJ0ID0gdGhpcy5hZGFwdGVyLmdldEN1cnJlbnRSb3coKTtcbiAgICBpZiAodGhpcy5hZHZhbmNlVG9Cb3VuZGFyeSgnPicpID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5hZGFwdGVyLmFkdmFuY2VSb3coKTtcbiAgICBjb25zdCBzaWRlUm93RW5kID0gdGhpcy5hZGFwdGVyLmdldEN1cnJlbnRSb3coKTtcblxuICAgIHRoaXMudmlzaXRvclt2aXNpdE1ldGhvZF0ocG9zaXRpb24sIHNpZGVSb3dFbmQgLSAxLCBzaWRlUm93U3RhcnQsIHNpZGVSb3dFbmQgLSAxKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIERldGVybWluZSBpZiB0aGUgY3VycmVudCByb3cgaXMgYSBzaWRlIGJvdW5kYXJ5LlxuICAvL1xuICAvLyBib3VuZGFyeUtpbmRzIC0gW1N0cmluZ10gYW55IGNvbWJpbmF0aW9uIG9mIDwsIHwsID0sIG9yID4gdG8gbGltaXQgdGhlIGtpbmRzIG9mIGJvdW5kYXJ5IGRldGVjdGVkLlxuICAvL1xuICAvLyBSZXR1cm5zIHRoZSBtYXRjaGluZyBib3VuZGFyeUtpbmRzIGNoYXJhY3Rlciwgb3IgYG51bGxgIGlmIG5vbmUgbWF0Y2guXG4gIGlzQXRCb3VuZGFyeShib3VuZGFyeUtpbmRzID0gJzx8PT4nKSB7XG4gICAgY29uc3QgbGluZSA9IHRoaXMuYWRhcHRlci5nZXRDdXJyZW50TGluZSgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm91bmRhcnlLaW5kcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYiA9IGJvdW5kYXJ5S2luZHNbaV07XG4gICAgICBpZiAobGluZS5zdGFydHNXaXRoKGIucmVwZWF0KDcpKSkge1xuICAgICAgICByZXR1cm4gYjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBJbmNyZW1lbnQgdGhlIGN1cnJlbnQgcm93IHVudGlsIHRoZSBjdXJyZW50IGxpbmUgbWF0Y2hlcyBvbmUgb2YgdGhlIHByb3ZpZGVkIGJvdW5kYXJ5IGtpbmRzLCBvciB1bnRpbCB0aGVyZSBhcmUgbm9cbiAgLy8gbW9yZSBsaW5lcyBpbiB0aGUgZWRpdG9yLlxuICAvL1xuICAvLyBib3VuZGFyeUtpbmRzIC0gW1N0cmluZ10gYW55IGNvbWJpbmF0aW9uIG9mIDwsIHwsID0sIG9yID4gdG8gbGltaXQgdGhlIGtpbmRzIG9mIGJvdW5kYXJpZXMgdGhhdCBoYWx0IHRoZVxuICAvLyAgIHByb2dyZXNzaW9uLlxuICAvL1xuICAvLyBSZXR1cm5zIHRoZSBtYXRjaGluZyBib3VuZGFyeUtpbmRzIGNoYXJhY3Rlciwgb3IgJ251bGwnIGlmIHRoZXJlIGFyZSBubyBtYXRjaGVzIHRvIHRoZSBlbmQgb2YgdGhlIGVkaXRvci5cbiAgYWR2YW5jZVRvQm91bmRhcnkoYm91bmRhcnlLaW5kcyA9ICc8fD0+Jykge1xuICAgIGxldCBiID0gdGhpcy5pc0F0Qm91bmRhcnkoYm91bmRhcnlLaW5kcyk7XG4gICAgd2hpbGUgKGIgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuYWRhcHRlci5hZHZhbmNlUm93KCk7XG4gICAgICBpZiAodGhpcy5hZGFwdGVyLmlzQXRFbmQoKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGIgPSB0aGlzLmlzQXRCb3VuZGFyeShib3VuZGFyeUtpbmRzKTtcbiAgICB9XG5cbiAgICB0aGlzLmxhc3RCb3VuZGFyeSA9IGI7XG4gICAgcmV0dXJuIGI7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUVBLE1BQU1BLE1BQU0sQ0FBQztFQUNYQyxXQUFXLENBQUNDLGNBQWMsRUFBRTtJQUMxQixJQUFJLENBQUNDLEtBQUssR0FBR0QsY0FBYztFQUM3QjtFQUVBRSxhQUFhLEdBQUc7SUFDZCxPQUFPLElBQUksQ0FBQ0QsS0FBSyxDQUFDRSxNQUFNLEtBQUssQ0FBQztFQUNoQztBQUNGO0FBRU8sTUFBTUMsY0FBYyxDQUFDO0VBQzFCTCxXQUFXLENBQUNNLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUU7SUFDdEMsSUFBSSxDQUFDRixPQUFPLEdBQUdBLE9BQU87SUFDdEIsSUFBSSxDQUFDQyxPQUFPLEdBQUdBLE9BQU87SUFDdEIsSUFBSSxDQUFDQyxRQUFRLEdBQUdBLFFBQVE7SUFFeEIsSUFBSSxDQUFDQyxZQUFZLEdBQUcsSUFBSTtJQUN4QixJQUFJLENBQUNQLEtBQUssR0FBRyxFQUFFO0lBRWYsSUFBSSxJQUFJLENBQUNNLFFBQVEsRUFBRTtNQUNqQixJQUFJLENBQUNOLEtBQUssQ0FBQ1EsSUFBSSxDQUFDQyxNQUFNLElBQUlBLE1BQU0sQ0FBQ0MsZUFBZSxDQUFDQyxhQUFHLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztNQUN4RSxJQUFJLENBQUNYLEtBQUssQ0FBQ1EsSUFBSSxDQUFDQyxNQUFNLElBQUlBLE1BQU0sQ0FBQ0cscUJBQXFCLEVBQUUsQ0FBQztNQUN6RCxJQUFJLENBQUNaLEtBQUssQ0FBQ1EsSUFBSSxDQUFDQyxNQUFNLElBQUlBLE1BQU0sQ0FBQ0ksZUFBZSxDQUFDQyxnQkFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQzNFLENBQUMsTUFBTTtNQUNMLElBQUksQ0FBQ2QsS0FBSyxDQUFDUSxJQUFJLENBQUNDLE1BQU0sSUFBSUEsTUFBTSxD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