"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConflictParser = void 0;
var _noopVisitor = require("./noop-visitor");
var _position = require("../position");
class Result {
  constructor(remainingSteps) {
    this.steps = remainingSteps;
  }
  wasSuccessful() {
    return this.steps.length === 0;
  }
}
class ConflictParser {
  constructor(adapter, visitor, isRebase) {
    this.adapter = adapter;
    this.visitor = visitor;
    this.isRebase = isRebase;
    this.lastBoundary = null;
    this.steps = [];
    if (this.isRebase) {
      this.steps.push(parser => parser.visitHeaderSide(_position.TOP, 'visitTheirSide'));
      this.steps.push(parser => parser.visitBaseAndSeparator());
      this.steps.push(parser => parser.visitFooterSide(_position.BOTTOM, 'visitOurSide'));
    } else {
      this.steps.push(parser => parser.visitHeaderSide(_position.TOP, 'visitOurSide'));
      this.steps.push(parser => parser.visitBaseAndSeparator());
      this.steps.push(parser => parser.visitFooterSide(_position.BOTTOM, 'visitTheirSide'));
    }
  }
  continueFrom(result) {
    this.steps = result.steps;
    return this.parse();
  }
  parse() {
    for (let i = 0; i < this.steps.length; i++) {
      if (!this.steps[i](this)) {
        return new Result(this.steps.slice(i));
      }
    }
    return new Result([]);
  }

  // Visit a side that begins with a banner and description as its first line.
  visitHeaderSide(position, visitMethod) {
    const sideRowStart = this.adapter.getCurrentRow();
    this.adapter.advanceRow();
    if (this.advanceToBoundary('|=') === null) {
      return false;
    }
    const sideRowEnd = this.adapter.getCurrentRow();
    this.visitor[visitMethod](position, sideRowStart, sideRowStart + 1, sideRowEnd);
    return true;
  }

  // Visit the base side from diff3 output, if one is present, then visit the separator.
  visitBaseAndSeparator() {
    if (this.lastBoundary === '|') {
      if (!this.visitBaseSide()) {
        return false;
      }
    }
    return this.visitSeparator();
  }

  // Visit a base side from diff3 output.
  visitBaseSide() {
    const sideRowStart = this.adapter.getCurrentRow();
    this.adapter.advanceRow();
    let b = this.advanceToBoundary('<=');
    if (b === null) {
      return false;
    }
    while (b === '<') {
      // Embedded recursive conflict within a base side, caused by a criss-cross merge.
      // Advance the input adapter beyond it without marking anything.
      const subParser = new ConflictParser(this.adapter, new _noopVisitor.NoopVisitor(), this.isRebase);
      if (!subParser.parse().wasSuccessful()) {
        return false;
      }
      b = this.advanceToBoundary('<=');
      if (b === null) {
        return false;
      }
    }
    const sideRowEnd = this.adapter.getCurrentRow();
    this.visitor.visitBaseSide(sideRowStart, sideRowStart + 1, sideRowEnd);
    return true;
  }

  // Visit a "========" separator.
  visitSeparator() {
    const sepRowStart = this.adapter.getCurrentRow();
    this.adapter.advanceRow();
    const sepRowEnd = this.adapter.getCurrentRow();
    this.visitor.visitSeparator(sepRowStart, sepRowEnd);
    return true;
  }

  // Visit a side with a banner and description as its last line.
  visitFooterSide(position, visitMethod) {
    const sideRowStart = this.adapter.getCurrentRow();
    if (this.advanceToBoundary('>') === null) {
      return false;
    }
    this.adapter.advanceRow();
    const sideRowEnd = this.adapter.getCurrentRow();
    this.visitor[visitMethod](position, sideRowEnd - 1, sideRowStart, sideRowEnd - 1);
    return true;
  }

  // Determine if the current row is a side boundary.
  //
  // boundaryKinds - [String] any combination of <, |, =, or > to limit the kinds of boundary detected.
  //
  // Returns the matching boundaryKinds character, or `null` if none match.
  isAtBoundary(boundaryKinds = '<|=>') {
    const line = this.adapter.getCurrentLine();
    for (let i = 0; i < boundaryKinds.length; i++) {
      const b = boundaryKinds[i];
      if (line.startsWith(b.repeat(7))) {
        return b;
      }
    }
    return null;
  }

  // Increment the current row until the current line matches one of the provided boundary kinds, or until there are no
  // more lines in the editor.
  //
  // boundaryKinds - [String] any combination of <, |, =, or > to limit the kinds of boundaries that halt the
  //   progression.
  //
  // Returns the matching boundaryKinds character, or 'null' if there are no matches to the end of the editor.
  advanceToBoundary(boundaryKinds = '<|=>') {
    let b = this.isAtBoundary(boundaryKinds);
    while (b === null) {
      this.adapter.advanceRow();
      if (this.adapter.isAtEnd()) {
        return null;
      }
      b = this.isAtBoundary(boundaryKinds);
    }
    this.lastBoundary = b;
    return b;
  }
}
exports.ConflictParser = ConflictParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbm9vcFZpc2l0b3IiLCJyZXF1aXJlIiwiX3Bvc2l0aW9uIiwiUmVzdWx0IiwiY29uc3RydWN0b3IiLCJyZW1haW5pbmdTdGVwcyIsInN0ZXBzIiwid2FzU3VjY2Vzc2Z1bCIsImxlbmd0aCIsIkNvbmZsaWN0UGFyc2VyIiwiYWRhcHRlciIsInZpc2l0b3IiLCJpc1JlYmFzZSIsImxhc3RCb3VuZGFyeSIsInB1c2giLCJwYXJzZXIiLCJ2aXNpdEhlYWRlclNpZGUiLCJUT1AiLCJ2aXNpdEJhc2VBbmRTZXBhcmF0b3IiLCJ2aXNpdEZvb3RlclNpZGUiLCJCT1RUT00iLCJjb250aW51ZUZyb20iLCJyZXN1bHQiLCJwYXJzZSIsImkiLCJzbGljZSIsInBvc2l0aW9uIiwidmlzaXRNZXRob2QiLCJzaWRlUm93U3RhcnQiLCJnZXRDdXJyZW50Um93IiwiYWR2YW5jZVJvdyIsImFkdmFuY2VUb0JvdW5kYXJ5Iiwic2lkZVJvd0VuZCIsInZpc2l0QmFzZVNpZGUiLCJ2aXNpdFNlcGFyYXRvciIsImIiLCJzdWJQYXJzZXIiLCJOb29wVmlzaXRvciIsInNlcFJvd1N0YXJ0Iiwic2VwUm93RW5kIiwiaXNBdEJvdW5kYXJ5IiwiYm91bmRhcnlLaW5kcyIsImxpbmUiLCJnZXRDdXJyZW50TGluZSIsInN0YXJ0c1dpdGgiLCJyZXBlYXQiLCJpc0F0RW5kIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Tm9vcFZpc2l0b3J9IGZyb20gJy4vbm9vcC12aXNpdG9yJztcbmltcG9ydCB7VE9QLCBCT1RUT019IGZyb20gJy4uL3Bvc2l0aW9uJztcblxuY2xhc3MgUmVzdWx0IHtcbiAgY29uc3RydWN0b3IocmVtYWluaW5nU3RlcHMpIHtcbiAgICB0aGlzLnN0ZXBzID0gcmVtYWluaW5nU3RlcHM7XG4gIH1cblxuICB3YXNTdWNjZXNzZnVsKCkge1xuICAgIHJldHVybiB0aGlzLnN0ZXBzLmxlbmd0aCA9PT0gMDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29uZmxpY3RQYXJzZXIge1xuICBjb25zdHJ1Y3RvcihhZGFwdGVyLCB2aXNpdG9yLCBpc1JlYmFzZSkge1xuICAgIHRoaXMuYWRhcHRlciA9IGFkYXB0ZXI7XG4gICAgdGhpcy52aXNpdG9yID0gdmlzaXRvcjtcbiAgICB0aGlzLmlzUmViYXNlID0gaXNSZWJhc2U7XG5cbiAgICB0aGlzLmxhc3RCb3VuZGFyeSA9IG51bGw7XG4gICAgdGhpcy5zdGVwcyA9IFtdO1xuXG4gICAgaWYgKHRoaXMuaXNSZWJhc2UpIHtcbiAgICAgIHRoaXMuc3RlcHMucHVzaChwYXJzZXIgPT4gcGFyc2VyLnZpc2l0SGVhZGVyU2lkZShUT1AsICd2aXNpdFRoZWlyU2lkZScpKTtcbiAgICAgIHRoaXMuc3RlcHMucHVzaChwYXJzZXIgPT4gcGFyc2VyLnZpc2l0QmFzZUFuZFNlcGFyYXRvcigpKTtcbiAgICAgIHRoaXMuc3RlcHMucHVzaChwYXJzZXIgPT4gcGFyc2VyLnZpc2l0Rm9vdGVyU2lkZShCT1RUT00sICd2aXNpdE91clNpZGUnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RlcHMucHVzaChwYXJzZXIgPT4gcGFyc2VyLnZpc2l0SGVhZGVyU2lkZShUT1AsICd2aXNpdE91clNpZGUnKSk7XG4gICAgICB0aGlzLnN0ZXBzLnB1c2gocGFyc2VyID0+IHBhcnNlci52aXNpdEJhc2VBbmRTZXBhcmF0b3IoKSk7XG4gICAgICB0aGlzLnN0ZXBzLnB1c2gocGFyc2VyID0+IHBhcnNlci52aXNpdEZvb3RlclNpZGUoQk9UVE9NLCAndmlzaXRUaGVpclNpZGUnKSk7XG4gICAgfVxuICB9XG5cbiAgY29udGludWVGcm9tKHJlc3VsdCkge1xuICAgIHRoaXMuc3RlcHMgPSByZXN1bHQuc3RlcHM7XG4gICAgcmV0dXJuIHRoaXMucGFyc2UoKTtcbiAgfVxuXG4gIHBhcnNlKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGVwcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCF0aGlzLnN0ZXBzW2ldKHRoaXMpKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVzdWx0KHRoaXMuc3RlcHMuc2xpY2UoaSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IFJlc3VsdChbXSk7XG4gIH1cblxuICAvLyBWaXNpdCBhIHNpZGUgdGhhdCBiZWdpbnMgd2l0aCBhIGJhbm5lciBhbmQgZGVzY3JpcHRpb24gYXMgaXRzIGZpcnN0IGxpbmUuXG4gIHZpc2l0SGVhZGVyU2lkZShwb3NpdGlvbiwgdmlzaXRNZXRob2QpIHtcbiAgICBjb25zdCBzaWRlUm93U3RhcnQgPSB0aGlzLmFkYXB0ZXIuZ2V0Q3VycmVudFJvdygpO1xuICAgIHRoaXMuYWRhcHRlci5hZHZhbmNlUm93KCk7XG5cbiAgICBpZiAodGhpcy5hZHZhbmNlVG9Cb3VuZGFyeSgnfD0nKSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHNpZGVSb3dFbmQgPSB0aGlzLmFkYXB0ZXIuZ2V0Q3VycmVudFJvdygpO1xuXG4gICAgdGhpcy52aXNpdG9yW3Zpc2l0TWV0aG9kXShwb3NpdGlvbiwgc2lkZVJvd1N0YXJ0LCBzaWRlUm93U3RhcnQgKyAxLCBzaWRlUm93RW5kKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIFZpc2l0IHRoZSBiYXNlIHNpZGUgZnJvbSBkaWZmMyBvdXRwdXQsIGlmIG9uZSBpcyBwcmVzZW50LCB0aGVuIHZpc2l0IHRoZSBzZXBhcmF0b3IuXG4gIHZpc2l0QmFzZUFuZFNlcGFyYXRvcigpIHtcbiAgICBpZiAodGhpcy5sYXN0Qm91bmRhcnkgPT09ICd8Jykge1xuICAgICAgaWYgKCF0aGlzLnZpc2l0QmFzZVNpZGUoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudmlzaXRTZXBhcmF0b3IoKTtcbiAgfVxuXG4gIC8vIFZpc2l0IGEgYmFzZSBzaWRlIGZyb20gZGlmZjMgb3V0cHV0LlxuICB2aXNpdEJhc2VTaWRlKCkge1xuICAgIGNvbnN0IHNpZGVSb3dTdGFydCA9IHRoaXMuYWRhcHRlci5nZXRDdXJyZW50Um93KCk7XG4gICAgdGhpcy5hZGFwdGVyLmFkdmFuY2VSb3coKTtcblxuICAgIGxldCBiID0gdGhpcy5hZHZhbmNlVG9Cb3VuZGFyeSgnPD0nKTtcbiAgICBpZiAoYiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHdoaWxlIChiID09PSAnPCcpIHtcbiAgICAgIC8vIEVtYmVkZGVkIHJlY3Vyc2l2ZSBjb25mbGljdCB3aXRoaW4gYSBiYXNlIHNpZGUsIGNhdXNlZCBieSBhIGNyaXNzLWNyb3NzIG1lcmdlLlxuICAgICAgLy8gQWR2YW5jZSB0aGUgaW5wdXQgYWRhcHRlciBiZXlvbmQgaXQgd2l0aG91dCBtYXJraW5nIGFueXRoaW5nLlxuICAgICAgY29uc3Qgc3ViUGFyc2VyID0gbmV3IENvbmZsaWN0UGFyc2VyKHRoaXMuYWRhcHRlciwgbmV3IE5vb3BWaXNpdG9yKCksIHRoaXMuaXNSZWJhc2UpO1xuICAgICAgaWYgKCFzdWJQYXJzZXIucGFyc2UoKS53YXNTdWNjZXNzZnVsKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBiID0gdGhpcy5hZHZhbmNlVG9Cb3VuZGFyeSgnPD0nKTtcbiAgICAgIGlmIChiID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzaWRlUm93RW5kID0gdGhpcy5hZGFwdGVyLmdldEN1cnJlbnRSb3coKTtcbiAgICB0aGlzLnZpc2l0b3IudmlzaXRCYXNlU2lkZShzaWRlUm93U3RhcnQsIHNpZGVSb3dTdGFydCArIDEsIHNpZGVSb3dFbmQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gVmlzaXQgYSBcIj09PT09PT09XCIgc2VwYXJhdG9yLlxuICB2aXNpdFNlcGFyYXRvcigpIHtcbiAgICBjb25zdCBzZXBSb3dTdGFydCA9IHRoaXMuYWRhcHRlci5nZXRDdXJyZW50Um93KCk7XG4gICAgdGhpcy5hZGFwdGVyLmFkdmFuY2VSb3coKTtcbiAgICBjb25zdCBzZXBSb3dFbmQgPSB0aGlzLmFkYXB0ZXIuZ2V0Q3VycmVudFJvdygpO1xuXG4gICAgdGhpcy52aXNpdG9yLnZpc2l0U2VwYXJhdG9yKHNlcFJvd1N0YXJ0LCBzZXBSb3dFbmQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gVmlzaXQgYSBzaWRlIHdpdGggYSBiYW5uZXIgYW5kIGRlc2NyaXB0aW9uIGFzIGl0cyBsYXN0IGxpbmUuXG4gIHZpc2l0Rm9vdGVyU2lkZShwb3NpdGlvbiwgdmlzaXRNZXRob2QpIHtcbiAgICBjb25zdCBzaWRlUm93U3RhcnQgPSB0aGlzLmFkYXB0ZXIuZ2V0Q3VycmVudFJvdygpO1xuICAgIGlmICh0aGlzLmFkdmFuY2VUb0JvdW5kYXJ5KCc+JykgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmFkYXB0ZXIuYWR2YW5jZVJvdygpO1xuICAgIGNvbnN0IHNpZGVSb3dFbmQgPSB0aGlzLmFkYXB0ZXIuZ2V0Q3VycmVudFJvdygpO1xuXG4gICAgdGhpcy52aXNpdG9yW3Zpc2l0TWV0aG9kXShwb3NpdGlvbiwgc2lkZVJvd0VuZCAtIDEsIHNpZGVSb3dTdGFydCwgc2lkZVJvd0VuZCAtIDEpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBjdXJyZW50IHJvdyBpcyBhIHNpZGUgYm91bmRhcnkuXG4gIC8vXG4gIC8vIGJvdW5kYXJ5S2luZHMgLSBbU3RyaW5nXSBhbnkgY29tYmluYXRpb24gb2YgPCwgfCwgPSwgb3IgPiB0byBsaW1pdCB0aGUga2luZHMgb2YgYm91bmRhcnkgZGV0ZWN0ZWQuXG4gIC8vXG4gIC8vIFJldHVybnMgdGhlIG1hdGNoaW5nIGJvdW5kYXJ5S2luZHMgY2hhcmFjdGVyLCBvciBgbnVsbGAgaWYgbm9uZSBtYXRjaC5cbiAgaXNBdEJvdW5kYXJ5KGJvdW5kYXJ5S2luZHMgPSAnPHw9PicpIHtcbiAgICBjb25zdCBsaW5lID0gdGhpcy5hZGFwdGVyLmdldEN1cnJlbnRMaW5lKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3VuZGFyeUtpbmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBiID0gYm91bmRhcnlLaW5kc1tpXTtcbiAgICAgIGlmIChsaW5lLnN0YXJ0c1dpdGgoYi5yZXBlYXQoNykpKSB7XG4gICAgICAgIHJldHVybiBiO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIEluY3JlbWVudCB0aGUgY3VycmVudCByb3cgdW50aWwgdGhlIGN1cnJlbnQgbGluZSBtYXRjaGVzIG9uZSBvZiB0aGUgcHJvdmlkZWQgYm91bmRhcnkga2luZHMsIG9yIHVudGlsIHRoZXJlIGFyZSBub1xuICAvLyBtb3JlIGxpbmVzIGluIHRoZSBlZGl0b3IuXG4gIC8vXG4gIC8vIGJvdW5kYXJ5S2luZHMgLSBbU3RyaW5nXSBhbnkgY29tYmluYXRpb24gb2YgPCwgfCwgPSwgb3IgPiB0byBsaW1pdCB0aGUga2luZHMgb2YgYm91bmRhcmllcyB0aGF0IGhhbHQgdGhlXG4gIC8vICAgcHJvZ3Jlc3Npb24uXG4gIC8vXG4gIC8vIFJldHVybnMgdGhlIG1hdGNoaW5nIGJvdW5kYXJ5S2luZHMgY2hhcmFjdGVyLCBvciAnbnVsbCcgaWYgdGhlcmUgYXJlIG5vIG1hdGNoZXMgdG8gdGhlIGVuZCBvZiB0aGUgZWRpdG9yLlxuICBhZHZhbmNlVG9Cb3VuZGFyeShib3VuZGFyeUtpbmRzID0gJzx8PT4nKSB7XG4gICAgbGV0IGIgPSB0aGlzLmlzQXRCb3VuZGFyeShib3VuZGFyeUtpbmRzKTtcbiAgICB3aGlsZSAoYiA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5hZGFwdGVyLmFkdmFuY2VSb3coKTtcbiAgICAgIGlmICh0aGlzLmFkYXB0ZXIuaXNBdEVuZCgpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgYiA9IHRoaXMuaXNBdEJvdW5kYXJ5KGJvdW5kYXJ5S2luZHMpO1xuICAgIH1cblxuICAgIHRoaXMubGFzdEJvdW5kYXJ5ID0gYjtcbiAgICByZXR1cm4gYjtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxTQUFBLEdBQUFELE9BQUE7QUFFQSxNQUFNRSxNQUFNLENBQUM7RUFDWEMsV0FBV0EsQ0FBQ0MsY0FBYyxFQUFFO0lBQzFCLElBQUksQ0FBQ0MsS0FBSyxHQUFHRCxjQUFjO0VBQzdCO0VBRUFFLGFBQWFBLENBQUEsRUFBRztJQUNkLE9BQU8sSUFBSSxDQUFDRCxLQUFLLENBQUNFLE1BQU0sS0FBSyxDQUFDO0VBQ2hDO0FBQ0Y7QUFFTyxNQUFNQyxjQUFjLENBQUM7RUFDMUJMLFdBQVdBLENBQUNNLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUU7SUFDdEMsSUFBSSxDQUFDRixPQUFPLEdBQUdBLE9BQU87SUFDdEIsSUFBSSxDQUFDQyxPQUFPLEdBQUdBLE9BQU87SUFDdEIsSUFBSSxDQUFDQyxRQUFRLEdBQUdBLFFBQVE7SUFFeEIsSUFBSSxDQUFDQyxZQUFZLEdBQUcsSUFBSTtJQUN4QixJQUFJLENBQUNQLEtBQUssR0FBRyxFQUFFO0lBRWYsSUFBSSxJQUFJLENBQUNNLFFBQVEsRUFBRTtNQUNqQixJQUFJLENBQUNOLEtBQUssQ0FBQ1EsSUFBSSxDQUFDQyxNQUFNLElBQUlBLE1BQU0sQ0FBQ0MsZUFBZSxDQUFDQyxhQUFHLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztNQUN4RSxJQUFJLENBQUNYLEtBQUssQ0FBQ1EsSUFBSSxDQUFDQyxNQUFNLElBQUlBLE1BQU0sQ0FBQ0cscUJBQXFCLENBQUMsQ0FBQyxDQUFDO01BQ3pELElBQUksQ0FBQ1osS0FBSyxDQUFDUSxJQUFJLENBQUNDLE1BQU0sSUFBSUEsTUFBTSxDQUFDSSxlQUFl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