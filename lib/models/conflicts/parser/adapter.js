"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChunkAdapter = exports.EditorAdapter = void 0;
/*
 * Input adapter to facilitate parsing conflicts from text loaded into an Editor.
 */
class EditorAdapter {
  constructor(editor, startRow) {
    this.editor = editor;
    this.currentRow = startRow;
  }
  getCurrentRow() {
    return this.currentRow;
  }
  getCurrentLine() {
    return this.editor.lineTextForBufferRow(this.currentRow);
  }
  advanceRow() {
    this.currentRow++;
  }
  isAtEnd() {
    return this.currentRow > this.editor.getLastBufferRow();
  }
}

/*
 * Input adapter for parsing conflicts from a chunk of text arriving from a ReadStream.
 */
exports.EditorAdapter = EditorAdapter;
class ChunkAdapter {
  constructor(chunk) {
    this.chunk = chunk;
    this.lineEndRx = /\r?\n/g;
    this.lineStartPosition = 0;
    this.eof = false;
    this.advanceRow();
  }
  advanceTo(pattern) {
    if (this.eof) {
      return false;
    }
    const rx = new RegExp(pattern.source, 'gm');
    rx.lastIndex = this.lineStartPosition;
    const match = rx.exec(this.chunk);
    if (match) {
      this.lineEndRx.lastIndex = match.index;
      return true;
    } else {
      return false;
    }
  }
  getCurrentRow() {
    return undefined;
  }
  getCurrentLine() {
    return this.currentLine;
  }
  advanceRow() {
    this.lineStartPosition = this.lineEndRx.lastIndex;
    if (this.lineEndRx.test(this.chunk)) {
      this.currentLine = this.chunk.slice(this.lineStartPosition, this.lineEndRx.lastIndex);
    } else {
      this.currentLine = this.chunk.slice(this.lineStartPosition);
      this.eof = true;
    }
  }
  isAtEnd() {
    return this.eof;
  }
  getLastPartialMarker() {
    const match = /[<|>=]{1,7} ?[^\r\n]*\r?$/.exec(this.chunk);
    return match ? match[0] : '';
  }
}
exports.ChunkAdapter = ChunkAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFZGl0b3JBZGFwdGVyIiwiY29uc3RydWN0b3IiLCJlZGl0b3IiLCJzdGFydFJvdyIsImN1cnJlbnRSb3ciLCJnZXRDdXJyZW50Um93IiwiZ2V0Q3VycmVudExpbmUiLCJsaW5lVGV4dEZvckJ1ZmZlclJvdyIsImFkdmFuY2VSb3ciLCJpc0F0RW5kIiwiZ2V0TGFzdEJ1ZmZlclJvdyIsIkNodW5rQWRhcHRlciIsImNodW5rIiwibGluZUVuZFJ4IiwibGluZVN0YXJ0UG9zaXRpb24iLCJlb2YiLCJhZHZhbmNlVG8iLCJwYXR0ZXJuIiwicngiLCJSZWdFeHAiLCJzb3VyY2UiLCJsYXN0SW5kZXgiLCJtYXRjaCIsImV4ZWMiLCJpbmRleCIsInVuZGVmaW5lZCIsImN1cnJlbnRMaW5lIiwidGVzdCIsInNsaWNlIiwiZ2V0TGFzdFBhcnRpYWxNYXJrZXIiXSwic291cmNlcyI6WyJhZGFwdGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBJbnB1dCBhZGFwdGVyIHRvIGZhY2lsaXRhdGUgcGFyc2luZyBjb25mbGljdHMgZnJvbSB0ZXh0IGxvYWRlZCBpbnRvIGFuIEVkaXRvci5cbiAqL1xuZXhwb3J0IGNsYXNzIEVkaXRvckFkYXB0ZXIge1xuICBjb25zdHJ1Y3RvcihlZGl0b3IsIHN0YXJ0Um93KSB7XG4gICAgdGhpcy5lZGl0b3IgPSBlZGl0b3I7XG4gICAgdGhpcy5jdXJyZW50Um93ID0gc3RhcnRSb3c7XG4gIH1cblxuICBnZXRDdXJyZW50Um93KCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRSb3c7XG4gIH1cblxuICBnZXRDdXJyZW50TGluZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lZGl0b3IubGluZVRleHRGb3JCdWZmZXJSb3codGhpcy5jdXJyZW50Um93KTtcbiAgfVxuXG4gIGFkdmFuY2VSb3coKSB7XG4gICAgdGhpcy5jdXJyZW50Um93Kys7XG4gIH1cblxuICBpc0F0RW5kKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRSb3cgPiB0aGlzLmVkaXRvci5nZXRMYXN0QnVmZmVyUm93KCk7XG4gIH1cbn1cblxuLypcbiAqIElucHV0IGFkYXB0ZXIgZm9yIHBhcnNpbmcgY29uZmxpY3RzIGZyb20gYSBjaHVuayBvZiB0ZXh0IGFycml2aW5nIGZyb20gYSBSZWFkU3RyZWFtLlxuICovXG5leHBvcnQgY2xhc3MgQ2h1bmtBZGFwdGVyIHtcbiAgY29uc3RydWN0b3IoY2h1bmspIHtcbiAgICB0aGlzLmNodW5rID0gY2h1bms7XG5cbiAgICB0aGlzLmxpbmVFbmRSeCA9IC9cXHI/XFxuL2c7XG5cbiAgICB0aGlzLmxpbmVTdGFydFBvc2l0aW9uID0gMDtcbiAgICB0aGlzLmVvZiA9IGZhbHNlO1xuICAgIHRoaXMuYWR2YW5jZVJvdygpO1xuICB9XG5cbiAgYWR2YW5jZVRvKHBhdHRlcm4pIHtcbiAgICBpZiAodGhpcy5lb2YpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCByeCA9IG5ldyBSZWdFeHAocGF0dGVybi5zb3VyY2UsICdnbScpO1xuICAgIHJ4Lmxhc3RJbmRleCA9IHRoaXMubGluZVN0YXJ0UG9zaXRpb247XG5cbiAgICBjb25zdCBtYXRjaCA9IHJ4LmV4ZWModGhpcy5jaHVuayk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICB0aGlzLmxpbmVFbmRSeC5sYXN0SW5kZXggPSBtYXRjaC5pbmRleDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZ2V0Q3VycmVudFJvdygpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZ2V0Q3VycmVudExpbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudExpbmU7XG4gIH1cblxuICBhZHZhbmNlUm93KCkge1xuICAgIHRoaXMubGluZVN0YXJ0UG9zaXRpb24gPSB0aGlzLmxpbmVFbmRSeC5sYXN0SW5kZXg7XG4gICAgaWYgKHRoaXMubGluZUVuZFJ4LnRlc3QodGhpcy5jaHVuaykpIHtcbiAgICAgIHRoaXMuY3VycmVudExpbmUgPSB0aGlzLmNodW5rLnNsaWNlKHRoaXMubGluZVN0YXJ0UG9zaXRpb24sIHRoaXMubGluZUVuZFJ4Lmxhc3RJbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudExpbmUgPSB0aGlzLmNodW5rLnNsaWNlKHRoaXMubGluZVN0YXJ0UG9zaXRpb24pO1xuICAgICAgdGhpcy5lb2YgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlzQXRFbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW9mO1xuICB9XG5cbiAgZ2V0TGFzdFBhcnRpYWxNYXJrZXIoKSB7XG4gICAgY29uc3QgbWF0Y2ggPSAvWzx8Pj1dezEsN30gP1teXFxyXFxuXSpcXHI/JC8uZXhlYyh0aGlzLmNodW5rKTtcbiAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFswXSA6ICcnO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNPLE1BQU1BLGFBQWEsQ0FBQztFQUN6QkMsV0FBVyxDQUFDQyxNQUFNLEVBQUVDLFFBQVEsRUFBRTtJQUM1QixJQUFJLENBQUNELE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNFLFVBQVUsR0FBR0QsUUFBUTtFQUM1QjtFQUVBRSxhQUFhLEdBQUc7SUFDZCxPQUFPLElBQUksQ0FBQ0QsVUFBVTtFQUN4QjtFQUVBRSxjQUFjLEdBQUc7SUFDZixPQUFPLElBQUksQ0FBQ0osTUFBTSxDQUFDSyxvQkFBb0IsQ0FBQyxJQUFJLENBQUNILFVBQVUsQ0FBQztFQUMxRDtFQUVBSSxVQUFVLEdBQUc7SUFDWCxJQUFJLENBQUNKLFVBQVUsRUFBRTtFQUNuQjtFQUVBSyxPQUFPLEdBQUc7SUFDUixPQUFPLElBQUksQ0FBQ0wsVUFBVSxHQUFHLElBQUksQ0FBQ0YsTUFBTSxDQUFDUSxnQkFBZ0IsRUFBRTtFQUN6RDtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUZBO0FBR08sTUFBTUMsWUFBWSxDQUFDO0VBQ3hCVixXQUFXLENBQUNXLEtBQUssRUFBRTtJQUNqQixJQUFJLENBQUNBLEtBQUssR0FBR0EsS0FBSztJQUVsQixJQUFJLENBQUNDLFNBQVMsR0FBRyxRQUFRO0lBRXpCLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcsQ0FBQztJQUMxQixJQUFJLENBQUNDLEdBQUcsR0FBRyxLQUFLO0lBQ2hCLElBQUksQ0FBQ1AsVUFBVSxFQUFFO0VBQ25CO0VBRUFRLFNBQVMsQ0FBQ0MsT0FBTyxFQUFFO0lBQ2pCLElBQUksSUFBSSxDQUFDRixHQUFHLEVBQUU7TUFDWixPQUFPLEtBQUs7SUFDZDtJQUVBLE1BQU1HLEVBQUUsR0FBRyxJQUFJQyxNQUFNLENBQUNGLE9BQU8sQ0FBQ0csTUFBTSxFQUFFLElBQUksQ0FBQztJQUMzQ0YsRUFBRSxDQUFDRyxTQUFTLEdBQUcsSUFBSSxDQUFDUCxpQkFBaUI7SUFFckMsTUFBTVEsS0FBSyxHQUFHSixFQUFFLENBQUNLLElBQUksQ0FBQyxJQUFJLENBQUNYLEtBQUssQ0FBQztJQUNqQyxJQUFJVSxLQUFLLEVBQUU7TUFDVCxJQUFJLENBQUNULFNBQVMsQ0FBQ1EsU0FBUyxHQUFHQyxLQUFLLENBQUNFLEtBQUs7TUFDdEMsT0FBTyxJQUFJO0lBQ2IsQ0FBQyxNQUFNO01BQ0wsT0FBTyxLQUFLO0lBQ2Q7RUFDRjtFQUVBbkIsYUFBYSxHQUFHO0lBQ2QsT0FBT29CLFNBQVM7RUFDbEI7RUFFQW5CLGNBQWMsR0FBRztJQUNmLE9BQU8sSUFBSSxDQUFDb0IsV0FBVztFQUN6QjtFQUVBbEIsVUFBVSxHQUFHO0lBQ1gsSUFBSSxDQUFDTSxpQkFBaUIsR0FBRyxJQUFJLENBQUNELFNBQVMsQ0FBQ1EsU0FBUztJQUNqRCxJQUFJLElBQUksQ0FBQ1IsU0FBUyxDQUFDYyxJQUFJLENBQUMsSUFBSSxDQUFDZixLQUFLLENBQUMsRUFBRTtNQUNuQyxJQUFJLENBQUNjLFdBQVcsR0FBRyxJQUFJLENBQUNkLEtBQUssQ0FBQ2dCLEtBQUssQ0FBQyxJQUFJLENBQUNkLGlCQUFpQixFQUFFLElBQUksQ0FBQ0QsU0FBUyxDQUFDUSxTQUFTLENBQUM7SUFDdkYsQ0FBQyxNQUFNO01BQ0wsSUFBSSxDQUFDSyxXQUFXLEdBQUcsSUFBSSxDQUFDZCxLQUFLLENBQUNnQixLQUFLLENBQUMsSUFBSSxDQUFDZCxpQkFBaUIsQ0FBQztNQUMzRCxJQUFJLENBQUNDLEdBQUcsR0FBRyxJQUFJO0lBQ2pCO0VBQ0Y7RUFFQU4sT0FBTyxHQUFHO0lBQ1IsT0FBTyxJQUFJLENBQUNNLEdBQUc7RUFDakI7RUFFQWMsb0JBQW9CLEdBQUc7SUFDckIsTUFBTVAsS0FBSyxHQUFHLDJCQUEyQixDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDWCxLQUFLLENBQUM7SUFDMUQsT0FBT1UsS0FBSyxHQUFHQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRTtFQUM5QjtBQUNGO0FBQUMifQ==