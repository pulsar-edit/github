"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChunkAdapter = exports.EditorAdapter = void 0;
/*
 * Input adapter to facilitate parsing conflicts from text loaded into an Editor.
 */
class EditorAdapter {
  constructor(editor, startRow) {
    this.editor = editor;
    this.currentRow = startRow;
  }
  getCurrentRow() {
    return this.currentRow;
  }
  getCurrentLine() {
    return this.editor.lineTextForBufferRow(this.currentRow);
  }
  advanceRow() {
    this.currentRow++;
  }
  isAtEnd() {
    return this.currentRow > this.editor.getLastBufferRow();
  }
}

/*
 * Input adapter for parsing conflicts from a chunk of text arriving from a ReadStream.
 */
exports.EditorAdapter = EditorAdapter;
class ChunkAdapter {
  constructor(chunk) {
    this.chunk = chunk;
    this.lineEndRx = /\r?\n/g;
    this.lineStartPosition = 0;
    this.eof = false;
    this.advanceRow();
  }
  advanceTo(pattern) {
    if (this.eof) {
      return false;
    }
    const rx = new RegExp(pattern.source, 'gm');
    rx.lastIndex = this.lineStartPosition;
    const match = rx.exec(this.chunk);
    if (match) {
      this.lineEndRx.lastIndex = match.index;
      return true;
    } else {
      return false;
    }
  }
  getCurrentRow() {
    return undefined;
  }
  getCurrentLine() {
    return this.currentLine;
  }
  advanceRow() {
    this.lineStartPosition = this.lineEndRx.lastIndex;
    if (this.lineEndRx.test(this.chunk)) {
      this.currentLine = this.chunk.slice(this.lineStartPosition, this.lineEndRx.lastIndex);
    } else {
      this.currentLine = this.chunk.slice(this.lineStartPosition);
      this.eof = true;
    }
  }
  isAtEnd() {
    return this.eof;
  }
  getLastPartialMarker() {
    const match = /[<|>=]{1,7} ?[^\r\n]*\r?$/.exec(this.chunk);
    return match ? match[0] : '';
  }
}
exports.ChunkAdapter = ChunkAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFZGl0b3JBZGFwdGVyIiwiY29uc3RydWN0b3IiLCJlZGl0b3IiLCJzdGFydFJvdyIsImN1cnJlbnRSb3ciLCJnZXRDdXJyZW50Um93IiwiZ2V0Q3VycmVudExpbmUiLCJsaW5lVGV4dEZvckJ1ZmZlclJvdyIsImFkdmFuY2VSb3ciLCJpc0F0RW5kIiwiZ2V0TGFzdEJ1ZmZlclJvdyIsImV4cG9ydHMiLCJDaHVua0FkYXB0ZXIiLCJjaHVuayIsImxpbmVFbmRSeCIsImxpbmVTdGFydFBvc2l0aW9uIiwiZW9mIiwiYWR2YW5jZVRvIiwicGF0dGVybiIsInJ4IiwiUmVnRXhwIiwic291cmNlIiwibGFzdEluZGV4IiwibWF0Y2giLCJleGVjIiwiaW5kZXgiLCJ1bmRlZmluZWQiLCJjdXJyZW50TGluZSIsInRlc3QiLCJzbGljZSIsImdldExhc3RQYXJ0aWFsTWFya2VyIl0sInNvdXJjZXMiOlsiYWRhcHRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogSW5wdXQgYWRhcHRlciB0byBmYWNpbGl0YXRlIHBhcnNpbmcgY29uZmxpY3RzIGZyb20gdGV4dCBsb2FkZWQgaW50byBhbiBFZGl0b3IuXG4gKi9cbmV4cG9ydCBjbGFzcyBFZGl0b3JBZGFwdGVyIHtcbiAgY29uc3RydWN0b3IoZWRpdG9yLCBzdGFydFJvdykge1xuICAgIHRoaXMuZWRpdG9yID0gZWRpdG9yO1xuICAgIHRoaXMuY3VycmVudFJvdyA9IHN0YXJ0Um93O1xuICB9XG5cbiAgZ2V0Q3VycmVudFJvdygpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50Um93O1xuICB9XG5cbiAgZ2V0Q3VycmVudExpbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRpdG9yLmxpbmVUZXh0Rm9yQnVmZmVyUm93KHRoaXMuY3VycmVudFJvdyk7XG4gIH1cblxuICBhZHZhbmNlUm93KCkge1xuICAgIHRoaXMuY3VycmVudFJvdysrO1xuICB9XG5cbiAgaXNBdEVuZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50Um93ID4gdGhpcy5lZGl0b3IuZ2V0TGFzdEJ1ZmZlclJvdygpO1xuICB9XG59XG5cbi8qXG4gKiBJbnB1dCBhZGFwdGVyIGZvciBwYXJzaW5nIGNvbmZsaWN0cyBmcm9tIGEgY2h1bmsgb2YgdGV4dCBhcnJpdmluZyBmcm9tIGEgUmVhZFN0cmVhbS5cbiAqL1xuZXhwb3J0IGNsYXNzIENodW5rQWRhcHRlciB7XG4gIGNvbnN0cnVjdG9yKGNodW5rKSB7XG4gICAgdGhpcy5jaHVuayA9IGNodW5rO1xuXG4gICAgdGhpcy5saW5lRW5kUnggPSAvXFxyP1xcbi9nO1xuXG4gICAgdGhpcy5saW5lU3RhcnRQb3NpdGlvbiA9IDA7XG4gICAgdGhpcy5lb2YgPSBmYWxzZTtcbiAgICB0aGlzLmFkdmFuY2VSb3coKTtcbiAgfVxuXG4gIGFkdmFuY2VUbyhwYXR0ZXJuKSB7XG4gICAgaWYgKHRoaXMuZW9mKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgcnggPSBuZXcgUmVnRXhwKHBhdHRlcm4uc291cmNlLCAnZ20nKTtcbiAgICByeC5sYXN0SW5kZXggPSB0aGlzLmxpbmVTdGFydFBvc2l0aW9uO1xuXG4gICAgY29uc3QgbWF0Y2ggPSByeC5leGVjKHRoaXMuY2h1bmspO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgdGhpcy5saW5lRW5kUngubGFzdEluZGV4ID0gbWF0Y2guaW5kZXg7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGdldEN1cnJlbnRSb3coKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGdldEN1cnJlbnRMaW5lKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRMaW5lO1xuICB9XG5cbiAgYWR2YW5jZVJvdygpIHtcbiAgICB0aGlzLmxpbmVTdGFydFBvc2l0aW9uID0gdGhpcy5saW5lRW5kUngubGFzdEluZGV4O1xuICAgIGlmICh0aGlzLmxpbmVFbmRSeC50ZXN0KHRoaXMuY2h1bmspKSB7XG4gICAgICB0aGlzLmN1cnJlbnRMaW5lID0gdGhpcy5jaHVuay5zbGljZSh0aGlzLmxpbmVTdGFydFBvc2l0aW9uLCB0aGlzLmxpbmVFbmRSeC5sYXN0SW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnJlbnRMaW5lID0gdGhpcy5jaHVuay5zbGljZSh0aGlzLmxpbmVTdGFydFBvc2l0aW9uKTtcbiAgICAgIHRoaXMuZW9mID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpc0F0RW5kKCkge1xuICAgIHJldHVybiB0aGlzLmVvZjtcbiAgfVxuXG4gIGdldExhc3RQYXJ0aWFsTWFya2VyKCkge1xuICAgIGNvbnN0IG1hdGNoID0gL1s8fD49XXsxLDd9ID9bXlxcclxcbl0qXFxyPyQvLmV4ZWModGhpcy5jaHVuayk7XG4gICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMF0gOiAnJztcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxhQUFhLENBQUM7RUFDekJDLFdBQVdBLENBQUNDLE1BQU0sRUFBRUMsUUFBUSxFQUFFO0lBQzVCLElBQUksQ0FBQ0QsTUFBTSxHQUFHQSxNQUFNO0lBQ3BCLElBQUksQ0FBQ0UsVUFBVSxHQUFHRCxRQUFRO0VBQzVCO0VBRUFFLGFBQWFBLENBQUEsRUFBRztJQUNkLE9BQU8sSUFBSSxDQUFDRCxVQUFVO0VBQ3hCO0VBRUFFLGNBQWNBLENBQUEsRUFBRztJQUNmLE9BQU8sSUFBSSxDQUFDSixNQUFNLENBQUNLLG9CQUFvQixDQUFDLElBQUksQ0FBQ0gsVUFBVSxDQUFDO0VBQzFEO0VBRUFJLFVBQVVBLENBQUEsRUFBRztJQUNYLElBQUksQ0FBQ0osVUFBVSxFQUFFO0VBQ25CO0VBRUFLLE9BQU9BLENBQUEsRUFBRztJQUNSLE9BQU8sSUFBSSxDQUFDTCxVQUFVLEdBQUcsSUFBSSxDQUFDRixNQUFNLENBQUNRLGdCQUFnQixFQUFFO0VBQ3pEO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBRkFDLE9BQUEsQ0FBQVgsYUFBQSxHQUFBQSxhQUFBO0FBR08sTUFBTVksWUFBWSxDQUFDO0VBQ3hCWCxXQUFXQSxDQUFDWSxLQUFLLEVBQUU7SUFDakIsSUFBSSxDQUFDQSxLQUFLLEdBQUdBLEtBQUs7SUFFbEIsSUFBSSxDQUFDQyxTQUFTLEdBQUcsUUFBUTtJQUV6QixJQUFJLENBQUNDLGlCQUFpQixHQUFHLENBQUM7SUFDMUIsSUFBSSxDQUFDQyxHQUFHLEdBQUcsS0FBSztJQUNoQixJQUFJLENBQUNSLFVBQVUsRUFBRTtFQUNuQjtFQUVBUyxTQUFTQSxDQUFDQyxPQUFPLEVBQUU7SUFDakIsSUFBSSxJQUFJLENBQUNGLEdBQUcsRUFBRTtNQUNaLE9BQU8sS0FBSztJQUNkO0lBRUEsTUFBTUcsRUFBRSxHQUFHLElBQUlDLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDRyxNQUFNLEVBQUUsSUFBSSxDQUFDO0lBQzNDRixFQUFFLENBQUNHLFNBQVMsR0FBRyxJQUFJLENBQUNQLGlCQUFpQjtJQUVyQyxNQUFNUSxLQUFLLEdBQUdKLEVBQUUsQ0FBQ0ssSUFBSSxDQUFDLElBQUksQ0FBQ1gsS0FBSyxDQUFDO0lBQ2pDLElBQUlVLEtBQUssRUFBRTtNQUNULElBQUksQ0FBQ1QsU0FBUyxDQUFDUSxTQUFTLEdBQUdDLEtBQUssQ0FBQ0UsS0FBSztNQUN0QyxPQUFPLElBQUk7SUFDYixDQUFDLE1BQU07TUFDTCxPQUFPLEtBQUs7SUFDZDtFQUNGO0VBRUFwQixhQUFhQSxDQUFBLEVBQUc7SUFDZCxPQUFPcUIsU0FBUztFQUNsQjtFQUVBcEIsY0FBY0EsQ0FBQSxFQUFHO0lBQ2YsT0FBTyxJQUFJLENBQUNxQixXQUFXO0VBQ3pCO0VBRUFuQixVQUFVQSxDQUFBLEVBQUc7SUFDWCxJQUFJLENBQUNPLGlCQUFpQixHQUFHLElBQUksQ0FBQ0QsU0FBUyxDQUFDUSxTQUFTO0lBQ2pELElBQUksSUFBSSxDQUFDUixTQUFTLENBQUNjLElBQUksQ0FBQyxJQUFJLENBQUNmLEtBQUssQ0FBQyxFQUFFO01BQ25DLElBQUksQ0FBQ2MsV0FBVyxHQUFHLElBQUksQ0FBQ2QsS0FBSyxDQUFDZ0IsS0FBSyxDQUFDLElBQUksQ0FBQ2QsaUJBQWlCLEVBQUUsSUFBSSxDQUFDRCxTQUFTLENBQUNRLFNBQVMsQ0FBQztJQUN2RixDQUFDLE1BQU07TUFDTCxJQUFJLENBQUNLLFdBQVcsR0FBRyxJQUFJLENBQUNkLEtBQUssQ0FBQ2dCLEtBQUssQ0FBQyxJQUFJLENBQUNkLGlCQUFpQixDQUFDO01BQzNELElBQUksQ0FBQ0MsR0FBRyxHQUFHLElBQUk7SUFDakI7RUFDRjtFQUVBUCxPQUFPQSxDQUFBLEVBQUc7SUFDUixPQUFPLElBQUksQ0FBQ08sR0FBRztFQUNqQjtFQUVBYyxvQkFBb0JBLENBQUEsRUFBRztJQUNyQixNQUFNUCxLQUFLLEdBQUcsMkJBQTJCLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUNYLEtBQUssQ0FBQztJQUMxRCxPQUFPVSxLQUFLLEdBQUdBLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFO0VBQzlCO0FBQ0Y7QUFBQ1osT0FBQSxDQUFBQyxZQUFBLEdBQUFBLFlBQUEifQ==