"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _markerTools = require("./marker-tools");
class Side {
  constructor(editor, marker, blockMarker, source, position, banner, originalText) {
    this.editor = editor;
    this.marker = marker;
    this.blockMarker = blockMarker;
    this.source = source;
    this.position = position;
    this.banner = banner;
    this.originalText = originalText;
  }
  getMarker() {
    return this.marker;
  }
  getBannerMarker() {
    return this.banner.getMarker();
  }
  getSource() {
    return this.source;
  }
  getBlockMarker() {
    return this.blockMarker;
  }
  getBlockPosition() {
    return this.position.when({
      top: () => 'before',
      middle: () => 'before',
      bottom: () => 'after'
    });
  }
  getLineCSSClass() {
    if (this.isModified() || this.isBannerModified()) {
      return 'github-ConflictModified';
    } else {
      return this.source.getCSSClass();
    }
  }
  getBannerCSSClass() {
    if (this.isModified() || this.isBannerModified()) {
      return 'github-ConflictModifiedBanner';
    } else {
      return this.source.getBannerCSSClass();
    }
  }
  getBlockCSSClasses() {
    const cxs = ['github-ConflictBlock'];
    cxs.push(this.source.getBlockCSSClass());
    cxs.push(this.position.getBlockCSSClass());
    if (this.isModified() || this.isBannerModified()) {
      cxs.push('github-ConflictModifiedBlock');
    }
    return cxs.join(' ');
  }
  getPosition() {
    return this.position;
  }
  getRange() {
    const bannerRange = this.banner.getRange();
    const bodyRange = this.marker.getBufferRange();
    return bannerRange.union(bodyRange);
  }
  includesPoint(point) {
    return this.getRange().containsPoint(point);
  }
  getText() {
    return this.editor.getTextInBufferRange(this.getMarker().getBufferRange());
  }
  isBannerModified() {
    return this.banner.isModified();
  }
  isModified() {
    return this.getText() !== this.originalText;
  }
  isEmpty() {
    return this.marker.getBufferRange().isEmpty();
  }
  revertBanner() {
    this.banner.revert();
  }
  revert() {
    const range = this.getMarker().getBufferRange();
    this.editor.setTextInBufferRange(range, this.originalText);
    this.getMarker().setBufferRange(range);
  }
  deleteBanner() {
    this.banner.delete();
  }
  delete() {
    (0, _markerTools.deleteMarkerIn)(this.getMarker(), this.editor);
  }
  appendText(text) {
    const insertionPoint = this.getMarker().getBufferRange().end;
    return this.editor.setTextInBufferRange([insertionPoint, insertionPoint], text);
  }
}
exports.default = Side;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbWFya2VyVG9vbHMiLCJyZXF1aXJlIiwiU2lkZSIsImNvbnN0cnVjdG9yIiwiZWRpdG9yIiwibWFya2VyIiwiYmxvY2tNYXJrZXIiLCJzb3VyY2UiLCJwb3NpdGlvbiIsImJhbm5lciIsIm9yaWdpbmFsVGV4dCIsImdldE1hcmtlciIsImdldEJhbm5lck1hcmtlciIsImdldFNvdXJjZSIsImdldEJsb2NrTWFya2VyIiwiZ2V0QmxvY2tQb3NpdGlvbiIsIndoZW4iLCJ0b3AiLCJtaWRkbGUiLCJib3R0b20iLCJnZXRMaW5lQ1NTQ2xhc3MiLCJpc01vZGlmaWVkIiwiaXNCYW5uZXJNb2RpZmllZCIsImdldENTU0NsYXNzIiwiZ2V0QmFubmVyQ1NTQ2xhc3MiLCJnZXRCbG9ja0NTU0NsYXNzZXMiLCJjeHMiLCJwdXNoIiwiZ2V0QmxvY2tDU1NDbGFzcyIsImpvaW4iLCJnZXRQb3NpdGlvbiIsImdldFJhbmdlIiwiYmFubmVyUmFuZ2UiLCJib2R5UmFuZ2UiLCJnZXRCdWZmZXJSYW5nZSIsInVuaW9uIiwiaW5jbHVkZXNQb2ludCIsInBvaW50IiwiY29udGFpbnNQb2ludCIsImdldFRleHQiLCJnZXRUZXh0SW5CdWZmZXJSYW5nZSIsImlzRW1wdHkiLCJyZXZlcnRCYW5uZXIiLCJyZXZlcnQiLCJyYW5nZSIsInNldFRleHRJbkJ1ZmZlclJhbmdlIiwic2V0QnVmZmVyUmFuZ2UiLCJkZWxldGVCYW5uZXIiLCJkZWxldGUiLCJkZWxldGVNYXJrZXJJbiIsImFwcGVuZFRleHQiLCJ0ZXh0IiwiaW5zZXJ0aW9uUG9pbnQiLCJlbmQiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbInNpZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtkZWxldGVNYXJrZXJJbn0gZnJvbSAnLi9tYXJrZXItdG9vbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaWRlIHtcbiAgY29uc3RydWN0b3IoZWRpdG9yLCBtYXJrZXIsIGJsb2NrTWFya2VyLCBzb3VyY2UsIHBvc2l0aW9uLCBiYW5uZXIsIG9yaWdpbmFsVGV4dCkge1xuICAgIHRoaXMuZWRpdG9yID0gZWRpdG9yO1xuICAgIHRoaXMubWFya2VyID0gbWFya2VyO1xuICAgIHRoaXMuYmxvY2tNYXJrZXIgPSBibG9ja01hcmtlcjtcbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgdGhpcy5iYW5uZXIgPSBiYW5uZXI7XG4gICAgdGhpcy5vcmlnaW5hbFRleHQgPSBvcmlnaW5hbFRleHQ7XG4gIH1cblxuICBnZXRNYXJrZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFya2VyO1xuICB9XG5cbiAgZ2V0QmFubmVyTWFya2VyKCkge1xuICAgIHJldHVybiB0aGlzLmJhbm5lci5nZXRNYXJrZXIoKTtcbiAgfVxuXG4gIGdldFNvdXJjZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2U7XG4gIH1cblxuICBnZXRCbG9ja01hcmtlcigpIHtcbiAgICByZXR1cm4gdGhpcy5ibG9ja01hcmtlcjtcbiAgfVxuXG4gIGdldEJsb2NrUG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb24ud2hlbih7XG4gICAgICB0b3A6ICgpID0+ICdiZWZvcmUnLFxuICAgICAgbWlkZGxlOiAoKSA9PiAnYmVmb3JlJyxcbiAgICAgIGJvdHRvbTogKCkgPT4gJ2FmdGVyJyxcbiAgICB9KTtcbiAgfVxuXG4gIGdldExpbmVDU1NDbGFzcygpIHtcbiAgICBpZiAodGhpcy5pc01vZGlmaWVkKCkgfHwgdGhpcy5pc0Jhbm5lck1vZGlmaWVkKCkpIHtcbiAgICAgIHJldHVybiAnZ2l0aHViLUNvbmZsaWN0TW9kaWZpZWQnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zb3VyY2UuZ2V0Q1NTQ2xhc3MoKTtcbiAgICB9XG4gIH1cblxuICBnZXRCYW5uZXJDU1NDbGFzcygpIHtcbiAgICBpZiAodGhpcy5pc01vZGlmaWVkKCkgfHwgdGhpcy5pc0Jhbm5lck1vZGlmaWVkKCkpIHtcbiAgICAgIHJldHVybiAnZ2l0aHViLUNvbmZsaWN0TW9kaWZpZWRCYW5uZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zb3VyY2UuZ2V0QmFubmVyQ1NTQ2xhc3MoKTtcbiAgICB9XG4gIH1cblxuICBnZXRCbG9ja0NTU0NsYXNzZXMoKSB7XG4gICAgY29uc3QgY3hzID0gWydnaXRodWItQ29uZmxpY3RCbG9jayddO1xuICAgIGN4cy5wdXNoKHRoaXMuc291cmNlLmdldEJsb2NrQ1NTQ2xhc3MoKSk7XG4gICAgY3hzLnB1c2godGhpcy5wb3NpdGlvbi5nZXRCbG9ja0NTU0NsYXNzKCkpO1xuICAgIGlmICh0aGlzLmlzTW9kaWZpZWQoKSB8fCB0aGlzLmlzQmFubmVyTW9kaWZpZWQoKSkge1xuICAgICAgY3hzLnB1c2goJ2dpdGh1Yi1Db25mbGljdE1vZGlmaWVkQmxvY2snKTtcbiAgICB9XG4gICAgcmV0dXJuIGN4cy5qb2luKCcgJyk7XG4gIH1cblxuICBnZXRQb3NpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wb3NpdGlvbjtcbiAgfVxuXG4gIGdldFJhbmdlKCkge1xuICAgIGNvbnN0IGJhbm5lclJhbmdlID0gdGhpcy5iYW5uZXIuZ2V0UmFuZ2UoKTtcbiAgICBjb25zdCBib2R5UmFuZ2UgPSB0aGlzLm1hcmtlci5nZXRCdWZmZXJSYW5nZSgpO1xuICAgIHJldHVybiBiYW5uZXJSYW5nZS51bmlvbihib2R5UmFuZ2UpO1xuICB9XG5cbiAgaW5jbHVkZXNQb2ludChwb2ludCkge1xuICAgIHJldHVybiB0aGlzLmdldFJhbmdlKCkuY29udGFpbnNQb2ludChwb2ludCk7XG4gIH1cblxuICBnZXRUZXh0KCkge1xuICAgIHJldHVybiB0aGlzLmVkaXRvci5nZXRUZXh0SW5CdWZmZXJSYW5nZSh0aGlzLmdldE1hcmtlcigpLmdldEJ1ZmZlclJhbmdlKCkpO1xuICB9XG5cbiAgaXNCYW5uZXJNb2RpZmllZCgpIHtcbiAgICByZXR1cm4gdGhpcy5iYW5uZXIuaXNNb2RpZmllZCgpO1xuICB9XG5cbiAgaXNNb2RpZmllZCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRUZXh0KCkgIT09IHRoaXMub3JpZ2luYWxUZXh0O1xuICB9XG5cbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXJrZXIuZ2V0QnVmZmVyUmFuZ2UoKS5pc0VtcHR5KCk7XG4gIH1cblxuICByZXZlcnRCYW5uZXIoKSB7XG4gICAgdGhpcy5iYW5uZXIucmV2ZXJ0KCk7XG4gIH1cblxuICByZXZlcnQoKSB7XG4gICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldE1hcmtlcigpLmdldEJ1ZmZlclJhbmdlKCk7XG4gICAgdGhpcy5lZGl0b3Iuc2V0VGV4dEluQnVmZmVyUmFuZ2UocmFuZ2UsIHRoaXMub3JpZ2luYWxUZXh0KTtcbiAgICB0aGlzLmdldE1hcmtlcigpLnNldEJ1ZmZlclJhbmdlKHJhbmdlKTtcbiAgfVxuXG4gIGRlbGV0ZUJhbm5lcigpIHtcbiAgICB0aGlzLmJhbm5lci5kZWxldGUoKTtcbiAgfVxuXG4gIGRlbGV0ZSgpIHtcbiAgICBkZWxldGVNYXJrZXJJbih0aGlzLmdldE1hcmtlcigpLCB0aGlzLmVkaXRvcik7XG4gIH1cblxuICBhcHBlbmRUZXh0KHRleHQpIHtcbiAgICBjb25zdCBpbnNlcnRpb25Qb2ludCA9IHRoaXMuZ2V0TWFya2VyKCkuZ2V0QnVmZmVyUmFuZ2UoKS5lbmQ7XG4gICAgcmV0dXJuIHRoaXMuZWRpdG9yLnNldFRleHRJbkJ1ZmZlclJhbmdlKFtpbnNlcnRpb25Qb2ludCwgaW5zZXJ0aW9uUG9pbnRdLCB0ZXh0KTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFFZSxNQUFNQyxJQUFJLENBQUM7RUFDeEJDLFdBQVdBLENBQUNDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxXQUFXLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUVDLFlBQVksRUFBRTtJQUMvRSxJQUFJ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