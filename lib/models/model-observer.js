"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class ModelObserver {
  constructor({
    fetchData,
    didUpdate
  }) {
    this.fetchData = fetchData || (() => {});
    this.didUpdate = didUpdate || (() => {});
    this.activeModel = null;
    this.activeModelData = null;
    this.activeModelUpdateSubscription = null;
    this.inProgress = false;
    this.pending = false;
  }
  setActiveModel(model) {
    if (model !== this.activeModel) {
      if (this.activeModelUpdateSubscription) {
        this.activeModelUpdateSubscription.dispose();
        this.activeModelUpdateSubscription = null;
      }
      this.activeModel = model;
      this.activeModelData = null;
      this.inProgress = false;
      this.pending = false;
      this.didUpdate(model);
      if (model) {
        this.activeModelUpdateSubscription = model.onDidUpdate(() => this.refreshModelData(model));
        return this.refreshModelData(model);
      }
    }
    return null;
  }
  refreshModelData(model = this.activeModel) {
    if (this.inProgress) {
      this.pending = true;
      return null;
    }
    this.lastModelDataRefreshPromise = this._refreshModelData(model);
    return this.lastModelDataRefreshPromise;
  }
  async _refreshModelData(model) {
    try {
      this.inProgress = true;
      const fetchDataPromise = this.fetchData(model);
      this.lastFetchDataPromise = fetchDataPromise;
      const modelData = await fetchDataPromise;
      // Since we re-fetch immediately when the model changes,
      // we need to ensure a fetch for an old active model
      // does not trample the newer fetch for the newer active model.
      if (fetchDataPromise === this.lastFetchDataPromise) {
        this.activeModel = model;
        this.activeModelData = modelData;
        this.didUpdate(model);
      }
    } finally {
      this.inProgress = false;
      if (this.pending) {
        this.pending = false;
        this.refreshModelData();
      }
    }
  }
  getActiveModel() {
    return this.activeModel;
  }
  getActiveModelData() {
    return this.activeModelData;
  }
  getLastModelDataRefreshPromise() {
    return this.lastModelDataRefreshPromise;
  }
  hasPendingUpdate() {
    return this.pending;
  }
  destroy() {
    if (this.activeModelUpdateSubscription) {
      this.activeModelUpdateSubscription.dispose();
    }
  }
}
exports.default = ModelObserver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2RlbE9ic2VydmVyIiwiY29uc3RydWN0b3IiLCJmZXRjaERhdGEiLCJkaWRVcGRhdGUiLCJhY3RpdmVNb2RlbCIsImFjdGl2ZU1vZGVsRGF0YSIsImFjdGl2ZU1vZGVsVXBkYXRlU3Vic2NyaXB0aW9uIiwiaW5Qcm9ncmVzcyIsInBlbmRpbmciLCJzZXRBY3RpdmVNb2RlbCIsIm1vZGVsIiwiZGlzcG9zZSIsIm9uRGlkVXBkYXRlIiwicmVmcmVzaE1vZGVsRGF0YSIsImxhc3RNb2RlbERhdGFSZWZyZXNoUHJvbWlzZSIsIl9yZWZyZXNoTW9kZWxEYXRhIiwiZmV0Y2hEYXRhUHJvbWlzZSIsImxhc3RGZXRjaERhdGFQcm9taXNlIiwibW9kZWxEYXRhIiwiZ2V0QWN0aXZlTW9kZWwiLCJnZXRBY3RpdmVNb2RlbERhdGEiLCJnZXRMYXN0TW9kZWxEYXRhUmVmcmVzaFByb21pc2UiLCJoYXNQZW5kaW5nVXBkYXRlIiwiZGVzdHJveSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsibW9kZWwtb2JzZXJ2ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kZWxPYnNlcnZlciB7XG4gIGNvbnN0cnVjdG9yKHtmZXRjaERhdGEsIGRpZFVwZGF0ZX0pIHtcbiAgICB0aGlzLmZldGNoRGF0YSA9IGZldGNoRGF0YSB8fCAoKCkgPT4ge30pO1xuICAgIHRoaXMuZGlkVXBkYXRlID0gZGlkVXBkYXRlIHx8ICgoKSA9PiB7fSk7XG4gICAgdGhpcy5hY3RpdmVNb2RlbCA9IG51bGw7XG4gICAgdGhpcy5hY3RpdmVNb2RlbERhdGEgPSBudWxsO1xuICAgIHRoaXMuYWN0aXZlTW9kZWxVcGRhdGVTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgIHRoaXMuaW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICB9XG5cbiAgc2V0QWN0aXZlTW9kZWwobW9kZWwpIHtcbiAgICBpZiAobW9kZWwgIT09IHRoaXMuYWN0aXZlTW9kZWwpIHtcbiAgICAgIGlmICh0aGlzLmFjdGl2ZU1vZGVsVXBkYXRlU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlTW9kZWxVcGRhdGVTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLmFjdGl2ZU1vZGVsVXBkYXRlU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRoaXMuYWN0aXZlTW9kZWwgPSBtb2RlbDtcbiAgICAgIHRoaXMuYWN0aXZlTW9kZWxEYXRhID0gbnVsbDtcbiAgICAgIHRoaXMuaW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLmRpZFVwZGF0ZShtb2RlbCk7XG4gICAgICBpZiAobW9kZWwpIHtcbiAgICAgICAgdGhpcy5hY3RpdmVNb2RlbFVwZGF0ZVN1YnNjcmlwdGlvbiA9IG1vZGVsLm9uRGlkVXBkYXRlKCgpID0+IHRoaXMucmVmcmVzaE1vZGVsRGF0YShtb2RlbCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWZyZXNoTW9kZWxEYXRhKG1vZGVsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZWZyZXNoTW9kZWxEYXRhKG1vZGVsID0gdGhpcy5hY3RpdmVNb2RlbCkge1xuICAgIGlmICh0aGlzLmluUHJvZ3Jlc3MpIHtcbiAgICAgIHRoaXMucGVuZGluZyA9IHRydWU7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5sYXN0TW9kZWxEYXRhUmVmcmVzaFByb21pc2UgPSB0aGlzLl9yZWZyZXNoTW9kZWxEYXRhKG1vZGVsKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0TW9kZWxEYXRhUmVmcmVzaFByb21pc2U7XG4gIH1cblxuICBhc3luYyBfcmVmcmVzaE1vZGVsRGF0YShtb2RlbCkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgY29uc3QgZmV0Y2hEYXRhUHJvbWlzZSA9IHRoaXMuZmV0Y2hEYXRhKG1vZGVsKTtcbiAgICAgIHRoaXMubGFzdEZldGNoRGF0YVByb21pc2UgPSBmZXRjaERhdGFQcm9taXNlO1xuICAgICAgY29uc3QgbW9kZWxEYXRhID0gYXdhaXQgZmV0Y2hEYXRhUHJvbWlzZTtcbiAgICAgIC8vIFNpbmNlIHdlIHJlLWZldGNoIGltbWVkaWF0ZWx5IHdoZW4gdGhlIG1vZGVsIGNoYW5nZXMsXG4gICAgICAvLyB3ZSBuZWVkIHRvIGVuc3VyZSBhIGZldGNoIGZvciBhbiBvbGQgYWN0aXZlIG1vZGVsXG4gICAgICAvLyBkb2VzIG5vdCB0cmFtcGxlIHRoZSBuZXdlciBmZXRjaCBmb3IgdGhlIG5ld2VyIGFjdGl2ZSBtb2RlbC5cbiAgICAgIGlmIChmZXRjaERhdGFQcm9taXNlID09PSB0aGlzLmxhc3RGZXRjaERhdGFQcm9taXNlKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlTW9kZWwgPSBtb2RlbDtcbiAgICAgICAgdGhpcy5hY3RpdmVNb2RlbERhdGEgPSBtb2RlbERhdGE7XG4gICAgICAgIHRoaXMuZGlkVXBkYXRlKG1vZGVsKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5pblByb2dyZXNzID0gZmFsc2U7XG4gICAgICBpZiAodGhpcy5wZW5kaW5nKSB7XG4gICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlZnJlc2hNb2RlbERhdGEoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRBY3RpdmVNb2RlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmVNb2RlbDtcbiAgfVxuXG4gIGdldEFjdGl2ZU1vZGVsRGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmVNb2RlbERhdGE7XG4gIH1cblxuICBnZXRMYXN0TW9kZWxEYXRhUmVmcmVzaFByb21pc2UoKSB7XG4gICAgcmV0dXJuIHRoaXMubGFzdE1vZGVsRGF0YVJlZnJlc2hQcm9taXNlO1xuICB9XG5cbiAgaGFzUGVuZGluZ1VwZGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wZW5kaW5nO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5hY3RpdmVNb2RlbFVwZGF0ZVN1YnNjcmlwdGlvbikgeyB0aGlzLmFjdGl2ZU1vZGVsVXBkYXRlU3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTsgfVxuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFlLE1BQU1BLGFBQWEsQ0FBQztFQUNqQ0MsV0FBV0EsQ0FBQztJQUFDQyxTQUFTO0lBQUVDO0VBQVMsQ0FBQyxFQUFFO0lBQ2xDLElBQUksQ0FBQ0QsU0FBUyxHQUFHQSxTQUFTLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN4QyxJQUFJLENBQUNDLFNBQVMsR0FBR0EsU0FBUyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDeEMsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSTtJQUN2QixJQUFJLENBQUNDLGVBQWUsR0FBRyxJQUFJO0lBQzNCLElBQUksQ0FBQ0MsNkJBQTZCLEdBQUcsSUFBSTtJQUN6QyxJQUFJLENBQUNDLFVBQVUsR0FBRyxLQUFLO0lBQ3ZCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLEtBQUs7RUFDdEI7RUFFQUMsY0FBY0EsQ0FBQ0MsS0FBSyxFQUFFO0lBQ3BCLElBQUlBLEtBQUssS0FBSyxJQUFJLENBQUNOLFdBQVcsRUFBRTtNQUM5QixJQUFJLElBQUksQ0FBQ0UsNkJBQTZCLEVBQUU7UUFDdEMsSUFBSSxDQUFDQSw2QkFBNkIsQ0FBQ0ssT0FBTyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDTCw2QkFBNkIsR0FBRyxJQUFJO01BQzNDO01BQ0EsSUFBSSxDQUFDRixXQUFXLEdBQUdNLEtBQUs7TUFDeEIsSUFBSSxDQUFDTCxlQUFlLEdBQUcsSUFBSTtNQUMzQixJQUFJLENBQUNFLFVBQVUsR0FBRyxLQUFLO01BQ3ZCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLEtBQUs7TUFDcEIsSUFBSSxDQUFDTCxTQUFTLENBQUNPLEtBQUssQ0FBQztNQUNyQixJQUFJQSxLQUFLLEVBQUU7UUFDVCxJQUFJLENBQUNKLDZCQUE2QixHQUFHSSxLQUFLLENBQUNFLFdBQVcsQ0FBQyxNQUFNLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUNILEtBQUssQ0FBQyxDQUFDO1FBQzFGLE9BQU8sSUFBSSxDQUFDRyxnQkFBZ0IsQ0FBQ0gsS0FBSyxDQUFDO01BQ3JDO0lBQ0Y7SUFDQSxPQUFPLElBQUk7RUFDYjtFQUVBRyxnQkFBZ0JBLENBQUNILEtBQUssR0FBRyxJQUFJLENBQUNOLFdBQVcsRUFBRTtJQUN6QyxJQUFJLElBQUksQ0FBQ0csVUFBVSxFQUFFO01BQ25CLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUk7TUFDbkIsT0FBTyxJQUFJO0lBQ2I7SUFDQSxJQUFJLENBQUNNLDJCQUEyQixHQUFHLElBQUksQ0FBQ0MsaUJBQWlCLENBQUNMLEtBQUssQ0FBQztJQUNoRSxPQUFPLElBQUksQ0FBQ0ksMkJBQTJCO0VBQ3pDO0VBRUEsTUFBTUMsaUJBQWlCQSxDQUFDTCxLQUFLLEVBQUU7SUFDN0IsSUFBSTtNQUNGLElBQUksQ0FBQ0gsVUFBVSxHQUFHLElBQUk7TUFDdEIsTUFBTVMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDZCxTQUFTLENBQUNRLEtBQUssQ0FBQztNQUM5QyxJQUFJLENBQUNPLG9CQUFvQixHQUFHRCxnQkFBZ0I7TUFDNUMsTUFBTUUsU0FBUyxHQUFHLE1BQU1GLGdCQUFnQjtNQUN4QztNQUNBO01BQ0E7TUFDQSxJQUFJQSxnQkFBZ0IsS0FBSyxJQUFJLENBQUNDLG9CQUFvQixFQUFFO1FBQ2xELElBQUksQ0FBQ2IsV0FBVyxHQUFHTSxLQUFLO1FBQ3hCLElBQUksQ0FBQ0wsZUFBZSxHQUFHYSxTQUFTO1FBQ2hDLElBQUksQ0FBQ2YsU0FBUyxDQUFDTyxLQUFLLENBQUM7TUFDdkI7SUFDRixDQUFDLFNBQVM7TUFDUixJQUFJLENBQUNILFVBQVUsR0FBRyxLQUFLO01BQ3ZCLElBQUksSUFBSSxDQUFDQyxPQUFPLEVBQUU7UUFDaEIsSUFBSSxDQUFDQSxPQUFPLEdBQUcsS0FBSztRQUNwQixJQUFJLENBQUNLLGdCQUFnQixDQUFDLENBQUM7TUFDekI7SUFDRjtFQUNGO0VBRUFNLGNBQWNBLENBQUEsRUFBRztJQUNmLE9BQU8sSUFBSSxDQUFDZixXQUFXO0VBQ3pCO0VBRUFnQixrQkFBa0JBLENBQUEsRUFBRztJQUNuQixPQUFPLElBQUksQ0FBQ2YsZUFBZTtFQUM3QjtFQUVBZ0IsOEJBQThCQSxDQUFBLEVBQUc7SUFDL0IsT0FBTyxJQUFJLENBQUNQLDJCQUEyQjtFQUN6QztFQUVBUSxnQkFBZ0JBLENBQUEsRUFBRztJQUNqQixPQUFPLElBQUksQ0FBQ2QsT0FBTztFQUNyQjtFQUVBZSxPQUFPQSxDQUFBLEVBQUc7SUFDUixJQUFJLElBQUksQ0FBQ2pCLDZCQUE2QixFQUFFO01BQUUsSUFBSSxDQUFDQSw2QkFBNkIsQ0FBQ0ssT0FBTyxDQUFDLENBQUM7SUFBRTtFQUMxRjtBQUNGO0FBQUNhLE9BQUEsQ0FBQUMsT0FBQSxHQUFBekIsYUFBQSJ9