"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class ModelObserver {
  constructor({
    fetchData,
    didUpdate
  }) {
    this.fetchData = fetchData || (() => {});
    this.didUpdate = didUpdate || (() => {});
    this.activeModel = null;
    this.activeModelData = null;
    this.activeModelUpdateSubscription = null;
    this.inProgress = false;
    this.pending = false;
  }
  setActiveModel(model) {
    if (model !== this.activeModel) {
      if (this.activeModelUpdateSubscription) {
        this.activeModelUpdateSubscription.dispose();
        this.activeModelUpdateSubscription = null;
      }
      this.activeModel = model;
      this.activeModelData = null;
      this.inProgress = false;
      this.pending = false;
      this.didUpdate(model);
      if (model) {
        this.activeModelUpdateSubscription = model.onDidUpdate(() => this.refreshModelData(model));
        return this.refreshModelData(model);
      }
    }
    return null;
  }
  refreshModelData(model = this.activeModel) {
    if (this.inProgress) {
      this.pending = true;
      return null;
    }
    this.lastModelDataRefreshPromise = this._refreshModelData(model);
    return this.lastModelDataRefreshPromise;
  }
  async _refreshModelData(model) {
    try {
      this.inProgress = true;
      const fetchDataPromise = this.fetchData(model);
      this.lastFetchDataPromise = fetchDataPromise;
      const modelData = await fetchDataPromise;
      // Since we re-fetch immediately when the model changes,
      // we need to ensure a fetch for an old active model
      // does not trample the newer fetch for the newer active model.
      if (fetchDataPromise === this.lastFetchDataPromise) {
        this.activeModel = model;
        this.activeModelData = modelData;
        this.didUpdate(model);
      }
    } finally {
      this.inProgress = false;
      if (this.pending) {
        this.pending = false;
        this.refreshModelData();
      }
    }
  }
  getActiveModel() {
    return this.activeModel;
  }
  getActiveModelData() {
    return this.activeModelData;
  }
  getLastModelDataRefreshPromise() {
    return this.lastModelDataRefreshPromise;
  }
  hasPendingUpdate() {
    return this.pending;
  }
  destroy() {
    if (this.activeModelUpdateSubscription) {
      this.activeModelUpdateSubscription.dispose();
    }
  }
}
exports.default = ModelObserver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2RlbE9ic2VydmVyIiwiY29uc3RydWN0b3IiLCJmZXRjaERhdGEiLCJkaWRVcGRhdGUiLCJhY3RpdmVNb2RlbCIsImFjdGl2ZU1vZGVsRGF0YSIsImFjdGl2ZU1vZGVsVXBkYXRlU3Vic2NyaXB0aW9uIiwiaW5Qcm9ncmVzcyIsInBlbmRpbmciLCJzZXRBY3RpdmVNb2RlbCIsIm1vZGVsIiwiZGlzcG9zZSIsIm9uRGlkVXBkYXRlIiwicmVmcmVzaE1vZGVsRGF0YSIsImxhc3RNb2RlbERhdGFSZWZyZXNoUHJvbWlzZSIsIl9yZWZyZXNoTW9kZWxEYXRhIiwiZmV0Y2hEYXRhUHJvbWlzZSIsImxhc3RGZXRjaERhdGFQcm9taXNlIiwibW9kZWxEYXRhIiwiZ2V0QWN0aXZlTW9kZWwiLCJnZXRBY3RpdmVNb2RlbERhdGEiLCJnZXRMYXN0TW9kZWxEYXRhUmVmcmVzaFByb21pc2UiLCJoYXNQZW5kaW5nVXBkYXRlIiwiZGVzdHJveSJdLCJzb3VyY2VzIjpbIm1vZGVsLW9ic2VydmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGVsT2JzZXJ2ZXIge1xuICBjb25zdHJ1Y3Rvcih7ZmV0Y2hEYXRhLCBkaWRVcGRhdGV9KSB7XG4gICAgdGhpcy5mZXRjaERhdGEgPSBmZXRjaERhdGEgfHwgKCgpID0+IHt9KTtcbiAgICB0aGlzLmRpZFVwZGF0ZSA9IGRpZFVwZGF0ZSB8fCAoKCkgPT4ge30pO1xuICAgIHRoaXMuYWN0aXZlTW9kZWwgPSBudWxsO1xuICAgIHRoaXMuYWN0aXZlTW9kZWxEYXRhID0gbnVsbDtcbiAgICB0aGlzLmFjdGl2ZU1vZGVsVXBkYXRlU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICB0aGlzLmluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIHNldEFjdGl2ZU1vZGVsKG1vZGVsKSB7XG4gICAgaWYgKG1vZGVsICE9PSB0aGlzLmFjdGl2ZU1vZGVsKSB7XG4gICAgICBpZiAodGhpcy5hY3RpdmVNb2RlbFVwZGF0ZVN1YnNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLmFjdGl2ZU1vZGVsVXBkYXRlU3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5hY3RpdmVNb2RlbFVwZGF0ZVN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICB9XG4gICAgICB0aGlzLmFjdGl2ZU1vZGVsID0gbW9kZWw7XG4gICAgICB0aGlzLmFjdGl2ZU1vZGVsRGF0YSA9IG51bGw7XG4gICAgICB0aGlzLmluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5kaWRVcGRhdGUobW9kZWwpO1xuICAgICAgaWYgKG1vZGVsKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlTW9kZWxVcGRhdGVTdWJzY3JpcHRpb24gPSBtb2RlbC5vbkRpZFVwZGF0ZSgoKSA9PiB0aGlzLnJlZnJlc2hNb2RlbERhdGEobW9kZWwpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVmcmVzaE1vZGVsRGF0YShtb2RlbCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmVmcmVzaE1vZGVsRGF0YShtb2RlbCA9IHRoaXMuYWN0aXZlTW9kZWwpIHtcbiAgICBpZiAodGhpcy5pblByb2dyZXNzKSB7XG4gICAgICB0aGlzLnBlbmRpbmcgPSB0cnVlO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHRoaXMubGFzdE1vZGVsRGF0YVJlZnJlc2hQcm9taXNlID0gdGhpcy5fcmVmcmVzaE1vZGVsRGF0YShtb2RlbCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdE1vZGVsRGF0YVJlZnJlc2hQcm9taXNlO1xuICB9XG5cbiAgYXN5bmMgX3JlZnJlc2hNb2RlbERhdGEobW9kZWwpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5pblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgIGNvbnN0IGZldGNoRGF0YVByb21pc2UgPSB0aGlzLmZldGNoRGF0YShtb2RlbCk7XG4gICAgICB0aGlzLmxhc3RGZXRjaERhdGFQcm9taXNlID0gZmV0Y2hEYXRhUHJvbWlzZTtcbiAgICAgIGNvbnN0IG1vZGVsRGF0YSA9IGF3YWl0IGZldGNoRGF0YVByb21pc2U7XG4gICAgICAvLyBTaW5jZSB3ZSByZS1mZXRjaCBpbW1lZGlhdGVseSB3aGVuIHRoZSBtb2RlbCBjaGFuZ2VzLFxuICAgICAgLy8gd2UgbmVlZCB0byBlbnN1cmUgYSBmZXRjaCBmb3IgYW4gb2xkIGFjdGl2ZSBtb2RlbFxuICAgICAgLy8gZG9lcyBub3QgdHJhbXBsZSB0aGUgbmV3ZXIgZmV0Y2ggZm9yIHRoZSBuZXdlciBhY3RpdmUgbW9kZWwuXG4gICAgICBpZiAoZmV0Y2hEYXRhUHJvbWlzZSA9PT0gdGhpcy5sYXN0RmV0Y2hEYXRhUHJvbWlzZSkge1xuICAgICAgICB0aGlzLmFjdGl2ZU1vZGVsID0gbW9kZWw7XG4gICAgICAgIHRoaXMuYWN0aXZlTW9kZWxEYXRhID0gbW9kZWxEYXRhO1xuICAgICAgICB0aGlzLmRpZFVwZGF0ZShtb2RlbCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuaW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgaWYgKHRoaXMucGVuZGluZykge1xuICAgICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZWZyZXNoTW9kZWxEYXRhKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0QWN0aXZlTW9kZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlTW9kZWw7XG4gIH1cblxuICBnZXRBY3RpdmVNb2RlbERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlTW9kZWxEYXRhO1xuICB9XG5cbiAgZ2V0TGFzdE1vZGVsRGF0YVJlZnJlc2hQcm9taXNlKCkge1xuICAgIHJldHVybiB0aGlzLmxhc3RNb2RlbERhdGFSZWZyZXNoUHJvbWlzZTtcbiAgfVxuXG4gIGhhc1BlbmRpbmdVcGRhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVuZGluZztcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuYWN0aXZlTW9kZWxVcGRhdGVTdWJzY3JpcHRpb24pIHsgdGhpcy5hY3RpdmVNb2RlbFVwZGF0ZVN1YnNjcmlwdGlvbi5kaXNwb3NlKCk7IH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZSxNQUFNQSxhQUFhLENBQUM7RUFDakNDLFdBQVcsQ0FBQztJQUFDQyxTQUFTO0lBQUVDO0VBQVMsQ0FBQyxFQUFFO0lBQ2xDLElBQUksQ0FBQ0QsU0FBUyxHQUFHQSxTQUFTLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN4QyxJQUFJLENBQUNDLFNBQVMsR0FBR0EsU0FBUyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDeEMsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSTtJQUN2QixJQUFJLENBQUNDLGVBQWUsR0FBRyxJQUFJO0lBQzNCLElBQUksQ0FBQ0MsNkJBQTZCLEdBQUcsSUFBSTtJQUN6QyxJQUFJLENBQUNDLFVBQVUsR0FBRyxLQUFLO0lBQ3ZCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLEtBQUs7RUFDdEI7RUFFQUMsY0FBYyxDQUFDQyxLQUFLLEVBQUU7SUFDcEIsSUFBSUEsS0FBSyxLQUFLLElBQUksQ0FBQ04sV0FBVyxFQUFFO01BQzlCLElBQUksSUFBSSxDQUFDRSw2QkFBNkIsRUFBRTtRQUN0QyxJQUFJLENBQUNBLDZCQUE2QixDQUFDSyxPQUFPLEVBQUU7UUFDNUMsSUFBSSxDQUFDTCw2QkFBNkIsR0FBRyxJQUFJO01BQzNDO01BQ0EsSUFBSSxDQUFDRixXQUFXLEdBQUdNLEtBQUs7TUFDeEIsSUFBSSxDQUFDTCxlQUFlLEdBQUcsSUFBSTtNQUMzQixJQUFJLENBQUNFLFVBQVUsR0FBRyxLQUFLO01BQ3ZCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLEtBQUs7TUFDcEIsSUFBSSxDQUFDTCxTQUFTLENBQUNPLEtBQUssQ0FBQztNQUNyQixJQUFJQSxLQUFLLEVBQUU7UUFDVCxJQUFJLENBQUNKLDZCQUE2QixHQUFHSSxLQUFLLENBQUNFLFdBQVcsQ0FBQyxNQUFNLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUNILEtBQUssQ0FBQyxDQUFDO1FBQzFGLE9BQU8sSUFBSSxDQUFDRyxnQkFBZ0IsQ0FBQ0gsS0FBSyxDQUFDO01BQ3JDO0lBQ0Y7SUFDQSxPQUFPLElBQUk7RUFDYjtFQUVBRyxnQkFBZ0IsQ0FBQ0gsS0FBSyxHQUFHLElBQUksQ0FBQ04sV0FBVyxFQUFFO0lBQ3pDLElBQUksSUFBSSxDQUFDRyxVQUFVLEVBQUU7TUFDbkIsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSTtNQUNuQixPQUFPLElBQUk7SUFDYjtJQUNBLElBQUksQ0FBQ00sMkJBQTJCLEdBQUcsSUFBSSxDQUFDQyxpQkFBaUIsQ0FBQ0wsS0FBSyxDQUFDO0lBQ2hFLE9BQU8sSUFBSSxDQUFDSSwyQkFBMkI7RUFDekM7RUFFQSxNQUFNQyxpQkFBaUIsQ0FBQ0wsS0FBSyxFQUFFO0lBQzdCLElBQUk7TUFDRixJQUFJLENBQUNILFVBQVUsR0FBRyxJQUFJO01BQ3RCLE1BQU1TLGdCQUFnQixHQUFHLElBQUksQ0FBQ2QsU0FBUyxDQUFDUSxLQUFLLENBQUM7TUFDOUMsSUFBSSxDQUFDTyxvQkFBb0IsR0FBR0QsZ0JBQWdCO01BQzVDLE1BQU1FLFNBQVMsR0FBRyxNQUFNRixnQkFBZ0I7TUFDeEM7TUFDQTtNQUNBO01BQ0EsSUFBSUEsZ0JBQWdCLEtBQUssSUFBSSxDQUFDQyxvQkFBb0IsRUFBRTtRQUNsRCxJQUFJLENBQUNiLFdBQVcsR0FBR00sS0FBSztRQUN4QixJQUFJLENBQUNMLGVBQWUsR0FBR2EsU0FBUztRQUNoQyxJQUFJLENBQUNmLFNBQVMsQ0FBQ08sS0FBSyxDQUFDO01BQ3ZCO0lBQ0YsQ0FBQyxTQUFTO01BQ1IsSUFBSSxDQUFDSCxVQUFVLEdBQUcsS0FBSztNQUN2QixJQUFJLElBQUksQ0FBQ0MsT0FBTyxFQUFFO1FBQ2hCLElBQUksQ0FBQ0EsT0FBTyxHQUFHLEtBQUs7UUFDcEIsSUFBSSxDQUFDSyxnQkFBZ0IsRUFBRTtNQUN6QjtJQUNGO0VBQ0Y7RUFFQU0sY0FBYyxHQUFHO0lBQ2YsT0FBTyxJQUFJLENBQUNmLFdBQVc7RUFDekI7RUFFQWdCLGtCQUFrQixHQUFHO0lBQ25CLE9BQU8sSUFBSSxDQUFDZixlQUFlO0VBQzdCO0VBRUFnQiw4QkFBOEIsR0FBRztJQUMvQixPQUFPLElBQUksQ0FBQ1AsMkJBQTJCO0VBQ3pDO0VBRUFRLGdCQUFnQixHQUFHO0lBQ2pCLE9BQU8sSUFBSSxDQUFDZCxPQUFPO0VBQ3JCO0VBRUFlLE9BQU8sR0FBRztJQUNSLElBQUksSUFBSSxDQUFDakIsNkJBQTZCLEVBQUU7TUFBRSxJQUFJLENBQUNBLDZCQUE2QixDQUFDSyxPQUFPLEVBQUU7SUFBRTtFQUMxRjtBQUNGO0FBQUMifQ==