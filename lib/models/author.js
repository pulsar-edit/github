"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nullAuthor = exports.default = exports.NO_REPLY_GITHUB_EMAIL = void 0;
const NEW = Symbol('new');
const NO_REPLY_GITHUB_EMAIL = 'noreply@github.com';
exports.NO_REPLY_GITHUB_EMAIL = NO_REPLY_GITHUB_EMAIL;
class Author {
  constructor(email, fullName, login = null, isNew = null, avatarUrl = null) {
    if (avatarUrl == null) {
      const match = (email || '').match(/^(\d+)\+[^@]+@users.noreply.github.com$/);
      if (match) {
        avatarUrl = 'https://avatars.githubusercontent.com/u/' + match[1] + '?s=32';
      } else if (email && email !== '') {
        avatarUrl = 'https://avatars.githubusercontent.com/u/e?email=' + encodeURIComponent(email) + '&s=32';
      } else {
        avatarUrl = '';
      }
    }
    this.email = email;
    this.fullName = fullName;
    this.login = login;
    this.new = isNew === NEW;
    this.avatarUrl = avatarUrl;
  }
  static createNew(email, fullName) {
    return new this(email, fullName, null, NEW);
  }
  getEmail() {
    return this.email;
  }
  getAvatarUrl() {
    return this.avatarUrl;
  }
  getFullName() {
    return this.fullName;
  }
  getLogin() {
    return this.login;
  }
  isNoReply() {
    return this.email === NO_REPLY_GITHUB_EMAIL;
  }
  hasLogin() {
    return this.login !== null;
  }
  isNew() {
    return this.new;
  }
  isPresent() {
    return true;
  }
  matches(other) {
    return this.getEmail() === other.getEmail();
  }
  toString() {
    let s = `${this.fullName} <${this.email}>`;
    if (this.hasLogin()) {
      s += ` @${this.login}`;
    }
    return s;
  }
  static compare(a, b) {
    if (a.getFullName() < b.getFullName()) {
      return -1;
    }
    if (a.getFullName() > b.getFullName()) {
      return 1;
    }
    return 0;
  }
}
exports.default = Author;
const nullAuthor = {
  getEmail() {
    return '';
  },
  getAvatarUrl() {
    return '';
  },
  getFullName() {
    return '';
  },
  getLogin() {
    return null;
  },
  isNoReply() {
    return false;
  },
  hasLogin() {
    return false;
  },
  isNew() {
    return false;
  },
  isPresent() {
    return false;
  },
  matches(other) {
    return other === this;
  },
  toString() {
    return 'null author';
  }
};
exports.nullAuthor = nullAuthor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJORVciLCJTeW1ib2wiLCJOT19SRVBMWV9HSVRIVUJfRU1BSUwiLCJleHBvcnRzIiwiQXV0aG9yIiwiY29uc3RydWN0b3IiLCJlbWFpbCIsImZ1bGxOYW1lIiwibG9naW4iLCJpc05ldyIsImF2YXRhclVybCIsIm1hdGNoIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwibmV3IiwiY3JlYXRlTmV3IiwiZ2V0RW1haWwiLCJnZXRBdmF0YXJVcmwiLCJnZXRGdWxsTmFtZSIsImdldExvZ2luIiwiaXNOb1JlcGx5IiwiaGFzTG9naW4iLCJpc1ByZXNlbnQiLCJtYXRjaGVzIiwib3RoZXIiLCJ0b1N0cmluZyIsInMiLCJjb21wYXJlIiwiYSIsImIiLCJkZWZhdWx0IiwibnVsbEF1dGhvciJdLCJzb3VyY2VzIjpbImF1dGhvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBORVcgPSBTeW1ib2woJ25ldycpO1xuXG5leHBvcnQgY29uc3QgTk9fUkVQTFlfR0lUSFVCX0VNQUlMID0gJ25vcmVwbHlAZ2l0aHViLmNvbSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dGhvciB7XG4gIGNvbnN0cnVjdG9yKGVtYWlsLCBmdWxsTmFtZSwgbG9naW4gPSBudWxsLCBpc05ldyA9IG51bGwsIGF2YXRhclVybCA9IG51bGwpIHtcbiAgICBpZiAoYXZhdGFyVXJsID09IG51bGwpIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gKGVtYWlsIHx8ICcnKS5tYXRjaCgvXihcXGQrKVxcK1teQF0rQHVzZXJzLm5vcmVwbHkuZ2l0aHViLmNvbSQvKTtcblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGF2YXRhclVybCA9ICdodHRwczovL2F2YXRhcnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3UvJyArIG1hdGNoWzFdICsgJz9zPTMyJztcbiAgICAgIH0gZWxzZSBpZiAoZW1haWwgJiYgZW1haWwgIT09ICcnKSB7XG4gICAgICAgIGF2YXRhclVybCA9ICdodHRwczovL2F2YXRhcnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3UvZT9lbWFpbD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGVtYWlsKSArICcmcz0zMic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhdmF0YXJVcmwgPSAnJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmVtYWlsID0gZW1haWw7XG4gICAgdGhpcy5mdWxsTmFtZSA9IGZ1bGxOYW1lO1xuICAgIHRoaXMubG9naW4gPSBsb2dpbjtcbiAgICB0aGlzLm5ldyA9IGlzTmV3ID09PSBORVc7XG4gICAgdGhpcy5hdmF0YXJVcmwgPSBhdmF0YXJVcmw7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlTmV3KGVtYWlsLCBmdWxsTmFtZSkge1xuICAgIHJldHVybiBuZXcgdGhpcyhlbWFpbCwgZnVsbE5hbWUsIG51bGwsIE5FVyk7XG4gIH1cblxuICBnZXRFbWFpbCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbWFpbDtcbiAgfVxuXG4gIGdldEF2YXRhclVybCgpIHtcbiAgICByZXR1cm4gdGhpcy5hdmF0YXJVcmw7XG4gIH1cblxuICBnZXRGdWxsTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5mdWxsTmFtZTtcbiAgfVxuXG4gIGdldExvZ2luKCkge1xuICAgIHJldHVybiB0aGlzLmxvZ2luO1xuICB9XG5cbiAgaXNOb1JlcGx5KCkge1xuICAgIHJldHVybiB0aGlzLmVtYWlsID09PSBOT19SRVBMWV9HSVRIVUJfRU1BSUw7XG4gIH1cblxuICBoYXNMb2dpbigpIHtcbiAgICByZXR1cm4gdGhpcy5sb2dpbiAhPT0gbnVsbDtcbiAgfVxuXG4gIGlzTmV3KCkge1xuICAgIHJldHVybiB0aGlzLm5ldztcbiAgfVxuXG4gIGlzUHJlc2VudCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIG1hdGNoZXMob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRFbWFpbCgpID09PSBvdGhlci5nZXRFbWFpbCgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IHMgPSBgJHt0aGlzLmZ1bGxOYW1lfSA8JHt0aGlzLmVtYWlsfT5gO1xuICAgIGlmICh0aGlzLmhhc0xvZ2luKCkpIHtcbiAgICAgIHMgKz0gYCBAJHt0aGlzLmxvZ2lufWA7XG4gICAgfVxuICAgIHJldHVybiBzO1xuICB9XG5cbiAgc3RhdGljIGNvbXBhcmUoYSwgYikge1xuICAgIGlmIChhLmdldEZ1bGxOYW1lKCkgPCBiLmdldEZ1bGxOYW1lKCkpIHsgcmV0dXJuIC0xOyB9XG4gICAgaWYgKGEuZ2V0RnVsbE5hbWUoKSA+IGIuZ2V0RnVsbE5hbWUoKSkgeyByZXR1cm4gMTsgfVxuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBudWxsQXV0aG9yID0ge1xuICBnZXRFbWFpbCgpIHtcbiAgICByZXR1cm4gJyc7XG4gIH0sXG5cbiAgZ2V0QXZhdGFyVXJsKCkge1xuICAgIHJldHVybiAnJztcbiAgfSxcblxuICBnZXRGdWxsTmFtZSgpIHtcbiAgICByZXR1cm4gJyc7XG4gIH0sXG5cbiAgZ2V0TG9naW4oKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgaXNOb1JlcGx5KCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICBoYXNMb2dpbigpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgaXNOZXcoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGlzUHJlc2VudCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgbWF0Y2hlcyhvdGhlcikge1xuICAgIHJldHVybiBvdGhlciA9PT0gdGhpcztcbiAgfSxcblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ251bGwgYXV0aG9yJztcbiAgfSxcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE1BQU1BLEdBQUcsR0FBR0MsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUVsQixNQUFNQyxxQkFBcUIsR0FBRyxvQkFBb0I7QUFBQ0MsT0FBQSxDQUFBRCxxQkFBQSxHQUFBQSxxQkFB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