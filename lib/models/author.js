"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nullAuthor = exports.default = exports.NO_REPLY_GITHUB_EMAIL = void 0;
const NEW = Symbol('new');
const NO_REPLY_GITHUB_EMAIL = 'noreply@github.com';
exports.NO_REPLY_GITHUB_EMAIL = NO_REPLY_GITHUB_EMAIL;
class Author {
  constructor(email, fullName, login = null, isNew = null, avatarUrl = null) {
    if (avatarUrl == null) {
      const match = (email || '').match(/^(\d+)\+[^@]+@users.noreply.github.com$/);
      if (match) {
        avatarUrl = 'https://avatars.githubusercontent.com/u/' + match[1] + '?s=32';
      } else if (email && email !== '') {
        avatarUrl = 'https://avatars.githubusercontent.com/u/e?email=' + encodeURIComponent(email) + '&s=32';
      } else {
        avatarUrl = '';
      }
    }
    this.email = email;
    this.fullName = fullName;
    this.login = login;
    this.new = isNew === NEW;
    this.avatarUrl = avatarUrl;
  }
  static createNew(email, fullName) {
    return new this(email, fullName, null, NEW);
  }
  getEmail() {
    return this.email;
  }
  getAvatarUrl() {
    return this.avatarUrl;
  }
  getFullName() {
    return this.fullName;
  }
  getLogin() {
    return this.login;
  }
  isNoReply() {
    return this.email === NO_REPLY_GITHUB_EMAIL;
  }
  hasLogin() {
    return this.login !== null;
  }
  isNew() {
    return this.new;
  }
  isPresent() {
    return true;
  }
  matches(other) {
    return this.getEmail() === other.getEmail();
  }
  toString() {
    let s = `${this.fullName} <${this.email}>`;
    if (this.hasLogin()) {
      s += ` @${this.login}`;
    }
    return s;
  }
  static compare(a, b) {
    if (a.getFullName() < b.getFullName()) {
      return -1;
    }
    if (a.getFullName() > b.getFullName()) {
      return 1;
    }
    return 0;
  }
}
exports.default = Author;
const nullAuthor = {
  getEmail() {
    return '';
  },
  getAvatarUrl() {
    return '';
  },
  getFullName() {
    return '';
  },
  getLogin() {
    return null;
  },
  isNoReply() {
    return false;
  },
  hasLogin() {
    return false;
  },
  isNew() {
    return false;
  },
  isPresent() {
    return false;
  },
  matches(other) {
    return other === this;
  },
  toString() {
    return 'null author';
  }
};
exports.nullAuthor = nullAuthor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJORVciLCJTeW1ib2wiLCJOT19SRVBMWV9HSVRIVUJfRU1BSUwiLCJBdXRob3IiLCJjb25zdHJ1Y3RvciIsImVtYWlsIiwiZnVsbE5hbWUiLCJsb2dpbiIsImlzTmV3IiwiYXZhdGFyVXJsIiwibWF0Y2giLCJlbmNvZGVVUklDb21wb25lbnQiLCJuZXciLCJjcmVhdGVOZXciLCJnZXRFbWFpbCIsImdldEF2YXRhclVybCIsImdldEZ1bGxOYW1lIiwiZ2V0TG9naW4iLCJpc05vUmVwbHkiLCJoYXNMb2dpbiIsImlzUHJlc2VudCIsIm1hdGNoZXMiLCJvdGhlciIsInRvU3RyaW5nIiwicyIsImNvbXBhcmUiLCJhIiwiYiIsIm51bGxBdXRob3IiXSwic291cmNlcyI6WyJhdXRob3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTkVXID0gU3ltYm9sKCduZXcnKTtcblxuZXhwb3J0IGNvbnN0IE5PX1JFUExZX0dJVEhVQl9FTUFJTCA9ICdub3JlcGx5QGdpdGh1Yi5jb20nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRob3Ige1xuICBjb25zdHJ1Y3RvcihlbWFpbCwgZnVsbE5hbWUsIGxvZ2luID0gbnVsbCwgaXNOZXcgPSBudWxsLCBhdmF0YXJVcmwgPSBudWxsKSB7XG4gICAgaWYgKGF2YXRhclVybCA9PSBudWxsKSB7XG4gICAgICBjb25zdCBtYXRjaCA9IChlbWFpbCB8fCAnJykubWF0Y2goL14oXFxkKylcXCtbXkBdK0B1c2Vycy5ub3JlcGx5LmdpdGh1Yi5jb20kLyk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBhdmF0YXJVcmwgPSAnaHR0cHM6Ly9hdmF0YXJzLmdpdGh1YnVzZXJjb250ZW50LmNvbS91LycgKyBtYXRjaFsxXSArICc/cz0zMic7XG4gICAgICB9IGVsc2UgaWYgKGVtYWlsICYmIGVtYWlsICE9PSAnJykge1xuICAgICAgICBhdmF0YXJVcmwgPSAnaHR0cHM6Ly9hdmF0YXJzLmdpdGh1YnVzZXJjb250ZW50LmNvbS91L2U/ZW1haWw9JyArIGVuY29kZVVSSUNvbXBvbmVudChlbWFpbCkgKyAnJnM9MzInO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXZhdGFyVXJsID0gJyc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5lbWFpbCA9IGVtYWlsO1xuICAgIHRoaXMuZnVsbE5hbWUgPSBmdWxsTmFtZTtcbiAgICB0aGlzLmxvZ2luID0gbG9naW47XG4gICAgdGhpcy5uZXcgPSBpc05ldyA9PT0gTkVXO1xuICAgIHRoaXMuYXZhdGFyVXJsID0gYXZhdGFyVXJsO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZU5ldyhlbWFpbCwgZnVsbE5hbWUpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMoZW1haWwsIGZ1bGxOYW1lLCBudWxsLCBORVcpO1xuICB9XG5cbiAgZ2V0RW1haWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1haWw7XG4gIH1cblxuICBnZXRBdmF0YXJVcmwoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXZhdGFyVXJsO1xuICB9XG5cbiAgZ2V0RnVsbE5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZnVsbE5hbWU7XG4gIH1cblxuICBnZXRMb2dpbigpIHtcbiAgICByZXR1cm4gdGhpcy5sb2dpbjtcbiAgfVxuXG4gIGlzTm9SZXBseSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbWFpbCA9PT0gTk9fUkVQTFlfR0lUSFVCX0VNQUlMO1xuICB9XG5cbiAgaGFzTG9naW4oKSB7XG4gICAgcmV0dXJuIHRoaXMubG9naW4gIT09IG51bGw7XG4gIH1cblxuICBpc05ldygpIHtcbiAgICByZXR1cm4gdGhpcy5uZXc7XG4gIH1cblxuICBpc1ByZXNlbnQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBtYXRjaGVzKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RW1haWwoKSA9PT0gb3RoZXIuZ2V0RW1haWwoKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCBzID0gYCR7dGhpcy5mdWxsTmFtZX0gPCR7dGhpcy5lbWFpbH0+YDtcbiAgICBpZiAodGhpcy5oYXNMb2dpbigpKSB7XG4gICAgICBzICs9IGAgQCR7dGhpcy5sb2dpbn1gO1xuICAgIH1cbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIHN0YXRpYyBjb21wYXJlKGEsIGIpIHtcbiAgICBpZiAoYS5nZXRGdWxsTmFtZSgpIDwgYi5nZXRGdWxsTmFtZSgpKSB7IHJldHVybiAtMTsgfVxuICAgIGlmIChhLmdldEZ1bGxOYW1lKCkgPiBiLmdldEZ1bGxOYW1lKCkpIHsgcmV0dXJuIDE7IH1cbiAgICByZXR1cm4gMDtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgbnVsbEF1dGhvciA9IHtcbiAgZ2V0RW1haWwoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9LFxuXG4gIGdldEF2YXRhclVybCgpIHtcbiAgICByZXR1cm4gJyc7XG4gIH0sXG5cbiAgZ2V0RnVsbE5hbWUoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9LFxuXG4gIGdldExvZ2luKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIGlzTm9SZXBseSgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgaGFzTG9naW4oKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGlzTmV3KCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICBpc1ByZXNlbnQoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIG1hdGNoZXMob3RoZXIpIHtcbiAgICByZXR1cm4gb3RoZXIgPT09IHRoaXM7XG4gIH0sXG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdudWxsIGF1dGhvcic7XG4gIH0sXG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNQSxHQUFHLEdBQUdDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFFbEIsTUFBTUMscUJBQXFCLEdBQUcsb0JBQW9CO0FBQUM7QUFFM0MsTUFBTUMsTUFBTSxDQUFDO0VBQzFCQyxXQUFXLENBQUNDLEtBQUssRUFB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