"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _path = _interopRequireDefault(require("path"));
var _electron = require("electron");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
let headless = null;
class EventLogger {
  constructor(kind) {
    this.kind = kind;
    this.directory = '<unknown>';
    this.shortDirectory = '<unknown>';
    if (headless === null) {
      headless = !_electron.remote.getCurrentWindow().isVisible();
    }
  }
  showStarted(directory, implementation) {
    this.directory = directory;
    this.shortDirectory = directory.split(_path.default.sep).slice(-2).join(_path.default.sep);
    if (!this.isEnabled()) {
      return;
    }
    this.shortLog(`${implementation} watcher started`);
  }
  showEvents(events) {
    if (!this.isEnabled()) {
      return;
    }
    const uniqueRelativeNames = new Set(events.map(event => {
      return _path.default.relative(this.directory, event.path);
    }));
    const fileNames = Array.from(uniqueRelativeNames).slice(0, 3);
    const elipses = uniqueRelativeNames.size > 3 ? '...' : '';
    const summary = `${this.getShortName()}: ${fileNames.join(', ')}${elipses}`;

    /* eslint-disable no-console */
    if (headless) {
      const eventText = events.map(event => {
        if (event.action === 'renamed') {
          return `  ${event.oldPath} => ${event.path} (${event.action})\n`;
        } else {
          return `  ${event.path} (${event.action})\n`;
        }
      }).join('\n');
      console.log(summary + '\n' + eventText);
    } else {
      console.groupCollapsed(summary);
      console.table(events, ['action', 'path', 'oldPath']);
      console.groupEnd();
    }
    /* eslint-enable no-console */
  }

  showFocusEvent() {
    if (!this.isEnabled()) {
      return;
    }
    this.shortLog('focus triggered');
  }
  showWorkdirOrHeadEvents() {
    if (!this.isEnabled()) {
      return;
    }
    this.shortLog('working directory or HEAD change');
  }
  showStopped() {
    if (!this.isEnabled()) {
      return;
    }
    this.shortLog('stopped');
  }
  isEnabled() {
    return process.env.ATOM_GITHUB_FS_EVENT_LOG || atom.config.get('github.filesystemEventDiagnostics');
  }
  getShortName() {
    return `${this.kind} @ ${this.shortDirectory}`;
  }
  shortLog(line) {
    if (headless) {
      // eslint-disable-next-line no-console
      console.log(`${this.getShortName()}: ${line}`);
      return;
    }

    // eslint-disable-next-line no-console
    console.log('%c%s%c: %s', 'font-weight: bold; color: blue;', this.getShortName(), 'font-weight: normal; color: black;', line);
  }
}
exports.default = EventLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJoZWFkbGVzcyIsIkV2ZW50TG9nZ2VyIiwiY29uc3RydWN0b3IiLCJraW5kIiwiZGlyZWN0b3J5Iiwic2hvcnREaXJlY3RvcnkiLCJyZW1vdGUiLCJnZXRDdXJyZW50V2luZG93IiwiaXNWaXNpYmxlIiwic2hvd1N0YXJ0ZWQiLCJpbXBsZW1lbnRhdGlvbiIsInNwbGl0IiwicGF0aCIsInNlcCIsInNsaWNlIiwiam9pbiIsImlzRW5hYmxlZCIsInNob3J0TG9nIiwic2hvd0V2ZW50cyIsImV2ZW50cyIsInVuaXF1ZVJlbGF0aXZlTmFtZXMiLCJTZXQiLCJtYXAiLCJldmVudCIsInJlbGF0aXZlIiwiZmlsZU5hbWVzIiwiQXJyYXkiLCJmcm9tIiwiZWxpcHNlcyIsInNpemUiLCJzdW1tYXJ5IiwiZ2V0U2hvcnROYW1lIiwiZXZlbnRUZXh0IiwiYWN0aW9uIiwib2xkUGF0aCIsImNvbnNvbGUiLCJsb2ciLCJncm91cENvbGxhcHNlZCIsInRhYmxlIiwiZ3JvdXBFbmQiLCJzaG93Rm9jdXNFdmVudCIsInNob3dXb3JrZGlyT3JIZWFkRXZlbnRzIiwic2hvd1N0b3BwZWQiLCJwcm9jZXNzIiwiZW52IiwiQVRPTV9HSVRIVUJfRlNfRVZFTlRfTE9HIiwiYXRvbSIsImNvbmZpZyIsImdldCIsImxpbmUiXSwic291cmNlcyI6WyJldmVudC1sb2dnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQge3JlbW90ZX0gZnJvbSAnZWxlY3Ryb24nO1xuXG5sZXQgaGVhZGxlc3MgPSBudWxsO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudExvZ2dlciB7XG4gIGNvbnN0cnVjdG9yKGtpbmQpIHtcbiAgICB0aGlzLmtpbmQgPSBraW5kO1xuICAgIHRoaXMuZGlyZWN0b3J5ID0gJzx1bmtub3duPic7XG4gICAgdGhpcy5zaG9ydERpcmVjdG9yeSA9ICc8dW5rbm93bj4nO1xuXG4gICAgaWYgKGhlYWRsZXNzID09PSBudWxsKSB7XG4gICAgICBoZWFkbGVzcyA9ICFyZW1vdGUuZ2V0Q3VycmVudFdpbmRvdygpLmlzVmlzaWJsZSgpO1xuICAgIH1cbiAgfVxuXG4gIHNob3dTdGFydGVkKGRpcmVjdG9yeSwgaW1wbGVtZW50YXRpb24pIHtcbiAgICB0aGlzLmRpcmVjdG9yeSA9IGRpcmVjdG9yeTtcbiAgICB0aGlzLnNob3J0RGlyZWN0b3J5ID0gZGlyZWN0b3J5LnNwbGl0KHBhdGguc2VwKS5zbGljZSgtMikuam9pbihwYXRoLnNlcCk7XG5cbiAgICBpZiAoIXRoaXMuaXNFbmFibGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNob3J0TG9nKGAke2ltcGxlbWVudGF0aW9ufSB3YXRjaGVyIHN0YXJ0ZWRgKTtcbiAgfVxuXG4gIHNob3dFdmVudHMoZXZlbnRzKSB7XG4gICAgaWYgKCF0aGlzLmlzRW5hYmxlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdW5pcXVlUmVsYXRpdmVOYW1lcyA9IG5ldyBTZXQoZXZlbnRzLm1hcChldmVudCA9PiB7XG4gICAgICByZXR1cm4gcGF0aC5yZWxhdGl2ZSh0aGlzLmRpcmVjdG9yeSwgZXZlbnQucGF0aCk7XG4gICAgfSkpO1xuXG4gICAgY29uc3QgZmlsZU5hbWVzID0gQXJyYXkuZnJvbSh1bmlxdWVSZWxhdGl2ZU5hbWVzKS5zbGljZSgwLCAzKTtcbiAgICBjb25zdCBlbGlwc2VzID0gdW5pcXVlUmVsYXRpdmVOYW1lcy5zaXplID4gMyA/ICcuLi4nIDogJyc7XG4gICAgY29uc3Qgc3VtbWFyeSA9IGAke3RoaXMuZ2V0U2hvcnROYW1lKCl9OiAke2ZpbGVOYW1lcy5qb2luKCcsICcpfSR7ZWxpcHNlc31gO1xuXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICAgIGlmIChoZWFkbGVzcykge1xuICAgICAgY29uc3QgZXZlbnRUZXh0ID0gZXZlbnRzLm1hcChldmVudCA9PiB7XG4gICAgICAgIGlmIChldmVudC5hY3Rpb24gPT09ICdyZW5hbWVkJykge1xuICAgICAgICAgIHJldHVybiBgICAke2V2ZW50Lm9sZFBhdGh9ID0+ICR7ZXZlbnQucGF0aH0gKCR7ZXZlbnQuYWN0aW9ufSlcXG5gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBgICAke2V2ZW50LnBhdGh9ICgke2V2ZW50LmFjdGlvbn0pXFxuYDtcbiAgICAgICAgfVxuICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICBjb25zb2xlLmxvZyhzdW1tYXJ5ICsgJ1xcbicgKyBldmVudFRleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmdyb3VwQ29sbGFwc2VkKHN1bW1hcnkpO1xuICAgICAgY29uc29sZS50YWJsZShldmVudHMsIFsnYWN0aW9uJywgJ3BhdGgnLCAnb2xkUGF0aCddKTtcbiAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG4gIH1cblxuICBzaG93Rm9jdXNFdmVudCgpIHtcbiAgICBpZiAoIXRoaXMuaXNFbmFibGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNob3J0TG9nKCdmb2N1cyB0cmlnZ2VyZWQnKTtcbiAgfVxuXG4gIHNob3dXb3JrZGlyT3JIZWFkRXZlbnRzKCkge1xuICAgIGlmICghdGhpcy5pc0VuYWJsZWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2hvcnRMb2coJ3dvcmtpbmcgZGlyZWN0b3J5IG9yIEhFQUQgY2hhbmdlJyk7XG4gIH1cblxuICBzaG93U3RvcHBlZCgpIHtcbiAgICBpZiAoIXRoaXMuaXNFbmFibGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNob3J0TG9nKCdzdG9wcGVkJyk7XG4gIH1cblxuICBpc0VuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MuZW52LkFUT01fR0lUSFVCX0ZTX0VWRU5UX0xPRyB8fCBhdG9tLmNvbmZpZy5nZXQoJ2dpdGh1Yi5maWxlc3lzdGVtRXZlbnREaWFnbm9zdGljcycpO1xuICB9XG5cbiAgZ2V0U2hvcnROYW1lKCkge1xuICAgIHJldHVybiBgJHt0aGlzLmtpbmR9IEAgJHt0aGlzLnNob3J0RGlyZWN0b3J5fWA7XG4gIH1cblxuICBzaG9ydExvZyhsaW5lKSB7XG4gICAgaWYgKGhlYWRsZXNzKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS5sb2coYCR7dGhpcy5nZXRTaG9ydE5hbWUoKX06ICR7bGluZX1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKCclYyVzJWM6ICVzJyxcbiAgICAgICdmb250LXdlaWdodDogYm9sZDsgY29sb3I6IGJsdWU7JyxcbiAgICAgIHRoaXMuZ2V0U2hvcnROYW1lKCksXG4gICAgICAnZm9udC13ZWlnaHQ6IG5vcm1hbDsgY29sb3I6IGJsYWNrOycsXG4gICAgICBsaW5lLFxuICAgICk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUFnQztBQUVoQyxJQUFJQSxRQUFRLEdBQUcsSUFBSTtBQUVKLE1BQU1DLFdBQVcsQ0FBQztFQUMvQkMsV0FBVyxDQUFDQyxJQUFJLEVBQUU7SUFDaEIsSUFBSSxDQUFDQSxJQUFJLEdBQUdBLElBQUk7SUFDaEIsSUFBSSxDQUFDQyxTQUFTLEdBQUcsV0FBVztJQUM1QixJQUFJLENBQUNDLGNBQWMsR0FBRyxXQUFXO0lBRWpDLElBQUlMLFFBQVEsS0FBSyxJQUFJLEVBQUU7TUFDckJBLFFBQVEsR0FBRyxDQUFDTSxnQkFBTSxDQUFDQyxnQkFBZ0IsRUFBRSxDQUFDQyxTQUFTLEVBQUU7SUFDbkQ7RUFDRjtFQUVBQyxXQUFXLENBQUNMLFNBQVMsRUFBRU0sY0FBYyxFQUFFO0lBQ3JDLElBQUks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