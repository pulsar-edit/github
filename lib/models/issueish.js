"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _url = require("url");
var _moment = _interopRequireDefault(require("moment"));
var _buildStatus = require("./build-status");
var _helpers = require("../helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Issueish {
  constructor(data) {
    const author = data.author || _helpers.GHOST_USER;
    this.number = data.number;
    this.title = data.title;
    this.url = new _url.URL(data.url);
    this.authorLogin = author.login;
    this.authorAvatarURL = new _url.URL(author.avatarUrl);
    this.createdAt = (0, _moment.default)(data.createdAt, _moment.default.ISO_8601);
    this.headRefName = data.headRefName;
    this.headRepositoryID = data.repository.id;
    this.latestCommit = null;
    this.statusContexts = [];
    this.checkRuns = [];
    if (data.commits.nodes.length > 0) {
      this.latestCommit = data.commits.nodes[0].commit;
    }
    if (this.latestCommit && this.latestCommit.status) {
      this.statusContexts = this.latestCommit.status.contexts;
    }
  }
  getNumber() {
    return this.number;
  }
  getTitle() {
    return this.title;
  }
  getGitHubURL() {
    return this.url.toString();
  }
  getAuthorLogin() {
    return this.authorLogin;
  }
  getAuthorAvatarURL(size = 32) {
    const u = new _url.URL(this.authorAvatarURL.toString());
    u.searchParams.set('s', size);
    return u.toString();
  }
  getCreatedAt() {
    return this.createdAt;
  }
  getHeadRefName() {
    return this.headRefName;
  }
  getHeadRepositoryID() {
    return this.headRepositoryID;
  }
  getLatestCommit() {
    return this.latestCommit;
  }
  setCheckRuns(runsBySuite) {
    this.checkRuns = [];
    for (const [, runs] of runsBySuite) {
      for (const checkRun of runs) {
        this.checkRuns.push(checkRun);
      }
    }
  }
  getStatusCounts() {
    const buildStatuses = [];
    for (const context of this.statusContexts) {
      buildStatuses.push((0, _buildStatus.buildStatusFromStatusContext)(context));
    }
    for (const checkRun of this.checkRuns) {
      buildStatuses.push((0, _buildStatus.buildStatusFromCheckResult)(checkRun));
    }
    const counts = {
      pending: 0,
      failure: 0,
      success: 0,
      neutral: 0
    };
    for (const {
      classSuffix
    } of buildStatuses) {
      counts[classSuffix]++;
    }
    return counts;
  }
}
exports.default = Issueish;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJc3N1ZWlzaCIsImNvbnN0cnVjdG9yIiwiZGF0YSIsImF1dGhvciIsIkdIT1NUX1VTRVIiLCJudW1iZXIiLCJ0aXRsZSIsInVybCIsIlVSTCIsImF1dGhvckxvZ2luIiwibG9naW4iLCJhdXRob3JBdmF0YXJVUkwiLCJhdmF0YXJVcmwiLCJjcmVhdGVkQXQiLCJtb21lbnQiLCJJU09fODYwMSIsImhlYWRSZWZOYW1lIiwiaGVhZFJlcG9zaXRvcnlJRCIsInJlcG9zaXRvcnkiLCJpZCIsImxhdGVzdENvbW1pdCIsInN0YXR1c0NvbnRleHRzIiwiY2hlY2tSdW5zIiwiY29tbWl0cyIsIm5vZGVzIiwibGVuZ3RoIiwiY29tbWl0Iiwic3RhdHVzIiwiY29udGV4dHMiLCJnZXROdW1iZXIiLCJnZXRUaXRsZSIsImdldEdpdEh1YlVSTCIsInRvU3RyaW5nIiwiZ2V0QXV0aG9yTG9naW4iLCJnZXRBdXRob3JBdmF0YXJVUkwiLCJzaXplIiwidSIsInNlYXJjaFBhcmFtcyIsInNldCIsImdldENyZWF0ZWRBdCIsImdldEhlYWRSZWZOYW1lIiwiZ2V0SGVhZFJlcG9zaXRvcnlJRCIsImdldExhdGVzdENvbW1pdCIsInNldENoZWNrUnVucyIsInJ1bnNCeVN1aXRlIiwicnVucyIsImNoZWNrUnVuIiwicHVzaCIsImdldFN0YXR1c0NvdW50cyIsImJ1aWxkU3RhdHVzZXMiLCJjb250ZXh0IiwiYnVpbGRTdGF0dXNGcm9tU3RhdHVzQ29udGV4dCIsImJ1aWxkU3RhdHVzRnJvbUNoZWNrUmVzdWx0IiwiY291bnRzIiwicGVuZGluZyIsImZhaWx1cmUiLCJzdWNjZXNzIiwibmV1dHJhbCIsImNsYXNzU3VmZml4Il0sInNvdXJjZXMiOlsiaXNzdWVpc2guanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtVUkx9IGZyb20gJ3VybCc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbmltcG9ydCB7XG4gIGJ1aWxkU3RhdHVzRnJvbVN0YXR1c0NvbnRleHQsXG4gIGJ1aWxkU3RhdHVzRnJvbUNoZWNrUmVzdWx0LFxufSBmcm9tICcuL2J1aWxkLXN0YXR1cyc7XG5pbXBvcnQge0dIT1NUX1VTRVJ9IGZyb20gJy4uL2hlbHBlcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJc3N1ZWlzaCB7XG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICBjb25zdCBhdXRob3IgPSBkYXRhLmF1dGhvciB8fCBHSE9TVF9VU0VSO1xuXG4gICAgdGhpcy5udW1iZXIgPSBkYXRhLm51bWJlcjtcbiAgICB0aGlzLnRpdGxlID0gZGF0YS50aXRsZTtcbiAgICB0aGlzLnVybCA9IG5ldyBVUkwoZGF0YS51cmwpO1xuICAgIHRoaXMuYXV0aG9yTG9naW4gPSBhdXRob3IubG9naW47XG4gICAgdGhpcy5hdXRob3JBdmF0YXJVUkwgPSBuZXcgVVJMKGF1dGhvci5hdmF0YXJVcmwpO1xuICAgIHRoaXMuY3JlYXRlZEF0ID0gbW9tZW50KGRhdGEuY3JlYXRlZEF0LCBtb21lbnQuSVNPXzg2MDEpO1xuICAgIHRoaXMuaGVhZFJlZk5hbWUgPSBkYXRhLmhlYWRSZWZOYW1lO1xuICAgIHRoaXMuaGVhZFJlcG9zaXRvcnlJRCA9IGRhdGEucmVwb3NpdG9yeS5pZDtcbiAgICB0aGlzLmxhdGVzdENvbW1pdCA9IG51bGw7XG4gICAgdGhpcy5zdGF0dXNDb250ZXh0cyA9IFtdO1xuICAgIHRoaXMuY2hlY2tSdW5zID0gW107XG5cbiAgICBpZiAoZGF0YS5jb21taXRzLm5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMubGF0ZXN0Q29tbWl0ID0gZGF0YS5jb21taXRzLm5vZGVzWzBdLmNvbW1pdDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sYXRlc3RDb21taXQgJiYgdGhpcy5sYXRlc3RDb21taXQuc3RhdHVzKSB7XG4gICAgICB0aGlzLnN0YXR1c0NvbnRleHRzID0gdGhpcy5sYXRlc3RDb21taXQuc3RhdHVzLmNvbnRleHRzO1xuICAgIH1cbiAgfVxuXG4gIGdldE51bWJlcigpIHtcbiAgICByZXR1cm4gdGhpcy5udW1iZXI7XG4gIH1cblxuICBnZXRUaXRsZSgpIHtcbiAgICByZXR1cm4gdGhpcy50aXRsZTtcbiAgfVxuXG4gIGdldEdpdEh1YlVSTCgpIHtcbiAgICByZXR1cm4gdGhpcy51cmwudG9TdHJpbmcoKTtcbiAgfVxuXG4gIGdldEF1dGhvckxvZ2luKCkge1xuICAgIHJldHVybiB0aGlzLmF1dGhvckxvZ2luO1xuICB9XG5cbiAgZ2V0QXV0aG9yQXZhdGFyVVJMKHNpemUgPSAzMikge1xuICAgIGNvbnN0IHUgPSBuZXcgVVJMKHRoaXMuYXV0aG9yQXZhdGFyVVJMLnRvU3RyaW5nKCkpO1xuICAgIHUuc2VhcmNoUGFyYW1zLnNldCgncycsIHNpemUpO1xuICAgIHJldHVybiB1LnRvU3RyaW5nKCk7XG4gIH1cblxuICBnZXRDcmVhdGVkQXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlZEF0O1xuICB9XG5cbiAgZ2V0SGVhZFJlZk5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVhZFJlZk5hbWU7XG4gIH1cblxuICBnZXRIZWFkUmVwb3NpdG9yeUlEKCkge1xuICAgIHJldHVybiB0aGlzLmhlYWRSZXBvc2l0b3J5SUQ7XG4gIH1cblxuICBnZXRMYXRlc3RDb21taXQoKSB7XG4gICAgcmV0dXJuIHRoaXMubGF0ZXN0Q29tbWl0O1xuICB9XG5cbiAgc2V0Q2hlY2tSdW5zKHJ1bnNCeVN1aXRlKSB7XG4gICAgdGhpcy5jaGVja1J1bnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IFssIHJ1bnNdIG9mIHJ1bnNCeVN1aXRlKSB7XG4gICAgICBmb3IgKGNvbnN0IGNoZWNrUnVuIG9mIHJ1bnMpIHtcbiAgICAgICAgdGhpcy5jaGVja1J1bnMucHVzaChjaGVja1J1bik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0U3RhdHVzQ291bnRzKCkge1xuICAgIGNvbnN0IGJ1aWxkU3RhdHVzZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGNvbnRleHQgb2YgdGhpcy5zdGF0dXNDb250ZXh0cykge1xuICAgICAgYnVpbGRTdGF0dXNlcy5wdXNoKGJ1aWxkU3RhdHVzRnJvbVN0YXR1c0NvbnRleHQoY29udGV4dCkpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGNoZWNrUnVuIG9mIHRoaXMuY2hlY2tSdW5zKSB7XG4gICAgICBidWlsZFN0YXR1c2VzLnB1c2goYnVpbGRTdGF0dXNGcm9tQ2hlY2tSZXN1bHQoY2hlY2tSdW4pKTtcbiAgICB9XG5cbiAgICBjb25zdCBjb3VudHMgPSB7XG4gICAgICBwZW5kaW5nOiAwLFxuICAgICAgZmFpbHVyZTogMCxcbiAgICAgIHN1Y2Nlc3M6IDAsXG4gICAgICBuZXV0cmFsOiAwLFxuICAgIH07XG5cbiAgICBmb3IgKGNvbnN0IHtjbGFzc1N1ZmZpeH0gb2YgYnVpbGRTdGF0dXNlcykge1xuICAgICAgY291bnRzW2NsYXNzU3VmZml4XSsrO1xuICAgIH1cblxuICAgIHJldHVybiBjb3VudHM7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUVBO0FBSUE7QUFBc0M7QUFFdkIsTUFBTUEsUUFBUSxDQUFDO0VBQzVCQyxXQUFXLENBQUNDLElBQUksRUFBRTtJQUNoQixNQUFNQyxNQUFNLEdBQUdELElBQUksQ0FBQ0MsTUFBTSxJQUFJQyxtQkFBVTtJQUV4QyxJQUFJLENBQUNDLE1BQU0sR0FBR0gsSUFBSSxDQUFDRyxNQUFNO0lBQ3pCLElBQUksQ0FBQ0MsS0FBSyxHQUFHSixJQUFJLENBQUNJLEtBQUs7SUFDdkIsSUFBSSxDQUFDQyxHQUFHLEdBQUcsSUFBSUMsUUFBRyxDQUFDTixJQUFJLENBQUNLLEdBQUcsQ0FBQztJQUM1QixJQUFJLENBQUNFLFdBQVcsR0FBR04sTUFBTSxDQUFDTyxLQUFLO0lBQy9CLElBQUksQ0FBQ0MsZUFBZSxHQUFHLElBQUlILFFBQUcsQ0FBQ0wsTUFBTSxDQUFDUyxTQUFTLENBQUM7SUFDaEQsSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBQUMsZUFBTSxFQUFDWixJQUFJLENBQUNXLFNBQVMsRUFBRUMs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