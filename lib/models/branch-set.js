"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _util = _interopRequireDefault(require("util"));
var _branch = require("./branch");
var _helpers = require("../helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// Store and index a set of Branches in a repository.
class BranchSet {
  constructor(all = []) {
    this.all = [];
    this.head = _branch.nullBranch;
    this.byUpstreamRef = new Map();
    this.byPushRef = new Map();
    for (const branch of all) {
      this.add(branch);
    }
  }
  add(branch) {
    this.all.push(branch);
    if (branch.isHead()) {
      this.head = branch;
    }
    const u = branch.getUpstream();
    if (u.isPresent() && u.isRemoteTracking()) {
      const k = `${u.getRemoteName()}\0${u.getRemoteRef()}`;
      (0, _helpers.pushAtKey)(this.byUpstreamRef, k, branch);
    }
    const p = branch.getPush();
    if (p.isPresent() && p.isRemoteTracking()) {
      const k = `${p.getRemoteName()}\0${p.getRemoteRef()}`;
      (0, _helpers.pushAtKey)(this.byPushRef, k, branch);
    }
  }
  getNames() {
    return this.all.map(branch => branch.getName());
  }

  // Return the HEAD branch, or `nullBranch` if HEAD is not a branch. This can happen if HEAD is unborn (the repository
  // was just initialized) or if HEAD is detached.
  getHeadBranch() {
    return this.head;
  }

  // Return an Array of Branches that would be updated from a given remote ref with a `git pull`. This corresponds with
  // git's notion of an _upstream_ and takes into account the current `branch.remote` setting and `remote.<name>.fetch`
  // refspec.
  getPullTargets(remoteName, remoteRefName) {
    return this.byUpstreamRef.get(`${remoteName}\0${remoteRefName}`) || [];
  }

  // Return an Array of Branches that will update a given remote ref on an unqualified `git push`. This accounts for
  // the current `branch.pushRemote` setting and `remote.<name>.push` refspec.
  getPushSources(remoteName, remoteRefName) {
    return this.byPushRef.get(`${remoteName}\0${remoteRefName}`) || [];
  }
  inspect(depth, options) {
    return `BranchSet {${_util.default.inspect(this.all)}}`;
  }
}
exports.default = BranchSet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdXRpbCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2JyYW5jaCIsIl9oZWxwZXJzIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJCcmFuY2hTZXQiLCJjb25zdHJ1Y3RvciIsImFsbCIsImhlYWQiLCJudWxsQnJhbmNoIiwiYnlVcHN0cmVhbVJlZiIsIk1hcCIsImJ5UHVzaFJlZiIsImJyYW5jaCIsImFkZCIsInB1c2giLCJpc0hlYWQiLCJ1IiwiZ2V0VXBzdHJlYW0iLCJpc1ByZXNlbnQiLCJpc1JlbW90ZVRyYWNraW5nIiwiayIsImdldFJlbW90ZU5hbWUiLCJnZXRSZW1vdGVSZWYiLCJwdXNoQXRLZXkiLCJwIiwiZ2V0UHVzaCIsImdldE5hbWVzIiwibWFwIiwiZ2V0TmFtZSIsImdldEhlYWRCcmFuY2giLCJnZXRQdWxsVGFyZ2V0cyIsInJlbW90ZU5hbWUiLCJyZW1vdGVSZWZOYW1lIiwiZ2V0IiwiZ2V0UHVzaFNvdXJjZXMiLCJpbnNwZWN0IiwiZGVwdGgiLCJvcHRpb25zIiwidXRpbCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJicmFuY2gtc2V0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1dGlsIGZyb20gJ3V0aWwnO1xuXG5pbXBvcnQge251bGxCcmFuY2h9IGZyb20gJy4vYnJhbmNoJztcbmltcG9ydCB7cHVzaEF0S2V5fSBmcm9tICcuLi9oZWxwZXJzJztcblxuLy8gU3RvcmUgYW5kIGluZGV4IGEgc2V0IG9mIEJyYW5jaGVzIGluIGEgcmVwb3NpdG9yeS5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYW5jaFNldCB7XG4gIGNvbnN0cnVjdG9yKGFsbCA9IFtdKSB7XG4gICAgdGhpcy5hbGwgPSBbXTtcbiAgICB0aGlzLmhlYWQgPSBudWxsQnJhbmNoO1xuICAgIHRoaXMuYnlVcHN0cmVhbVJlZiA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmJ5UHVzaFJlZiA9IG5ldyBNYXAoKTtcbiAgICBmb3IgKGNvbnN0IGJyYW5jaCBvZiBhbGwpIHtcbiAgICAgIHRoaXMuYWRkKGJyYW5jaCk7XG4gICAgfVxuICB9XG5cbiAgYWRkKGJyYW5jaCkge1xuICAgIHRoaXMuYWxsLnB1c2goYnJhbmNoKTtcblxuICAgIGlmIChicmFuY2guaXNIZWFkKCkpIHtcbiAgICAgIHRoaXMuaGVhZCA9IGJyYW5jaDtcbiAgICB9XG5cbiAgICBjb25zdCB1ID0gYnJhbmNoLmdldFVwc3RyZWFtKCk7XG4gICAgaWYgKHUuaXNQcmVzZW50KCkgJiYgdS5pc1JlbW90ZVRyYWNraW5nKCkpIHtcbiAgICAgIGNvbnN0IGsgPSBgJHt1LmdldFJlbW90ZU5hbWUoKX1cXDAke3UuZ2V0UmVtb3RlUmVmKCl9YDtcbiAgICAgIHB1c2hBdEtleSh0aGlzLmJ5VXBzdHJlYW1SZWYsIGssIGJyYW5jaCk7XG4gICAgfVxuXG4gICAgY29uc3QgcCA9IGJyYW5jaC5nZXRQdXNoKCk7XG4gICAgaWYgKHAuaXNQcmVzZW50KCkgJiYgcC5pc1JlbW90ZVRyYWNraW5nKCkpIHtcbiAgICAgIGNvbnN0IGsgPSBgJHtwLmdldFJlbW90ZU5hbWUoKX1cXDAke3AuZ2V0UmVtb3RlUmVmKCl9YDtcbiAgICAgIHB1c2hBdEtleSh0aGlzLmJ5UHVzaFJlZiwgaywgYnJhbmNoKTtcbiAgICB9XG4gIH1cblxuICBnZXROYW1lcygpIHtcbiAgICByZXR1cm4gdGhpcy5hbGwubWFwKGJyYW5jaCA9PiBicmFuY2guZ2V0TmFtZSgpKTtcbiAgfVxuXG4gIC8vIFJldHVybiB0aGUgSEVBRCBicmFuY2gsIG9yIGBudWxsQnJhbmNoYCBpZiBIRUFEIGlzIG5vdCBhIGJyYW5jaC4gVGhpcyBjYW4gaGFwcGVuIGlmIEhFQUQgaXMgdW5ib3JuICh0aGUgcmVwb3NpdG9yeVxuICAvLyB3YXMganVzdCBpbml0aWFsaXplZCkgb3IgaWYgSEVBRCBpcyBkZXRhY2hlZC5cbiAgZ2V0SGVhZEJyYW5jaCgpIHtcbiAgICByZXR1cm4gdGhpcy5oZWFkO1xuICB9XG5cbiAgLy8gUmV0dXJuIGFuIEFycmF5IG9mIEJyYW5jaGVzIHRoYXQgd291bGQgYmUgdXBkYXRlZCBmcm9tIGEgZ2l2ZW4gcmVtb3RlIHJlZiB3aXRoIGEgYGdpdCBwdWxsYC4gVGhpcyBjb3JyZXNwb25kcyB3aXRoXG4gIC8vIGdpdCdzIG5vdGlvbiBvZiBhbiBfdXBzdHJlYW1fIGFuZCB0YWtlcyBpbnRvIGFjY291bnQgdGhlIGN1cnJlbnQgYGJyYW5jaC5yZW1vdGVgIHNldHRpbmcgYW5kIGByZW1vdGUuPG5hbWU+LmZldGNoYFxuICAvLyByZWZzcGVjLlxuICBnZXRQdWxsVGFyZ2V0cyhyZW1vdGVOYW1lLCByZW1vdGVSZWZOYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuYnlVcHN0cmVhbVJlZi5nZXQoYCR7cmVtb3RlTmFtZX1cXDAke3JlbW90ZVJlZk5hbWV9YCkgfHwgW107XG4gIH1cblxuICAvLyBSZXR1cm4gYW4gQXJyYXkgb2YgQnJhbmNoZXMgdGhhdCB3aWxsIHVwZGF0ZSBhIGdpdmVuIHJlbW90ZSByZWYgb24gYW4gdW5xdWFsaWZpZWQgYGdpdCBwdXNoYC4gVGhpcyBhY2NvdW50cyBmb3JcbiAgLy8gdGhlIGN1cnJlbnQgYGJyYW5jaC5wdXNoUmVtb3RlYCBzZXR0aW5nIGFuZCBgcmVtb3RlLjxuYW1lPi5wdXNoYCByZWZzcGVjLlxuICBnZXRQdXNoU291cmNlcyhyZW1vdGVOYW1lLCByZW1vdGVSZWZOYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuYnlQdXNoUmVmLmdldChgJHtyZW1vdGVOYW1lfVxcMCR7cmVtb3RlUmVmTmFtZX1gKSB8fCBbXTtcbiAgfVxuXG4gIGluc3BlY3QoZGVwdGgsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gYEJyYW5jaFNldCB7JHt1dGlsLmluc3BlY3QodGhpcy5hbGwpfX1gO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLE9BQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFFBQUEsR0FBQUYsT0FBQTtBQUFxQyxTQUFBRCx1QkFBQUksR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUVyQztBQUNlLE1BQU1HLFNBQVMsQ0FBQztFQUM3QkMsV0FBV0EsQ0FBQ0MsR0FBRyxHQUFHLEVBQUUsRUFBRTtJQUNwQixJQUFJLENBQUNBLEdBQUcsR0FBRyxFQUFFO0lBQ2IsSUFBSSxDQUFDQyxJQUFJLEdBQUdDLGtCQUFVO0lBQ3RCLElBQUksQ0FBQ0MsYUFBYSxHQUFHLElBQUlDLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQ0MsU0FBUyxHQUFHLElBQUlELEdBQUcsQ0FBQyxDQUFDO0lBQzFCLEtBQUssTUFBTUUsTUFBTSxJQUFJTixHQUFHLEVBQUU7TUFDeEIsSUFBSSxDQUFDTyxHQUFHLENBQUNELE1BQU0sQ0FBQztJQUNsQjtFQUNGO0VBRUFDLEdBQUdBLENBQUNELE1BQU0sRUFBRTtJQUNWLElBQUksQ0FBQ04sR0FBRyxDQUFDUSxJQUFJLENBQUNGLE1BQU0sQ0FBQztJQUVyQixJQUFJQSxNQUFNLENBQUNHLE1BQU0sQ0FBQyxDQUFDLEVBQUU7TUFDbkIsSUFBSSxDQUFDUixJQUFJLEdBQUdLLE1BQU07SUFDcEI7SUFFQSxNQUFNSSxDQUFDLEdBQUdKLE1BQU0sQ0FBQ0ssV0FBVyxDQUFDLENBQUM7SUFDOUIsSUFBSUQsQ0FBQyxDQUFDRSxTQUFTLENBQUMsQ0FBQyxJQUFJRixDQUFDLENBQUNHLGdCQUFnQixDQUFDLENBQUMsRUFBRTtNQUN6QyxNQUFNQyxDQUFDLEdBQUksR0FBRUosQ0FBQyxDQUFDSyxhQUFhLENBQUMsQ0FBRSxLQUFJTCxDQUFDLENBQUNNLFlBQVksQ0FBQyxDQUFFLEVBQUM7TUFDckQsSUFBQUMsa0JBQVMsRUFBQyxJQUFJLENBQUNkLGFBQWEsRUFBRVcsQ0FBQyxFQUFFUixNQUFNLENBQUM7SUFDMUM7SUFFQSxNQUFNWSxDQUFDLEdBQUdaLE1BQU0sQ0FBQ2EsT0FBTyxDQUFDLENBQUM7SUFDMUIsSUFBSUQsQ0FBQyxDQUFDTixTQUFTLENBQUMsQ0FBQyxJQUFJTSxDQUFDLENBQUNMLGdCQUFnQixDQUFDLENBQUMsRUFBRTtNQUN6QyxNQUFNQyxDQUFDLEdBQUksR0FBRUksQ0FBQyxDQUFDSCxhQUFhLENBQUMsQ0FBRSxLQUFJRyxDQUFDLENBQUNGLFlBQVksQ0FBQyxDQUFFLEVBQUM7TUFDckQsSUFBQUMsa0JBQVMsRUFBQyxJQUFJLENBQUNaLFNBQVMsRUFBRVMsQ0FBQyxFQUFFUixNQUFNLENBQUM7SUFDdEM7RUFDRjtFQUVBYyxRQUFRQSxDQUFBLEVBQUc7SUFDVCxPQUFPLElBQUksQ0FBQ3BCLEdBQUcsQ0FBQ3FCLEdBQUcsQ0FBQ2YsTUFBTSxJQUFJQSxNQUFNLENBQUNnQixPQUFPLENBQUMsQ0FBQyxDQUFDO0VBQ2pEOztFQUVBO0VBQ0E7RUFDQUMsYUFBYUEsQ0FBQSxFQUFHO0lBQ2QsT0FBTyxJQUFJLENBQUN0QixJQUFJO0VBQ2xCOztFQUVBO0VBQ0E7RUFDQTtFQUNBdUIsY0FBY0EsQ0FBQ0MsVUFBVSxFQUFFQyxhQUFhLEVBQUU7SUFDeEMsT0FBTyxJQUFJLENBQUN2QixhQUFhLENBQUN3QixHQUFHLENBQUUsR0FBRUYsVUFBVyxLQUFJQyxhQUFjLEVBQUMsQ0FBQyxJQUFJLEVBQUU7RUFDeEU7O0VBRUE7RUFDQTtFQUNBRSxjQUFjQSxDQUFDSCxVQUFVLEVBQUVDLGFBQWEsRUFBRTtJQUN4QyxPQUFPLElBQUksQ0FBQ3JCLFNBQVMsQ0FBQ3NCLEdBQUcsQ0FBRSxHQUFFRixVQUFXLEtBQUlDLGFBQWMsRUFBQyxDQUFDLElBQUksRUFBRTtFQUNwRTtFQUVBRyxPQUFPQSxDQUFDQyxLQUFLLEVBQUVDLE9BQU8sRUFBRTtJQUN0QixPQUFRLGNBQWFDLGFBQUksQ0FBQ0gsT0FBTyxDQUFDLElBQUksQ0FBQzdCLEdBQUcsQ0FBRSxHQUFFO0VBQ2hEO0FBQ0Y7QUFBQ2lDLE9BQUEsQ0FBQXBDLE9BQUEsR0FBQUMsU0FBQSJ9