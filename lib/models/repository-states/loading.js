"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _state = _interopRequireDefault(require("./state"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Initial state to be used when it's uncertain whether or not a git repository is present in a working directory. If
 * it is a git repository, transition to Present, otherwise transition to Empty.
 */
class Loading extends _state.default {
  async start() {
    const dotGitDir = await this.resolveDotGitDir();
    if (dotGitDir) {
      this.repository.setGitDirectoryPath(dotGitDir);
      const history = await this.loadHistoryPayload();
      return this.transitionTo('Present', history);
    } else {
      return this.transitionTo('Empty');
    }
  }
  isLoading() {
    return true;
  }
  async init() {
    await this.getLoadPromise();
    await this.repository.init();
  }
  async clone(remoteUrl) {
    await this.getLoadPromise();
    await this.repository.clone(remoteUrl);
  }
  showGitTabLoading() {
    return true;
  }
  directResolveDotGitDir() {
    return this.git().resolveDotGitDir();
  }
  directGetConfig(key, options) {
    return this.git().getConfig(key, options);
  }
  directGetBlobContents(sha) {
    return this.git().getBlobContents(sha);
  }
}
exports.default = Loading;
_state.default.register(Loading);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMb2FkaW5nIiwiU3RhdGUiLCJzdGFydCIsImRvdEdpdERpciIsInJlc29sdmVEb3RHaXREaXIiLCJyZXBvc2l0b3J5Iiwic2V0R2l0RGlyZWN0b3J5UGF0aCIsImhpc3RvcnkiLCJsb2FkSGlzdG9yeVBheWxvYWQiLCJ0cmFuc2l0aW9uVG8iLCJpc0xvYWRpbmciLCJpbml0IiwiZ2V0TG9hZFByb21pc2UiLCJjbG9uZSIsInJlbW90ZVVybCIsInNob3dHaXRUYWJMb2FkaW5nIiwiZGlyZWN0UmVzb2x2ZURvdEdpdERpciIsImdpdCIsImRpcmVjdEdldENvbmZpZyIsImtleSIsIm9wdGlvbnMiLCJnZXRDb25maWciLCJkaXJlY3RHZXRCbG9iQ29udGVudHMiLCJzaGEiLCJnZXRCbG9iQ29udGVudHMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbImxvYWRpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN0YXRlIGZyb20gJy4vc3RhdGUnO1xuXG4vKipcbiAqIEluaXRpYWwgc3RhdGUgdG8gYmUgdXNlZCB3aGVuIGl0J3MgdW5jZXJ0YWluIHdoZXRoZXIgb3Igbm90IGEgZ2l0IHJlcG9zaXRvcnkgaXMgcHJlc2VudCBpbiBhIHdvcmtpbmcgZGlyZWN0b3J5LiBJZlxuICogaXQgaXMgYSBnaXQgcmVwb3NpdG9yeSwgdHJhbnNpdGlvbiB0byBQcmVzZW50LCBvdGhlcndpc2UgdHJhbnNpdGlvbiB0byBFbXB0eS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9hZGluZyBleHRlbmRzIFN0YXRlIHtcbiAgYXN5bmMgc3RhcnQoKSB7XG4gICAgY29uc3QgZG90R2l0RGlyID0gYXdhaXQgdGhpcy5yZXNvbHZlRG90R2l0RGlyKCk7XG4gICAgaWYgKGRvdEdpdERpcikge1xuICAgICAgdGhpcy5yZXBvc2l0b3J5LnNldEdpdERpcmVjdG9yeVBhdGgoZG90R2l0RGlyKTtcbiAgICAgIGNvbnN0IGhpc3RvcnkgPSBhd2FpdCB0aGlzLmxvYWRIaXN0b3J5UGF5bG9hZCgpO1xuICAgICAgcmV0dXJuIHRoaXMudHJhbnNpdGlvblRvKCdQcmVzZW50JywgaGlzdG9yeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnRyYW5zaXRpb25UbygnRW1wdHknKTtcbiAgICB9XG4gIH1cblxuICBpc0xvYWRpbmcoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBhc3luYyBpbml0KCkge1xuICAgIGF3YWl0IHRoaXMuZ2V0TG9hZFByb21pc2UoKTtcbiAgICBhd2FpdCB0aGlzLnJlcG9zaXRvcnkuaW5pdCgpO1xuICB9XG5cbiAgYXN5bmMgY2xvbmUocmVtb3RlVXJsKSB7XG4gICAgYXdhaXQgdGhpcy5nZXRMb2FkUHJvbWlzZSgpO1xuICAgIGF3YWl0IHRoaXMucmVwb3NpdG9yeS5jbG9uZShyZW1vdGVVcmwpO1xuICB9XG5cbiAgc2hvd0dpdFRhYkxvYWRpbmcoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBkaXJlY3RSZXNvbHZlRG90R2l0RGlyKCkge1xuICAgIHJldHVybiB0aGlzLmdpdCgpLnJlc29sdmVEb3RHaXREaXIoKTtcbiAgfVxuXG4gIGRpcmVjdEdldENvbmZpZyhrZXksIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5naXQoKS5nZXRDb25maWcoa2V5LCBvcHRpb25zKTtcbiAgfVxuXG4gIGRpcmVjdEdldEJsb2JDb250ZW50cyhzaGEpIHtcbiAgICByZXR1cm4gdGhpcy5naXQoKS5nZXRCbG9iQ29udGVudHMoc2hhKTtcbiAgfVxufVxuXG5TdGF0ZS5yZWdpc3RlcihMb2FkaW5nKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFBNEI7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDZSxNQUFNQSxPQUFPLFNBQVNDLGNBQUssQ0FBQztFQUN6QyxNQUFNQyxLQUFLLEdBQUc7SUFDWixNQUFNQyxTQUFTLEdBQUcsTUFBTSxJQUFJLENBQUNDLGdCQUFnQixFQUFFO0lBQy9DLElBQUlELFNBQVMsRUFBRTtNQUNiLElBQUksQ0FBQ0UsVUFBVSxDQUFDQyxtQkFBbUIsQ0FBQ0gsU0FBUyxDQUFDO01BQzlDLE1BQU1JLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQ0Msa0JBQWtCLEVBQUU7TUFDL0MsT0FBTyxJQUFJLENBQUNDLFlBQVksQ0FBQyxTQUFTLEVBQUVGLE9BQU8sQ0FBQztJQUM5QyxDQUFDLE1BQU07TUFDTCxPQUFPLElBQUksQ0FBQ0UsWUFBWSxDQUFDLE9BQU8sQ0FBQztJQUNuQztFQUNGO0VBRUFDLFNBQVMsR0FBRztJQUNWLE9BQU8sSUFBSTtFQUNiO0VBRUEsTUFBTUMsSUFBSSxHQUFHO0lBQ1gsTUFBTSxJQUFJLENBQUNDLGNBQWMsRUFBRTtJQUMzQixNQUFNLElBQUksQ0FBQ1AsVUFBVSxDQUFDTSxJQUFJLEVBQUU7RUFDOUI7RUFFQSxNQUFNRSxLQUFLLENBQUNDLFNBQVMsRUFBRTtJQUNyQixNQUFNLElBQUksQ0FBQ0YsY0FBYyxFQUFFO0lBQzNCLE1BQU0sSUFBSSxDQUFDUCxVQUFVLENBQUNRLEtBQUssQ0FBQ0MsU0FBUyxDQUFDO0VBQ3hDO0VBRUFDLGlCQUFpQixHQUFHO0lBQ2xCLE9BQU8sSUFBSTtFQUNiO0VBRUFDLHNCQUFzQixHQUFHO0lBQ3ZCLE9BQU8sSUFBSSxDQUFDQyxHQUFHLEVBQUUsQ0FBQ2IsZ0JBQWdCLEVBQUU7RUFDdEM7RUFFQWMsZUFBZSxDQUFDQyxHQUFHLEVBQUVDLE9BQU8sRUFBRTtJQUM1QixPQUFPLElBQUksQ0FBQ0gsR0FBRyxFQUFFLENBQUNJLFNBQVMsQ0FBQ0YsR0FBRyxFQUFFQyxPQUFPLENBQUM7RUFDM0M7RUFFQUUscUJBQXFCLENBQUNDLEdBQUcsRUFBRTtJQUN6QixPQUFPLElBQUksQ0FBQ04sR0FBRyxFQUFFLENBQUNPLGVBQWUsQ0FBQ0QsR0FBRyxDQUFDO0VBQ3hDO0FBQ0Y7QUFBQztBQUVEdEIsY0FBSyxDQUFDd0IsUUFBUSxDQUFDekIsT0FBTyxDQUFDIn0=