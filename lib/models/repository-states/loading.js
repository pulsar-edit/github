"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _state = _interopRequireDefault(require("./state"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Initial state to be used when it's uncertain whether or not a git repository is present in a working directory. If
 * it is a git repository, transition to Present, otherwise transition to Empty.
 */
class Loading extends _state.default {
  async start() {
    const dotGitDir = await this.resolveDotGitDir();
    if (dotGitDir) {
      this.repository.setGitDirectoryPath(dotGitDir);
      const history = await this.loadHistoryPayload();
      return this.transitionTo('Present', history);
    } else {
      return this.transitionTo('Empty');
    }
  }
  isLoading() {
    return true;
  }
  async init() {
    await this.getLoadPromise();
    await this.repository.init();
  }
  async clone(remoteUrl) {
    await this.getLoadPromise();
    await this.repository.clone(remoteUrl);
  }
  showGitTabLoading() {
    return true;
  }
  directResolveDotGitDir() {
    return this.git().resolveDotGitDir();
  }
  directGetConfig(key, options) {
    return this.git().getConfig(key, options);
  }
  directGetBlobContents(sha) {
    return this.git().getBlobContents(sha);
  }
}
exports.default = Loading;
_state.default.register(Loading);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3RhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiTG9hZGluZyIsIlN0YXRlIiwic3RhcnQiLCJkb3RHaXREaXIiLCJyZXNvbHZlRG90R2l0RGlyIiwicmVwb3NpdG9yeSIsInNldEdpdERpcmVjdG9yeVBhdGgiLCJoaXN0b3J5IiwibG9hZEhpc3RvcnlQYXlsb2FkIiwidHJhbnNpdGlvblRvIiwiaXNMb2FkaW5nIiwiaW5pdCIsImdldExvYWRQcm9taXNlIiwiY2xvbmUiLCJyZW1vdGVVcmwiLCJzaG93R2l0VGFiTG9hZGluZyIsImRpcmVjdFJlc29sdmVEb3RHaXREaXIiLCJnaXQiLCJkaXJlY3RHZXRDb25maWciLCJrZXkiLCJvcHRpb25zIiwiZ2V0Q29uZmlnIiwiZGlyZWN0R2V0QmxvYkNvbnRlbnRzIiwic2hhIiwiZ2V0QmxvYkNvbnRlbnRzIiwiZXhwb3J0cyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsibG9hZGluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3RhdGUgZnJvbSAnLi9zdGF0ZSc7XG5cbi8qKlxuICogSW5pdGlhbCBzdGF0ZSB0byBiZSB1c2VkIHdoZW4gaXQncyB1bmNlcnRhaW4gd2hldGhlciBvciBub3QgYSBnaXQgcmVwb3NpdG9yeSBpcyBwcmVzZW50IGluIGEgd29ya2luZyBkaXJlY3RvcnkuIElmXG4gKiBpdCBpcyBhIGdpdCByZXBvc2l0b3J5LCB0cmFuc2l0aW9uIHRvIFByZXNlbnQsIG90aGVyd2lzZSB0cmFuc2l0aW9uIHRvIEVtcHR5LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2FkaW5nIGV4dGVuZHMgU3RhdGUge1xuICBhc3luYyBzdGFydCgpIHtcbiAgICBjb25zdCBkb3RHaXREaXIgPSBhd2FpdCB0aGlzLnJlc29sdmVEb3RHaXREaXIoKTtcbiAgICBpZiAoZG90R2l0RGlyKSB7XG4gICAgICB0aGlzLnJlcG9zaXRvcnkuc2V0R2l0RGlyZWN0b3J5UGF0aChkb3RHaXREaXIpO1xuICAgICAgY29uc3QgaGlzdG9yeSA9IGF3YWl0IHRoaXMubG9hZEhpc3RvcnlQYXlsb2FkKCk7XG4gICAgICByZXR1cm4gdGhpcy50cmFuc2l0aW9uVG8oJ1ByZXNlbnQnLCBoaXN0b3J5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMudHJhbnNpdGlvblRvKCdFbXB0eScpO1xuICAgIH1cbiAgfVxuXG4gIGlzTG9hZGluZygpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGFzeW5jIGluaXQoKSB7XG4gICAgYXdhaXQgdGhpcy5nZXRMb2FkUHJvbWlzZSgpO1xuICAgIGF3YWl0IHRoaXMucmVwb3NpdG9yeS5pbml0KCk7XG4gIH1cblxuICBhc3luYyBjbG9uZShyZW1vdGVVcmwpIHtcbiAgICBhd2FpdCB0aGlzLmdldExvYWRQcm9taXNlKCk7XG4gICAgYXdhaXQgdGhpcy5yZXBvc2l0b3J5LmNsb25lKHJlbW90ZVVybCk7XG4gIH1cblxuICBzaG93R2l0VGFiTG9hZGluZygpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGRpcmVjdFJlc29sdmVEb3RHaXREaXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2l0KCkucmVzb2x2ZURvdEdpdERpcigpO1xuICB9XG5cbiAgZGlyZWN0R2V0Q29uZmlnKGtleSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmdpdCgpLmdldENvbmZpZyhrZXksIG9wdGlvbnMpO1xuICB9XG5cbiAgZGlyZWN0R2V0QmxvYkNvbnRlbnRzKHNoYSkge1xuICAgIHJldHVybiB0aGlzLmdpdCgpLmdldEJsb2JDb250ZW50cyhzaGEpO1xuICB9XG59XG5cblN0YXRlLnJlZ2lzdGVyKExvYWRpbmcpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBNEIsU0FBQUQsdUJBQUFFLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDZSxNQUFNRyxPQUFPLFNBQVNDLGNBQUssQ0FBQztFQUN6QyxNQUFNQyxLQUFLQSxDQUFBLEVBQUc7SUFDWixNQUFNQyxTQUFTLEdBQUcsTUFBTSxJQUFJLENBQUNDLGdCQUFnQixFQUFFO0lBQy9DLElBQUlELFNBQVMsRUFBRTtNQUNiLElBQUksQ0FBQ0UsVUFBVSxDQUFDQyxtQkFBbUIsQ0FBQ0gsU0FBUyxDQUFDO01BQzlDLE1BQU1JLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQ0Msa0JBQWtCLEVBQUU7TUFDL0MsT0FBTyxJQUFJLENBQUNDLFlBQVksQ0FBQyxTQUFTLEVBQUVGLE9BQU8sQ0FBQztJQUM5QyxDQUFDLE1BQU07TUFDTCxPQUFPLElBQUksQ0FBQ0UsWUFBWSxDQUFDLE9BQU8sQ0FBQztJQUNuQztFQUNGO0VBRUFDLFNBQVNBLENBQUEsRUFBRztJQUNWLE9BQU8sSUFBSTtFQUNiO0VBRUEsTUFBTUMsSUFBSUEsQ0FBQSxFQUFHO0lBQ1gsTUFBTSxJQUFJLENBQUNDLGNBQWMsRUFBRTtJQUMzQixNQUFNLElBQUksQ0FBQ1AsVUFBVSxDQUFDTSxJQUFJLEVBQUU7RUFDOUI7RUFFQSxNQUFNRSxLQUFLQSxDQUFDQyxTQUFTLEVBQUU7SUFDckIsTUFBTSxJQUFJLENBQUNGLGNBQWMsRUFBRTtJQUMzQixNQUFNLElBQUksQ0FBQ1AsVUFBVSxDQUFDUSxLQUFLLENBQUNDLFNBQVMsQ0FBQztFQUN4QztFQUVBQyxpQkFBaUJBLENBQUEsRUFBRztJQUNsQixPQUFPLElBQUk7RUFDYjtFQUVBQyxzQkFBc0JBLENBQUEsRUFBRztJQUN2QixPQUFPLElBQUksQ0FBQ0MsR0FBRyxFQUFFLENBQUNiLGdCQUFnQixFQUFFO0VBQ3RDO0VBRUFjLGVBQWVBLENBQUNDLEdBQUcsRUFBRUMsT0FBTyxFQUFFO0lBQzVCLE9BQU8sSUFBSSxDQUFDSCxHQUFHLEVBQUUsQ0FBQ0ksU0FBUyxDQUFDRixHQUFHLEVBQUVDLE9BQU8sQ0FBQztFQUMzQztFQUVBRSxxQkFBcUJBLENBQUNDLEdBQUcsRUFBRTtJQUN6QixPQUFPLElBQUksQ0FBQ04sR0FBRyxFQUFFLENBQUNPLGVBQWUsQ0FBQ0QsR0FBRyxDQUFDO0VBQ3hDO0FBQ0Y7QUFBQ0UsT0FBQSxDQUFBMUIsT0FBQSxHQUFBQyxPQUFBO0FBRURDLGNBQUssQ0FBQ3lCLFFBQVEsQ0FBQzFCLE9BQU8sQ0FBQyJ9