"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _path = _interopRequireDefault(require("path"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _compositeGitStrategy = _interopRequireDefault(require("../composite-git-strategy"));
var _helpers = require("../helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Locate the nearest git working directory above a given starting point, caching results.
 */
class WorkdirCache {
  constructor(maxSize = 1000) {
    this.maxSize = maxSize;
    this.known = new Map();
  }
  async find(startPath) {
    const cached = this.known.get(startPath);
    if (cached !== undefined) {
      return cached;
    }
    const workDir = await this.revParse(startPath);
    if (this.known.size >= this.maxSize) {
      this.known.clear();
    }
    this.known.set(startPath, workDir);
    return workDir;
  }
  invalidate() {
    this.known.clear();
  }
  async revParse(startPath) {
    try {
      const startDir = (await _fsExtra.default.stat(startPath)).isDirectory() ? startPath : _path.default.dirname(startPath);

      // Within a git worktree, return a non-empty string containing the path to the worktree root.
      // Throw if a gitdir, outside of a worktree, or startDir does not exist.
      const topLevel = await _compositeGitStrategy.default.create(startDir).exec(['rev-parse', '--show-toplevel']).catch(e => {
        if (/this operation must be run in a work tree/.test(e.stdErr)) {
          return null;
        }
        throw e;
      });
      if (topLevel !== null) {
        return (0, _helpers.toNativePathSep)(topLevel.trim());
      }

      // Within a gitdir, return the absolute path to the gitdir.
      // Outside of a gitdir or worktree, throw.
      const gitDir = await _compositeGitStrategy.default.create(startDir).exec(['rev-parse', '--absolute-git-dir']);
      return this.revParse(_path.default.resolve(gitDir, '..'));
    } catch (e) {
      /* istanbul ignore if */
      if (atom.config.get('github.reportCannotLocateWorkspaceError')) {
        // eslint-disable-next-line no-console
        console.error(`Unable to locate git workspace root for ${startPath}. Expected if ${startPath} is not in a git repository.`, e);
      }
      return null;
    }
  }
}
exports.default = WorkdirCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcGF0aCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2ZzRXh0cmEiLCJfY29tcG9zaXRlR2l0U3RyYXRlZ3kiLCJfaGVscGVycyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiV29ya2RpckNhY2hlIiwiY29uc3RydWN0b3IiLCJtYXhTaXplIiwia25vd24iLCJNYXAiLCJmaW5kIiwic3RhcnRQYXRoIiwiY2FjaGVkIiwiZ2V0IiwidW5kZWZpbmVkIiwid29ya0RpciIsInJldlBhcnNlIiwic2l6ZSIsImNsZWFyIiwic2V0IiwiaW52YWxpZGF0ZSIsInN0YXJ0RGlyIiwiZnMiLCJzdGF0IiwiaXNEaXJlY3RvcnkiLCJwYXRoIiwiZGlybmFtZSIsInRvcExldmVsIiwiQ29tcG9zaXRlR2l0U3RyYXRlZ3kiLCJjcmVhdGUiLCJleGVjIiwiY2F0Y2giLCJlIiwidGVzdCIsInN0ZEVyciIsInRvTmF0aXZlUGF0aFNlcCIsInRyaW0iLCJnaXREaXIiLCJyZXNvbHZlIiwiYXRvbSIsImNvbmZpZyIsImNvbnNvbGUiLCJlcnJvciIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ3b3JrZGlyLWNhY2hlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcblxuaW1wb3J0IENvbXBvc2l0ZUdpdFN0cmF0ZWd5IGZyb20gJy4uL2NvbXBvc2l0ZS1naXQtc3RyYXRlZ3knO1xuaW1wb3J0IHt0b05hdGl2ZVBhdGhTZXB9IGZyb20gJy4uL2hlbHBlcnMnO1xuXG4vKipcbiAqIExvY2F0ZSB0aGUgbmVhcmVzdCBnaXQgd29ya2luZyBkaXJlY3RvcnkgYWJvdmUgYSBnaXZlbiBzdGFydGluZyBwb2ludCwgY2FjaGluZyByZXN1bHRzLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXb3JrZGlyQ2FjaGUge1xuICBjb25zdHJ1Y3RvcihtYXhTaXplID0gMTAwMCkge1xuICAgIHRoaXMubWF4U2l6ZSA9IG1heFNpemU7XG4gICAgdGhpcy5rbm93biA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIGFzeW5jIGZpbmQoc3RhcnRQYXRoKSB7XG4gICAgY29uc3QgY2FjaGVkID0gdGhpcy5rbm93bi5nZXQoc3RhcnRQYXRoKTtcbiAgICBpZiAoY2FjaGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuXG4gICAgY29uc3Qgd29ya0RpciA9IGF3YWl0IHRoaXMucmV2UGFyc2Uoc3RhcnRQYXRoKTtcblxuICAgIGlmICh0aGlzLmtub3duLnNpemUgPj0gdGhpcy5tYXhTaXplKSB7XG4gICAgICB0aGlzLmtub3duLmNsZWFyKCk7XG4gICAgfVxuICAgIHRoaXMua25vd24uc2V0KHN0YXJ0UGF0aCwgd29ya0Rpcik7XG5cbiAgICByZXR1cm4gd29ya0RpcjtcbiAgfVxuXG4gIGludmFsaWRhdGUoKSB7XG4gICAgdGhpcy5rbm93bi5jbGVhcigpO1xuICB9XG5cbiAgYXN5bmMgcmV2UGFyc2Uoc3RhcnRQYXRoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN0YXJ0RGlyID0gKGF3YWl0IGZzLnN0YXQoc3RhcnRQYXRoKSkuaXNEaXJlY3RvcnkoKSA/IHN0YXJ0UGF0aCA6IHBhdGguZGlybmFtZShzdGFydFBhdGgpO1xuXG4gICAgICAvLyBXaXRoaW4gYSBnaXQgd29ya3RyZWUsIHJldHVybiBhIG5vbi1lbXB0eSBzdHJpbmcgY29udGFpbmluZyB0aGUgcGF0aCB0byB0aGUgd29ya3RyZWUgcm9vdC5cbiAgICAgIC8vIFRocm93IGlmIGEgZ2l0ZGlyLCBvdXRzaWRlIG9mIGEgd29ya3RyZWUsIG9yIHN0YXJ0RGlyIGRvZXMgbm90IGV4aXN0LlxuICAgICAgY29uc3QgdG9wTGV2ZWwgPSBhd2FpdCBDb21wb3NpdGVHaXRTdHJhdGVneS5jcmVhdGUoc3RhcnREaXIpLmV4ZWMoWydyZXYtcGFyc2UnLCAnLS1zaG93LXRvcGxldmVsJ10pXG4gICAgICAgIC5jYXRjaChlID0+IHtcbiAgICAgICAgICBpZiAoL3RoaXMgb3BlcmF0aW9uIG11c3QgYmUgcnVuIGluIGEgd29yayB0cmVlLy50ZXN0KGUuc3RkRXJyKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH0pO1xuICAgICAgaWYgKHRvcExldmVsICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0b05hdGl2ZVBhdGhTZXAodG9wTGV2ZWwudHJpbSgpKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2l0aGluIGEgZ2l0ZGlyLCByZXR1cm4gdGhlIGFic29sdXRlIHBhdGggdG8gdGhlIGdpdGRpci5cbiAgICAgIC8vIE91dHNpZGUgb2YgYSBnaXRkaXIgb3Igd29ya3RyZWUsIHRocm93LlxuICAgICAgY29uc3QgZ2l0RGlyID0gYXdhaXQgQ29tcG9zaXRlR2l0U3RyYXRlZ3kuY3JlYXRlKHN0YXJ0RGlyKS5leGVjKFsncmV2LXBhcnNlJywgJy0tYWJzb2x1dGUtZ2l0LWRpciddKTtcbiAgICAgIHJldHVybiB0aGlzLnJldlBhcnNlKHBhdGgucmVzb2x2ZShnaXREaXIsICcuLicpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChhdG9tLmNvbmZpZy5nZXQoJ2dpdGh1Yi5yZXBvcnRDYW5ub3RMb2NhdGVXb3Jrc3BhY2VFcnJvcicpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgYFVuYWJsZSB0byBsb2NhdGUgZ2l0IHdvcmtzcGFjZSByb290IGZvciAke3N0YXJ0UGF0aH0uIEV4cGVjdGVkIGlmICR7c3RhcnRQYXRofSBpcyBub3QgaW4gYSBnaXQgcmVwb3NpdG9yeS5gLFxuICAgICAgICAgIGUsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAg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