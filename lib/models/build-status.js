"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildStatusFromStatusContext = buildStatusFromStatusContext;
exports.buildStatusFromCheckResult = buildStatusFromCheckResult;
exports.combineBuildStatuses = combineBuildStatuses;
// Commit or pull request build status, unified from those derived from the Checks API and the Status API.

const DEFAULT = {
  icon: 'unverified',
  classSuffix: 'pending'
};
const PENDING = {
  icon: 'primitive-dot',
  classSuffix: 'pending'
};
const SUCCESS = {
  icon: 'check',
  classSuffix: 'success'
};
const FAILURE = {
  icon: 'x',
  classSuffix: 'failure'
};
const ERROR = {
  icon: 'alert',
  classSuffix: 'failure'
};
const ACTION_REQUIRED = {
  icon: 'bell',
  classSuffix: 'failure'
};
const NEUTRAL = {
  icon: 'dash',
  classSuffix: 'neutral'
};
const STATUS_CONTEXT_MAP = {
  EXPECTED: PENDING,
  PENDING,
  SUCCESS,
  ERROR,
  FAILURE
};
function buildStatusFromStatusContext({
  state
}) {
  return STATUS_CONTEXT_MAP[state] || DEFAULT;
}
const PENDING_CHECK_STATUSES = new Set(['QUEUED', 'IN_PROGRESS', 'REQUESTED']);
const COMPLETED_CHECK_CONCLUSION_MAP = {
  SUCCESS,
  FAILURE,
  TIMED_OUT: ERROR,
  CANCELLED: ERROR,
  ACTION_REQUIRED,
  NEUTRAL
};
function buildStatusFromCheckResult({
  status,
  conclusion
}) {
  if (PENDING_CHECK_STATUSES.has(status)) {
    return PENDING;
  } else if (status === 'COMPLETED') {
    return COMPLETED_CHECK_CONCLUSION_MAP[conclusion] || DEFAULT;
  } else {
    return DEFAULT;
  }
}
const STATUS_PRIORITY = [DEFAULT, NEUTRAL, SUCCESS, PENDING, FAILURE, ERROR, ACTION_REQUIRED];
function combineBuildStatuses(...statuses) {
  let highestPriority = 0;
  let highestPriorityStatus = NEUTRAL;
  for (const status of statuses) {
    const priority = STATUS_PRIORITY.indexOf(status);
    if (priority > highestPriority) {
      highestPriority = priority;
      highestPriorityStatus = status;
    }
  }
  return highestPriorityStatus;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERUZBVUxUIiwiaWNvbiIsImNsYXNzU3VmZml4IiwiUEVORElORyIsIlNVQ0NFU1MiLCJGQUlMVVJFIiwiRVJST1IiLCJBQ1RJT05fUkVRVUlSRUQiLCJORVVUUkFMIiwiU1RBVFVTX0NPTlRFWFRfTUFQIiwiRVhQRUNURUQiLCJidWlsZFN0YXR1c0Zyb21TdGF0dXNDb250ZXh0Iiwic3RhdGUiLCJQRU5ESU5HX0NIRUNLX1NUQVRVU0VTIiwiU2V0IiwiQ09NUExFVEVEX0NIRUNLX0NPTkNMVVNJT05fTUFQIiwiVElNRURfT1VUIiwiQ0FOQ0VMTEVEIiwiYnVpbGRTdGF0dXNGcm9tQ2hlY2tSZXN1bHQiLCJzdGF0dXMiLCJjb25jbHVzaW9uIiwiaGFzIiwiU1RBVFVTX1BSSU9SSVRZIiwiY29tYmluZUJ1aWxkU3RhdHVzZXMiLCJzdGF0dXNlcyIsImhpZ2hlc3RQcmlvcml0eSIsImhpZ2hlc3RQcmlvcml0eVN0YXR1cyIsInByaW9yaXR5IiwiaW5kZXhPZiJdLCJzb3VyY2VzIjpbImJ1aWxkLXN0YXR1cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb21taXQgb3IgcHVsbCByZXF1ZXN0IGJ1aWxkIHN0YXR1cywgdW5pZmllZCBmcm9tIHRob3NlIGRlcml2ZWQgZnJvbSB0aGUgQ2hlY2tzIEFQSSBhbmQgdGhlIFN0YXR1cyBBUEkuXG5cbmNvbnN0IERFRkFVTFQgPSB7XG4gIGljb246ICd1bnZlcmlmaWVkJyxcbiAgY2xhc3NTdWZmaXg6ICdwZW5kaW5nJyxcbn07XG5cbmNvbnN0IFBFTkRJTkcgPSB7XG4gIGljb246ICdwcmltaXRpdmUtZG90JyxcbiAgY2xhc3NTdWZmaXg6ICdwZW5kaW5nJyxcbn07XG5cbmNvbnN0IFNVQ0NFU1MgPSB7XG4gIGljb246ICdjaGVjaycsXG4gIGNsYXNzU3VmZml4OiAnc3VjY2VzcycsXG59O1xuXG5jb25zdCBGQUlMVVJFID0ge1xuICBpY29uOiAneCcsXG4gIGNsYXNzU3VmZml4OiAnZmFpbHVyZScsXG59O1xuXG5jb25zdCBFUlJPUiA9IHtcbiAgaWNvbjogJ2FsZXJ0JyxcbiAgY2xhc3NTdWZmaXg6ICdmYWlsdXJlJyxcbn07XG5cbmNvbnN0IEFDVElPTl9SRVFVSVJFRCA9IHtcbiAgaWNvbjogJ2JlbGwnLFxuICBjbGFzc1N1ZmZpeDogJ2ZhaWx1cmUnLFxufTtcblxuY29uc3QgTkVVVFJBTCA9IHtcbiAgaWNvbjogJ2Rhc2gnLFxuICBjbGFzc1N1ZmZpeDogJ25ldXRyYWwnLFxufTtcblxuY29uc3QgU1RBVFVTX0NPTlRFWFRfTUFQID0ge1xuICBFWFBFQ1RFRDogUEVORElORywgUEVORElORywgU1VDQ0VTUywgRVJST1IsIEZBSUxVUkUsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRTdGF0dXNGcm9tU3RhdHVzQ29udGV4dCh7c3RhdGV9KSB7XG4gIHJldHVybiBTVEFUVVNfQ09OVEVYVF9NQVBbc3RhdGVdIHx8IERFRkFVTFQ7XG59XG5cbmNvbnN0IFBFTkRJTkdfQ0hFQ0tfU1RBVFVTRVMgPSBuZXcgU2V0KFsnUVVFVUVEJywgJ0lOX1BST0dSRVNTJywgJ1JFUVVFU1RFRCddKTtcblxuY29uc3QgQ09NUExFVEVEX0NIRUNLX0NPTkNMVVNJT05fTUFQID0ge1xuICBTVUNDRVNTLCBGQUlMVVJFLCBUSU1FRF9PVVQ6IEVSUk9SLCBDQU5DRUxMRUQ6IEVSUk9SLCBBQ1RJT05fUkVRVUlSRUQsIE5FVVRSQUwsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRTdGF0dXNGcm9tQ2hlY2tSZXN1bHQoe3N0YXR1cywgY29uY2x1c2lvbn0pIHtcbiAgaWYgKFBFTkRJTkdfQ0hFQ0tfU1RBVFVTRVMuaGFzKHN0YXR1cykpIHtcbiAgICByZXR1cm4gUEVORElORztcbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09ICdDT01QTEVURUQnKSB7XG4gICAgcmV0dXJuIENPTVBMRVRFRF9DSEVDS19DT05DTFVTSU9OX01BUFtjb25jbHVzaW9uXSB8fCBERUZBVUxUO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBERUZBVUxUO1xuICB9XG59XG5cbmNvbnN0IFNUQVRVU19QUklPUklUWSA9IFtcbiAgREVGQVVMVCxcbiAgTkVVVFJBTCxcbiAgU1VDQ0VTUyxcbiAgUEVORElORyxcbiAgRkFJTFVSRSxcbiAgRVJST1IsXG4gIEFDVElPTl9SRVFVSVJFRCxcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lQnVpbGRTdGF0dXNlcyguLi5zdGF0dXNlcykge1xuICBsZXQgaGlnaGVzdFByaW9yaXR5ID0gMDtcbiAgbGV0IGhpZ2hlc3RQcmlvcml0eVN0YXR1cyA9IE5FVVRSQUw7XG4gIGZvciAoY29uc3Qgc3RhdHVzIG9mIHN0YXR1c2VzKSB7XG4gICAgY29uc3QgcHJpb3JpdHkgPSBTVEFUVVNfUFJJT1JJVFkuaW5kZXhPZihzdGF0dXMpO1xuICAgIGlmIChwcmlvcml0eSA+IGhpZ2hlc3RQcmlvcml0eSkge1xuICAgICAgaGlnaGVzdFByaW9yaXR5ID0gcHJpb3JpdHk7XG4gICAgICBoaWdoZXN0UHJpb3JpdHlTdGF0dXMgPSBzdGF0dXM7XG4gICAgfVxuICB9XG4gIHJldHVybiBoaWdoZXN0UHJpb3JpdHlTdGF0dXM7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7O0FBRUEsTUFBTUEsT0FBTyxHQUFHO0VBQ2RDLElBQUksRUFBRSxZQUFZO0VBQ2xCQyxXQUFXLEVBQUU7QUFDZixDQUFDO0FBRUQsTUFBTUMsT0FBTyxHQUFHO0VBQ2RGLElBQUksRUFBRSxlQUFlO0VBQ3JCQyxXQUFXLEVBQUU7QUFDZixDQUFDO0FBRUQsTUFBTUUsT0FBTyxHQUFHO0VBQ2RILElBQUksRUFBRSxPQUFPO0VBQ2JDLFdBQVcsRUFBRTtBQUNmLENBQUM7QUFFRCxNQUFNRyxPQUFPLEdBQUc7RUFDZEosSUFBSSxFQUFFLEdBQUc7RUFDVEMsV0FBVyxFQUFFO0FBQ2YsQ0FBQztBQUVELE1BQU1JLEtBQUssR0FBRztFQUNaTCxJQUFJLEVBQUUsT0FBTztFQUNiQyxXQUFXLEVBQUU7QUFDZixDQUFDO0FBRUQsTUFBTUssZUFBZSxHQUFHO0VBQ3RCTixJQUFJLEVBQUUsTUFBTTtFQUNaQyxXQUFXLEVBQUU7QUFDZixDQUFDO0FBRUQsTUFBTU0sT0FBTyxHQUFHO0VBQ2RQLElBQUksRUFBRSxNQUFNO0VBQ1pDLFdBQVcsRUFBRTtBQUNmLENBQUM7QUFFRCxNQUFNTyxrQkFBa0IsR0FBRztFQUN6QkMsUUFBUSxFQUFFUCxPQUFPO0VBQUVBLE9BQU87RUFBRUMsT0FBTztFQUFFRSxLQUFLO0VBQUVEO0FBQzlDLENBQUM7QUFFTSxTQUFTTSw0QkFBNEJBLENBQUM7RUFBQ0M7QUFBSyxDQUFDLEVBQUU7RUFDcEQsT0FBT0gsa0JBQWtCLENBQUNHLEtBQUssQ0FBQyxJQUFJWixPQUFPO0FBQzdDO0FBRUEsTUFBTWEsc0JBQXNCLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUU5RSxNQUFNQyw4QkFBOEIsR0FBRztFQUNyQ1gsT0FBTztFQUFFQyxPQUFPO0VBQUVXLFNBQVMsRUFBRVYsS0FBSztFQUFFVyxTQUFTLEVBQUVYLEtBQUs7RUFBRUMsZUFBZTtFQUFFQztBQUN6RSxDQUFDO0FBRU0sU0FBU1UsMEJBQTBCQSxDQUFDO0VBQUNDLE1BQU07RUFBRUM7QUFBVSxDQUFDLEVBQUU7RUFDL0QsSUFBSVAsc0JBQXNCLENBQUNRLEdBQUcsQ0FBQ0YsTUFBTSxDQUFDLEVBQUU7SUFDdEMsT0FBT2hCLE9BQU87RUFDaEIsQ0FBQyxNQUFNLElBQUlnQixNQUFNLEtBQUssV0FBVyxFQUFFO0lBQ2pDLE9BQU9KLDhCQUE4QixDQUFDSyxVQUFVLENBQUMsSUFBSXBCLE9BQU87RUFDOUQsQ0FBQyxNQUFNO0lBQ0wsT0FBT0EsT0FBTztFQUNoQjtBQUNGO0FBRUEsTUFBTXNCLGVBQWUsR0FBRyxDQUN0QnRCLE9BQU8sRUFDUFEsT0FBTyxFQUNQSixPQUFPLEVBQ1BELE9BQU8sRUFDUEUsT0FBTyxFQUNQQyxLQUFLLEVBQ0xDLGVBQWUsQ0FDaEI7QUFFTSxTQUFTZ0Isb0JBQW9CQSxDQUFDLEdBQUdDLFFBQVEsRUFBRTtFQUNoRCxJQUFJQyxlQUFlLEdBQUcsQ0FBQztFQUN2QixJQUFJQyxxQkFBcUIsR0FBR2xCLE9BQU87RUFDbkMsS0FBSyxNQUFNVyxNQUFNLElBQUlLLFFBQVEsRUFBRTtJQUM3QixNQUFNRyxRQUFRLEdBQUdMLGVBQWUsQ0FBQ00sT0FBTyxDQUFDVCxNQUFNLENBQUM7SUFDaEQsSUFBSVEsUUFBUSxHQUFHRixlQUFlLEVBQUU7TUFDOUJBLGVBQWUsR0FBR0UsUUFBUTtNQUMxQkQscUJBQXFCLEdBQUdQLE1BQU07SUFDaEM7RUFDRjtFQUNBLE9BQU9PLHFCQUFxQjtBQUM5QiJ9