"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nullRemote = exports.default = void 0;
var _endpoint = require("./endpoint");
class Remote {
  constructor(name, url) {
    this.name = name;
    this.url = url;
    const {
      isGithubRepo,
      domain,
      protocol,
      owner,
      repo
    } = githubInfoFromRemote(url);
    this.githubRepo = isGithubRepo;
    this.domain = domain;
    this.protocol = protocol;
    this.owner = owner;
    this.repo = repo;
  }
  getName() {
    return this.name;
  }
  getUrl() {
    return this.url;
  }
  isGithubRepo() {
    return this.githubRepo;
  }
  getProtocol() {
    return this.protocol;
  }
  getDomain() {
    return this.domain;
  }
  getOwner() {
    return this.owner;
  }
  getRepo() {
    return this.repo;
  }
  getNameOr() {
    return this.getName();
  }
  getSlug() {
    if (this.owner === null || this.repo === null) {
      return null;
    }
    return `${this.owner}/${this.repo}`;
  }
  getEndpoint() {
    return this.domain === null ? null : (0, _endpoint.getEndpoint)(this.domain);
  }
  getEndpointOrDotcom() {
    return this.getEndpoint() || _endpoint.DOTCOM;
  }
  isPresent() {
    return true;
  }
}
exports.default = Remote;
function githubInfoFromRemote(remoteUrl) {
  if (!remoteUrl) {
    return {
      isGithubRepo: false,
      domain: null,
      owner: null,
      repo: null
    };
  }

  //             proto         login   domain           owner    repo
  const regex = /(?:(.+):\/\/)?(?:.+@)?(github\.com)[:/]\/?([^/]+)\/(.+)/;
  const match = remoteUrl.match(regex);
  if (match) {
    return {
      isGithubRepo: true,
      protocol: match[1] || 'ssh',
      domain: match[2],
      owner: match[3],
      repo: match[4].replace(/\.git$/, '')
    };
  } else {
    return {
      isGithubRepo: false,
      protocol: null,
      domain: null,
      owner: null,
      repo: null
    };
  }
}
const nullRemote = {
  getName() {
    return '';
  },
  getUrl() {
    return '';
  },
  isGithubRepo() {
    return false;
  },
  getDomain() {
    return null;
  },
  getProtocol() {
    return null;
  },
  getOwner() {
    return null;
  },
  getRepo() {
    return null;
  },
  getNameOr(fallback) {
    return fallback;
  },
  getSlug() {
    return null;
  },
  getEndpoint() {
    return null;
  },
  getEndpointOrDotcom() {
    return _endpoint.DOTCOM;
  },
  isPresent() {
    return false;
  }
};
exports.nullRemote = nullRemote;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZW1vdGUiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJ1cmwiLCJpc0dpdGh1YlJlcG8iLCJkb21haW4iLCJwcm90b2NvbCIsIm93bmVyIiwicmVwbyIsImdpdGh1YkluZm9Gcm9tUmVtb3RlIiwiZ2l0aHViUmVwbyIsImdldE5hbWUiLCJnZXRVcmwiLCJnZXRQcm90b2NvbCIsImdldERvbWFpbiIsImdldE93bmVyIiwiZ2V0UmVwbyIsImdldE5hbWVPciIsImdldFNsdWciLCJnZXRFbmRwb2ludCIsImdldEVuZHBvaW50T3JEb3Rjb20iLCJET1RDT00iLCJpc1ByZXNlbnQiLCJyZW1vdGVVcmwiLCJyZWdleCIsIm1hdGNoIiwicmVwbGFjZSIsIm51bGxSZW1vdGUiLCJmYWxsYmFjayJdLCJzb3VyY2VzIjpbInJlbW90ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2dldEVuZHBvaW50LCBET1RDT019IGZyb20gJy4vZW5kcG9pbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZW1vdGUge1xuICBjb25zdHJ1Y3RvcihuYW1lLCB1cmwpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMudXJsID0gdXJsO1xuXG4gICAgY29uc3Qge2lzR2l0aHViUmVwbywgZG9tYWluLCBwcm90b2NvbCwgb3duZXIsIHJlcG99ID0gZ2l0aHViSW5mb0Zyb21SZW1vdGUodXJsKTtcbiAgICB0aGlzLmdpdGh1YlJlcG8gPSBpc0dpdGh1YlJlcG87XG4gICAgdGhpcy5kb21haW4gPSBkb21haW47XG4gICAgdGhpcy5wcm90b2NvbCA9IHByb3RvY29sO1xuICAgIHRoaXMub3duZXIgPSBvd25lcjtcbiAgICB0aGlzLnJlcG8gPSByZXBvO1xuICB9XG5cbiAgZ2V0TmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG5cbiAgZ2V0VXJsKCkge1xuICAgIHJldHVybiB0aGlzLnVybDtcbiAgfVxuXG4gIGlzR2l0aHViUmVwbygpIHtcbiAgICByZXR1cm4gdGhpcy5naXRodWJSZXBvO1xuICB9XG5cbiAgZ2V0UHJvdG9jb2woKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdG9jb2w7XG4gIH1cblxuICBnZXREb21haW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9tYWluO1xuICB9XG5cbiAgZ2V0T3duZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMub3duZXI7XG4gIH1cblxuICBnZXRSZXBvKCkge1xuICAgIHJldHVybiB0aGlzLnJlcG87XG4gIH1cblxuICBnZXROYW1lT3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TmFtZSgpO1xuICB9XG5cbiAgZ2V0U2x1ZygpIHtcbiAgICBpZiAodGhpcy5vd25lciA9PT0gbnVsbCB8fCB0aGlzLnJlcG8gPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBgJHt0aGlzLm93bmVyfS8ke3RoaXMucmVwb31gO1xuICB9XG5cbiAgZ2V0RW5kcG9pbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9tYWluID09PSBudWxsID8gbnVsbCA6IGdldEVuZHBvaW50KHRoaXMuZG9tYWluKTtcbiAgfVxuXG4gIGdldEVuZHBvaW50T3JEb3Rjb20oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RW5kcG9pbnQoKSB8fCBET1RDT007XG4gIH1cblxuICBpc1ByZXNlbnQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2l0aHViSW5mb0Zyb21SZW1vdGUocmVtb3RlVXJsKSB7XG4gIGlmICghcmVtb3RlVXJsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzR2l0aHViUmVwbzogZmFsc2UsXG4gICAgICBkb21haW46IG51bGwsXG4gICAgICBvd25lcjogbnVsbCxcbiAgICAgIHJlcG86IG51bGwsXG4gICAgfTtcbiAgfVxuXG4gIC8vICAgICAgICAgICAgIHByb3RvICAgICAgICAgbG9naW4gICBkb21haW4gICAgICAgICAgIG93bmVyICAgIHJlcG9cbiAgY29uc3QgcmVnZXggPSAvKD86KC4rKTpcXC9cXC8pPyg/Oi4rQCk/KGdpdGh1YlxcLmNvbSlbOi9dXFwvPyhbXi9dKylcXC8oLispLztcbiAgY29uc3QgbWF0Y2ggPSByZW1vdGVVcmwubWF0Y2gocmVnZXgpO1xuICBpZiAobWF0Y2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNHaXRodWJSZXBvOiB0cnVlLFxuICAgICAgcHJvdG9jb2w6IG1hdGNoWzFdIHx8ICdzc2gnLFxuICAgICAgZG9tYWluOiBtYXRjaFsyXSxcbiAgICAgIG93bmVyOiBtYXRjaFszXSxcbiAgICAgIHJlcG86IG1hdGNoWzRdLnJlcGxhY2UoL1xcLmdpdCQvLCAnJyksXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNHaXRodWJSZXBvOiBmYWxzZSxcbiAgICAgIHByb3RvY29sOiBudWxsLFxuICAgICAgZG9tYWluOiBudWxsLFxuICAgICAgb3duZXI6IG51bGwsXG4gICAgICByZXBvOiBudWxsLFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IG51bGxSZW1vdGUgPSB7XG4gIGdldE5hbWUoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9LFxuXG4gIGdldFVybCgpIHtcbiAgICByZXR1cm4gJyc7XG4gIH0sXG5cbiAgaXNHaXRodWJSZXBvKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICBnZXREb21haW4oKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgZ2V0UHJvdG9jb2woKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgZ2V0T3duZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgZ2V0UmVwbygpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICBnZXROYW1lT3IoZmFsbGJhY2spIHtcbiAgICByZXR1cm4gZmFsbGJhY2s7XG4gIH0sXG5cbiAgZ2V0U2x1ZygpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICBnZXRFbmRwb2ludCgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICBnZXRFbmRwb2ludE9yRG90Y29tKCkge1xuICAgIHJldHVybiBET1RDT007XG4gIH0sXG5cbiAgaXNQcmVzZW50KCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBRWUsTUFBTUEsTUFBTSxDQUFDO0VBQzFCQyxXQUFXLENBQUNDLElBQUksRUFBRUMsR0FBRyxFQUFFO0lBQ3JCLElBQUksQ0FBQ0QsSUFBSSxHQUFHQSxJQUFJO0lBQ2hCLElBQUksQ0FBQ0MsR0FBRyxHQUFHQSxHQUFHO0lBRWQsTUFBTTtNQUFDQyxZQUFZO01BQUVDLE1BQU07TUFBRUMsUUFBUTtNQUFFQyxLQUFLO01BQUVDO0lBQUksQ0FBQyxHQUFHQyxvQkFBb0IsQ0FBQ04sR0FBRyxDQUFDO0lBQy9FLElBQUksQ0FBQ08sVUFBVSxHQUFHTixZQUFZO0lBQzlCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxNQUFNO0lBQ3BCLElBQUksQ0FBQ0MsUUFBUSxHQUFHQSxRQUFRO0lBQ3hCLElBQUksQ0FBQ0MsS0FBSyxHQUFHQSxLQUFLO0lBQ2xCLElBQUksQ0FBQ0MsSUFBSSxHQUFHQSxJQUFJO0VBQ2xCO0VBRUFHLE9BQU8sR0FBRztJQUNSLE9BQU8sSUFBSSxDQUFDVCxJQUFJO0VBQ2xCO0VBRUFVLE1BQU0sR0FBRztJQUNQLE9BQU8sSUFBSSxDQUFDVCxHQUFHO0VBQ2pCO0VBRUFDLFlBQVksR0FBRztJQUNiLE9BQU8sSUFBSSxDQUFDTSxVQUFVO0VBQ3hCO0VBRUFHLFdBQVcsR0FBRztJQUNaLE9BQU8sSUFBSSxDQUFDUCxRQUFRO0VBQ3RCO0VBRUFRLFNBQVMsR0FBRztJQUNWLE9BQU8sSUFBSSxDQUFDVCxNQUFNO0VBQ3BCO0VBRUFVLFFBQVEsR0FBRztJQUNULE9BQU8sSUFBSSxDQUFDUixLQUFLO0VBQ25CO0VBRUFTLE9BQU8sR0FBRztJQUNSLE9BQU8sSUFBSSxDQUFDUixJQUFJO0VBQ2xCO0VBRUFTLFNBQVMs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