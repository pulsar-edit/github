"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const DISABLEMENT = Symbol('disablement');
const ENABLED = Symbol('enabled');
const NO_REASON = Symbol('no-reason');

// Track an operation that may be either enabled or disabled with a message and a reason. EnableableOperation instances
// are immutable to aid passing them as React component props; call `.enable()` or `.disable()` to derive a new
// operation instance with the same callback.
class EnableableOperation {
  constructor(op, options = {}) {
    this.beforeOp = null;
    this.op = op;
    this.afterOp = null;
    this.disablement = options[DISABLEMENT] || ENABLED;
  }
  toggleState(component, stateKey) {
    this.beforeOp = () => {
      component.setState(prevState => {
        return !prevState[stateKey] ? {
          [stateKey]: true
        } : {};
      });
    };
    this.afterOp = () => {
      return new Promise(resolve => {
        component.setState(prevState => {
          return prevState[stateKey] ? {
            [stateKey]: false
          } : {};
        }, resolve);
      });
    };
  }
  isEnabled() {
    return this.disablement === ENABLED;
  }
  async run() {
    if (!this.isEnabled()) {
      throw new Error(this.disablement.message);
    }
    if (this.beforeOp) {
      this.beforeOp();
    }
    let result = undefined;
    try {
      result = await this.op();
    } finally {
      if (this.afterOp) {
        await this.afterOp();
      }
    }
    return result;
  }
  getMessage() {
    return this.disablement.message;
  }
  why() {
    return this.disablement.reason;
  }
  disable(reason = NO_REASON, message = 'disabled') {
    if (!this.isEnabled() && this.disablement.reason === reason && this.disablement.message === message) {
      return this;
    }
    return new this.constructor(this.op, {
      [DISABLEMENT]: {
        reason,
        message
      }
    });
  }
  enable() {
    if (this.isEnabled()) {
      return this;
    }
    return new this.constructor(this.op, {
      [DISABLEMENT]: ENABLED
    });
  }
}
exports.default = EnableableOperation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJESVNBQkxFTUVOVCIsIlN5bWJvbCIsIkVOQUJMRUQiLCJOT19SRUFTT04iLCJFbmFibGVhYmxlT3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJvcCIsIm9wdGlvbnMiLCJiZWZvcmVPcCIsImFmdGVyT3AiLCJkaXNhYmxlbWVudCIsInRvZ2dsZVN0YXRlIiwiY29tcG9uZW50Iiwic3RhdGVLZXkiLCJzZXRTdGF0ZSIsInByZXZTdGF0ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiaXNFbmFibGVkIiwicnVuIiwiRXJyb3IiLCJtZXNzYWdlIiwicmVzdWx0IiwidW5kZWZpbmVkIiwiZ2V0TWVzc2FnZSIsIndoeSIsInJlYXNvbiIsImRpc2FibGUiLCJlbmFibGUiXSwic291cmNlcyI6WyJlbmFibGVhYmxlLW9wZXJhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBESVNBQkxFTUVOVCA9IFN5bWJvbCgnZGlzYWJsZW1lbnQnKTtcbmNvbnN0IEVOQUJMRUQgPSBTeW1ib2woJ2VuYWJsZWQnKTtcbmNvbnN0IE5PX1JFQVNPTiA9IFN5bWJvbCgnbm8tcmVhc29uJyk7XG5cbi8vIFRyYWNrIGFuIG9wZXJhdGlvbiB0aGF0IG1heSBiZSBlaXRoZXIgZW5hYmxlZCBvciBkaXNhYmxlZCB3aXRoIGEgbWVzc2FnZSBhbmQgYSByZWFzb24uIEVuYWJsZWFibGVPcGVyYXRpb24gaW5zdGFuY2VzXG4vLyBhcmUgaW1tdXRhYmxlIHRvIGFpZCBwYXNzaW5nIHRoZW0gYXMgUmVhY3QgY29tcG9uZW50IHByb3BzOyBjYWxsIGAuZW5hYmxlKClgIG9yIGAuZGlzYWJsZSgpYCB0byBkZXJpdmUgYSBuZXdcbi8vIG9wZXJhdGlvbiBpbnN0YW5jZSB3aXRoIHRoZSBzYW1lIGNhbGxiYWNrLlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW5hYmxlYWJsZU9wZXJhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKG9wLCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLmJlZm9yZU9wID0gbnVsbDtcbiAgICB0aGlzLm9wID0gb3A7XG4gICAgdGhpcy5hZnRlck9wID0gbnVsbDtcbiAgICB0aGlzLmRpc2FibGVtZW50ID0gb3B0aW9uc1tESVNBQkxFTUVOVF0gfHwgRU5BQkxFRDtcbiAgfVxuXG4gIHRvZ2dsZVN0YXRlKGNvbXBvbmVudCwgc3RhdGVLZXkpIHtcbiAgICB0aGlzLmJlZm9yZU9wID0gKCkgPT4ge1xuICAgICAgY29tcG9uZW50LnNldFN0YXRlKHByZXZTdGF0ZSA9PiB7XG4gICAgICAgIHJldHVybiAhcHJldlN0YXRlW3N0YXRlS2V5XSA/IHtbc3RhdGVLZXldOiB0cnVlfSA6IHt9O1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMuYWZ0ZXJPcCA9ICgpID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgY29tcG9uZW50LnNldFN0YXRlKHByZXZTdGF0ZSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHByZXZTdGF0ZVtzdGF0ZUtleV0gPyB7W3N0YXRlS2V5XTogZmFsc2V9IDoge307XG4gICAgICAgIH0sIHJlc29sdmUpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGlzRW5hYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNhYmxlbWVudCA9PT0gRU5BQkxFRDtcbiAgfVxuXG4gIGFzeW5jIHJ1bigpIHtcbiAgICBpZiAoIXRoaXMuaXNFbmFibGVkKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLmRpc2FibGVtZW50Lm1lc3NhZ2UpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmJlZm9yZU9wKSB7XG4gICAgICB0aGlzLmJlZm9yZU9wKCk7XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IHRoaXMub3AoKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKHRoaXMuYWZ0ZXJPcCkge1xuICAgICAgICBhd2FpdCB0aGlzLmFmdGVyT3AoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGdldE1lc3NhZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzYWJsZW1lbnQubWVzc2FnZTtcbiAgfVxuXG4gIHdoeSgpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNhYmxlbWVudC5yZWFzb247XG4gIH1cblxuICBkaXNhYmxlKHJlYXNvbiA9IE5PX1JFQVNPTiwgbWVzc2FnZSA9ICdkaXNhYmxlZCcpIHtcbiAgICBpZiAoIXRoaXMuaXNFbmFibGVkKCkgJiYgdGhpcy5kaXNhYmxlbWVudC5yZWFzb24gPT09IHJlYXNvbiAmJiB0aGlzLmRpc2FibGVtZW50Lm1lc3NhZ2UgPT09IG1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLm9wLCB7W0RJU0FCTEVNRU5UXToge3JlYXNvbiwgbWVzc2FnZX19KTtcbiAgfVxuXG4gIGVuYWJsZSgpIHtcbiAgICBpZiAodGhpcy5pc0VuYWJsZWQoKSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMub3AsIHtbRElTQUJMRU1FTlRdOiBFTkFCTEVEfSk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTUEsV0FBVyxHQUFHQyxNQUFNLENBQUMsYUFBYSxDQUFDO0FBQ3pDLE1BQU1DLE9BQU8sR0FBR0QsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNqQyxNQUFNRSxTQUFTLEdBQUdGLE1BQU0sQ0FBQyxXQUFXLENBQUM7O0FBRXJDO0FBQ0E7QUFDQTtBQUNlLE1BQU1HLG1CQUFtQixDQUFDO0VBQ3ZDQyxXQUFXLENBQUNDLEVBQUUsRUFBRUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFO0lBQzVCLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUk7SUFDcEIsSUFBSSxDQUFDRixFQUFFLEdBQUdBLEVB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