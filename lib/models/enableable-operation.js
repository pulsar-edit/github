"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const DISABLEMENT = Symbol('disablement');
const ENABLED = Symbol('enabled');
const NO_REASON = Symbol('no-reason');

// Track an operation that may be either enabled or disabled with a message and a reason. EnableableOperation instances
// are immutable to aid passing them as React component props; call `.enable()` or `.disable()` to derive a new
// operation instance with the same callback.
class EnableableOperation {
  constructor(op, options = {}) {
    this.beforeOp = null;
    this.op = op;
    this.afterOp = null;
    this.disablement = options[DISABLEMENT] || ENABLED;
  }
  toggleState(component, stateKey) {
    this.beforeOp = () => {
      component.setState(prevState => {
        return !prevState[stateKey] ? {
          [stateKey]: true
        } : {};
      });
    };
    this.afterOp = () => {
      return new Promise(resolve => {
        component.setState(prevState => {
          return prevState[stateKey] ? {
            [stateKey]: false
          } : {};
        }, resolve);
      });
    };
  }
  isEnabled() {
    return this.disablement === ENABLED;
  }
  async run() {
    if (!this.isEnabled()) {
      throw new Error(this.disablement.message);
    }
    if (this.beforeOp) {
      this.beforeOp();
    }
    let result = undefined;
    try {
      result = await this.op();
    } finally {
      if (this.afterOp) {
        await this.afterOp();
      }
    }
    return result;
  }
  getMessage() {
    return this.disablement.message;
  }
  why() {
    return this.disablement.reason;
  }
  disable(reason = NO_REASON, message = 'disabled') {
    if (!this.isEnabled() && this.disablement.reason === reason && this.disablement.message === message) {
      return this;
    }
    return new this.constructor(this.op, {
      [DISABLEMENT]: {
        reason,
        message
      }
    });
  }
  enable() {
    if (this.isEnabled()) {
      return this;
    }
    return new this.constructor(this.op, {
      [DISABLEMENT]: ENABLED
    });
  }
}
exports.default = EnableableOperation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJESVNBQkxFTUVOVCIsIlN5bWJvbCIsIkVOQUJMRUQiLCJOT19SRUFTT04iLCJFbmFibGVhYmxlT3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJvcCIsIm9wdGlvbnMiLCJiZWZvcmVPcCIsImFmdGVyT3AiLCJkaXNhYmxlbWVudCIsInRvZ2dsZVN0YXRlIiwiY29tcG9uZW50Iiwic3RhdGVLZXkiLCJzZXRTdGF0ZSIsInByZXZTdGF0ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiaXNFbmFibGVkIiwicnVuIiwiRXJyb3IiLCJtZXNzYWdlIiwicmVzdWx0IiwidW5kZWZpbmVkIiwiZ2V0TWVzc2FnZSIsIndoeSIsInJlYXNvbiIsImRpc2FibGUiLCJlbmFibGUiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbImVuYWJsZWFibGUtb3BlcmF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IERJU0FCTEVNRU5UID0gU3ltYm9sKCdkaXNhYmxlbWVudCcpO1xuY29uc3QgRU5BQkxFRCA9IFN5bWJvbCgnZW5hYmxlZCcpO1xuY29uc3QgTk9fUkVBU09OID0gU3ltYm9sKCduby1yZWFzb24nKTtcblxuLy8gVHJhY2sgYW4gb3BlcmF0aW9uIHRoYXQgbWF5IGJlIGVpdGhlciBlbmFibGVkIG9yIGRpc2FibGVkIHdpdGggYSBtZXNzYWdlIGFuZCBhIHJlYXNvbi4gRW5hYmxlYWJsZU9wZXJhdGlvbiBpbnN0YW5jZXNcbi8vIGFyZSBpbW11dGFibGUgdG8gYWlkIHBhc3NpbmcgdGhlbSBhcyBSZWFjdCBjb21wb25lbnQgcHJvcHM7IGNhbGwgYC5lbmFibGUoKWAgb3IgYC5kaXNhYmxlKClgIHRvIGRlcml2ZSBhIG5ld1xuLy8gb3BlcmF0aW9uIGluc3RhbmNlIHdpdGggdGhlIHNhbWUgY2FsbGJhY2suXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbmFibGVhYmxlT3BlcmF0aW9uIHtcbiAgY29uc3RydWN0b3Iob3AsIG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuYmVmb3JlT3AgPSBudWxsO1xuICAgIHRoaXMub3AgPSBvcDtcbiAgICB0aGlzLmFmdGVyT3AgPSBudWxsO1xuICAgIHRoaXMuZGlzYWJsZW1lbnQgPSBvcHRpb25zW0RJU0FCTEVNRU5UXSB8fCBFTkFCTEVEO1xuICB9XG5cbiAgdG9nZ2xlU3RhdGUoY29tcG9uZW50LCBzdGF0ZUtleSkge1xuICAgIHRoaXMuYmVmb3JlT3AgPSAoKSA9PiB7XG4gICAgICBjb21wb25lbnQuc2V0U3RhdGUocHJldlN0YXRlID0+IHtcbiAgICAgICAgcmV0dXJuICFwcmV2U3RhdGVbc3RhdGVLZXldID8ge1tzdGF0ZUtleV06IHRydWV9IDoge307XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgdGhpcy5hZnRlck9wID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBjb21wb25lbnQuc2V0U3RhdGUocHJldlN0YXRlID0+IHtcbiAgICAgICAgICByZXR1cm4gcHJldlN0YXRlW3N0YXRlS2V5XSA/IHtbc3RhdGVLZXldOiBmYWxzZX0gOiB7fTtcbiAgICAgICAgfSwgcmVzb2x2ZSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgaXNFbmFibGVkKCkge1xuICAgIHJldHVybiB0aGlzLmRpc2FibGVtZW50ID09PSBFTkFCTEVEO1xuICB9XG5cbiAgYXN5bmMgcnVuKCkge1xuICAgIGlmICghdGhpcy5pc0VuYWJsZWQoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMuZGlzYWJsZW1lbnQubWVzc2FnZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYmVmb3JlT3ApIHtcbiAgICAgIHRoaXMuYmVmb3JlT3AoKTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IHVuZGVmaW5lZDtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5vcCgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAodGhpcy5hZnRlck9wKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuYWZ0ZXJPcCgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZ2V0TWVzc2FnZSgpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNhYmxlbWVudC5tZXNzYWdlO1xuICB9XG5cbiAgd2h5KCkge1xuICAgIHJldHVybiB0aGlzLmRpc2FibGVtZW50LnJlYXNvbjtcbiAgfVxuXG4gIGRpc2FibGUocmVhc29uID0gTk9fUkVBU09OLCBtZXNzYWdlID0gJ2Rpc2FibGVkJykge1xuICAgIGlmICghdGhpcy5pc0VuYWJsZWQoKSAmJiB0aGlzLmRpc2FibGVtZW50LnJlYXNvbiA9PT0gcmVhc29uICYmIHRoaXMuZGlzYWJsZW1lbnQubWVzc2FnZSA9PT0gbWVzc2FnZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMub3AsIHtbRElTQUJMRU1FTlRdOiB7cmVhc29uLCBtZXNzYWdlfX0pO1xuICB9XG5cbiAgZW5hYmxlKCkge1xuICAgIGlmICh0aGlzLmlzRW5hYmxlZCgpKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5vcCwge1tESVNBQkxFTUVOVF06IEVOQUJMRUR9KTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNQSxXQUFXLEdBQUdDLE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFDekMsTUFBTUMsT0FBTyxHQUFHRCxNQUFNLENBQUMsU0FBUyxDQUFDO0FBQ2pDLE1BQU1FLFNBQVMsR0FBR0YsTUFBTSxDQUFDLFdBQVcsQ0FBQzs7QUFFckM7QUFDQTtBQUNBO0FBQ2UsTUFBTUcsbUJBQW1CLENBQUM7RUFDdkNDLFdBQVdBLENBQUNDLEVBQUUsRUFBRUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFO0lBQzVCLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUk7SUFDcEIsSUFB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