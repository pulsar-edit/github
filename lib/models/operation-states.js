"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nullOperationStates = exports.default = void 0;
class OperationStates {
  constructor(options = {}) {
    this.didUpdate = options.didUpdate || (() => {});
    this.pushInProgress = false;
    this.pullInProgress = false;
    this.fetchInProgress = false;
    this.commitInProgress = false;
    this.checkoutInProgress = false;
  }
  isPushInProgress() {
    return this.pushInProgress;
  }
  isPullInProgress() {
    return this.pullInProgress;
  }
  isFetchInProgress() {
    return this.fetchInProgress;
  }
  isCommitInProgress() {
    return this.commitInProgress;
  }
  isCheckoutInProgress() {
    return this.checkoutInProgress;
  }
  setPushInProgress(value) {
    const oldValue = this.pushInProgress;
    this.pushInProgress = value;
    if (oldValue !== value) {
      this.didUpdate();
    }
  }
  setPullInProgress(value) {
    const oldValue = this.pullInProgress;
    this.pullInProgress = value;
    if (oldValue !== value) {
      this.didUpdate();
    }
  }
  setFetchInProgress(value) {
    const oldValue = this.fetchInProgress;
    this.fetchInProgress = value;
    if (oldValue !== value) {
      this.didUpdate();
    }
  }
  setCommitInProgress(value) {
    const oldValue = this.commitInProgress;
    this.commitInProgress = value;
    if (oldValue !== value) {
      this.didUpdate();
    }
  }
  setCheckoutInProgress(value) {
    const oldValue = this.checkoutInProgress;
    this.checkoutInProgress = value;
    if (oldValue !== value) {
      this.didUpdate();
    }
  }
}
exports.default = OperationStates;
class NullOperationStates extends OperationStates {
  setPushInProgress() {
    // do nothing
  }
  setPullInProgress() {
    // do nothing
  }
  setFetchInProgress() {
    // do nothing
  }
  setCommitInProgress() {
    // do nothing
  }
  setCheckoutInProgress() {
    // do nothing
  }
}
const nullOperationStates = new NullOperationStates();
exports.nullOperationStates = nullOperationStates;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPcGVyYXRpb25TdGF0ZXMiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJkaWRVcGRhdGUiLCJwdXNoSW5Qcm9ncmVzcyIsInB1bGxJblByb2dyZXNzIiwiZmV0Y2hJblByb2dyZXNzIiwiY29tbWl0SW5Qcm9ncmVzcyIsImNoZWNrb3V0SW5Qcm9ncmVzcyIsImlzUHVzaEluUHJvZ3Jlc3MiLCJpc1B1bGxJblByb2dyZXNzIiwiaXNGZXRjaEluUHJvZ3Jlc3MiLCJpc0NvbW1pdEluUHJvZ3Jlc3MiLCJpc0NoZWNrb3V0SW5Qcm9ncmVzcyIsInNldFB1c2hJblByb2dyZXNzIiwidmFsdWUiLCJvbGRWYWx1ZSIsInNldFB1bGxJblByb2dyZXNzIiwic2V0RmV0Y2hJblByb2dyZXNzIiwic2V0Q29tbWl0SW5Qcm9ncmVzcyIsInNldENoZWNrb3V0SW5Qcm9ncmVzcyIsImV4cG9ydHMiLCJkZWZhdWx0IiwiTnVsbE9wZXJhdGlvblN0YXRlcyIsIm51bGxPcGVyYXRpb25TdGF0ZXMiXSwic291cmNlcyI6WyJvcGVyYXRpb24tc3RhdGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZXJhdGlvblN0YXRlcyB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuZGlkVXBkYXRlID0gb3B0aW9ucy5kaWRVcGRhdGUgfHwgKCgpID0+IHt9KTtcbiAgICB0aGlzLnB1c2hJblByb2dyZXNzID0gZmFsc2U7XG4gICAgdGhpcy5wdWxsSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgIHRoaXMuZmV0Y2hJblByb2dyZXNzID0gZmFsc2U7XG4gICAgdGhpcy5jb21taXRJblByb2dyZXNzID0gZmFsc2U7XG4gICAgdGhpcy5jaGVja291dEluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgfVxuXG4gIGlzUHVzaEluUHJvZ3Jlc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMucHVzaEluUHJvZ3Jlc3M7XG4gIH1cblxuICBpc1B1bGxJblByb2dyZXNzKCkge1xuICAgIHJldHVybiB0aGlzLnB1bGxJblByb2dyZXNzO1xuICB9XG5cbiAgaXNGZXRjaEluUHJvZ3Jlc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hJblByb2dyZXNzO1xuICB9XG5cbiAgaXNDb21taXRJblByb2dyZXNzKCkge1xuICAgIHJldHVybiB0aGlzLmNvbW1pdEluUHJvZ3Jlc3M7XG4gIH1cblxuICBpc0NoZWNrb3V0SW5Qcm9ncmVzcygpIHtcbiAgICByZXR1cm4gdGhpcy5jaGVja291dEluUHJvZ3Jlc3M7XG4gIH1cblxuICBzZXRQdXNoSW5Qcm9ncmVzcyh2YWx1ZSkge1xuICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5wdXNoSW5Qcm9ncmVzcztcbiAgICB0aGlzLnB1c2hJblByb2dyZXNzID0gdmFsdWU7XG4gICAgaWYgKG9sZFZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5kaWRVcGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBzZXRQdWxsSW5Qcm9ncmVzcyh2YWx1ZSkge1xuICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5wdWxsSW5Qcm9ncmVzcztcbiAgICB0aGlzLnB1bGxJblByb2dyZXNzID0gdmFsdWU7XG4gICAgaWYgKG9sZFZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5kaWRVcGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBzZXRGZXRjaEluUHJvZ3Jlc3ModmFsdWUpIHtcbiAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMuZmV0Y2hJblByb2dyZXNzO1xuICAgIHRoaXMuZmV0Y2hJblByb2dyZXNzID0gdmFsdWU7XG4gICAgaWYgKG9sZFZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5kaWRVcGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBzZXRDb21taXRJblByb2dyZXNzKHZhbHVlKSB7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLmNvbW1pdEluUHJvZ3Jlc3M7XG4gICAgdGhpcy5jb21taXRJblByb2dyZXNzID0gdmFsdWU7XG4gICAgaWYgKG9sZFZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5kaWRVcGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBzZXRDaGVja291dEluUHJvZ3Jlc3ModmFsdWUpIHtcbiAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMuY2hlY2tvdXRJblByb2dyZXNzO1xuICAgIHRoaXMuY2hlY2tvdXRJblByb2dyZXNzID0gdmFsdWU7XG4gICAgaWYgKG9sZFZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5kaWRVcGRhdGUoKTtcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgTnVsbE9wZXJhdGlvblN0YXRlcyBleHRlbmRzIE9wZXJhdGlvblN0YXRlcyB7XG4gIHNldFB1c2hJblByb2dyZXNzKCkge1xuICAgIC8vIGRvIG5vdGhpbmdcbiAgfVxuXG4gIHNldFB1bGxJblByb2dyZXNzKCkge1xuICAgIC8vIGRvIG5vdGhpbmdcbiAgfVxuXG4gIHNldEZldGNoSW5Qcm9ncmVzcygpIHtcbiAgICAvLyBkbyBub3RoaW5nXG4gIH1cblxuICBzZXRDb21taXRJblByb2dyZXNzKCkge1xuICAgIC8vIGRvIG5vdGhpbmdcbiAgfVxuXG4gIHNldENoZWNrb3V0SW5Qcm9ncmVzcygpIHtcbiAgICAvLyBkbyBub3RoaW5nXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IG51bGxPcGVyYXRpb25TdGF0ZXMgPSBuZXcgTnVsbE9wZXJhdGlvblN0YXRlcygpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZSxNQUFNQSxlQUFlLENBQUM7RUFDbkNDLFdBQVdBLENBQUNDLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFBRTtJQUN4QixJQUFJLENBQUNDLFNBQVMsR0FBR0QsT0FBTyxDQUFDQyxTQUFTLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNoRCxJQUFJLENBQUNDLGNBQWMsR0FBRyxLQUFLO0lBQzNCLElBQUksQ0FBQ0MsY0FBYyxHQUFHLEtBQUs7SUFDM0IsSUFBSSxDQUFDQyxlQUFlLEdBQUcsS0FBSztJ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