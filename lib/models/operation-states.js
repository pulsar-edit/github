"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nullOperationStates = exports.default = void 0;
class OperationStates {
  constructor(options = {}) {
    this.didUpdate = options.didUpdate || (() => {});
    this.pushInProgress = false;
    this.pullInProgress = false;
    this.fetchInProgress = false;
    this.commitInProgress = false;
    this.checkoutInProgress = false;
  }
  isPushInProgress() {
    return this.pushInProgress;
  }
  isPullInProgress() {
    return this.pullInProgress;
  }
  isFetchInProgress() {
    return this.fetchInProgress;
  }
  isCommitInProgress() {
    return this.commitInProgress;
  }
  isCheckoutInProgress() {
    return this.checkoutInProgress;
  }
  setPushInProgress(value) {
    const oldValue = this.pushInProgress;
    this.pushInProgress = value;
    if (oldValue !== value) {
      this.didUpdate();
    }
  }
  setPullInProgress(value) {
    const oldValue = this.pullInProgress;
    this.pullInProgress = value;
    if (oldValue !== value) {
      this.didUpdate();
    }
  }
  setFetchInProgress(value) {
    const oldValue = this.fetchInProgress;
    this.fetchInProgress = value;
    if (oldValue !== value) {
      this.didUpdate();
    }
  }
  setCommitInProgress(value) {
    const oldValue = this.commitInProgress;
    this.commitInProgress = value;
    if (oldValue !== value) {
      this.didUpdate();
    }
  }
  setCheckoutInProgress(value) {
    const oldValue = this.checkoutInProgress;
    this.checkoutInProgress = value;
    if (oldValue !== value) {
      this.didUpdate();
    }
  }
}
exports.default = OperationStates;
class NullOperationStates extends OperationStates {
  setPushInProgress() {
    // do nothing
  }
  setPullInProgress() {
    // do nothing
  }
  setFetchInProgress() {
    // do nothing
  }
  setCommitInProgress() {
    // do nothing
  }
  setCheckoutInProgress() {
    // do nothing
  }
}
const nullOperationStates = new NullOperationStates();
exports.nullOperationStates = nullOperationStates;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPcGVyYXRpb25TdGF0ZXMiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJkaWRVcGRhdGUiLCJwdXNoSW5Qcm9ncmVzcyIsInB1bGxJblByb2dyZXNzIiwiZmV0Y2hJblByb2dyZXNzIiwiY29tbWl0SW5Qcm9ncmVzcyIsImNoZWNrb3V0SW5Qcm9ncmVzcyIsImlzUHVzaEluUHJvZ3Jlc3MiLCJpc1B1bGxJblByb2dyZXNzIiwiaXNGZXRjaEluUHJvZ3Jlc3MiLCJpc0NvbW1pdEluUHJvZ3Jlc3MiLCJpc0NoZWNrb3V0SW5Qcm9ncmVzcyIsInNldFB1c2hJblByb2dyZXNzIiwidmFsdWUiLCJvbGRWYWx1ZSIsInNldFB1bGxJblByb2dyZXNzIiwic2V0RmV0Y2hJblByb2dyZXNzIiwic2V0Q29tbWl0SW5Qcm9ncmVzcyIsInNldENoZWNrb3V0SW5Qcm9ncmVzcyIsIk51bGxPcGVyYXRpb25TdGF0ZXMiLCJudWxsT3BlcmF0aW9uU3RhdGVzIl0sInNvdXJjZXMiOlsib3BlcmF0aW9uLXN0YXRlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVyYXRpb25TdGF0ZXMge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLmRpZFVwZGF0ZSA9IG9wdGlvbnMuZGlkVXBkYXRlIHx8ICgoKSA9PiB7fSk7XG4gICAgdGhpcy5wdXNoSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgIHRoaXMucHVsbEluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICB0aGlzLmZldGNoSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgIHRoaXMuY29tbWl0SW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgIHRoaXMuY2hlY2tvdXRJblByb2dyZXNzID0gZmFsc2U7XG4gIH1cblxuICBpc1B1c2hJblByb2dyZXNzKCkge1xuICAgIHJldHVybiB0aGlzLnB1c2hJblByb2dyZXNzO1xuICB9XG5cbiAgaXNQdWxsSW5Qcm9ncmVzcygpIHtcbiAgICByZXR1cm4gdGhpcy5wdWxsSW5Qcm9ncmVzcztcbiAgfVxuXG4gIGlzRmV0Y2hJblByb2dyZXNzKCkge1xuICAgIHJldHVybiB0aGlzLmZldGNoSW5Qcm9ncmVzcztcbiAgfVxuXG4gIGlzQ29tbWl0SW5Qcm9ncmVzcygpIHtcbiAgICByZXR1cm4gdGhpcy5jb21taXRJblByb2dyZXNzO1xuICB9XG5cbiAgaXNDaGVja291dEluUHJvZ3Jlc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hlY2tvdXRJblByb2dyZXNzO1xuICB9XG5cbiAgc2V0UHVzaEluUHJvZ3Jlc3ModmFsdWUpIHtcbiAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMucHVzaEluUHJvZ3Jlc3M7XG4gICAgdGhpcy5wdXNoSW5Qcm9ncmVzcyA9IHZhbHVlO1xuICAgIGlmIChvbGRWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuZGlkVXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgc2V0UHVsbEluUHJvZ3Jlc3ModmFsdWUpIHtcbiAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMucHVsbEluUHJvZ3Jlc3M7XG4gICAgdGhpcy5wdWxsSW5Qcm9ncmVzcyA9IHZhbHVlO1xuICAgIGlmIChvbGRWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuZGlkVXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgc2V0RmV0Y2hJblByb2dyZXNzKHZhbHVlKSB7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLmZldGNoSW5Qcm9ncmVzcztcbiAgICB0aGlzLmZldGNoSW5Qcm9ncmVzcyA9IHZhbHVlO1xuICAgIGlmIChvbGRWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuZGlkVXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgc2V0Q29tbWl0SW5Qcm9ncmVzcyh2YWx1ZSkge1xuICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5jb21taXRJblByb2dyZXNzO1xuICAgIHRoaXMuY29tbWl0SW5Qcm9ncmVzcyA9IHZhbHVlO1xuICAgIGlmIChvbGRWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuZGlkVXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgc2V0Q2hlY2tvdXRJblByb2dyZXNzKHZhbHVlKSB7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLmNoZWNrb3V0SW5Qcm9ncmVzcztcbiAgICB0aGlzLmNoZWNrb3V0SW5Qcm9ncmVzcyA9IHZhbHVlO1xuICAgIGlmIChvbGRWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuZGlkVXBkYXRlKCk7XG4gICAgfVxuICB9XG59XG5cbmNsYXNzIE51bGxPcGVyYXRpb25TdGF0ZXMgZXh0ZW5kcyBPcGVyYXRpb25TdGF0ZXMge1xuICBzZXRQdXNoSW5Qcm9ncmVzcygpIHtcbiAgICAvLyBkbyBub3RoaW5nXG4gIH1cblxuICBzZXRQdWxsSW5Qcm9ncmVzcygpIHtcbiAgICAvLyBkbyBub3RoaW5nXG4gIH1cblxuICBzZXRGZXRjaEluUHJvZ3Jlc3MoKSB7XG4gICAgLy8gZG8gbm90aGluZ1xuICB9XG5cbiAgc2V0Q29tbWl0SW5Qcm9ncmVzcygpIHtcbiAgICAvLyBkbyBub3RoaW5nXG4gIH1cblxuICBzZXRDaGVja291dEluUHJvZ3Jlc3MoKSB7XG4gICAgLy8gZG8gbm90aGluZ1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBudWxsT3BlcmF0aW9uU3RhdGVzID0gbmV3IE51bGxPcGVyYXRpb25TdGF0ZXMoKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWUsTUFBTUEsZUFBZSxDQUFDO0VBQ25DQyxXQUFXLENBQUNDLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFBRTtJQUN4QixJQUFJLENBQUNDLFNBQVMsR0FBR0QsT0FBTyxDQUFDQyxTQUFTLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNoRCxJQUFJLENBQUNDLGNBQWMsR0FBRyxLQUFLO0lBQzNCLElBQUksQ0FBQ0MsY0FBYyxHQUFHLEtBQUs7SUFDM0IsSUFBSSxDQUFDQyxlQUFlLEdBQUcsS0FBSztJQUM1QixJQUFJLENBQUNDLGdCQUFnQixHQUFHLEtBQUs7SUFDN0IsSUFBSSxDQUFDQyxrQkFBa0IsR0FBRyxLQUFLO0VBQ2pDO0VBRUFDLGdCQUFnQixHQUFHO0lBQ2pCLE9BQU8sSUFBSSxDQUFDTCxjQUFjO0VBQzVCO0VBRUFNLGdCQUFnQixHQUFHO0lBQ2pCLE9BQU8sSUFBSSxDQUFDTCxjQUFjO0VBQzVCO0VBRUFNLGlCQUFpQixHQUFHO0lBQ2xCLE9BQU8sSUFBSSxDQUFDTCxlQUFlO0VBQzdCO0VBRUFNLGtCQUFrQixHQUFHO0lBQ25CLE9BQU8sSUFBSSxDQUFDTCxnQkFBZ0I7RUFDOUI7RUFFQU0sb0JBQW9CLEdBQUc7SUFDckIsT0FBTyxJQUFJLENBQUNMLGtCQUFrQjtFQUNoQztFQUVBTSxpQkFBaUIsQ0FBQ0MsS0FBSyxFQUFFO0lBQ3ZCLE1BQU1DLFFBQVEsR0FBRyxJQUFJLENBQUNaLGNBQWM7SUFDcEMsSUFBSSxDQUFDQSxjQUFjLEdBQUdXLEtBQUs7SUFDM0IsSUFBSUMsUUFBUSxLQUFLRCxLQUFLLEVBQUU7TUFDdEIsSUFBSSxDQUFDWixTQUFTLEVBQUU7SUFDbEI7RUFDRjtFQUVBYyxpQkFBaUIsQ0FBQ0YsS0FBSyxFQUFFO0lBQ3ZCLE1BQU1DLFFBQVEsR0FBRyxJQUFJLENBQUNYLGNBQWM7SUFDcEMsSUFBSSxDQUFDQSxjQUFjLEdBQUdVLEtBQUs7SUFDM0IsSUFBSUMsUUFBUSxLQUFLRCxLQUFLLEVBQUU7TUFDdEIsSUFBSSxDQUFDWixTQUFTLEVBQUU7SUFDbEI7RUFDRjtFQUVBZSxrQkFBa0IsQ0FBQ0gsS0FBSyxFQUFFO0lBQ3hCLE1BQU1DLFFBQVEsR0FBRyxJQUFJLENBQUNWLGVBQWU7SUFDckMsSUFBSSxDQUFDQSxlQUFlLEdBQUdTLEtBQUs7SUFDNUIsSUFBSUMsUUFBUSxLQUFLRCxLQUFLLEVBQUU7TUFDdEIsSUFBSSxDQUFDWixTQUFTLEVBQUU7SUFDbEI7RUFDRjtFQUVBZ0IsbUJBQW1CLENBQUNKLEtBQUssRUFBRTtJQUN6QixNQUFNQyxRQUFRLEdBQUcsSUFBSSxDQUFDVCxnQkFBZ0I7SUFDdEMsSUFBSSxDQUFDQSxnQkFBZ0IsR0FBR1EsS0FBSztJQUM3QixJQUFJQyxRQUFRLEtBQUtELEtBQUssRUFBRTtNQUN0QixJQUFJLENBQUNaLFNBQVMsRUFBRTtJQUNsQjtFQUNGO0VBRUFpQixxQkFBcUIsQ0FBQ0wsS0FBSyxFQUFFO0lBQzNCLE1BQU1DLFFBQVEsR0FBRyxJQUFJLENBQUNSLGtCQUFrQjtJQUN4QyxJQUFJLENBQUNBLGtCQUFrQixHQUFHTyxLQUFLO0lBQy9CLElBQUlDLFFBQVEsS0FBS0QsS0FBSyxFQUFFO01BQ3RCLElBQUksQ0FBQ1osU0FBUyxFQUFFO0lBQ2xCO0VBQ0Y7QUFDRjtBQUFDO0FBRUQsTUFBTWtCLG1CQUFtQixTQUFTckIsZUFBZSxDQUFDO0VBQ2hEYyxpQkFBaUIsR0FBRztJQUNsQjtFQUFBO0VBR0ZHLGlCQUFpQixHQUFHO0lBQ2xCO0VBQUE7RUFHRkMsa0JBQWtCLEdBQUc7SUFDbkI7RUFBQTtFQUdGQyxtQkFBbUIsR0FBRztJQUNwQjtFQUFBO0VBR0ZDLHFCQUFxQixHQUFHO0lBQ3RCO0VBQUE7QUFFSjtBQUVPLE1BQU1FLG1CQUFtQixHQUFHLElBQUlELG1CQUFtQixFQUFFO0FBQUMifQ==