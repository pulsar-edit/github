"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nullOperationStateObserver = exports.default = exports.FETCH = exports.PULL = exports.PUSH = void 0;
var _eventKit = require("event-kit");
const PUSH = {
  getter(o) {
    return o.isPushInProgress();
  }
};
exports.PUSH = PUSH;
const PULL = {
  getter(o) {
    return o.isPullInProgress();
  }
};
exports.PULL = PULL;
const FETCH = {
  getter(o) {
    return o.isFetchInProgress();
  }
};

// Notify subscibers when a repository completes one or more operations of interest, as observed by its OperationState
// transitioning from `true` to `false`. For exampe, use this to perform actions when a push completes.
exports.FETCH = FETCH;
class OperationStateObserver {
  constructor(repository, ...operations) {
    this.repository = repository;
    this.operations = new Set(operations);
    this.emitter = new _eventKit.Emitter();
    this.lastStates = new Map();
    for (const operation of this.operations) {
      this.lastStates.set(operation, operation.getter(this.repository.getOperationStates()));
    }
    this.sub = this.repository.onDidUpdate(this.handleUpdate.bind(this));
  }
  onDidComplete(handler) {
    return this.emitter.on('did-complete', handler);
  }
  handleUpdate() {
    let fire = false;
    for (const operation of this.operations) {
      const last = this.lastStates.get(operation);
      const current = operation.getter(this.repository.getOperationStates());
      if (last && !current) {
        fire = true;
      }
      this.lastStates.set(operation, current);
    }
    if (fire) {
      this.emitter.emit('did-complete');
    }
  }
  dispose() {
    this.emitter.dispose();
    this.sub.dispose();
  }
}
exports.default = OperationStateObserver;
const nullOperationStateObserver = {
  onDidComplete() {
    return new _eventKit.Disposable();
  },
  dispose() {}
};
exports.nullOperationStateObserver = nullOperationStateObserver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXZlbnRLaXQiLCJyZXF1aXJlIiwiUFVTSCIsImdldHRlciIsIm8iLCJpc1B1c2hJblByb2dyZXNzIiwiZXhwb3J0cyIsIlBVTEwiLCJpc1B1bGxJblByb2dyZXNzIiwiRkVUQ0giLCJpc0ZldGNoSW5Qcm9ncmVzcyIsIk9wZXJhdGlvblN0YXRlT2JzZXJ2ZXIiLCJjb25zdHJ1Y3RvciIsInJlcG9zaXRvcnkiLCJvcGVyYXRpb25zIiwiU2V0IiwiZW1pdHRlciIsIkVtaXR0ZXIiLCJsYXN0U3RhdGVzIiwiTWFwIiwib3BlcmF0aW9uIiwic2V0IiwiZ2V0T3BlcmF0aW9uU3RhdGVzIiwic3ViIiwib25EaWRVcGRhdGUiLCJoYW5kbGVVcGRhdGUiLCJiaW5kIiwib25EaWRDb21wbGV0ZSIsImhhbmRsZXIiLCJvbiIsImZpcmUiLCJsYXN0IiwiZ2V0IiwiY3VycmVudCIsImVtaXQiLCJkaXNwb3NlIiwiZGVmYXVsdCIsIm51bGxPcGVyYXRpb25TdGF0ZU9ic2VydmVyIiwiRGlzcG9zYWJsZSJdLCJzb3VyY2VzIjpbIm9wZXJhdGlvbi1zdGF0ZS1vYnNlcnZlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0VtaXR0ZXIsIERpc3Bvc2FibGV9IGZyb20gJ2V2ZW50LWtpdCc7XG5cbmV4cG9ydCBjb25zdCBQVVNIID0ge1xuICBnZXR0ZXIobykge1xuICAgIHJldHVybiBvLmlzUHVzaEluUHJvZ3Jlc3MoKTtcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBQVUxMID0ge1xuICBnZXR0ZXIobykge1xuICAgIHJldHVybiBvLmlzUHVsbEluUHJvZ3Jlc3MoKTtcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBGRVRDSCA9IHtcbiAgZ2V0dGVyKG8pIHtcbiAgICByZXR1cm4gby5pc0ZldGNoSW5Qcm9ncmVzcygpO1xuICB9LFxufTtcblxuLy8gTm90aWZ5IHN1YnNjaWJlcnMgd2hlbiBhIHJlcG9zaXRvcnkgY29tcGxldGVzIG9uZSBvciBtb3JlIG9wZXJhdGlvbnMgb2YgaW50ZXJlc3QsIGFzIG9ic2VydmVkIGJ5IGl0cyBPcGVyYXRpb25TdGF0ZVxuLy8gdHJhbnNpdGlvbmluZyBmcm9tIGB0cnVlYCB0byBgZmFsc2VgLiBGb3IgZXhhbXBlLCB1c2UgdGhpcyB0byBwZXJmb3JtIGFjdGlvbnMgd2hlbiBhIHB1c2ggY29tcGxldGVzLlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3BlcmF0aW9uU3RhdGVPYnNlcnZlciB7XG4gIGNvbnN0cnVjdG9yKHJlcG9zaXRvcnksIC4uLm9wZXJhdGlvbnMpIHtcbiAgICB0aGlzLnJlcG9zaXRvcnkgPSByZXBvc2l0b3J5O1xuICAgIHRoaXMub3BlcmF0aW9ucyA9IG5ldyBTZXQob3BlcmF0aW9ucyk7XG4gICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcblxuICAgIHRoaXMubGFzdFN0YXRlcyA9IG5ldyBNYXAoKTtcbiAgICBmb3IgKGNvbnN0IG9wZXJhdGlvbiBvZiB0aGlzLm9wZXJhdGlvbnMpIHtcbiAgICAgIHRoaXMubGFzdFN0YXRlcy5zZXQob3BlcmF0aW9uLCBvcGVyYXRpb24uZ2V0dGVyKHRoaXMucmVwb3NpdG9yeS5nZXRPcGVyYXRpb25TdGF0ZXMoKSkpO1xuICAgIH1cblxuICAgIHRoaXMuc3ViID0gdGhpcy5yZXBvc2l0b3J5Lm9uRGlkVXBkYXRlKHRoaXMuaGFuZGxlVXBkYXRlLmJpbmQodGhpcykpO1xuICB9XG5cbiAgb25EaWRDb21wbGV0ZShoYW5kbGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vbignZGlkLWNvbXBsZXRlJywgaGFuZGxlcik7XG4gIH1cblxuICBoYW5kbGVVcGRhdGUoKSB7XG4gICAgbGV0IGZpcmUgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IG9wZXJhdGlvbiBvZiB0aGlzLm9wZXJhdGlvbnMpIHtcbiAgICAgIGNvbnN0IGxhc3QgPSB0aGlzLmxhc3RTdGF0ZXMuZ2V0KG9wZXJhdGlvbik7XG4gICAgICBjb25zdCBjdXJyZW50ID0gb3BlcmF0aW9uLmdldHRlcih0aGlzLnJlcG9zaXRvcnkuZ2V0T3BlcmF0aW9uU3RhdGVzKCkpO1xuICAgICAgaWYgKGxhc3QgJiYgIWN1cnJlbnQpIHtcbiAgICAgICAgZmlyZSA9IHRydWU7XG4gICAgICB9XG4gICAgICB0aGlzLmxhc3RTdGF0ZXMuc2V0KG9wZXJhdGlvbiwgY3VycmVudCk7XG4gICAgfVxuICAgIGlmIChmaXJlKSB7XG4gICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLWNvbXBsZXRlJyk7XG4gICAgfVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLmVtaXR0ZXIuZGlzcG9zZSgpO1xuICAgIHRoaXMuc3ViLmRpc3Bvc2UoKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgbnVsbE9wZXJhdGlvblN0YXRlT2JzZXJ2ZXIgPSB7XG4gIG9uRGlkQ29tcGxldGUoKSB7IHJldHVybiBuZXcgRGlzcG9zYWJsZSgpOyB9LFxuICBkaXNwb3NlKCkge30sXG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxTQUFBLEdBQUFDLE9BQUE7QUFFTyxNQUFNQyxJQUFJLEdBQUc7RUFDbEJDLE1BQU1BLENBQUNDLENBQUMsRUFBRTtJQUNSLE9BQU9BLENBQUMsQ0FBQ0MsZ0JBQWdCLEVBQUU7RUFDN0I7QUFDRixDQUFDO0FBQUNDLE9BQUEsQ0FBQUosSUFBQSxHQUFBQSxJQUFBO0FBRUssTUFBTUssSUFBSSxHQUFHO0VBQ2xCSixNQUFNQSxDQUFDQyxDQUFDLEVBQUU7SUFDUixPQUFPQSxDQUFDLENBQUNJLGdCQUFnQixFQUFFO0VBQzdCO0FBQ0YsQ0FBQztBQUFDRixPQUFBLENBQUFDLElBQUEsR0FBQUEsSUFBQTtBQUVLLE1BQU1FLEtBQUssR0FBRztFQUNuQk4sTUFBTUEsQ0FBQ0MsQ0FBQyxFQUFFO0lBQ1IsT0FBT0EsQ0FBQyxDQUFDTSxpQkFBaUIsRUFBRTtFQUM5QjtBQUNGLENBQUM7O0FBRUQ7QUFDQTtBQUFBSixPQUFBLENBQUFHLEtBQUEsR0FBQUEsS0FBQTtBQUNlLE1BQU1FLHNCQUFzQixDQUFDO0VBQzFDQyxXQUFXQSxDQUFDQyxVQUFVLEVBQUUsR0FBR0MsVUFBVSxFQUFFO0lBQ3JDLElBQUksQ0FBQ0QsVUFBVSxHQUFHQSxVQUFVO0lBQzVCLElBQUksQ0FBQ0MsVUFBVSxHQUFHLElBQUlDLEdBQUcsQ0FBQ0QsVUFBVSxDQUFDO0lBQ3JDLElBQUksQ0FBQ0UsT0FBTyxHQUFHLElBQUlDLGlCQUFPLEVBQUU7SUFFNUIsSUFBSSxDQUFDQyxVQUFVLEdBQUcsSUFBSUMsR0FBRyxFQUFFO0lBQzNCLEtBQUssTUFBTUMsU0FBUyxJQUFJLElBQUksQ0FBQ04sVUFBVSxFQUFFO01BQ3ZDLElBQUksQ0FBQ0ksVUFBVSxDQUFDRyxHQUFHLENBQUNELFNBQVMsRUFBRUEsU0FBUyxDQUFDakIsTUFBTSxDQUFDLElBQUksQ0FBQ1UsVUFBVSxDQUFDUyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7SUFDeEY7SUFFQSxJQUFJLENBQUNDLEdBQUcsR0FBRyxJQUFJLENBQUNWLFVBQVUsQ0FBQ1csV0FBVyxDQUFDLElBQUksQ0FBQ0MsWUFBWSxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDdEU7RUFFQUMsYUFBYUEsQ0FBQ0MsT0FBTyxFQUFFO0lBQ3JCLE9BQU8sSUFBSSxDQUFDWixPQUFPLENBQUNhLEVBQUUsQ0FBQyxjQUFjLEVBQUVELE9BQU8sQ0FBQztFQUNqRDtFQUVBSCxZQUFZQSxDQUFBLEVBQUc7SUFDYixJQUFJSyxJQUFJLEdBQUcsS0FBSztJQUNoQixLQUFLLE1BQU1WLFNBQVMsSUFBSSxJQUFJLENBQUNOLFVBQVUsRUFBRTtNQUN2QyxNQUFNaUIsSUFBSSxHQUFHLElBQUksQ0FBQ2IsVUFBVSxDQUFDYyxHQUFHLENBQUNaLFNBQVMsQ0FBQztNQUMzQyxNQUFNYSxPQUFPLEdBQUdiLFNBQVMsQ0FBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUNVLFVBQVUsQ0FBQ1Msa0JBQWtCLEVBQUUsQ0FBQztNQUN0RSxJQUFJUyxJQUFJLElBQUksQ0FBQ0UsT0FBTyxFQUFFO1FBQ3BCSCxJQUFJLEdBQUcsSUFBSTtNQUNiO01BQ0EsSUFBSSxDQUFDWixVQUFVLENBQUNHLEdBQUcsQ0FBQ0QsU0FBUyxFQUFFYSxPQUFPLENBQUM7SUFDekM7SUFDQSxJQUFJSCxJQUFJLEVBQUU7TUFDUixJQUFJLENBQUNkLE9BQU8sQ0FBQ2tCLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDbkM7RUFDRjtFQUVBQyxPQUFPQSxDQUFBLEVBQUc7SUFDUixJQUFJLENBQUNuQixPQUFPLENBQUNtQixPQUFPLEVBQUU7SUFDdEIsSUFBSSxDQUFDWixHQUFHLENBQUNZLE9BQU8sRUFBRTtFQUNwQjtBQUNGO0FBQUM3QixPQUFBLENBQUE4QixPQUFBLEdBQUF6QixzQkFBQTtBQUVNLE1BQU0wQiwwQkFBMEIsR0FBRztFQUN4Q1YsYUFBYUEsQ0FBQSxFQUFHO0lBQUUsT0FBTyxJQUFJVyxvQkFBVSxFQUFFO0VBQUUsQ0FBQztFQUM1Q0gsT0FBT0EsQ0FBQSxFQUFHLENBQUM7QUFDYixDQUFDO0FBQUM3QixPQUFBLENBQUErQiwwQkFBQSxHQUFBQSwwQkFBQSJ9