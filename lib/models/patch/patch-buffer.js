"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _atom = require("atom");
var _util = require("util");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const LAYER_NAMES = ['unchanged', 'addition', 'deletion', 'nonewline', 'hunk', 'patch'];
class PatchBuffer {
  constructor() {
    this.buffer = new _atom.TextBuffer();
    this.buffer.retain();
    this.layers = LAYER_NAMES.reduce((map, layerName) => {
      map[layerName] = this.buffer.addMarkerLayer();
      return map;
    }, {});
  }
  getBuffer() {
    return this.buffer;
  }
  getInsertionPoint() {
    return this.buffer.getEndPosition();
  }
  getLayer(layerName) {
    return this.layers[layerName];
  }
  findMarkers(layerName, ...args) {
    return this.layers[layerName].findMarkers(...args);
  }
  findAllMarkers(...args) {
    return LAYER_NAMES.reduce((arr, layerName) => {
      arr.push(...this.findMarkers(layerName, ...args));
      return arr;
    }, []);
  }
  markPosition(layerName, ...args) {
    return this.layers[layerName].markPosition(...args);
  }
  markRange(layerName, ...args) {
    return this.layers[layerName].markRange(...args);
  }
  clearAllLayers() {
    for (const layerName of LAYER_NAMES) {
      this.layers[layerName].clear();
    }
  }
  createInserterAt(insertionPoint) {
    return new Inserter(this, _atom.Point.fromObject(insertionPoint));
  }
  createInserterAtEnd() {
    return this.createInserterAt(this.getInsertionPoint());
  }
  createSubBuffer(rangeLike, options = {}) {
    const opts = _objectSpread({
      exclude: new Set()
    }, options);
    const range = _atom.Range.fromObject(rangeLike);
    const baseOffset = range.start.negate();
    const includedMarkersByLayer = LAYER_NAMES.reduce((map, layerName) => {
      map[layerName] = this.layers[layerName].findMarkers({
        intersectsRange: range
      }).filter(m => !opts.exclude.has(m));
      return map;
    }, {});
    const markerMap = new Map();
    const subBuffer = new PatchBuffer();
    subBuffer.getBuffer().setText(this.buffer.getTextInRange(range));
    for (const layerName of LAYER_NAMES) {
      for (const oldMarker of includedMarkersByLayer[layerName]) {
        const oldRange = oldMarker.getRange();
        const clippedStart = oldRange.start.isLessThanOrEqual(range.start) ? range.start : oldRange.start;
        const clippedEnd = oldRange.end.isGreaterThanOrEqual(range.end) ? range.end : oldRange.end;

        // Exclude non-empty markers that intersect *only* at the range start or end
        if (clippedStart.isEqual(clippedEnd) && !oldRange.start.isEqual(oldRange.end)) {
          continue;
        }
        const startOffset = clippedStart.row === range.start.row ? baseOffset : [baseOffset.row, 0];
        const endOffset = clippedEnd.row === range.start.row ? baseOffset : [baseOffset.row, 0];
        const newMarker = subBuffer.markRange(layerName, [clippedStart.translate(startOffset), clippedEnd.translate(endOffset)], oldMarker.getProperties());
        markerMap.set(oldMarker, newMarker);
      }
    }
    return {
      patchBuffer: subBuffer,
      markerMap
    };
  }
  extractPatchBuffer(rangeLike, options = {}) {
    const {
      patchBuffer: subBuffer,
      markerMap
    } = this.createSubBuffer(rangeLike, options);
    for (const oldMarker of markerMap.keys()) {
      oldMarker.destroy();
    }
    this.buffer.setTextInRange(rangeLike, '');
    return {
      patchBuffer: subBuffer,
      markerMap
    };
  }
  deleteLastNewline() {
    if (this.buffer.getLastLine() === '') {
      this.buffer.deleteRow(this.buffer.getLastRow());
    }
    return this;
  }
  adopt(original) {
    this.clearAllLayers();
    this.buffer.setText(original.getBuffer().getText());
    const markerMap = new Map();
    for (const layerName of LAYER_NAMES) {
      for (const originalMarker of original.getLayer(layerName).getMarkers()) {
        const newMarker = this.markRange(layerName, originalMarker.getRange(), originalMarker.getProperties());
        markerMap.set(originalMarker, newMarker);
      }
    }
    return markerMap;
  }

  /* istanbul ignore next */
  inspect(opts = {}) {
    /* istanbul ignore next */
    const options = _objectSpread({
      layerNames: LAYER_NAMES
    }, opts);
    let inspectString = '';
    const increasingMarkers = [];
    for (const layerName of options.layerNames) {
      for (const marker of this.findMarkers(layerName, {})) {
        increasingMarkers.push({
          layerName,
          point: marker.getRange().start,
          start: true,
          id: marker.id
        });
        increasingMarkers.push({
          layerName,
          point: marker.getRange().end,
          end: true,
          id: marker.id
        });
      }
    }
    increasingMarkers.sort((a, b) => {
      const cmp = a.point.compare(b.point);
      if (cmp !== 0) {
        return cmp;
      } else if (a.start && b.start) {
        return 0;
      } else if (a.start && !b.start) {
        return -1;
      } else if (!a.start && b.start) {
        return 1;
      } else {
        return 0;
      }
    });
    let inspectPoint = _atom.Point.fromObject([0, 0]);
    for (const marker of increasingMarkers) {
      if (!marker.point.isEqual(inspectPoint)) {
        inspectString += (0, _util.inspect)(this.buffer.getTextInRange([inspectPoint, marker.point])) + '\n';
      }
      if (marker.start) {
        inspectString += `  start ${marker.layerName}@${marker.id}\n`;
      } else if (marker.end) {
        inspectString += `  end ${marker.layerName}@${marker.id}\n`;
      }
      inspectPoint = marker.point;
    }
    return inspectString;
  }
}
exports.default = PatchBuffer;
class Inserter {
  constructor(patchBuffer, insertionPoint) {
    const clipped = patchBuffer.getBuffer().clipPosition(insertionPoint);
    this.patchBuffer = patchBuffer;
    this.startPoint = clipped.copy();
    this.insertionPoint = clipped.copy();
    this.markerBlueprints = [];
    this.markerMapCallbacks = [];
    this.markersBefore = new Set();
    this.markersAfter = new Set();
  }
  keepBefore(markers) {
    for (const marker of markers) {
      if (marker.getRange().end.isEqual(this.startPoint)) {
        this.markersBefore.add(marker);
      }
    }
    return this;
  }
  keepAfter(markers) {
    for (const marker of markers) {
      if (marker.getRange().start.isEqual(this.startPoint)) {
        this.markersAfter.add(marker);
      }
    }
    return this;
  }
  markWhile(layerName, block, markerOpts) {
    const start = this.insertionPoint.copy();
    block();
    const end = this.insertionPoint.copy();
    this.markerBlueprints.push({
      layerName,
      range: new _atom.Range(start, end),
      markerOpts
    });
    return this;
  }
  insert(text) {
    const insertedRange = this.patchBuffer.getBuffer().insert(this.insertionPoint, text);
    this.insertionPoint = insertedRange.end;
    return this;
  }
  insertMarked(text, layerName, markerOpts) {
    return this.markWhile(layerName, () => this.insert(text), markerOpts);
  }
  insertPatchBuffer(subPatchBuffer, opts) {
    const baseOffset = this.insertionPoint.copy();
    this.insert(subPatchBuffer.getBuffer().getText());
    const subMarkerMap = new Map();
    for (const layerName of LAYER_NAMES) {
      for (const oldMarker of subPatchBuffer.findMarkers(layerName, {})) {
        const startOffset = oldMarker.getRange().start.row === 0 ? baseOffset : [baseOffset.row, 0];
        const endOffset = oldMarker.getRange().end.row === 0 ? baseOffset : [baseOffset.row, 0];
        const range = oldMarker.getRange().translate(startOffset, endOffset);
        const markerOpts = _objectSpread({}, oldMarker.getProperties(), {
          callback: newMarker => {
            subMarkerMap.set(oldMarker, newMarker);
          }
        });
        this.markerBlueprints.push({
          layerName,
          range,
          markerOpts
        });
      }
    }
    this.markerMapCallbacks.push({
      markerMap: subMarkerMap,
      callback: opts.callback
    });
    return this;
  }
  apply() {
    for (const {
      layerName,
      range,
      markerOpts
    } of this.markerBlueprints) {
      const callback = markerOpts.callback;
      delete markerOpts.callback;
      const marker = this.patchBuffer.markRange(layerName, range, markerOpts);
      if (callback) {
        callback(marker);
      }
    }
    for (const {
      markerMap,
      callback
    } of this.markerMapCallbacks) {
      callback(markerMap);
    }
    for (const beforeMarker of this.markersBefore) {
      const isEmpty = beforeMarker.getRange().isEmpty();
      if (!beforeMarker.isReversed()) {
        beforeMarker.setHeadPosition(this.startPoint);
        if (isEmpty) {
          beforeMarker.setTailPosition(this.startPoint);
        }
      } else {
        beforeMarker.setTailPosition(this.startPoint);
        if (isEmpty) {
          beforeMarker.setHeadPosition(this.startPoint);
        }
      }
    }
    for (const afterMarker of this.markersAfter) {
      const isEmpty = afterMarker.getRange().isEmpty();
      if (!afterMarker.isReversed()) {
        afterMarker.setTailPosition(this.insertionPoint);
        if (isEmpty) {
          afterMarker.setHeadPosition(this.insertionPoint);
        }
      } else {
        afterMarker.setHeadPosition(this.insertionPoint);
        if (isEmpty) {
          afterMarker.setTailPosition(this.insertionPoint);
        }
      }
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXRvbSIsInJlcXVpcmUiLCJfdXRpbCIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiTEFZRVJfTkFNRVMiLCJQYXRjaEJ1ZmZlciIsImNvbnN0cnVjdG9yIiwiYnVmZmVyIiwiVGV4dEJ1ZmZlciIsInJldGFpbiIsImxheWVycyIsInJlZHVjZSIsIm1hcCIsImxheWVyTmFtZSIsImFkZE1hcmtlckxheWVyIiwiZ2V0QnVmZmVyIiwiZ2V0SW5zZXJ0aW9uUG9pbnQiLCJnZXRFbmRQb3NpdGlvbiIsImdldExheWVyIiwiZmluZE1hcmtlcnMiLCJhcmdzIiwiZmluZEFsbE1hcmtlcnMiLCJhcnIiLCJtYXJrUG9zaXRpb24iLCJtYXJrUmFuZ2UiLCJjbGVhckFsbExheWVycyIsImNsZWFyIiwiY3JlYXRlSW5zZXJ0ZXJBdCIsImluc2VydGlvblBvaW50IiwiSW5zZXJ0ZXIiLCJQb2ludCIsImZyb21PYmplY3QiLCJjcmVhdGVJbnNlcnRlckF0RW5kIiwiY3JlYXRlU3ViQnVmZmVyIiwicmFuZ2VMaWtlIiwib3B0aW9ucyIsIm9wdHMiLCJleGNsdWRlIiwiU2V0IiwicmFuZ2UiLCJSYW5nZSIsImJhc2VPZmZzZXQiLCJzdGFydCIsIm5lZ2F0ZSIsImluY2x1ZGVkTWFya2Vyc0J5TGF5ZXIiLCJpbnRlcnNlY3RzUmFuZ2UiLCJtIiwiaGFzIiwibWFya2VyTWFwIiwiTWFwIiwic3ViQnVmZmVyIiwic2V0VGV4dCIsImdldFRleHRJblJhbmdlIiwib2xkTWFya2VyIiwib2xkUmFuZ2UiLCJnZXRSYW5nZSIsImNsaXBwZWRTdGFydCIsImlzTGVzc1RoYW5PckVxdWFsIiwiY2xpcHBlZEVuZCIsImVuZCIsImlzR3JlYXRlclRoYW5PckVxdWFsIiwiaXNFcXVhbCIsInN0YXJ0T2Zmc2V0Iiwicm93IiwiZW5kT2Zmc2V0IiwibmV3TWFya2VyIiwidHJhbnNsYXRlIiwiZ2V0UHJvcGVydGllcyIsInNldCIsInBhdGNoQnVmZmVyIiwiZXh0cmFjdFBhdGNoQnVmZmVyIiwiZGVzdHJveSIsInNldFRleHRJblJhbmdlIiwiZGVsZXRlTGFzdE5ld2xpbmUiLCJnZXRMYXN0TGluZSIsImRlbGV0ZVJvdyIsImdldExhc3RSb3ciLCJhZG9wdCIsIm9yaWdpbmFsIiwiZ2V0VGV4dCIsIm9yaWdpbmFsTWFya2VyIiwiZ2V0TWFya2VycyIsImluc3BlY3QiLCJsYXllck5hbWVzIiwiaW5zcGVjdFN0cmluZyIsImluY3JlYXNpbmdNYXJrZXJzIiwibWFya2VyIiwicG9pbnQiLCJpZCIsInNvcnQiLCJhIiwiYiIsImNtcCIsImNvbXBhcmUiLCJpbnNwZWN0UG9pbnQiLCJleHBvcnRzIiwiZGVmYXVsdCIsImNsaXBwZWQiLCJjbGlwUG9zaXRpb24iLCJzdGFydFBvaW50IiwiY29weSIsIm1hcmtlckJsdWVwcmludHMiLCJtYXJrZXJNYXBDYWxsYmFja3MiLCJtYXJrZXJzQmVmb3JlIiwibWFya2Vyc0FmdGVyIiwia2VlcEJlZm9yZSIsIm1hcmtlcnMiLCJhZGQiLCJrZWVwQWZ0ZXIiLCJtYXJrV2hpbGUiLCJibG9jayIsIm1hcmtlck9wdHMiLCJpbnNlcnQiLCJ0ZXh0IiwiaW5zZXJ0ZWRSYW5nZSIsImluc2VydE1hcmtlZCIsImluc2VydFBhdGNoQnVmZmVyIiwic3ViUGF0Y2hCdWZmZXIiLCJzdWJNYXJrZXJNYXAiLCJjYWxsYmFjayIsImJlZm9yZU1hcmtlciIsImlzRW1wdHkiLCJpc1JldmVyc2VkIiwic2V0SGVhZFBvc2l0aW9uIiwic2V0VGFpbFBvc2l0aW9uIiwiYWZ0ZXJNYXJrZXIiXSwic291cmNlcyI6WyJwYXRjaC1idWZmZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZXh0QnVmZmVyLCBSYW5nZSwgUG9pbnR9IGZyb20gJ2F0b20nO1xuaW1wb3J0IHtpbnNwZWN0fSBmcm9tICd1dGlsJztcblxuY29uc3QgTEFZRVJfTkFNRVMgPSBbJ3VuY2hhbmdlZCcsICdhZGRpdGlvbicsICdkZWxldGlvbicsICdub25ld2xpbmUnLCAnaHVuaycsICdwYXRjaCddO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXRjaEJ1ZmZlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYnVmZmVyID0gbmV3IFRleHRCdWZmZXIoKTtcbiAgICB0aGlzLmJ1ZmZlci5yZXRhaW4oKTtcblxuICAgIHRoaXMubGF5ZXJzID0gTEFZRVJfTkFNRVMucmVkdWNlKChtYXAsIGxheWVyTmFtZSkgPT4ge1xuICAgICAgbWFwW2xheWVyTmFtZV0gPSB0aGlzLmJ1ZmZlci5hZGRNYXJrZXJMYXllcigpO1xuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9LCB7fSk7XG4gIH1cblxuICBnZXRCdWZmZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyO1xuICB9XG5cbiAgZ2V0SW5zZXJ0aW9uUG9pbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyLmdldEVuZFBvc2l0aW9uKCk7XG4gIH1cblxuICBnZXRMYXllcihsYXllck5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5sYXllcnNbbGF5ZXJOYW1lXTtcbiAgfVxuXG4gIGZpbmRNYXJrZXJzKGxheWVyTmFtZSwgLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLmxheWVyc1tsYXllck5hbWVdLmZpbmRNYXJrZXJzKC4uLmFyZ3MpO1xuICB9XG5cbiAgZmluZEFsbE1hcmtlcnMoLi4uYXJncykge1xuICAgIHJldHVybiBMQVlFUl9OQU1FUy5yZWR1Y2UoKGFyciwgbGF5ZXJOYW1lKSA9PiB7XG4gICAgICBhcnIucHVzaCguLi50aGlzLmZpbmRNYXJrZXJzKGxheWVyTmFtZSwgLi4uYXJncykpO1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9LCBbXSk7XG4gIH1cblxuICBtYXJrUG9zaXRpb24obGF5ZXJOYW1lLCAuLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMubGF5ZXJzW2xheWVyTmFtZV0ubWFya1Bvc2l0aW9uKC4uLmFyZ3MpO1xuICB9XG5cbiAgbWFya1JhbmdlKGxheWVyTmFtZSwgLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLmxheWVyc1tsYXllck5hbWVdLm1hcmtSYW5nZSguLi5hcmdzKTtcbiAgfVxuXG4gIGNsZWFyQWxsTGF5ZXJzKCkge1xuICAgIGZvciAoY29uc3QgbGF5ZXJOYW1lIG9mIExBWUVSX05BTUVTKSB7XG4gICAgICB0aGlzLmxheWVyc1tsYXllck5hbWVdLmNsZWFyKCk7XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlSW5zZXJ0ZXJBdChpbnNlcnRpb25Qb2ludCkge1xuICAgIHJldHVybiBuZXcgSW5zZXJ0ZXIodGhpcywgUG9pbnQuZnJvbU9iamVjdChpbnNlcnRpb25Qb2ludCkpO1xuICB9XG5cbiAgY3JlYXRlSW5zZXJ0ZXJBdEVuZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVJbnNlcnRlckF0KHRoaXMuZ2V0SW5zZXJ0aW9uUG9pbnQoKSk7XG4gIH1cblxuICBjcmVhdGVTdWJCdWZmZXIocmFuZ2VMaWtlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBvcHRzID0ge1xuICAgICAgZXhjbHVkZTogbmV3IFNldCgpLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9O1xuXG4gICAgY29uc3QgcmFuZ2UgPSBSYW5nZS5mcm9tT2JqZWN0KHJhbmdlTGlrZSk7XG4gICAgY29uc3QgYmFzZU9mZnNldCA9IHJhbmdlLnN0YXJ0Lm5lZ2F0ZSgpO1xuICAgIGNvbnN0IGluY2x1ZGVkTWFya2Vyc0J5TGF5ZXIgPSBMQVlFUl9OQU1FUy5yZWR1Y2UoKG1hcCwgbGF5ZXJOYW1lKSA9PiB7XG4gICAgICBtYXBbbGF5ZXJOYW1lXSA9IHRoaXMubGF5ZXJzW2xheWVyTmFtZV1cbiAgICAgICAgLmZpbmRNYXJrZXJzKHtpbnRlcnNlY3RzUmFuZ2U6IHJhbmdlfSlcbiAgICAgICAgLmZpbHRlcihtID0+ICFvcHRzLmV4Y2x1ZGUuaGFzKG0pKTtcbiAgICAgIHJldHVybiBtYXA7XG4gICAgfSwge30pO1xuICAgIGNvbnN0IG1hcmtlck1hcCA9IG5ldyBNYXAoKTtcblxuICAgIGNvbnN0IHN1YkJ1ZmZlciA9IG5ldyBQYXRjaEJ1ZmZlcigpO1xuICAgIHN1YkJ1ZmZlci5nZXRCdWZmZXIoKS5zZXRUZXh0KHRoaXMuYnVmZmVyLmdldFRleHRJblJhbmdlKHJhbmdlKSk7XG5cbiAgICBmb3IgKGNvbnN0IGxheWVyTmFtZSBvZiBMQVlFUl9OQU1FUykge1xuICAgICAgZm9yIChjb25zdCBvbGRNYXJrZXIgb2YgaW5jbHVkZWRNYXJrZXJzQnlMYXllcltsYXllck5hbWVdKSB7XG4gICAgICAgIGNvbnN0IG9sZFJhbmdlID0gb2xkTWFya2VyLmdldFJhbmdlKCk7XG5cbiAgICAgICAgY29uc3QgY2xpcHBlZFN0YXJ0ID0gb2xkUmFuZ2Uuc3RhcnQuaXNMZXNzVGhhbk9yRXF1YWwocmFuZ2Uuc3RhcnQpID8gcmFuZ2Uuc3RhcnQgOiBvbGRSYW5nZS5zdGFydDtcbiAgICAgICAgY29uc3QgY2xpcHBlZEVuZCA9IG9sZFJhbmdlLmVuZC5pc0dyZWF0ZXJUaGFuT3JFcXVhbChyYW5nZS5lbmQpID8gcmFuZ2UuZW5kIDogb2xkUmFuZ2UuZW5kO1xuXG4gICAgICAgIC8vIEV4Y2x1ZGUgbm9uLWVtcHR5IG1hcmtlcnMgdGhhdCBpbnRlcnNlY3QgKm9ubHkqIGF0IHRoZSByYW5nZSBzdGFydCBvciBlbmRcbiAgICAgICAgaWYgKGNsaXBwZWRTdGFydC5pc0VxdWFsKGNsaXBwZWRFbmQpICYmICFvbGRSYW5nZS5zdGFydC5pc0VxdWFsKG9sZFJhbmdlLmVuZCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0YXJ0T2Zmc2V0ID0gY2xpcHBlZFN0YXJ0LnJvdyA9PT0gcmFuZ2Uuc3RhcnQucm93ID8gYmFzZU9mZnNldCA6IFtiYXNlT2Zmc2V0LnJvdywgMF07XG4gICAgICAgIGNvbnN0IGVuZE9mZnNldCA9IGNsaXBwZWRFbmQucm93ID09PSByYW5nZS5zdGFydC5yb3cgPyBiYXNlT2Zmc2V0IDogW2Jhc2VPZmZzZXQucm93LCAwXTtcblxuICAgICAgICBjb25zdCBuZXdNYXJrZXIgPSBzdWJCdWZmZXIubWFya1JhbmdlKFxuICAgICAgICAgIGxheWVyTmFtZSxcbiAgICAgICAgICBbY2xpcHBlZFN0YXJ0LnRyYW5zbGF0ZShzdGFydE9mZnNldCksIGNsaXBwZWRFbmQudHJhbnNsYXRlKGVuZE9mZnNldCldLFxuICAgICAgICAgIG9sZE1hcmtlci5nZXRQcm9wZXJ0aWVzKCksXG4gICAgICAgICk7XG4gICAgICAgIG1hcmtlck1hcC5zZXQob2xkTWFya2VyLCBuZXdNYXJrZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7cGF0Y2hCdWZmZXI6IHN1YkJ1ZmZlciwgbWFya2VyTWFwfTtcbiAgfVxuXG4gIGV4dHJhY3RQYXRjaEJ1ZmZlcihyYW5nZUxpa2UsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHtwYXRjaEJ1ZmZlcjogc3ViQnVmZmVyLCBtYXJrZXJNYXB9ID0gdGhpcy5jcmVhdGVTdWJCdWZmZXIocmFuZ2VMaWtlLCBvcHRpb25zKTtcblxuICAgIGZvciAoY29uc3Qgb2xkTWFya2VyIG9mIG1hcmtlck1hcC5rZXlzKCkpIHtcbiAgICAgIG9sZE1hcmtlci5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgdGhpcy5idWZmZXIuc2V0VGV4dEluUmFuZ2UocmFuZ2VMaWtlLCAnJyk7XG4gICAgcmV0dXJuIHtwYXRjaEJ1ZmZlcjogc3ViQnVmZmVyLCBtYXJrZXJNYXB9O1xuICB9XG5cbiAgZGVsZXRlTGFzdE5ld2xpbmUoKSB7XG4gICAgaWYgKHRoaXMuYnVmZmVyLmdldExhc3RMaW5lKCkgPT09ICcnKSB7XG4gICAgICB0aGlzLmJ1ZmZlci5kZWxldGVSb3codGhpcy5idWZmZXIuZ2V0TGFzdFJvdygpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFkb3B0KG9yaWdpbmFsKSB7XG4gICAgdGhpcy5jbGVhckFsbExheWVycygpO1xuICAgIHRoaXMuYnVmZmVyLnNldFRleHQob3JpZ2luYWwuZ2V0QnVmZmVyKCkuZ2V0VGV4dCgpKTtcblxuICAgIGNvbnN0IG1hcmtlck1hcCA9IG5ldyBNYXAoKTtcbiAgICBmb3IgKGNvbnN0IGxheWVyTmFtZSBvZiBMQVlFUl9OQU1FUykge1xuICAgICAgZm9yIChjb25zdCBvcmlnaW5hbE1hcmtlciBvZiBvcmlnaW5hbC5nZXRMYXllcihsYXllck5hbWUpLmdldE1hcmtlcnMoKSkge1xuICAgICAgICBjb25zdCBuZXdNYXJrZXIgPSB0aGlzLm1hcmtSYW5nZShsYXllck5hbWUsIG9yaWdpbmFsTWFya2VyLmdldFJhbmdlKCksIG9yaWdpbmFsTWFya2VyLmdldFByb3BlcnRpZXMoKSk7XG4gICAgICAgIG1hcmtlck1hcC5zZXQob3JpZ2luYWxNYXJrZXIsIG5ld01hcmtlcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXJrZXJNYXA7XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpbnNwZWN0KG9wdHMgPSB7fSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGxheWVyTmFtZXM6IExBWUVSX05BTUVTLFxuICAgICAgLi4ub3B0cyxcbiAgICB9O1xuXG4gICAgbGV0IGluc3BlY3RTdHJpbmcgPSAnJztcblxuICAgIGNvbnN0IGluY3JlYXNpbmdNYXJrZXJzID0gW107XG4gICAgZm9yIChjb25zdCBsYXllck5hbWUgb2Ygb3B0aW9ucy5sYXllck5hbWVzKSB7XG4gICAgICBmb3IgKGNvbnN0IG1hcmtlciBvZiB0aGlzLmZpbmRNYXJrZXJzKGxheWVyTmFtZSwge30pKSB7XG4gICAgICAgIGluY3JlYXNpbmdNYXJrZXJzLnB1c2goe2xheWVyTmFtZSwgcG9pbnQ6IG1hcmtlci5nZXRSYW5nZSgpLnN0YXJ0LCBzdGFydDogdHJ1ZSwgaWQ6IG1hcmtlci5pZH0pO1xuICAgICAgICBpbmNyZWFzaW5nTWFya2Vycy5wdXNoKHtsYXllck5hbWUsIHBvaW50OiBtYXJrZXIuZ2V0UmFuZ2UoKS5lbmQsIGVuZDogdHJ1ZSwgaWQ6IG1hcmtlci5pZH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpbmNyZWFzaW5nTWFya2Vycy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICBjb25zdCBjbXAgPSBhLnBvaW50LmNvbXBhcmUoYi5wb2ludCk7XG4gICAgICBpZiAoY21wICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBjbXA7XG4gICAgICB9IGVsc2UgaWYgKGEuc3RhcnQgJiYgYi5zdGFydCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0gZWxzZSBpZiAoYS5zdGFydCAmJiAhYi5zdGFydCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9IGVsc2UgaWYgKCFhLnN0YXJ0ICYmIGIuc3RhcnQpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGxldCBpbnNwZWN0UG9pbnQgPSBQb2ludC5mcm9tT2JqZWN0KFswLCAwXSk7XG4gICAgZm9yIChjb25zdCBtYXJrZXIgb2YgaW5jcmVhc2luZ01hcmtlcnMpIHtcbiAgICAgIGlmICghbWFya2VyLnBvaW50LmlzRXF1YWwoaW5zcGVjdFBvaW50KSkge1xuICAgICAgICBpbnNwZWN0U3RyaW5nICs9IGluc3BlY3QodGhpcy5idWZmZXIuZ2V0VGV4dEluUmFuZ2UoW2luc3BlY3RQb2ludCwgbWFya2VyLnBvaW50XSkpICsgJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXJrZXIuc3RhcnQpIHtcbiAgICAgICAgaW5zcGVjdFN0cmluZyArPSBgICBzdGFydCAke21hcmtlci5sYXllck5hbWV9QCR7bWFya2VyLmlkfVxcbmA7XG4gICAgICB9IGVsc2UgaWYgKG1hcmtlci5lbmQpIHtcbiAgICAgICAgaW5zcGVjdFN0cmluZyArPSBgICBlbmQgJHttYXJrZXIubGF5ZXJOYW1lfUAke21hcmtlci5pZH1cXG5gO1xuICAgICAgfVxuXG4gICAgICBpbnNwZWN0UG9pbnQgPSBtYXJrZXIucG9pbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3BlY3RTdHJpbmc7XG4gIH1cbn1cblxuY2xhc3MgSW5zZXJ0ZXIge1xuICBjb25zdHJ1Y3RvcihwYXRjaEJ1ZmZlciwgaW5zZXJ0aW9uUG9pbnQpIHtcbiAgICBjb25zdCBjbGlwcGVkID0gcGF0Y2hCdWZmZXIuZ2V0QnVmZmVyKCkuY2xpcFBvc2l0aW9uKGluc2VydGlvblBvaW50KTtcblxuICAgIHRoaXMucGF0Y2hCdWZmZXIgPSBwYXRjaEJ1ZmZlcjtcbiAgICB0aGlzLnN0YXJ0UG9pbnQgPSBjbGlwcGVkLmNvcHkoKTtcbiAgICB0aGlzLmluc2VydGlvblBvaW50ID0gY2xpcHBlZC5jb3B5KCk7XG4gICAgdGhpcy5tYXJrZXJCbHVlcHJpbnRzID0gW107XG4gICAgdGhpcy5tYXJrZXJNYXBDYWxsYmFja3MgPSBbXTtcblxuICAgIHRoaXMubWFya2Vyc0JlZm9yZSA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLm1hcmtlcnNBZnRlciA9IG5ldyBTZXQoKTtcbiAgfVxuXG4gIGtlZXBCZWZvcmUobWFya2Vycykge1xuICAgIGZvciAoY29uc3QgbWFya2VyIG9mIG1hcmtlcnMpIHtcbiAgICAgIGlmIChtYXJrZXIuZ2V0UmFuZ2UoKS5lbmQuaXNFcXVhbCh0aGlzLnN0YXJ0UG9pbnQpKSB7XG4gICAgICAgIHRoaXMubWFya2Vyc0JlZm9yZS5hZGQobWFya2VyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBrZWVwQWZ0ZXIobWFya2Vycykge1xuICAgIGZvciAoY29uc3QgbWFya2VyIG9mIG1hcmtlcnMpIHtcbiAgICAgIGlmIChtYXJrZXIuZ2V0UmFuZ2UoKS5zdGFydC5pc0VxdWFsKHRoaXMuc3RhcnRQb2ludCkpIHtcbiAgICAgICAgdGhpcy5tYXJrZXJzQWZ0ZXIuYWRkKG1hcmtlcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbWFya1doaWxlKGxheWVyTmFtZSwgYmxvY2ssIG1hcmtlck9wdHMpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuaW5zZXJ0aW9uUG9pbnQuY29weSgpO1xuICAgIGJsb2NrKCk7XG4gICAgY29uc3QgZW5kID0gdGhpcy5pbnNlcnRpb25Qb2ludC5jb3B5KCk7XG4gICAgdGhpcy5tYXJrZXJCbHVlcHJpbnRzLnB1c2goe2xheWVyTmFtZSwgcmFuZ2U6IG5ldyBSYW5nZShzdGFydCwgZW5kKSwgbWFya2VyT3B0c30pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgaW5zZXJ0KHRleHQpIHtcbiAgICBjb25zdCBpbnNlcnRlZFJhbmdlID0gdGhpcy5wYXRjaEJ1ZmZlci5nZXRCdWZmZXIoKS5pbnNlcnQodGhpcy5pbnNlcnRpb25Qb2ludCwgdGV4dCk7XG4gICAgdGhpcy5pbnNlcnRpb25Qb2ludCA9IGluc2VydGVkUmFuZ2UuZW5kO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgaW5zZXJ0TWFya2VkKHRleHQsIGxheWVyTmFtZSwgbWFya2VyT3B0cykge1xuICAgIHJldHVybiB0aGlzLm1hcmtXaGlsZShsYXllck5hbWUsICgpID0+IHRoaXMuaW5zZXJ0KHRleHQpLCBtYXJrZXJPcHRzKTtcbiAgfVxuXG4gIGluc2VydFBhdGNoQnVmZmVyKHN1YlBhdGNoQnVmZmVyLCBvcHRzKSB7XG4gICAgY29uc3QgYmFzZU9mZnNldCA9IHRoaXMuaW5zZXJ0aW9uUG9pbnQuY29weSgpO1xuICAgIHRoaXMuaW5zZXJ0KHN1YlBhdGNoQnVmZmVyLmdldEJ1ZmZlcigpLmdldFRleHQoKSk7XG5cbiAgICBjb25zdCBzdWJNYXJrZXJNYXAgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCBsYXllck5hbWUgb2YgTEFZRVJfTkFNRVMpIHtcbiAgICAgIGZvciAoY29uc3Qgb2xkTWFya2VyIG9mIHN1YlBhdGNoQnVmZmVyLmZpbmRNYXJrZXJzKGxheWVyTmFtZSwge30pKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0T2Zmc2V0ID0gb2xkTWFya2VyLmdldFJhbmdlKCkuc3RhcnQucm93ID09PSAwID8gYmFzZU9mZnNldCA6IFtiYXNlT2Zmc2V0LnJvdywgMF07XG4gICAgICAgIGNvbnN0IGVuZE9mZnNldCA9IG9sZE1hcmtlci5nZXRSYW5nZSgpLmVuZC5yb3cgPT09IDAgPyBiYXNlT2Zmc2V0IDogW2Jhc2VPZmZzZXQucm93LCAwXTtcblxuICAgICAgICBjb25zdCByYW5nZSA9IG9sZE1hcmtlci5nZXRSYW5nZSgpLnRyYW5zbGF0ZShzdGFydE9mZnNldCwgZW5kT2Zmc2V0KTtcbiAgICAgICAgY29uc3QgbWFya2VyT3B0cyA9IHtcbiAgICAgICAgICAuLi5vbGRNYXJrZXIuZ2V0UHJvcGVydGllcygpLFxuICAgICAgICAgIGNhbGxiYWNrOiBuZXdNYXJrZXIgPT4geyBzdWJNYXJrZXJNYXAuc2V0KG9sZE1hcmtlciwgbmV3TWFya2VyKTsgfSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tYXJrZXJCbHVlcHJpbnRzLnB1c2goe2xheWVyTmFtZSwgcmFuZ2UsIG1hcmtlck9wdHN9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm1hcmtlck1hcENhbGxiYWNrcy5wdXNoKHttYXJrZXJNYXA6IHN1Yk1hcmtlck1hcCwgY2FsbGJhY2s6IG9wdHMuY2FsbGJhY2t9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYXBwbHkoKSB7XG4gICAgZm9yIChjb25zdCB7bGF5ZXJOYW1lLCByYW5nZSwgbWFya2VyT3B0c30gb2YgdGhpcy5tYXJrZXJCbHVlcHJpbnRzKSB7XG4gICAgICBjb25zdCBjYWxsYmFjayA9IG1hcmtlck9wdHMuY2FsbGJhY2s7XG4gICAgICBkZWxldGUgbWFya2VyT3B0cy5jYWxsYmFjaztcblxuICAgICAgY29uc3QgbWFya2VyID0gdGhpcy5wYXRjaEJ1ZmZlci5tYXJrUmFuZ2UobGF5ZXJOYW1lLCByYW5nZSwgbWFya2VyT3B0cyk7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2sobWFya2VyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHttYXJrZXJNYXAsIGNhbGxiYWNrfSBvZiB0aGlzLm1hcmtlck1hcENhbGxiYWNrcykge1xuICAgICAgY2FsbGJhY2sobWFya2VyTWFwKTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGJlZm9yZU1hcmtlciBvZiB0aGlzLm1hcmtlcnNCZWZvcmUpIHtcbiAgICAgIGNvbnN0IGlzRW1wdHkgPSBiZWZvcmVNYXJrZXIuZ2V0UmFuZ2UoKS5pc0VtcHR5KCk7XG5cbiAgICAgIGlmICghYmVmb3JlTWFya2VyLmlzUmV2ZXJzZWQoKSkge1xuICAgICAgICBiZWZvcmVNYXJrZXIuc2V0SGVhZFBvc2l0aW9uKHRoaXMuc3RhcnRQb2ludCk7XG4gICAgICAgIGlmIChpc0VtcHR5KSB7XG4gICAgICAgICAgYmVmb3JlTWFya2VyLnNldFRhaWxQb3NpdGlvbih0aGlzLnN0YXJ0UG9pbnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiZWZvcmVNYXJrZXIuc2V0VGFpbFBvc2l0aW9uKHRoaXMuc3RhcnRQb2ludCk7XG4gICAgICAgIGlmIChpc0VtcHR5KSB7XG4gICAgICAgICAgYmVmb3JlTWFya2VyLnNldEhlYWRQb3NpdGlvbih0aGlzLnN0YXJ0UG9pbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBhZnRlck1hcmtlciBvZiB0aGlzLm1hcmtlcnNBZnRlcikge1xuICAgICAgY29uc3QgaXNFbXB0eSA9IGFmdGVyTWFya2VyLmdldFJhbmdlKCkuaXNFbXB0eSgpO1xuXG4gICAgICBpZiAoIWFmdGVyTWFya2VyLmlzUmV2ZXJzZWQoKSkge1xuICAgICAgICBhZnRlck1hcmtlci5zZXRUYWlsUG9zaXRpb24odGhpcy5pbnNlcnRpb25Qb2ludCk7XG4gICAgICAgIGlmIChpc0VtcHR5KSB7XG4gICAgICAgICAgYWZ0ZXJNYXJrZXIuc2V0SGVhZFBvc2l0aW9uKHRoaXMuaW5zZXJ0aW9uUG9pbnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZnRlck1hcmtlci5zZXRIZWFkUG9zaXRpb24odGhpcy5pbnNlcnRpb25Qb2ludCk7XG4gICAgICAgIGlmIChpc0VtcHR5KSB7XG4gICAgICAgICAgYWZ0ZXJNYXJrZXIuc2V0VGFpbFBvc2l0aW9uKHRoaXMuaW5zZXJ0aW9uUG9pbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUQsT0FBQTtBQUE2QixTQUFBRSxRQUFBQyxNQUFBLEVBQUFDLGNBQUEsUUFBQUMsSUFBQSxHQUFBQyxNQUFBLENBQUFELElBQUEsQ0FBQUYsTUFBQSxPQUFBRyxNQUFBLENBQUFDLHFCQUFBLFFBQUFDLE9BQUEsR0FBQUYsTUFBQSxDQUFBQyxxQkFBQSxDQUFBSixN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