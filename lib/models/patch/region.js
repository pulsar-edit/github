"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoNewline = exports.Unchanged = exports.Deletion = exports.Addition = void 0;
var _atom = require("atom");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class Region {
  constructor(marker) {
    this.marker = marker;
  }
  getMarker() {
    return this.marker;
  }
  getRange() {
    return this.marker.getRange();
  }
  getStartBufferRow() {
    return this.getRange().start.row;
  }
  getEndBufferRow() {
    return this.getRange().end.row;
  }
  includesBufferRow(row) {
    return this.getRange().intersectsRow(row);
  }

  /*
   * intersectRows breaks a Region into runs of rows that are included in
   * rowSet and rows that are not. For example:
   *  @this Region        row 10-20
   *  @param rowSet       row 11, 12, 13, 17, 19
   *  @param includeGaps  true (whether the result will include gaps or not)
   *  @return an array of regions like this:
   *    (10, gap = true) (11, 12, 13, gap = false) (14, 15, 16, gap = true)
   *    (17, gap = false) (18, gap = true) (19, gap = false) (20, gap = true)
   */
  intersectRows(rowSet, includeGaps) {
    const intersections = [];
    let withinIntersection = false;
    let currentRow = this.getRange().start.row;
    let nextStartRow = currentRow;
    const finishRowRange = isGap => {
      if (isGap && !includeGaps) {
        nextStartRow = currentRow;
        return;
      }
      if (currentRow <= this.getRange().start.row) {
        return;
      }
      intersections.push({
        intersection: _atom.Range.fromObject([[nextStartRow, 0], [currentRow - 1, Infinity]]),
        gap: isGap
      });
      nextStartRow = currentRow;
    };
    while (currentRow <= this.getRange().end.row) {
      if (rowSet.has(currentRow) && !withinIntersection) {
        // One row past the end of a gap. Start of intersecting row range.
        finishRowRange(true);
        withinIntersection = true;
      } else if (!rowSet.has(currentRow) && withinIntersection) {
        // One row past the end of intersecting row range. Start of the next gap.
        finishRowRange(false);
        withinIntersection = false;
      }
      currentRow++;
    }
    finishRowRange(!withinIntersection);
    return intersections;
  }
  isAddition() {
    return false;
  }
  isDeletion() {
    return false;
  }
  isUnchanged() {
    return false;
  }
  isNoNewline() {
    return false;
  }
  getBufferRows() {
    return this.getRange().getRows();
  }
  bufferRowCount() {
    return this.getRange().getRowCount();
  }
  when(callbacks) {
    const callback = callbacks[this.constructor.name.toLowerCase()] || callbacks.default || (() => undefined);
    return callback();
  }
  updateMarkers(map) {
    this.marker = map.get(this.marker) || this.marker;
  }
  destroyMarkers() {
    this.marker.destroy();
  }
  toStringIn(buffer) {
    const raw = buffer.getTextInRange(this.getRange());
    return this.constructor.origin + raw.replace(/\r?\n/g, '$&' + this.constructor.origin) + buffer.lineEndingForRow(this.getRange().end.row);
  }

  /*
   * Construct a String containing internal diagnostic information.
   */
  /* istanbul ignore next */
  inspect(opts = {}) {
    const options = _objectSpread({
      indent: 0
    }, opts);
    let indentation = '';
    for (let i = 0; i < options.indent; i++) {
      indentation += ' ';
    }
    let inspectString = `${indentation}(${this.constructor.name} marker=${this.marker.id})`;
    if (this.marker.isDestroyed()) {
      inspectString += ' [destroyed]';
    }
    if (!this.marker.isValid()) {
      inspectString += ' [invalid]';
    }
    return inspectString + '\n';
  }
  isChange() {
    return true;
  }
}
class Addition extends Region {
  isAddition() {
    return true;
  }
  invertIn(nextBuffer) {
    return new Deletion(nextBuffer.markRange(this.getRange()));
  }
}
exports.Addition = Addition;
_defineProperty(Addition, "origin", '+');
_defineProperty(Addition, "layerName", 'addition');
class Deletion extends Region {
  isDeletion() {
    return true;
  }
  invertIn(nextBuffer) {
    return new Addition(nextBuffer.markRange(this.getRange()));
  }
}
exports.Deletion = Deletion;
_defineProperty(Deletion, "origin", '-');
_defineProperty(Deletion, "layerName", 'deletion');
class Unchanged extends Region {
  isUnchanged() {
    return true;
  }
  isChange() {
    return false;
  }
  invertIn(nextBuffer) {
    return new Unchanged(nextBuffer.markRange(this.getRange()));
  }
}
exports.Unchanged = Unchanged;
_defineProperty(Unchanged, "origin", ' ');
_defineProperty(Unchanged, "layerName", 'unchanged');
class NoNewline extends Region {
  isNoNewline() {
    return true;
  }
  isChange() {
    return false;
  }
  invertIn(nextBuffer) {
    return new NoNewline(nextBuffer.markRange(this.getRange()));
  }
}
exports.NoNewline = NoNewline;
_defineProperty(NoNewline, "origin", '\\');
_defineProperty(NoNewline, "layerName", 'nonewline');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,