"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filter = filter;
exports.MAX_PATCH_CHARS = void 0;
const MAX_PATCH_CHARS = 1024 * 1024;
exports.MAX_PATCH_CHARS = MAX_PATCH_CHARS;
function filter(original) {
  let accumulating = false;
  let accumulated = '';
  let includedChars = 0;
  const removed = new Set();
  const pathRx = /\n?diff --git (?:a|b)\/(\S+) (?:a|b)\/(\S+)/y;
  let index = 0;
  while (index !== -1) {
    let include = true;
    const result = original.indexOf('\ndiff --git ', index);
    const nextIndex = result !== -1 ? result + 1 : -1;
    const patchEnd = nextIndex !== -1 ? nextIndex : original.length;

    // Exclude this patch if its inclusion would cause the patch to become too large.
    const patchChars = patchEnd - index + 1;
    if (includedChars + patchChars > MAX_PATCH_CHARS) {
      include = false;
    }
    if (include) {
      // Avoid copying large buffers of text around if we're including everything anyway.
      if (accumulating) {
        accumulated += original.slice(index, patchEnd);
      }
      includedChars += patchChars;
    } else {
      // If this is the first excluded patch, start by copying everything before this into "accumulated."
      if (!accumulating) {
        accumulating = true;
        accumulated = original.slice(0, index);
      }

      // Extract the removed filenames from the "diff --git" line.
      pathRx.lastIndex = index;
      const pathMatch = pathRx.exec(original);
      if (pathMatch) {
        removed.add(pathMatch[1]);
        removed.add(pathMatch[2]);
      }
    }
    index = nextIndex;
  }
  return {
    filtered: accumulating ? accumulated : original,
    removed
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNQVhfUEFUQ0hfQ0hBUlMiLCJleHBvcnRzIiwiZmlsdGVyIiwib3JpZ2luYWwiLCJhY2N1bXVsYXRpbmciLCJhY2N1bXVsYXRlZCIsImluY2x1ZGVkQ2hhcnMiLCJyZW1vdmVkIiwiU2V0IiwicGF0aFJ4IiwiaW5kZXgiLCJpbmNsdWRlIiwicmVzdWx0IiwiaW5kZXhPZiIsIm5leHRJbmRleCIsInBhdGNoRW5kIiwibGVuZ3RoIiwicGF0Y2hDaGFycyIsInNsaWNlIiwibGFzdEluZGV4IiwicGF0aE1hdGNoIiwiZXhlYyIsImFkZCIsImZpbHRlcmVkIl0sInNvdXJjZXMiOlsiZmlsdGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBNQVhfUEFUQ0hfQ0hBUlMgPSAxMDI0ICogMTAyNDtcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlcihvcmlnaW5hbCkge1xuICBsZXQgYWNjdW11bGF0aW5nID0gZmFsc2U7XG4gIGxldCBhY2N1bXVsYXRlZCA9ICcnO1xuICBsZXQgaW5jbHVkZWRDaGFycyA9IDA7XG4gIGNvbnN0IHJlbW92ZWQgPSBuZXcgU2V0KCk7XG4gIGNvbnN0IHBhdGhSeCA9IC9cXG4/ZGlmZiAtLWdpdCAoPzphfGIpXFwvKFxcUyspICg/OmF8YilcXC8oXFxTKykveTtcblxuICBsZXQgaW5kZXggPSAwO1xuICB3aGlsZSAoaW5kZXggIT09IC0xKSB7XG4gICAgbGV0IGluY2x1ZGUgPSB0cnVlO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gb3JpZ2luYWwuaW5kZXhPZignXFxuZGlmZiAtLWdpdCAnLCBpbmRleCk7XG4gICAgY29uc3QgbmV4dEluZGV4ID0gcmVzdWx0ICE9PSAtMSA/IHJlc3VsdCArIDEgOiAtMTtcbiAgICBjb25zdCBwYXRjaEVuZCA9IG5leHRJbmRleCAhPT0gLTEgPyBuZXh0SW5kZXggOiBvcmlnaW5hbC5sZW5ndGg7XG5cbiAgICAvLyBFeGNsdWRlIHRoaXMgcGF0Y2ggaWYgaXRzIGluY2x1c2lvbiB3b3VsZCBjYXVzZSB0aGUgcGF0Y2ggdG8gYmVjb21lIHRvbyBsYXJnZS5cbiAgICBjb25zdCBwYXRjaENoYXJzID0gcGF0Y2hFbmQgLSBpbmRleCArIDE7XG4gICAgaWYgKGluY2x1ZGVkQ2hhcnMgKyBwYXRjaENoYXJzID4gTUFYX1BBVENIX0NIQVJTKSB7XG4gICAgICBpbmNsdWRlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGluY2x1ZGUpIHtcbiAgICAgIC8vIEF2b2lkIGNvcHlpbmcgbGFyZ2UgYnVmZmVycyBvZiB0ZXh0IGFyb3VuZCBpZiB3ZSdyZSBpbmNsdWRpbmcgZXZlcnl0aGluZyBhbnl3YXkuXG4gICAgICBpZiAoYWNjdW11bGF0aW5nKSB7XG4gICAgICAgIGFjY3VtdWxhdGVkICs9IG9yaWdpbmFsLnNsaWNlKGluZGV4LCBwYXRjaEVuZCk7XG4gICAgICB9XG4gICAgICBpbmNsdWRlZENoYXJzICs9IHBhdGNoQ2hhcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IGV4Y2x1ZGVkIHBhdGNoLCBzdGFydCBieSBjb3B5aW5nIGV2ZXJ5dGhpbmcgYmVmb3JlIHRoaXMgaW50byBcImFjY3VtdWxhdGVkLlwiXG4gICAgICBpZiAoIWFjY3VtdWxhdGluZykge1xuICAgICAgICBhY2N1bXVsYXRpbmcgPSB0cnVlO1xuICAgICAgICBhY2N1bXVsYXRlZCA9IG9yaWdpbmFsLnNsaWNlKDAsIGluZGV4KTtcbiAgICAgIH1cblxuICAgICAgLy8gRXh0cmFjdCB0aGUgcmVtb3ZlZCBmaWxlbmFtZXMgZnJvbSB0aGUgXCJkaWZmIC0tZ2l0XCIgbGluZS5cbiAgICAgIHBhdGhSeC5sYXN0SW5kZXggPSBpbmRleDtcbiAgICAgIGNvbnN0IHBhdGhNYXRjaCA9IHBhdGhSeC5leGVjKG9yaWdpbmFsKTtcbiAgICAgIGlmIChwYXRoTWF0Y2gpIHtcbiAgICAgICAgcmVtb3ZlZC5hZGQocGF0aE1hdGNoWzFdKTtcbiAgICAgICAgcmVtb3ZlZC5hZGQocGF0aE1hdGNoWzJdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbmRleCA9IG5leHRJbmRleDtcbiAgfVxuXG4gIHJldHVybiB7ZmlsdGVyZWQ6IGFjY3VtdWxhdGluZyA/IGFjY3VtdWxhdGVkIDogb3JpZ2luYWwsIHJlbW92ZWR9O1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU8sTUFBTUEsZUFBZSxHQUFHLElBQUksR0FBRyxJQUFJO0FBQUNDLE9BQUEsQ0FBQUQsZUFBQSxHQUFBQSxlQUFBO0FBRXBDLFNBQVNFLE1BQU1BLENBQUNDLFFBQVEsRUFBRTtFQUMvQixJQUFJQyxZQUFZLEdBQUcsS0FBSztFQUN4QixJQUFJQyxXQUFXLEdBQUcsRUFBRTtFQUNwQixJQUFJQyxhQUFhLEdBQUcsQ0FBQztFQUNyQixNQUFNQyxPQUFPLEdBQUcsSUFBSUMsR0FBRyxFQUFFO0VBQ3pCLE1BQU1DLE1BQU0sR0FBRyw4Q0FBOEM7RUFFN0QsSUFBSUMsS0FBSyxHQUFHLENBQUM7RUFDYixPQUFPQSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7SUFDbkIsSUFBSUMsT0FBTyxHQUFHLElBQUk7SUFFbEIsTUFBTUMsTUFBTSxHQUFHVCxRQUFRLENBQUNVLE9BQU8sQ0FBQyxlQUFlLEVBQUVILEtBQUssQ0FBQztJQUN2RCxNQUFNSSxTQUFTLEdBQUdGLE1BQU0sS0FBSyxDQUFDLENBQUMsR0FBR0EsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakQsTUFBTUcsUUFBUSxHQUFHRCxTQUFTLEtBQUssQ0FBQyxDQUFDLEdBQUdBLFNBQVMsR0FBR1gsUUFBUSxDQUFDYSxNQUFNOztJQUUvRDtJQUNBLE1BQU1DLFVBQVUsR0FBR0YsUUFBUSxHQUFHTCxLQUFLLEdBQUcsQ0FBQztJQUN2QyxJQUFJSixhQUFhLEdBQUdXLFVBQVUsR0FBR2pCLGVBQWUsRUFBRTtNQUNoRFcsT0FBTyxHQUFHLEtBQUs7SUFDakI7SUFFQSxJQUFJQSxPQUFPLEVBQUU7TUFDWDtNQUNBLElBQUlQLFlBQVksRUFBRTtRQUNoQkMsV0FBVyxJQUFJRixRQUFRLENBQUNlLEtBQUssQ0FBQ1IsS0FBSyxFQUFFSyxRQUFRLENBQUM7TUFDaEQ7TUFDQVQsYUFBYSxJQUFJVyxVQUFVO0lBQzdCLENBQUMsTUFBTTtNQUNMO01BQ0EsSUFBSSxDQUFDYixZQUFZLEVBQUU7UUFDakJBLFlBQVksR0FBRyxJQUFJO1FBQ25CQyxXQUFXLEdBQUdGLFFBQVEsQ0FBQ2UsS0FBSyxDQUFDLENBQUMsRUFBRVIsS0FBSyxDQUFDO01BQ3hDOztNQUVBO01BQ0FELE1BQU0sQ0FBQ1UsU0FBUyxHQUFHVCxLQUFLO01BQ3hCLE1BQU1VLFNBQVMsR0FBR1gsTUFBTSxDQUFDWSxJQUFJLENBQUNsQixRQUFRLENBQUM7TUFDdkMsSUFBSWlCLFNBQVMsRUFBRTtRQUNiYixPQUFPLENBQUNlLEdBQUcsQ0FBQ0YsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pCYixPQUFPLENBQUNlLEdBQUcsQ0FBQ0YsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQzNCO0lBQ0Y7SUFFQVYsS0FBSyxHQUFHSSxTQUFTO0VBQ25CO0VBRUEsT0FBTztJQUFDUyxRQUFRLEVBQUVuQixZQUFZLEdBQUdDLFdBQVcsR0FBR0YsUUFBUTtJQUFFSTtFQUFPLENBQUM7QUFDbkUifQ==