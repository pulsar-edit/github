"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filter = filter;
exports.MAX_PATCH_CHARS = void 0;
const MAX_PATCH_CHARS = 1024 * 1024;
exports.MAX_PATCH_CHARS = MAX_PATCH_CHARS;
function filter(original) {
  let accumulating = false;
  let accumulated = '';
  let includedChars = 0;
  const removed = new Set();
  const pathRx = /\n?diff --git (?:a|b)\/(\S+) (?:a|b)\/(\S+)/y;
  let index = 0;
  while (index !== -1) {
    let include = true;
    const result = original.indexOf('\ndiff --git ', index);
    const nextIndex = result !== -1 ? result + 1 : -1;
    const patchEnd = nextIndex !== -1 ? nextIndex : original.length;

    // Exclude this patch if its inclusion would cause the patch to become too large.
    const patchChars = patchEnd - index + 1;
    if (includedChars + patchChars > MAX_PATCH_CHARS) {
      include = false;
    }
    if (include) {
      // Avoid copying large buffers of text around if we're including everything anyway.
      if (accumulating) {
        accumulated += original.slice(index, patchEnd);
      }
      includedChars += patchChars;
    } else {
      // If this is the first excluded patch, start by copying everything before this into "accumulated."
      if (!accumulating) {
        accumulating = true;
        accumulated = original.slice(0, index);
      }

      // Extract the removed filenames from the "diff --git" line.
      pathRx.lastIndex = index;
      const pathMatch = pathRx.exec(original);
      if (pathMatch) {
        removed.add(pathMatch[1]);
        removed.add(pathMatch[2]);
      }
    }
    index = nextIndex;
  }
  return {
    filtered: accumulating ? accumulated : original,
    removed
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNQVhfUEFUQ0hfQ0hBUlMiLCJmaWx0ZXIiLCJvcmlnaW5hbCIsImFjY3VtdWxhdGluZyIsImFjY3VtdWxhdGVkIiwiaW5jbHVkZWRDaGFycyIsInJlbW92ZWQiLCJTZXQiLCJwYXRoUngiLCJpbmRleCIsImluY2x1ZGUiLCJyZXN1bHQiLCJpbmRleE9mIiwibmV4dEluZGV4IiwicGF0Y2hFbmQiLCJsZW5ndGgiLCJwYXRjaENoYXJzIiwic2xpY2UiLCJsYXN0SW5kZXgiLCJwYXRoTWF0Y2giLCJleGVjIiwiYWRkIiwiZmlsdGVyZWQiXSwic291cmNlcyI6WyJmaWx0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IE1BWF9QQVRDSF9DSEFSUyA9IDEwMjQgKiAxMDI0O1xuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyKG9yaWdpbmFsKSB7XG4gIGxldCBhY2N1bXVsYXRpbmcgPSBmYWxzZTtcbiAgbGV0IGFjY3VtdWxhdGVkID0gJyc7XG4gIGxldCBpbmNsdWRlZENoYXJzID0gMDtcbiAgY29uc3QgcmVtb3ZlZCA9IG5ldyBTZXQoKTtcbiAgY29uc3QgcGF0aFJ4ID0gL1xcbj9kaWZmIC0tZ2l0ICg/OmF8YilcXC8oXFxTKykgKD86YXxiKVxcLyhcXFMrKS95O1xuXG4gIGxldCBpbmRleCA9IDA7XG4gIHdoaWxlIChpbmRleCAhPT0gLTEpIHtcbiAgICBsZXQgaW5jbHVkZSA9IHRydWU7XG5cbiAgICBjb25zdCByZXN1bHQgPSBvcmlnaW5hbC5pbmRleE9mKCdcXG5kaWZmIC0tZ2l0ICcsIGluZGV4KTtcbiAgICBjb25zdCBuZXh0SW5kZXggPSByZXN1bHQgIT09IC0xID8gcmVzdWx0ICsgMSA6IC0xO1xuICAgIGNvbnN0IHBhdGNoRW5kID0gbmV4dEluZGV4ICE9PSAtMSA/IG5leHRJbmRleCA6IG9yaWdpbmFsLmxlbmd0aDtcblxuICAgIC8vIEV4Y2x1ZGUgdGhpcyBwYXRjaCBpZiBpdHMgaW5jbHVzaW9uIHdvdWxkIGNhdXNlIHRoZSBwYXRjaCB0byBiZWNvbWUgdG9vIGxhcmdlLlxuICAgIGNvbnN0IHBhdGNoQ2hhcnMgPSBwYXRjaEVuZCAtIGluZGV4ICsgMTtcbiAgICBpZiAoaW5jbHVkZWRDaGFycyArIHBhdGNoQ2hhcnMgPiBNQVhfUEFUQ0hfQ0hBUlMpIHtcbiAgICAgIGluY2x1ZGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoaW5jbHVkZSkge1xuICAgICAgLy8gQXZvaWQgY29weWluZyBsYXJnZSBidWZmZXJzIG9mIHRleHQgYXJvdW5kIGlmIHdlJ3JlIGluY2x1ZGluZyBldmVyeXRoaW5nIGFueXdheS5cbiAgICAgIGlmIChhY2N1bXVsYXRpbmcpIHtcbiAgICAgICAgYWNjdW11bGF0ZWQgKz0gb3JpZ2luYWwuc2xpY2UoaW5kZXgsIHBhdGNoRW5kKTtcbiAgICAgIH1cbiAgICAgIGluY2x1ZGVkQ2hhcnMgKz0gcGF0Y2hDaGFycztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgZXhjbHVkZWQgcGF0Y2gsIHN0YXJ0IGJ5IGNvcHlpbmcgZXZlcnl0aGluZyBiZWZvcmUgdGhpcyBpbnRvIFwiYWNjdW11bGF0ZWQuXCJcbiAgICAgIGlmICghYWNjdW11bGF0aW5nKSB7XG4gICAgICAgIGFjY3VtdWxhdGluZyA9IHRydWU7XG4gICAgICAgIGFjY3VtdWxhdGVkID0gb3JpZ2luYWwuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgfVxuXG4gICAgICAvLyBFeHRyYWN0IHRoZSByZW1vdmVkIGZpbGVuYW1lcyBmcm9tIHRoZSBcImRpZmYgLS1naXRcIiBsaW5lLlxuICAgICAgcGF0aFJ4Lmxhc3RJbmRleCA9IGluZGV4O1xuICAgICAgY29uc3QgcGF0aE1hdGNoID0gcGF0aFJ4LmV4ZWMob3JpZ2luYWwpO1xuICAgICAgaWYgKHBhdGhNYXRjaCkge1xuICAgICAgICByZW1vdmVkLmFkZChwYXRoTWF0Y2hbMV0pO1xuICAgICAgICByZW1vdmVkLmFkZChwYXRoTWF0Y2hbMl0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGluZGV4ID0gbmV4dEluZGV4O1xuICB9XG5cbiAgcmV0dXJuIHtmaWx0ZXJlZDogYWNjdW11bGF0aW5nID8gYWNjdW11bGF0ZWQgOiBvcmlnaW5hbCwgcmVtb3ZlZH07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBTyxNQUFNQSxlQUFlLEdBQUcsSUFBSSxHQUFHLElBQUk7QUFBQztBQUVwQyxTQUFTQyxNQUFNLENBQUNDLFFBQVEsRUFBRTtFQUMvQixJQUFJQyxZQUFZLEdBQUcsS0FBSztFQUN4QixJQUFJQyxXQUFXLEdBQUcsRUFBRTtFQUNwQixJQUFJQyxhQUFhLEdBQUcsQ0FBQztFQUNyQixNQUFNQyxPQUFPLEdBQUcsSUFBSUMsR0FBRyxFQUFFO0VBQ3pCLE1BQU1DLE1BQU0sR0FBRyw4Q0FBOEM7RUFFN0QsSUFBSUMsS0FBSyxHQUFHLENBQUM7RUFDYixPQUFPQSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7SUFDbkIsSUFBSUMsT0FBTyxHQUFHLElBQUk7SUFFbEIsTUFBTUMsTUFBTSxHQUFHVCxRQUFRLENBQUNVLE9BQU8sQ0FBQyxlQUFlLEVBQUVILEtBQUssQ0FBQztJQUN2RCxNQUFNSSxTQUFTLEdBQUdGLE1BQU0sS0FBSyxDQUFDLENBQUMsR0FBR0EsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakQsTUFBTUcsUUFBUSxHQUFHRCxTQUFTLEtBQUssQ0FBQyxDQUFDLEdBQUdBLFNBQVMsR0FBR1gsUUFBUSxDQUFDYSxNQUFNOztJQUUvRDtJQUNBLE1BQU1DLFVBQVUsR0FBR0YsUUFBUSxHQUFHTCxLQUFLLEdBQUcsQ0FBQztJQUN2QyxJQUFJSixhQUFhLEdBQUdXLFVBQVUsR0FBR2hCLGVBQWUsRUFBRTtNQUNoRFUsT0FBTyxHQUFHLEtBQUs7SUFDakI7SUFFQSxJQUFJQSxPQUFPLEVBQUU7TUFDWDtNQUNBLElBQUlQLFlBQVksRUFBRTtRQUNoQkMsV0FBVyxJQUFJRixRQUFRLENBQUNlLEtBQUssQ0FBQ1IsS0FBSyxFQUFFSyxRQUFRLENBQUM7TUFDaEQ7TUFDQVQsYUFBYSxJQUFJVyxVQUFVO0lBQzdCLENBQUMsTUFBTTtNQUNMO01BQ0EsSUFBSSxDQUFDYixZQUFZLEVBQUU7UUFDakJBLFlBQVksR0FBRyxJQUFJO1FBQ25CQyxXQUFXLEdBQUdGLFFBQVEsQ0FBQ2UsS0FBSyxDQUFDLENBQUMsRUFBRVIsS0FBSyxDQUFDO01BQ3hDOztNQUVBO01BQ0FELE1BQU0sQ0FBQ1UsU0FBUyxHQUFHVCxLQUFLO01BQ3hCLE1BQU1VLFNBQVMsR0FBR1gsTUFBTSxDQUFDWSxJQUFJLENBQUNsQixRQUFRLENBQUM7TUFDdkMsSUFBSWlCLFNBQVMsRUFBRTtRQUNiYixPQUFPLENBQUNlLEdBQUcsQ0FBQ0YsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pCYixPQUFPLENBQUNlLEdBQUcsQ0FBQ0YsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQzNCO0lBQ0Y7SUFFQVYsS0FBSyxHQUFHSSxTQUFTO0VBQ25CO0VBRUEsT0FBTztJQUFDUyxRQUFRLEVBQUVuQixZQUFZLEdBQUdDLFdBQVcsR0FBR0YsUUFBUTtJQUFFSTtFQUFPLENBQUM7QUFDbkUifQ==