"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _remote = require("./remote");
var _helpers = require("../helpers");
class RemoteSet {
  constructor(iterable = []) {
    this.byName = new Map();
    this.byDotcomRepo = new Map();
    this.protocolCount = new Map();
    for (const remote of iterable) {
      this.add(remote);
    }
  }
  add(remote) {
    this.byName.set(remote.getName(), remote);
    if (remote.isGithubRepo()) {
      (0, _helpers.pushAtKey)(this.byDotcomRepo, remote.getSlug(), remote);
    }
    if (remote.getProtocol()) {
      const count = this.protocolCount.get(remote.getProtocol()) || 0;
      this.protocolCount.set(remote.getProtocol(), count + 1);
    }
  }
  isEmpty() {
    return this.byName.size === 0;
  }
  size() {
    return this.byName.size;
  }
  withName(name) {
    return this.byName.get(name) || _remote.nullRemote;
  }
  [Symbol.iterator]() {
    return this.byName.values();
  }
  filter(predicate) {
    return new this.constructor(Array.from(this).filter(predicate));
  }
  matchingGitHubRepository(owner, name) {
    return this.byDotcomRepo.get(`${owner}/${name}`) || [];
  }
  mostUsedProtocol(choices) {
    let best = choices[0];
    let bestCount = 0;
    for (const protocol of choices) {
      const count = this.protocolCount.get(protocol) || 0;
      if (count > bestCount) {
        bestCount = count;
        best = protocol;
      }
    }
    return best;
  }
}
exports.default = RemoteSet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZW1vdGVTZXQiLCJjb25zdHJ1Y3RvciIsIml0ZXJhYmxlIiwiYnlOYW1lIiwiTWFwIiwiYnlEb3Rjb21SZXBvIiwicHJvdG9jb2xDb3VudCIsInJlbW90ZSIsImFkZCIsInNldCIsImdldE5hbWUiLCJpc0dpdGh1YlJlcG8iLCJwdXNoQXRLZXkiLCJnZXRTbHVnIiwiZ2V0UHJvdG9jb2wiLCJjb3VudCIsImdldCIsImlzRW1wdHkiLCJzaXplIiwid2l0aE5hbWUiLCJuYW1lIiwibnVsbFJlbW90ZSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwidmFsdWVzIiwiZmlsdGVyIiwicHJlZGljYXRlIiwiQXJyYXkiLCJmcm9tIiwibWF0Y2hpbmdHaXRIdWJSZXBvc2l0b3J5Iiwib3duZXIiLCJtb3N0VXNlZFByb3RvY29sIiwiY2hvaWNlcyIsImJlc3QiLCJiZXN0Q291bnQiLCJwcm90b2NvbCJdLCJzb3VyY2VzIjpbInJlbW90ZS1zZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtudWxsUmVtb3RlfSBmcm9tICcuL3JlbW90ZSc7XG5pbXBvcnQge3B1c2hBdEtleX0gZnJvbSAnLi4vaGVscGVycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbW90ZVNldCB7XG4gIGNvbnN0cnVjdG9yKGl0ZXJhYmxlID0gW10pIHtcbiAgICB0aGlzLmJ5TmFtZSA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmJ5RG90Y29tUmVwbyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLnByb3RvY29sQ291bnQgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCByZW1vdGUgb2YgaXRlcmFibGUpIHtcbiAgICAgIHRoaXMuYWRkKHJlbW90ZSk7XG4gICAgfVxuICB9XG5cbiAgYWRkKHJlbW90ZSkge1xuICAgIHRoaXMuYnlOYW1lLnNldChyZW1vdGUuZ2V0TmFtZSgpLCByZW1vdGUpO1xuICAgIGlmIChyZW1vdGUuaXNHaXRodWJSZXBvKCkpIHtcbiAgICAgIHB1c2hBdEtleSh0aGlzLmJ5RG90Y29tUmVwbywgcmVtb3RlLmdldFNsdWcoKSwgcmVtb3RlKTtcbiAgICB9XG4gICAgaWYgKHJlbW90ZS5nZXRQcm90b2NvbCgpKSB7XG4gICAgICBjb25zdCBjb3VudCA9IHRoaXMucHJvdG9jb2xDb3VudC5nZXQocmVtb3RlLmdldFByb3RvY29sKCkpIHx8IDA7XG4gICAgICB0aGlzLnByb3RvY29sQ291bnQuc2V0KHJlbW90ZS5nZXRQcm90b2NvbCgpLCBjb3VudCArIDEpO1xuICAgIH1cbiAgfVxuXG4gIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnlOYW1lLnNpemUgPT09IDA7XG4gIH1cblxuICBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLmJ5TmFtZS5zaXplO1xuICB9XG5cbiAgd2l0aE5hbWUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLmJ5TmFtZS5nZXQobmFtZSkgfHwgbnVsbFJlbW90ZTtcbiAgfVxuXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB0aGlzLmJ5TmFtZS52YWx1ZXMoKTtcbiAgfVxuXG4gIGZpbHRlcihwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoXG4gICAgICBBcnJheS5mcm9tKHRoaXMpLmZpbHRlcihwcmVkaWNhdGUpLFxuICAgICk7XG4gIH1cblxuICBtYXRjaGluZ0dpdEh1YlJlcG9zaXRvcnkob3duZXIsIG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ieURvdGNvbVJlcG8uZ2V0KGAke293bmVyfS8ke25hbWV9YCkgfHwgW107XG4gIH1cblxuICBtb3N0VXNlZFByb3RvY29sKGNob2ljZXMpIHtcbiAgICBsZXQgYmVzdCA9IGNob2ljZXNbMF07XG4gICAgbGV0IGJlc3RDb3VudCA9IDA7XG4gICAgZm9yIChjb25zdCBwcm90b2NvbCBvZiBjaG9pY2VzKSB7XG4gICAgICBjb25zdCBjb3VudCA9IHRoaXMucHJvdG9jb2xDb3VudC5nZXQocHJvdG9jb2wpIHx8IDA7XG4gICAgICBpZiAoY291bnQgPiBiZXN0Q291bnQpIHtcbiAgICAgICAgYmVzdENvdW50ID0gY291bnQ7XG4gICAgICAgIGJlc3QgPSBwcm90b2NvbDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJlc3Q7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUVlLE1BQU1BLFNBQVMsQ0FBQztFQUM3QkMsV0FBVyxDQUFDQyxRQUFRLEdBQUcsRUFBRSxFQUFFO0lBQ3pCLElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUlDLEdBQUcsRUFBRTtJQUN2QixJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJRCxHQUFHLEVBQUU7SUFDN0IsSUFBSSxDQUFDRSxhQUFhLEdBQUcsSUFBSUYsR0FBRyxFQUFFO0lBQzlCLEtBQUssTUFBTUcsTUFBTSxJQUFJTCxRQUFRLEVBQUU7TUFDN0IsSUFBSSxDQUFDTSxHQUFHLENBQUNELE1BQU0sQ0FBQztJQUNsQjtFQUNGO0VBRUFDLEdBQUcsQ0FBQ0QsTUFBTSxFQUFFO0lBQ1YsSUFBSSxDQUFDSixNQUFNLENBQUNNLEdBQUcsQ0FBQ0YsTUFBTSxDQUFDRyxPQUFPLEVBQUUsRUFBRUgsTUFBTSxDQUFDO0lBQ3pDLElBQUlBLE1BQU0sQ0FBQ0ksWUFBWSxFQUFFLEVBQUU7TUFDekIsSUFBQUMsa0JBQVMsRUFBQyxJQUFJLENBQUNQLFlBQVksRUFBRUUsTUFBTSxDQUFDTSxPQUFPLEVBQUUsRUFBRU4sTUFBTSxDQUFDO0lBQ3hEO0lBQ0EsSUFBSUEsTUFBTSxDQUFDTyxXQUFXLEVBQUUsRUFBRTtNQUN4QixNQUFNQyxLQUFLLEdBQUcsSUFBSSxDQUFDVCxhQUFhLENBQUNVLEdBQUcsQ0FBQ1QsTUFBTSxDQUFDTyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUM7TUFDL0QsSUFBSSxDQUFDUixhQUFhLENBQUNHLEdBQUcsQ0FBQ0YsTUFBTSxDQUFDTyxXQUFXLEVBQUUsRUFBRUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUN6RDtFQUNGO0VBRUFFLE9BQU8sR0FBRztJQUNSLE9BQU8sSUFBSSxDQUFDZCxNQUFNLENBQUNlLElBQUksS0FBSyxDQUFDO0VBQy9CO0VBRUFBLElBQUksR0FBRztJQUNMLE9BQU8sSUFBSSxDQUFDZixNQUFNLENBQUNlLElBQUk7RUFDekI7RUFFQUMsUUFBUSxDQUFDQyxJQUFJLEVBQUU7SUFDYixPQUFPLElBQUksQ0FBQ2pCLE1BQU0sQ0FBQ2EsR0FBRyxDQUFDSSxJQUFJLENBQUMsSUFBSUMsa0JBQVU7RUFDNUM7RUFFQSxDQUFDQyxNQUFNLENBQUNDLFFBQVEsSUFBSTtJQUNsQixPQUFPLElBQUksQ0FBQ3BCLE1BQU0sQ0FBQ3FCLE1BQU0sRUFBRTtFQUM3QjtFQUVBQyxNQUFNLENBQUNDLFNBQVMsRUFBRTtJQUNoQixPQUFPLElBQUksSUFBSSxDQUFDekIsV0FBVyxDQUN6QjBCLEtBQUssQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDSCxNQUFNLENBQUNDLFNBQVMsQ0FBQyxDQUNuQztFQUNIO0VBRUFHLHdCQUF3QixDQUFDQyxLQUFLLEVBQUVWLElBQUksRUFBRTtJQUNwQyxPQUFPLElBQUksQ0FBQ2YsWUFBWSxDQUFDVyxHQUFHLENBQUUsR0FBRWMsS0FBTSxJQUFHVixJQUFLLEVBQUMsQ0FBQyxJQUFJLEVBQUU7RUFDeEQ7RUFFQVcsZ0JBQWdCLENBQUNDLE9BQU8sRUFBRTtJQUN4QixJQUFJQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDckIsSUFBSUUsU0FBUyxHQUFHLENBQUM7SUFDakIsS0FBSyxNQUFNQyxRQUFRLElBQUlILE9BQU8sRUFBRTtNQUM5QixNQUFNakIsS0FBSyxHQUFHLElBQUksQ0FBQ1QsYUFBYSxDQUFDVSxHQUFHLENBQUNtQixRQUFRLENBQUMsSUFBSSxDQUFDO01BQ25ELElBQUlwQixLQUFLLEdBQUdtQixTQUFTLEVBQUU7UUFDckJBLFNBQVMsR0FBR25CLEtBQUs7UUFDakJrQixJQUFJLEdBQUdFLFFBQVE7TUFDakI7SUFDRjtJQUNBLE9BQU9GLElBQUk7RUFDYjtBQUNGO0FBQUMifQ==