"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _remote = require("./remote");
var _helpers = require("../helpers");
class RemoteSet {
  constructor(iterable = []) {
    this.byName = new Map();
    this.byDotcomRepo = new Map();
    this.protocolCount = new Map();
    for (const remote of iterable) {
      this.add(remote);
    }
  }
  add(remote) {
    this.byName.set(remote.getName(), remote);
    if (remote.isGithubRepo()) {
      (0, _helpers.pushAtKey)(this.byDotcomRepo, remote.getSlug(), remote);
    }
    if (remote.getProtocol()) {
      const count = this.protocolCount.get(remote.getProtocol()) || 0;
      this.protocolCount.set(remote.getProtocol(), count + 1);
    }
  }
  isEmpty() {
    return this.byName.size === 0;
  }
  size() {
    return this.byName.size;
  }
  withName(name) {
    return this.byName.get(name) || _remote.nullRemote;
  }
  [Symbol.iterator]() {
    return this.byName.values();
  }
  filter(predicate) {
    return new this.constructor(Array.from(this).filter(predicate));
  }
  matchingGitHubRepository(owner, name) {
    return this.byDotcomRepo.get(`${owner}/${name}`) || [];
  }
  mostUsedProtocol(choices) {
    let best = choices[0];
    let bestCount = 0;
    for (const protocol of choices) {
      const count = this.protocolCount.get(protocol) || 0;
      if (count > bestCount) {
        bestCount = count;
        best = protocol;
      }
    }
    return best;
  }
}
exports.default = RemoteSet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVtb3RlIiwicmVxdWlyZSIsIl9oZWxwZXJzIiwiUmVtb3RlU2V0IiwiY29uc3RydWN0b3IiLCJpdGVyYWJsZSIsImJ5TmFtZSIsIk1hcCIsImJ5RG90Y29tUmVwbyIsInByb3RvY29sQ291bnQiLCJyZW1vdGUiLCJhZGQiLCJzZXQiLCJnZXROYW1lIiwiaXNHaXRodWJSZXBvIiwicHVzaEF0S2V5IiwiZ2V0U2x1ZyIsImdldFByb3RvY29sIiwiY291bnQiLCJnZXQiLCJpc0VtcHR5Iiwic2l6ZSIsIndpdGhOYW1lIiwibmFtZSIsIm51bGxSZW1vdGUiLCJTeW1ib2wiLCJpdGVyYXRvciIsInZhbHVlcyIsImZpbHRlciIsInByZWRpY2F0ZSIsIkFycmF5IiwiZnJvbSIsIm1hdGNoaW5nR2l0SHViUmVwb3NpdG9yeSIsIm93bmVyIiwibW9zdFVzZWRQcm90b2NvbCIsImNob2ljZXMiLCJiZXN0IiwiYmVzdENvdW50IiwicHJvdG9jb2wiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbInJlbW90ZS1zZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtudWxsUmVtb3RlfSBmcm9tICcuL3JlbW90ZSc7XG5pbXBvcnQge3B1c2hBdEtleX0gZnJvbSAnLi4vaGVscGVycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbW90ZVNldCB7XG4gIGNvbnN0cnVjdG9yKGl0ZXJhYmxlID0gW10pIHtcbiAgICB0aGlzLmJ5TmFtZSA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmJ5RG90Y29tUmVwbyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLnByb3RvY29sQ291bnQgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCByZW1vdGUgb2YgaXRlcmFibGUpIHtcbiAgICAgIHRoaXMuYWRkKHJlbW90ZSk7XG4gICAgfVxuICB9XG5cbiAgYWRkKHJlbW90ZSkge1xuICAgIHRoaXMuYnlOYW1lLnNldChyZW1vdGUuZ2V0TmFtZSgpLCByZW1vdGUpO1xuICAgIGlmIChyZW1vdGUuaXNHaXRodWJSZXBvKCkpIHtcbiAgICAgIHB1c2hBdEtleSh0aGlzLmJ5RG90Y29tUmVwbywgcmVtb3RlLmdldFNsdWcoKSwgcmVtb3RlKTtcbiAgICB9XG4gICAgaWYgKHJlbW90ZS5nZXRQcm90b2NvbCgpKSB7XG4gICAgICBjb25zdCBjb3VudCA9IHRoaXMucHJvdG9jb2xDb3VudC5nZXQocmVtb3RlLmdldFByb3RvY29sKCkpIHx8IDA7XG4gICAgICB0aGlzLnByb3RvY29sQ291bnQuc2V0KHJlbW90ZS5nZXRQcm90b2NvbCgpLCBjb3VudCArIDEpO1xuICAgIH1cbiAgfVxuXG4gIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnlOYW1lLnNpemUgPT09IDA7XG4gIH1cblxuICBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLmJ5TmFtZS5zaXplO1xuICB9XG5cbiAgd2l0aE5hbWUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLmJ5TmFtZS5nZXQobmFtZSkgfHwgbnVsbFJlbW90ZTtcbiAgfVxuXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB0aGlzLmJ5TmFtZS52YWx1ZXMoKTtcbiAgfVxuXG4gIGZpbHRlcihwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoXG4gICAgICBBcnJheS5mcm9tKHRoaXMpLmZpbHRlcihwcmVkaWNhdGUpLFxuICAgICk7XG4gIH1cblxuICBtYXRjaGluZ0dpdEh1YlJlcG9zaXRvcnkob3duZXIsIG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ieURvdGNvbVJlcG8uZ2V0KGAke293bmVyfS8ke25hbWV9YCkgfHwgW107XG4gIH1cblxuICBtb3N0VXNlZFByb3RvY29sKGNob2ljZXMpIHtcbiAgICBsZXQgYmVzdCA9IGNob2ljZXNbMF07XG4gICAgbGV0IGJlc3RDb3VudCA9IDA7XG4gICAgZm9yIChjb25zdCBwcm90b2NvbCBvZiBjaG9pY2VzKSB7XG4gICAgICBjb25zdCBjb3VudCA9IHRoaXMucHJvdG9jb2xDb3VudC5nZXQocHJvdG9jb2wpIHx8IDA7XG4gICAgICBpZiAoY291bnQgPiBiZXN0Q291bnQpIHtcbiAgICAgICAgYmVzdENvdW50ID0gY291bnQ7XG4gICAgICAgIGJlc3QgPSBwcm90b2NvbDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJlc3Q7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsUUFBQSxHQUFBRCxPQUFBO0FBRWUsTUFBTUUsU0FBUyxDQUFDO0VBQzdCQyxXQUFXQSxDQUFDQyxRQUFRLEdBQUcsRUFBRSxFQUFFO0lBQ3pCLElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUlDLEdBQUcsRUFBRTtJQUN2QixJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJRCxHQUFHLEVBQUU7SUFDN0IsSUFBSSxDQUFDRSxhQUFhLEdBQUcsSUFBSUYsR0FBRyxFQUFFO0lBQzlCLEtBQUssTUFBTUcsTUFBTSxJQUFJTCxRQUFRLEVBQUU7TUFDN0IsSUFBSSxDQUFDTSxHQUFHLENBQUNELE1BQU0sQ0FBQztJQUNsQjtFQUNGO0VBRUFDLEdBQUdBLENBQUNELE1BQU0sRUFBRTtJQUNWLElBQUksQ0FBQ0osTUFBTSxDQUFDTSxHQUFHLENBQUNGLE1BQU0sQ0FBQ0csT0FBTyxFQUFFLEVBQUVILE1BQU0sQ0FBQztJQUN6QyxJQUFJQSxNQUFNLENBQUNJLFlBQVksRUFBRSxFQUFFO01BQ3pCLElBQUFDLGtCQUFTLEVBQUMsSUFBSSxDQUFDUCxZQUFZLEVBQUVFLE1BQU0sQ0FBQ00sT0FBTyxFQUFFLEVBQUVOLE1BQU0sQ0FBQztJQUN4RDtJQUNBLElBQUlBLE1BQU0sQ0FBQ08sV0FBVyxFQUFFLEVBQUU7TUFDeEIsTUFBTUMsS0FBSyxHQUFHLElBQUksQ0FBQ1QsYUFBYSxDQUFDVSxHQUFHLENBQUNULE1BQU0sQ0FBQ08sV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDO01BQy9ELElBQUksQ0FBQ1IsYUFBYSxDQUFDRyxHQUFHLENBQUNGLE1BQU0sQ0FBQ08sV0FBVyxFQUFFLEVBQUVDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDekQ7RUFDRjtFQUVBRSxPQUFPQSxDQUFBLEVBQUc7SUFDUixPQUFPLElBQUksQ0FBQ2QsTUFBTSxDQUFDZSxJQUFJLEtBQUssQ0FBQztFQUMvQjtFQUVBQSxJQUFJQSxDQUFBLEVBQUc7SUFDTCxPQUFPLElBQUksQ0FBQ2YsTUFBTSxDQUFDZSxJQUFJO0VBQ3pCO0VBRUFDLFFBQVFBLENBQUNDLElBQUksRUFBRTtJQUNiLE9BQU8sSUFBSSxDQUFDakIsTUFBTSxDQUFDYSxHQUFHLENBQUNJLElBQUksQ0FBQyxJQUFJQyxrQkFBVTtFQUM1QztFQUVBLENBQUNDLE1BQU0sQ0FBQ0MsUUFBUSxJQUFJO0lBQ2xCLE9BQU8sSUFBSSxDQUFDcEIsTUFBTSxDQUFDcUIsTUFBTSxFQUFFO0VBQzdCO0VBRUFDLE1BQU1BLENBQUNDLFNBQVMsRUFBRTtJQUNoQixPQUFPLElBQUksSUFBSSxDQUFDekIsV0FBVyxDQUN6QjBCLEtBQUssQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDSCxNQUFNLENBQUNDLFNBQVMsQ0FBQyxDQUNuQztFQUNIO0VBRUFHLHdCQUF3QkEsQ0FBQ0MsS0FBSyxFQUFFVixJQUFJLEVBQUU7SUFDcEMsT0FBTyxJQUFJLENBQUNmLFlBQVksQ0FBQ1csR0FBRyxDQUFFLEdBQUVjLEtBQU0sSUFBR1YsSUFBSyxFQUFDLENBQUMsSUFBSSxFQUFFO0VBQ3hEO0VBRUFXLGdCQUFnQkEsQ0FBQ0MsT0FBTyxFQUFFO0lBQ3hCLElBQUlDLElBQUksR0FBR0QsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNyQixJQUFJRSxTQUFTLEdBQUcsQ0FBQztJQUNqQixLQUFLLE1BQU1DLFFBQVEsSUFBSUgsT0FBTyxFQUFFO01BQzlCLE1BQU1qQixLQUFLLEdBQUcsSUFBSSxDQUFDVCxhQUFhLENBQUNVLEdBQUcsQ0FBQ21CLFFBQVEsQ0FBQyxJQUFJLENBQUM7TUFDbkQsSUFBSXBCLEtBQUssR0FBR21CLFNBQVMsRUFBRTtRQUNyQkEsU0FBUyxHQUFHbkIsS0FBSztRQUNqQmtCLElBQUksR0FBR0UsUUFBUTtNQUNqQjtJQUNGO0lBQ0EsT0FBT0YsSUFBSTtFQUNiO0FBQ0Y7QUFBQ0csT0FBQSxDQUFBQyxPQUFBLEdBQUFyQyxTQUFBIn0=