"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class ContextMenuInterceptor extends _react.default.Component {
  static handle(event) {
    for (const [element, callback] of ContextMenuInterceptor.registration) {
      if (element.contains(event.target)) {
        callback(event);
      }
    }
  }
  static dispose() {
    document.removeEventListener('contextmenu', contextMenuHandler, {
      capture: true
    });
  }
  componentDidMount() {
    // Helpfully, addEventListener dedupes listeners for us.
    document.addEventListener('contextmenu', contextMenuHandler, {
      capture: true
    });
    ContextMenuInterceptor.registration.set(this.element, (...args) => this.props.onWillShowContextMenu(...args));
  }
  render() {
    return _react.default.createElement("div", {
      ref: e => {
        this.element = e;
      }
    }, this.props.children);
  }
  componentWillUnmount() {
    ContextMenuInterceptor.registration.delete(this.element);
  }
}
exports.default = ContextMenuInterceptor;
_defineProperty(ContextMenuInterceptor, "propTypes", {
  onWillShowContextMenu: _propTypes.default.func.isRequired,
  children: _propTypes.default.element.isRequired
});
_defineProperty(ContextMenuInterceptor, "registration", new Map());
function contextMenuHandler(event) {
  ContextMenuInterceptor.handle(event);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9kZWZpbmVQcm9wZXJ0eSIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInQiLCJpIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiciIsImUiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJDb250ZXh0TWVudUludGVyY2VwdG9yIiwiUmVhY3QiLCJDb21wb25lbnQiLCJoYW5kbGUiLCJldmVudCIsImVsZW1lbnQiLCJjYWxsYmFjayIsInJlZ2lzdHJhdGlvbiIsImNvbnRhaW5zIiwidGFyZ2V0IiwiZGlzcG9zZSIsImRvY3VtZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNvbnRleHRNZW51SGFuZGxlciIsImNhcHR1cmUiLCJjb21wb25lbnREaWRNb3VudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXQiLCJhcmdzIiwicHJvcHMiLCJvbldpbGxTaG93Q29udGV4dE1lbnUiLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwicmVmIiwiY2hpbGRyZW4iLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImRlbGV0ZSIsImV4cG9ydHMiLCJQcm9wVHlwZXMiLCJmdW5jIiwiaXNSZXF1aXJlZCIsIk1hcCJdLCJzb3VyY2VzIjpbImNvbnRleHQtbWVudS1pbnRlcmNlcHRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udGV4dE1lbnVJbnRlcmNlcHRvciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgb25XaWxsU2hvd0NvbnRleHRNZW51OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkLFxuICB9XG5cbiAgc3RhdGljIHJlZ2lzdHJhdGlvbiA9IG5ldyBNYXAoKVxuXG4gIHN0YXRpYyBoYW5kbGUoZXZlbnQpIHtcbiAgICBmb3IgKGNvbnN0IFtlbGVtZW50LCBjYWxsYmFja10gb2YgQ29udGV4dE1lbnVJbnRlcmNlcHRvci5yZWdpc3RyYXRpb24pIHtcbiAgICAgIGlmIChlbGVtZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBkaXNwb3NlKCkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgY29udGV4dE1lbnVIYW5kbGVyLCB7Y2FwdHVyZTogdHJ1ZX0pO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gSGVscGZ1bGx5LCBhZGRFdmVudExpc3RlbmVyIGRlZHVwZXMgbGlzdGVuZXJzIGZvciB1cy5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIGNvbnRleHRNZW51SGFuZGxlciwge2NhcHR1cmU6IHRydWV9KTtcbiAgICBDb250ZXh0TWVudUludGVyY2VwdG9yLnJlZ2lzdHJhdGlvbi5zZXQodGhpcy5lbGVtZW50LCAoLi4uYXJncykgPT4gdGhpcy5wcm9wcy5vbldpbGxTaG93Q29udGV4dE1lbnUoLi4uYXJncykpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiA8ZGl2IHJlZj17ZSA9PiB7IHRoaXMuZWxlbWVudCA9IGU7IH19Pnt0aGlzLnByb3BzLmNoaWxkcmVufTwvZGl2PjtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIENvbnRleHRNZW51SW50ZXJjZXB0b3IucmVnaXN0cmF0aW9uLmRlbGV0ZSh0aGlzLmVsZW1lbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnRleHRNZW51SGFuZGxlcihldmVudCkge1xuICBDb250ZXh0TWVudUludGVyY2VwdG9yLmhhbmRsZShldmVudCk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFtQyxTQUFBRCx1QkFBQUcsR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUFBLFNBQUFHLGdCQUFBSCxHQUFBLEVBQUFJLEdBQUEsRUFBQUMsS0FBQSxJQUFBRCxHQUFBLEdBQUFFLGNBQUEsQ0FBQUYsR0FBQSxPQUFBQSxHQUFBLElBQUFKLEdBQUEsSUFBQU8sTUFBQSxDQUFBQyxjQUFBLENBQUFSLEdBQUEsRUFBQUksR0FBQSxJQUFBQyxLQUFBLEVBQUFBLEtBQUEsRUFBQUksVUFBQSxRQUFBQyxZQUFBLFFBQUFDLFFBQUEsb0JBQUFYLEdBQUEsQ0FBQUksR0FBQSxJQUFBQyxLQUFBLFdBQUFMLEdBQUE7QUFBQSxTQUFBTSxlQUFBTSxDQUFBLFFBQUFDLENBQUEsR0FBQUMsWUFBQSxDQUFBRixDQUFBLHVDQUFBQyxDQUFBLEdBQUFBLENBQUEsR0FBQUUsTUFBQSxDQUFBRixDQUFBO0FBQUEsU0FBQUMsYUFBQUYsQ0FBQSxFQUFBSSxDQUFBLDJCQUFBSixDQUFBLEtBQUFBLENBQUEsU0FBQUEsQ0FBQSxNQUFBSyxDQUFBLEdBQUFMLENBQUEsQ0FBQU0sTUFBQSxDQUFBQyxXQUFBLGtCQUFBRixDQUFBLFFBQUFKLENBQUEsR0FBQUksQ0FBQSxDQUFBRyxJQUFBLENBQUFSLENBQUEsRUFBQUksQ0FBQSx1Q0FBQUgsQ0FBQSxTQUFBQSxDQUFBLFlBQUFRLFNBQUEseUVBQUFMLENBQUEsR0FBQUQsTUFBQSxHQUFBTyxNQUFBLEVBQUFWLENBQUE7QUFFcEIsTUFBTVcsc0JBQXNCLFNBQVNDLGNBQUssQ0FBQ0MsU0FBUyxDQUFDO0VBUWxFLE9BQU9DLE1BQU1BLENBQUNDLEtBQUssRUFBRTtJQUNuQixLQUFLLE1BQU0sQ0FBQ0MsT0FBTyxFQUFFQyxRQUFRLENBQUMsSUFBSU4sc0JBQXNCLENBQUNPLFlBQVksRUFBRTtNQUNyRSxJQUFJRixPQUFPLENBQUNHLFFBQVEsQ0FBQ0osS0FBSyxDQUFDSyxNQUFNLENBQUMsRUFBRTtRQUNsQ0gsUUFBUSxDQUFDRixLQUFLLENBQUM7TUFDakI7SUFDRjtFQUNGO0VBRUEsT0FBT00sT0FBT0EsQ0FBQSxFQUFHO0lBQ2ZDLFFBQVEsQ0FBQ0MsbUJBQW1CLENBQUMsYUFBYSxFQUFFQyxrQkFBa0IsRUFBRTtNQUFDQyxPQUFPLEVBQUU7SUFBSSxDQUFDLENBQUM7RUFDbEY7RUFFQUMsaUJBQWlCQSxDQUFBLEVBQUc7SUFDbEI7SUFDQUosUUFBUSxDQUFDSyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUVILGtCQUFrQixFQUFFO01BQUNDLE9BQU8sRUFBRTtJQUFJLENBQUMsQ0FBQztJQUM3RWQsc0JBQXNCLENBQUNPLFlBQVksQ0FBQ1UsR0FBRyxDQUFDLElBQUksQ0FBQ1osT0FBTyxFQUFFLENBQUMsR0FBR2EsSUFBSSxLQUFLLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxxQkFBcUIsQ0FBQyxHQUFHRixJQUFJLENBQUMsQ0FBQztFQUMvRztFQUVBRyxNQUFNQSxDQUFBLEVBQUc7SUFDUCxPQUFPaEQsTUFBQSxDQUFBTSxPQUFBLENBQUEyQyxhQUFBO01BQUtDLEdBQUcsRUFBRTdCLENBQUMsSUFBSTtRQUFFLElBQUksQ0FBQ1csT0FBTyxHQUFHWCxDQUFDO01BQUU7SUFBRSxHQUFFLElBQUksQ0FBQ3lCLEtBQUssQ0FBQ0ssUUFBYyxDQUFDO0VBQzFFO0VBRUFDLG9CQUFvQkEsQ0FBQSxFQUFHO0lBQ3JCekIsc0JBQXNCLENBQUNPLFlBQVksQ0FBQ21CLE1BQU0sQ0FBQyxJQUFJLENBQUNyQixPQUFPLENBQUM7RUFDMUQ7QUFDRjtBQUFDc0IsT0FBQSxDQUFBaEQsT0FBQSxHQUFBcUIsc0JBQUE7QUFBQXBCLGVBQUEsQ0FqQ29Cb0Isc0JBQXNCLGVBQ3RCO0VBQ2pCb0IscUJBQXFCLEVBQUVRLGtCQUFTLENBQUNDLElBQUksQ0FBQ0MsVUFBVTtFQUNoRE4sUUFBUSxFQUFFSSxrQkFBUyxDQUFDdkIsT0FBTyxDQUFDeUI7QUFDOUIsQ0FBQztBQUFBbEQsZUFBQSxDQUprQm9CLHNCQUFzQixrQkFNbkIsSUFBSStCLEdBQUcsQ0FBQyxDQUFDO0FBNkJqQyxTQUFTbEIsa0JBQWtCQSxDQUFDVCxLQUFLLEVBQUU7RUFDakNKLHNCQUFzQixDQUFDRyxNQUFNLENBQUNDLEtBQUssQ0FBQztBQUN0QyJ9