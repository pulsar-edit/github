"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class Task {
  constructor(fn, parallel = true) {
    this.fn = fn;
    this.parallel = parallel;
    this.promise = new Promise((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject;
    });
  }
  async execute() {
    try {
      const value = await this.fn.call(undefined);
      this.resolve(value);
    } catch (err) {
      this.reject(err);
    }
  }
  runsInParallel() {
    return this.parallel;
  }
  runsInSerial() {
    return !this.parallel;
  }
  getPromise() {
    return this.promise;
  }
}
class AsyncQueue {
  constructor(options = {}) {
    this.parallelism = options.parallelism || 1;
    this.nonParallelizableOperation = false;
    this.tasksInProgress = 0;
    this.queue = [];
  }
  push(fn, {
    parallel
  } = {
    parallel: true
  }) {
    const task = new Task(fn, parallel);
    this.queue.push(task);
    this.processQueue();
    return task.getPromise();
  }
  processQueue() {
    if (!this.queue.length || this.nonParallelizableOperation || this.disposed) {
      return;
    }
    const task = this.queue[0];
    const canRunParallelOp = task.runsInParallel() && this.tasksInProgress < this.parallelism;
    const canRunSerialOp = task.runsInSerial() && this.tasksInProgress === 0;
    if (canRunSerialOp || canRunParallelOp) {
      this.processTask(task, task.runsInParallel());
      this.queue.shift();
      this.processQueue();
    }
  }
  async processTask(task, runsInParallel) {
    if (this.disposed) {
      return;
    }
    this.tasksInProgress++;
    if (!runsInParallel) {
      this.nonParallelizableOperation = true;
    }
    try {
      await task.execute();
    } finally {
      this.tasksInProgress--;
      this.nonParallelizableOperation = false;
      this.processQueue();
    }
  }
  dispose() {
    this.queue = [];
    this.disposed = true;
  }
}
exports.default = AsyncQueue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUYXNrIiwiY29uc3RydWN0b3IiLCJmbiIsInBhcmFsbGVsIiwicHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXhlY3V0ZSIsInZhbHVlIiwiY2FsbCIsInVuZGVmaW5lZCIsImVyciIsInJ1bnNJblBhcmFsbGVsIiwicnVuc0luU2VyaWFsIiwiZ2V0UHJvbWlzZSIsIkFzeW5jUXVldWUiLCJvcHRpb25zIiwicGFyYWxsZWxpc20iLCJub25QYXJhbGxlbGl6YWJsZU9wZXJhdGlvbiIsInRhc2tzSW5Qcm9ncmVzcyIsInF1ZXVlIiwicHVzaCIsInRhc2siLCJwcm9jZXNzUXVldWUiLCJsZW5ndGgiLCJkaXNwb3NlZCIsImNhblJ1blBhcmFsbGVsT3AiLCJjYW5SdW5TZXJpYWxPcCIsInByb2Nlc3NUYXNrIiwic2hpZnQiLCJkaXNwb3NlIl0sInNvdXJjZXMiOlsiYXN5bmMtcXVldWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgVGFzayB7XG4gIGNvbnN0cnVjdG9yKGZuLCBwYXJhbGxlbCA9IHRydWUpIHtcbiAgICB0aGlzLmZuID0gZm47XG4gICAgdGhpcy5wYXJhbGxlbCA9IHBhcmFsbGVsO1xuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB0aGlzLnJlamVjdCA9IHJlamVjdDtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGV4ZWN1dGUoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgdGhpcy5mbi5jYWxsKHVuZGVmaW5lZCk7XG4gICAgICB0aGlzLnJlc29sdmUodmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhpcy5yZWplY3QoZXJyKTtcbiAgICB9XG4gIH1cblxuICBydW5zSW5QYXJhbGxlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJhbGxlbDtcbiAgfVxuXG4gIHJ1bnNJblNlcmlhbCgpIHtcbiAgICByZXR1cm4gIXRoaXMucGFyYWxsZWw7XG4gIH1cblxuICBnZXRQcm9taXNlKCkge1xuICAgIHJldHVybiB0aGlzLnByb21pc2U7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXN5bmNRdWV1ZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMucGFyYWxsZWxpc20gPSBvcHRpb25zLnBhcmFsbGVsaXNtIHx8IDE7XG4gICAgdGhpcy5ub25QYXJhbGxlbGl6YWJsZU9wZXJhdGlvbiA9IGZhbHNlO1xuICAgIHRoaXMudGFza3NJblByb2dyZXNzID0gMDtcbiAgICB0aGlzLnF1ZXVlID0gW107XG4gIH1cblxuICBwdXNoKGZuLCB7cGFyYWxsZWx9ID0ge3BhcmFsbGVsOiB0cnVlfSkge1xuICAgIGNvbnN0IHRhc2sgPSBuZXcgVGFzayhmbiwgcGFyYWxsZWwpO1xuICAgIHRoaXMucXVldWUucHVzaCh0YXNrKTtcbiAgICB0aGlzLnByb2Nlc3NRdWV1ZSgpO1xuICAgIHJldHVybiB0YXNrLmdldFByb21pc2UoKTtcbiAgfVxuXG4gIHByb2Nlc3NRdWV1ZSgpIHtcbiAgICBpZiAoIXRoaXMucXVldWUubGVuZ3RoIHx8IHRoaXMubm9uUGFyYWxsZWxpemFibGVPcGVyYXRpb24gfHwgdGhpcy5kaXNwb3NlZCkgeyByZXR1cm47IH1cblxuICAgIGNvbnN0IHRhc2sgPSB0aGlzLnF1ZXVlWzBdO1xuICAgIGNvbnN0IGNhblJ1blBhcmFsbGVsT3AgPSB0YXNrLnJ1bnNJblBhcmFsbGVsKCkgJiYgdGhpcy50YXNrc0luUHJvZ3Jlc3MgPCB0aGlzLnBhcmFsbGVsaXNtO1xuICAgIGNvbnN0IGNhblJ1blNlcmlhbE9wID0gdGFzay5ydW5zSW5TZXJpYWwoKSAmJiB0aGlzLnRhc2tzSW5Qcm9ncmVzcyA9PT0gMDtcbiAgICBpZiAoY2FuUnVuU2VyaWFsT3AgfHwgY2FuUnVuUGFyYWxsZWxPcCkge1xuICAgICAgdGhpcy5wcm9jZXNzVGFzayh0YXNrLCB0YXNrLnJ1bnNJblBhcmFsbGVsKCkpO1xuICAgICAgdGhpcy5xdWV1ZS5zaGlmdCgpO1xuICAgICAgdGhpcy5wcm9jZXNzUXVldWUoKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBwcm9jZXNzVGFzayh0YXNrLCBydW5zSW5QYXJhbGxlbCkge1xuICAgIGlmICh0aGlzLmRpc3Bvc2VkKSB7IHJldHVybjsgfVxuXG4gICAgdGhpcy50YXNrc0luUHJvZ3Jlc3MrKztcbiAgICBpZiAoIXJ1bnNJblBhcmFsbGVsKSB7XG4gICAgICB0aGlzLm5vblBhcmFsbGVsaXphYmxlT3BlcmF0aW9uID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGFzay5leGVjdXRlKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMudGFza3NJblByb2dyZXNzLS07XG4gICAgICB0aGlzLm5vblBhcmFsbGVsaXphYmxlT3BlcmF0aW9uID0gZmFsc2U7XG4gICAgICB0aGlzLnByb2Nlc3NRdWV1ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5xdWV1ZSA9IFtdO1xuICAgIHRoaXMuZGlzcG9zZWQgPSB0cnVlO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE1BQU1BLElBQUksQ0FBQztFQUNUQyxXQUFXLENBQUNDLEVBQUUsRUFBRUMsUUFBUSxHQUFHLElBQUksRUFBRTtJQUMvQixJQUFJLENBQUNELEVBQUUsR0FBR0EsRUFBRTtJQUNaLElBQUksQ0FBQ0MsUUFBUSxHQUFHQSxRQUFRO0lBQ3hCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlDLE9BQU8sQ0FBQyxDQUFDQyxPQUFPLEVBQUVDLE1BQU0sS0FBSztNQUM5QyxJQUFJLENBQUNELE9BQU8sR0FBR0EsT0FBTztNQUN0QixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtJQUN0QixDQUFDLENBQUM7RUFDSjtFQUVBLE1BQU1DLE9BQU8sR0FBRztJQUNkLElBQUk7TUFD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