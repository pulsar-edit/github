"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.watchWorkspaceItem = watchWorkspaceItem;
var _atom = require("atom");
var _uriPattern = _interopRequireDefault(require("./atom/uri-pattern"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class ItemWatcher {
  constructor(workspace, pattern, component, stateKey) {
    _defineProperty(this, "updateActiveState", () => {
      const wasActive = this.activeItem;
      this.activeItem = this.isActiveItem();
      // Update the component's state if it's changed as a result
      if (wasActive && !this.activeItem) {
        return new Promise(resolve => this.component.setState({
          [this.stateKey]: false
        }, resolve));
      } else if (!wasActive && this.activeItem) {
        return new Promise(resolve => this.component.setState({
          [this.stateKey]: true
        }, resolve));
      } else {
        return Promise.resolve();
      }
    });
    _defineProperty(this, "itemMatches", item => item && item.getURI && this.pattern.matches(item.getURI()).ok());
    this.workspace = workspace;
    this.pattern = pattern instanceof _uriPattern.default ? pattern : new _uriPattern.default(pattern);
    this.component = component;
    this.stateKey = stateKey;
    this.activeItem = this.isActiveItem();
    this.subs = new _atom.CompositeDisposable();
  }
  isActiveItem() {
    for (const pane of this.workspace.getPanes()) {
      if (this.itemMatches(pane.getActiveItem())) {
        return true;
      }
    }
    return false;
  }
  setInitialState() {
    if (!this.component.state) {
      this.component.state = {};
    }
    this.component.state[this.stateKey] = this.activeItem;
    return this;
  }
  subscribeToWorkspace() {
    this.subs.dispose();
    this.subs = new _atom.CompositeDisposable(this.workspace.getCenter().onDidChangeActivePaneItem(this.updateActiveState));
    return this;
  }
  setPattern(pattern) {
    this.pattern = pattern instanceof _uriPattern.default ? pattern : new _uriPattern.default(pattern);
    return this.updateActiveState();
  }
  dispose() {
    this.subs.dispose();
  }
}
function watchWorkspaceItem(workspace, pattern, component, stateKey) {
  return new ItemWatcher(workspace, pattern, component, stateKey).setInitialState().subscribeToWorkspace();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXRvbSIsInJlcXVpcmUiLCJfdXJpUGF0dGVybiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9kZWZpbmVQcm9wZXJ0eSIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInQiLCJpIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiciIsImUiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJJdGVtV2F0Y2hlciIsImNvbnN0cnVjdG9yIiwid29ya3NwYWNlIiwicGF0dGVybiIsImNvbXBvbmVudCIsInN0YXRlS2V5Iiwid2FzQWN0aXZlIiwiYWN0aXZlSXRlbSIsImlzQWN0aXZlSXRlbSIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0U3RhdGUiLCJpdGVtIiwiZ2V0VVJJIiwibWF0Y2hlcyIsIm9rIiwiVVJJUGF0dGVybiIsInN1YnMiLCJDb21wb3NpdGVEaXNwb3NhYmxlIiwicGFuZSIsImdldFBhbmVzIiwiaXRlbU1hdGNoZXMiLCJnZXRBY3RpdmVJdGVtIiwic2V0SW5pdGlhbFN0YXRlIiwic3RhdGUiLCJzdWJzY3JpYmVUb1dvcmtzcGFjZSIsImRpc3Bvc2UiLCJnZXRDZW50ZXIiLCJvbkRpZENoYW5nZUFjdGl2ZVBhbmVJdGVtIiwidXBkYXRlQWN0aXZlU3RhdGUiLCJzZXRQYXR0ZXJuIiwid2F0Y2hXb3Jrc3BhY2VJdGVtIl0sInNvdXJjZXMiOlsid2F0Y2gtd29ya3NwYWNlLWl0ZW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb3NpdGVEaXNwb3NhYmxlfSBmcm9tICdhdG9tJztcblxuaW1wb3J0IFVSSVBhdHRlcm4gZnJvbSAnLi9hdG9tL3VyaS1wYXR0ZXJuJztcblxuY2xhc3MgSXRlbVdhdGNoZXIge1xuICBjb25zdHJ1Y3Rvcih3b3Jrc3BhY2UsIHBhdHRlcm4sIGNvbXBvbmVudCwgc3RhdGVLZXkpIHtcbiAgICB0aGlzLndvcmtzcGFjZSA9IHdvcmtzcGFjZTtcbiAgICB0aGlzLnBhdHRlcm4gPSBwYXR0ZXJuIGluc3RhbmNlb2YgVVJJUGF0dGVybiA/IHBhdHRlcm4gOiBuZXcgVVJJUGF0dGVybihwYXR0ZXJuKTtcbiAgICB0aGlzLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgICB0aGlzLnN0YXRlS2V5ID0gc3RhdGVLZXk7XG5cbiAgICB0aGlzLmFjdGl2ZUl0ZW0gPSB0aGlzLmlzQWN0aXZlSXRlbSgpO1xuICAgIHRoaXMuc3VicyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKCk7XG4gIH1cblxuICBpc0FjdGl2ZUl0ZW0oKSB7XG4gICAgZm9yIChjb25zdCBwYW5lIG9mIHRoaXMud29ya3NwYWNlLmdldFBhbmVzKCkpIHtcbiAgICAgIGlmICh0aGlzLml0ZW1NYXRjaGVzKHBhbmUuZ2V0QWN0aXZlSXRlbSgpKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIGlmICghdGhpcy5jb21wb25lbnQuc3RhdGUpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50LnN0YXRlID0ge307XG4gICAgfVxuICAgIHRoaXMuY29tcG9uZW50LnN0YXRlW3RoaXMuc3RhdGVLZXldID0gdGhpcy5hY3RpdmVJdGVtO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc3Vic2NyaWJlVG9Xb3Jrc3BhY2UoKSB7XG4gICAgdGhpcy5zdWJzLmRpc3Bvc2UoKTtcbiAgICB0aGlzLnN1YnMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZShcbiAgICAgIHRoaXMud29ya3NwYWNlLmdldENlbnRlcigpLm9uRGlkQ2hhbmdlQWN0aXZlUGFuZUl0ZW0odGhpcy51cGRhdGVBY3RpdmVTdGF0ZSksXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHVwZGF0ZUFjdGl2ZVN0YXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IHdhc0FjdGl2ZSA9IHRoaXMuYWN0aXZlSXRlbTtcblxuICAgIHRoaXMuYWN0aXZlSXRlbSA9IHRoaXMuaXNBY3RpdmVJdGVtKCk7XG4gICAgLy8gVXBkYXRlIHRoZSBjb21wb25lbnQncyBzdGF0ZSBpZiBpdCdzIGNoYW5nZWQgYXMgYSByZXN1bHRcbiAgICBpZiAod2FzQWN0aXZlICYmICF0aGlzLmFjdGl2ZUl0ZW0pIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHRoaXMuY29tcG9uZW50LnNldFN0YXRlKHtbdGhpcy5zdGF0ZUtleV06IGZhbHNlfSwgcmVzb2x2ZSkpO1xuICAgIH0gZWxzZSBpZiAoIXdhc0FjdGl2ZSAmJiB0aGlzLmFjdGl2ZUl0ZW0pIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHRoaXMuY29tcG9uZW50LnNldFN0YXRlKHtbdGhpcy5zdGF0ZUtleV06IHRydWV9LCByZXNvbHZlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gIH1cblxuICBzZXRQYXR0ZXJuKHBhdHRlcm4pIHtcbiAgICB0aGlzLnBhdHRlcm4gPSBwYXR0ZXJuIGluc3RhbmNlb2YgVVJJUGF0dGVybiA/IHBhdHRlcm4gOiBuZXcgVVJJUGF0dGVybihwYXR0ZXJuKTtcblxuICAgIHJldHVybiB0aGlzLnVwZGF0ZUFjdGl2ZVN0YXRlKCk7XG4gIH1cblxuICBpdGVtTWF0Y2hlcyA9IGl0ZW0gPT4gaXRlbSAmJiBpdGVtLmdldFVSSSAmJiB0aGlzLnBhdHRlcm4ubWF0Y2hlcyhpdGVtLmdldFVSSSgpKS5vaygpXG5cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLnN1YnMuZGlzcG9zZSgpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3YXRjaFdvcmtzcGFjZUl0ZW0od29ya3NwYWNlLCBwYXR0ZXJuLCBjb21wb25lbnQsIHN0YXRlS2V5KSB7XG4gIHJldHVybiBuZXcgSXRlbVdhdGNoZXIod29ya3NwYWNlLCBwYXR0ZXJuLCBjb21wb25lbnQsIHN0YXRlS2V5KVxuICAgIC5zZXRJbml0aWFsU3RhdGUoKVxuICAgIC5zdWJzY3JpYmVUb1dvcmtzcGFjZSgpO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxLQUFBLEdBQUFDLE9BQUE7QUFFQSxJQUFBQyxXQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFBNEMsU0FBQUUsdUJBQUFDLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFBQSxTQUFBRyxnQkFBQUgsR0FBQSxFQUFBSSxHQUFBLEVBQUFDLEtBQUEsSUFBQUQsR0FBQSxHQUFBRSxjQUFBLENBQUFGLEdBQUEsT0FBQUEsR0FBQSxJQUFBSixHQUFBLElBQUFPLE1BQUEsQ0FBQUMsY0FBQSxDQUFBUixHQUFBLEVBQUFJLEdBQUEsSUFBQUMsS0FBQSxFQUFBQSxLQUFBLEVBQUFJLFVBQUEsUUFBQUMsWUFBQSxRQUFBQyxRQUFBLG9CQUFBWCxHQUFBLENBQUFJLEdBQUEsSUFBQUMsS0FBQSxXQUFBTCxHQUFBO0FBQUEsU0FBQU0sZUFBQU0sQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLFlBQUEsQ0FBQUYsQ0FBQSx1Q0FBQUMsQ0FBQSxHQUFBQSxDQUFBLEdBQUFFLE1BQUEsQ0FBQUYsQ0FBQTtBQUFBLFNBQUFDLGFBQUFGLENBQUEsRUFBQUksQ0FBQSwyQkFBQUosQ0FBQSxLQUFBQSxDQUFBLFNBQUFBLENBQUEsTUFBQUssQ0FBQSxHQUFBTCxDQUFBLENBQUFNLE1BQUEsQ0FBQUMsV0FBQSxrQkFBQUYsQ0FBQSxRQUFBSixDQUFBLEdBQUFJLENBQUEsQ0FBQUcsSUFBQSxDQUFBUixDQUFBLEVBQUFJLENBQUEsdUNBQUFILENBQUEsU0FBQUEsQ0FBQSxZQUFBUSxTQUFBLHlFQUFB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