"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _atom = require("atom");

var _util = require("util");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const LAYER_NAMES = ['unchanged', 'addition', 'deletion', 'nonewline', 'hunk', 'patch'];

class PatchBuffer {
  constructor() {
    this.buffer = new _atom.TextBuffer();
    this.buffer.retain();
    this.layers = LAYER_NAMES.reduce((map, layerName) => {
      map[layerName] = this.buffer.addMarkerLayer();
      return map;
    }, {});
  }

  getBuffer() {
    return this.buffer;
  }

  getInsertionPoint() {
    return this.buffer.getEndPosition();
  }

  getLayer(layerName) {
    return this.layers[layerName];
  }

  findMarkers(layerName, ...args) {
    return this.layers[layerName].findMarkers(...args);
  }

  findAllMarkers(...args) {
    return LAYER_NAMES.reduce((arr, layerName) => {
      arr.push(...this.findMarkers(layerName, ...args));
      return arr;
    }, []);
  }

  markPosition(layerName, ...args) {
    return this.layers[layerName].markPosition(...args);
  }

  markRange(layerName, ...args) {
    return this.layers[layerName].markRange(...args);
  }

  clearAllLayers() {
    for (const layerName of LAYER_NAMES) {
      this.layers[layerName].clear();
    }
  }

  createInserterAt(insertionPoint) {
    return new Inserter(this, _atom.Point.fromObject(insertionPoint));
  }

  createInserterAtEnd() {
    return this.createInserterAt(this.getInsertionPoint());
  }

  createSubBuffer(rangeLike, options = {}) {
    const opts = _objectSpread({
      exclude: new Set()
    }, options);

    const range = _atom.Range.fromObject(rangeLike);

    const baseOffset = range.start.negate();
    const includedMarkersByLayer = LAYER_NAMES.reduce((map, layerName) => {
      map[layerName] = this.layers[layerName].findMarkers({
        intersectsRange: range
      }).filter(m => !opts.exclude.has(m));
      return map;
    }, {});
    const markerMap = new Map();
    const subBuffer = new PatchBuffer();
    subBuffer.getBuffer().setText(this.buffer.getTextInRange(range));

    for (const layerName of LAYER_NAMES) {
      for (const oldMarker of includedMarkersByLayer[layerName]) {
        const oldRange = oldMarker.getRange();
        const clippedStart = oldRange.start.isLessThanOrEqual(range.start) ? range.start : oldRange.start;
        const clippedEnd = oldRange.end.isGreaterThanOrEqual(range.end) ? range.end : oldRange.end; // Exclude non-empty markers that intersect *only* at the range start or end

        if (clippedStart.isEqual(clippedEnd) && !oldRange.start.isEqual(oldRange.end)) {
          continue;
        }

        const startOffset = clippedStart.row === range.start.row ? baseOffset : [baseOffset.row, 0];
        const endOffset = clippedEnd.row === range.start.row ? baseOffset : [baseOffset.row, 0];
        const newMarker = subBuffer.markRange(layerName, [clippedStart.translate(startOffset), clippedEnd.translate(endOffset)], oldMarker.getProperties());
        markerMap.set(oldMarker, newMarker);
      }
    }

    return {
      patchBuffer: subBuffer,
      markerMap
    };
  }

  extractPatchBuffer(rangeLike, options = {}) {
    const {
      patchBuffer: subBuffer,
      markerMap
    } = this.createSubBuffer(rangeLike, options);

    for (const oldMarker of markerMap.keys()) {
      oldMarker.destroy();
    }

    this.buffer.setTextInRange(rangeLike, '');
    return {
      patchBuffer: subBuffer,
      markerMap
    };
  }

  deleteLastNewline() {
    if (this.buffer.getLastLine() === '') {
      this.buffer.deleteRow(this.buffer.getLastRow());
    }

    return this;
  }

  adopt(original) {
    this.clearAllLayers();
    this.buffer.setText(original.getBuffer().getText());
    const markerMap = new Map();

    for (const layerName of LAYER_NAMES) {
      for (const originalMarker of original.getLayer(layerName).getMarkers()) {
        const newMarker = this.markRange(layerName, originalMarker.getRange(), originalMarker.getProperties());
        markerMap.set(originalMarker, newMarker);
      }
    }

    return markerMap;
  }
  /* istanbul ignore next */


  inspect(opts = {}) {
    /* istanbul ignore next */
    const options = _objectSpread({
      layerNames: LAYER_NAMES
    }, opts);

    let inspectString = '';
    const increasingMarkers = [];

    for (const layerName of options.layerNames) {
      for (const marker of this.findMarkers(layerName, {})) {
        increasingMarkers.push({
          layerName,
          point: marker.getRange().start,
          start: true,
          id: marker.id
        });
        increasingMarkers.push({
          layerName,
          point: marker.getRange().end,
          end: true,
          id: marker.id
        });
      }
    }

    increasingMarkers.sort((a, b) => {
      const cmp = a.point.compare(b.point);

      if (cmp !== 0) {
        return cmp;
      } else if (a.start && b.start) {
        return 0;
      } else if (a.start && !b.start) {
        return -1;
      } else if (!a.start && b.start) {
        return 1;
      } else {
        return 0;
      }
    });

    let inspectPoint = _atom.Point.fromObject([0, 0]);

    for (const marker of increasingMarkers) {
      if (!marker.point.isEqual(inspectPoint)) {
        inspectString += (0, _util.inspect)(this.buffer.getTextInRange([inspectPoint, marker.point])) + '\n';
      }

      if (marker.start) {
        inspectString += `  start ${marker.layerName}@${marker.id}\n`;
      } else if (marker.end) {
        inspectString += `  end ${marker.layerName}@${marker.id}\n`;
      }

      inspectPoint = marker.point;
    }

    return inspectString;
  }

}

exports.default = PatchBuffer;

class Inserter {
  constructor(patchBuffer, insertionPoint) {
    const clipped = patchBuffer.getBuffer().clipPosition(insertionPoint);
    this.patchBuffer = patchBuffer;
    this.startPoint = clipped.copy();
    this.insertionPoint = clipped.copy();
    this.markerBlueprints = [];
    this.markerMapCallbacks = [];
    this.markersBefore = new Set();
    this.markersAfter = new Set();
  }

  keepBefore(markers) {
    for (const marker of markers) {
      if (marker.getRange().end.isEqual(this.startPoint)) {
        this.markersBefore.add(marker);
      }
    }

    return this;
  }

  keepAfter(markers) {
    for (const marker of markers) {
      if (marker.getRange().start.isEqual(this.startPoint)) {
        this.markersAfter.add(marker);
      }
    }

    return this;
  }

  markWhile(layerName, block, markerOpts) {
    const start = this.insertionPoint.copy();
    block();
    const end = this.insertionPoint.copy();
    this.markerBlueprints.push({
      layerName,
      range: new _atom.Range(start, end),
      markerOpts
    });
    return this;
  }

  insert(text) {
    const insertedRange = this.patchBuffer.getBuffer().insert(this.insertionPoint, text);
    this.insertionPoint = insertedRange.end;
    return this;
  }

  insertMarked(text, layerName, markerOpts) {
    return this.markWhile(layerName, () => this.insert(text), markerOpts);
  }

  insertPatchBuffer(subPatchBuffer, opts) {
    const baseOffset = this.insertionPoint.copy();
    this.insert(subPatchBuffer.getBuffer().getText());
    const subMarkerMap = new Map();

    for (const layerName of LAYER_NAMES) {
      for (const oldMarker of subPatchBuffer.findMarkers(layerName, {})) {
        const startOffset = oldMarker.getRange().start.row === 0 ? baseOffset : [baseOffset.row, 0];
        const endOffset = oldMarker.getRange().end.row === 0 ? baseOffset : [baseOffset.row, 0];
        const range = oldMarker.getRange().translate(startOffset, endOffset);

        const markerOpts = _objectSpread({}, oldMarker.getProperties(), {
          callback: newMarker => {
            subMarkerMap.set(oldMarker, newMarker);
          }
        });

        this.markerBlueprints.push({
          layerName,
          range,
          markerOpts
        });
      }
    }

    this.markerMapCallbacks.push({
      markerMap: subMarkerMap,
      callback: opts.callback
    });
    return this;
  }

  apply() {
    for (const {
      layerName,
      range,
      markerOpts
    } of this.markerBlueprints) {
      const callback = markerOpts.callback;
      delete markerOpts.callback;
      const marker = this.patchBuffer.markRange(layerName, range, markerOpts);

      if (callback) {
        callback(marker);
      }
    }

    for (const {
      markerMap,
      callback
    } of this.markerMapCallbacks) {
      callback(markerMap);
    }

    for (const beforeMarker of this.markersBefore) {
      const isEmpty = beforeMarker.getRange().isEmpty();

      if (!beforeMarker.isReversed()) {
        beforeMarker.setHeadPosition(this.startPoint);

        if (isEmpty) {
          beforeMarker.setTailPosition(this.startPoint);
        }
      } else {
        beforeMarker.setTailPosition(this.startPoint);

        if (isEmpty) {
          beforeMarker.setHeadPosition(this.startPoint);
        }
      }
    }

    for (const afterMarker of this.markersAfter) {
      const isEmpty = afterMarker.getRange().isEmpty();

      if (!afterMarker.isReversed()) {
        afterMarker.setTailPosition(this.insertionPoint);

        if (isEmpty) {
          afterMarker.setHeadPosition(this.insertionPoint);
        }
      } else {
        afterMarker.setHeadPosition(this.insertionPoint);

        if (isEmpty) {
          afterMarker.setTailPosition(this.insertionPoint);
        }
      }
    }
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9tb2RlbHMvcGF0Y2gvcGF0Y2gtYnVmZmVyLmpzIl0sIm5hbWVzIjpbIkxBWUVSX05BTUVTIiwiUGF0Y2hCdWZmZXIiLCJjb25zdHJ1Y3RvciIsImJ1ZmZlciIsIlRleHRCdWZmZXIiLCJyZXRhaW4iLCJsYXllcnMiLCJyZWR1Y2UiLCJtYXAiLCJsYXllck5hbWUiLCJhZGRNYXJrZXJMYXllciIsImdldEJ1ZmZlciIsImdldEluc2VydGlvblBvaW50IiwiZ2V0RW5kUG9zaXRpb24iLCJnZXRMYXllciIsImZpbmRNYXJrZXJzIiwiYXJncyIsImZpbmRBbGxNYXJrZXJzIiwiYXJyIiwicHVzaCIsIm1hcmtQb3NpdGlvbiIsIm1hcmtSYW5nZSIsImNsZWFyQWxsTGF5ZXJzIiwiY2xlYXIiLCJjcmVhdGVJbnNlcnRlckF0IiwiaW5zZXJ0aW9uUG9pbnQiLCJJbnNlcnRlciIsIlBvaW50IiwiZnJvbU9iamVjdCIsImNyZWF0ZUluc2VydGVyQXRFbmQiLCJjcmVhdGVTdWJCdWZmZXIiLCJyYW5nZUxpa2UiLCJvcHRpb25zIiwib3B0cyIsImV4Y2x1ZGUiLCJTZXQiLCJyYW5nZSIsIlJhbmdlIiwiYmFzZU9mZnNldCIsInN0YXJ0IiwibmVnYXRlIiwiaW5jbHVkZWRNYXJrZXJzQnlMYXllciIsImludGVyc2VjdHNSYW5nZSIsImZpbHRlciIsIm0iLCJoYXMiLCJtYXJrZXJNYXAiLCJNYXAiLCJzdWJCdWZmZXIiLCJzZXRUZXh0IiwiZ2V0VGV4dEluUmFuZ2UiLCJvbGRNYXJrZXIiLCJvbGRSYW5nZSIsImdldFJhbmdlIiwiY2xpcHBlZFN0YXJ0IiwiaXNMZXNzVGhhbk9yRXF1YWwiLCJjbGlwcGVkRW5kIiwiZW5kIiwiaXNHcmVhdGVyVGhhbk9yRXF1YWwiLCJpc0VxdWFsIiwic3RhcnRPZmZzZXQiLCJyb3ciLCJlbmRPZmZzZXQiLCJuZXdNYXJrZXIiLCJ0cmFuc2xhdGUiLCJnZXRQcm9wZXJ0aWVzIiwic2V0IiwicGF0Y2hCdWZmZXIiLCJleHRyYWN0UGF0Y2hCdWZmZXIiLCJrZXlzIiwiZGVzdHJveSIsInNldFRleHRJblJhbmdlIiwiZGVsZXRlTGFzdE5ld2xpbmUiLCJnZXRMYXN0TGluZSIsImRlbGV0ZVJvdyIsImdldExhc3RSb3ciLCJhZG9wdCIsIm9yaWdpbmFsIiwiZ2V0VGV4dCIsIm9yaWdpbmFsTWFya2VyIiwiZ2V0TWFya2VycyIsImluc3BlY3QiLCJsYXllck5hbWVzIiwiaW5zcGVjdFN0cmluZyIsImluY3JlYXNpbmdNYXJrZXJzIiwibWFya2VyIiwicG9pbnQiLCJpZCIsInNvcnQiLCJhIiwiYiIsImNtcCIsImNvbXBhcmUiLCJpbnNwZWN0UG9pbnQiLCJjbGlwcGVkIiwiY2xpcFBvc2l0aW9uIiwic3RhcnRQb2ludCIsImNvcHkiLCJtYXJrZXJCbHVlcHJpbnRzIiwibWFya2VyTWFwQ2FsbGJhY2tzIiwibWFya2Vyc0JlZm9yZSIsIm1hcmtlcnNBZnRlciIsImtlZXBCZWZvcmUiLCJtYXJrZXJzIiwiYWRkIiwia2VlcEFmdGVyIiwibWFya1doaWxlIiwiYmxvY2siLCJtYXJrZXJPcHRzIiwiaW5zZXJ0IiwidGV4dCIsImluc2VydGVkUmFuZ2UiLCJpbnNlcnRNYXJrZWQiLCJpbnNlcnRQYXRjaEJ1ZmZlciIsInN1YlBhdGNoQnVmZmVyIiwic3ViTWFya2VyTWFwIiwiY2FsbGJhY2siLCJhcHBseSIsImJlZm9yZU1hcmtlciIsImlzRW1wdHkiLCJpc1JldmVyc2VkIiwic2V0SGVhZFBvc2l0aW9uIiwic2V0VGFpbFBvc2l0aW9uIiwiYWZ0ZXJNYXJrZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7Ozs7QUFFQSxNQUFNQSxXQUFXLEdBQUcsQ0FBQyxXQUFELEVBQWMsVUFBZCxFQUEwQixVQUExQixFQUFzQyxXQUF0QyxFQUFtRCxNQUFuRCxFQUEyRCxPQUEzRCxDQUFwQjs7QUFFZSxNQUFNQyxXQUFOLENBQWtCO0FBQy9CQyxFQUFBQSxXQUFXLEdBQUc7QUFDWixTQUFLQyxNQUFMLEdBQWMsSUFBSUMs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QUFBQSxXQUFXLENBQUNGLGVBQVosQ0FBNEIsS0FBS2hHLGNBQWpDO0FBQ0Q7QUFDRixPQUxELE1BS087QUFDTGtHLFFBQUFBLFdBQVcsQ0FBQ0YsZUFBWixDQUE0QixLQUFLaEcsY0FBakM7O0FBQ0EsWUFBSThGLE9BQUosRUFBYTtBQUNYSSxVQUFBQSxXQUFXLENBQUNELGVBQVosQ0FBNEIsS0FBS2pHLGNBQWpDO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7O0FBeEhZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZXh0QnVmZmVyLCBSYW5nZSwgUG9pbnR9IGZyb20gJ2F0b20nO1xuaW1wb3J0IHtpbnNwZWN0fSBmcm9tICd1dGlsJztcblxuY29uc3QgTEFZRVJfTkFNRVMgPSBbJ3VuY2hhbmdlZCcsICdhZGRpdGlvbicsICdkZWxldGlvbicsICdub25ld2xpbmUnLCAnaHVuaycsICdwYXRjaCddO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXRjaEJ1ZmZlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYnVmZmVyID0gbmV3IFRleHRCdWZmZXIoKTtcbiAgICB0aGlzLmJ1ZmZlci5yZXRhaW4oKTtcblxuICAgIHRoaXMubGF5ZXJzID0gTEFZRVJfTkFNRVMucmVkdWNlKChtYXAsIGxheWVyTmFtZSkgPT4ge1xuICAgICAgbWFwW2xheWVyTmFtZV0gPSB0aGlzLmJ1ZmZlci5hZGRNYXJrZXJMYXllcigpO1xuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9LCB7fSk7XG4gIH1cblxuICBnZXRCdWZmZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyO1xuICB9XG5cbiAgZ2V0SW5zZXJ0aW9uUG9pbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyLmdldEVuZFBvc2l0aW9uKCk7XG4gIH1cblxuICBnZXRMYXllcihsYXllck5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5sYXllcnNbbGF5ZXJOYW1lXTtcbiAgfVxuXG4gIGZpbmRNYXJrZXJzKGxheWVyTmFtZSwgLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLmxheWVyc1tsYXllck5hbWVdLmZpbmRNYXJrZXJzKC4uLmFyZ3MpO1xuICB9XG5cbiAgZmluZEFsbE1hcmtlcnMoLi4uYXJncykge1xuICAgIHJldHVybiBMQVlFUl9OQU1FUy5yZWR1Y2UoKGFyciwgbGF5ZXJOYW1lKSA9PiB7XG4gICAgICBhcnIucHVzaCguLi50aGlzLmZpbmRNYXJrZXJzKGxheWVyTmFtZSwgLi4uYXJncykpO1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9LCBbXSk7XG4gIH1cblxuICBtYXJrUG9zaXRpb24obGF5ZXJOYW1lLCAuLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMubGF5ZXJzW2xheWVyTmFtZV0ubWFya1Bvc2l0aW9uKC4uLmFyZ3MpO1xuICB9XG5cbiAgbWFya1JhbmdlKGxheWVyTmFtZSwgLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLmxheWVyc1tsYXllck5hbWVdLm1hcmtSYW5nZSguLi5hcmdzKTtcbiAgfVxuXG4gIGNsZWFyQWxsTGF5ZXJzKCkge1xuICAgIGZvciAoY29uc3QgbGF5ZXJOYW1lIG9mIExBWUVSX05BTUVTKSB7XG4gICAgICB0aGlzLmxheWVyc1tsYXllck5hbWVdLmNsZWFyKCk7XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlSW5zZXJ0ZXJBdChpbnNlcnRpb25Qb2ludCkge1xuICAgIHJldHVybiBuZXcgSW5zZXJ0ZXIodGhpcywgUG9pbnQuZnJvbU9iamVjdChpbnNlcnRpb25Qb2ludCkpO1xuICB9XG5cbiAgY3JlYXRlSW5zZXJ0ZXJBdEVuZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVJbnNlcnRlckF0KHRoaXMuZ2V0SW5zZXJ0aW9uUG9pbnQoKSk7XG4gIH1cblxuICBjcmVhdGVTdWJCdWZmZXIocmFuZ2VMaWtlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBvcHRzID0ge1xuICAgICAgZXhjbHVkZTogbmV3IFNldCgpLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9O1xuXG4gICAgY29uc3QgcmFuZ2UgPSBSYW5nZS5mcm9tT2JqZWN0KHJhbmdlTGlrZSk7XG4gICAgY29uc3QgYmFzZU9mZnNldCA9IHJhbmdlLnN0YXJ0Lm5lZ2F0ZSgpO1xuICAgIGNvbnN0IGluY2x1ZGVkTWFya2Vyc0J5TGF5ZXIgPSBMQVlFUl9OQU1FUy5yZWR1Y2UoKG1hcCwgbGF5ZXJOYW1lKSA9PiB7XG4gICAgICBtYXBbbGF5ZXJOYW1lXSA9IHRoaXMubGF5ZXJzW2xheWVyTmFtZV1cbiAgICAgICAgLmZpbmRNYXJrZXJzKHtpbnRlcnNlY3RzUmFuZ2U6IHJhbmdlfSlcbiAgICAgICAgLmZpbHRlcihtID0+ICFvcHRzLmV4Y2x1ZGUuaGFzKG0pKTtcbiAgICAgIHJldHVybiBtYXA7XG4gICAgfSwge30pO1xuICAgIGNvbnN0IG1hcmtlck1hcCA9IG5ldyBNYXAoKTtcblxuICAgIGNvbnN0IHN1YkJ1ZmZlciA9IG5ldyBQYXRjaEJ1ZmZlcigpO1xuICAgIHN1YkJ1ZmZlci5nZXRCdWZmZXIoKS5zZXRUZXh0KHRoaXMuYnVmZmVyLmdldFRleHRJblJhbmdlKHJhbmdlKSk7XG5cbiAgICBmb3IgKGNvbnN0IGxheWVyTmFtZSBvZiBMQVlFUl9OQU1FUykge1xuICAgICAgZm9yIChjb25zdCBvbGRNYXJrZXIgb2YgaW5jbHVkZWRNYXJrZXJzQnlMYXllcltsYXllck5hbWVdKSB7XG4gICAgICAgIGNvbnN0IG9sZFJhbmdlID0gb2xkTWFya2VyLmdldFJhbmdlKCk7XG5cbiAgICAgICAgY29uc3QgY2xpcHBlZFN0YXJ0ID0gb2xkUmFuZ2Uuc3RhcnQuaXNMZXNzVGhhbk9yRXF1YWwocmFuZ2Uuc3RhcnQpID8gcmFuZ2Uuc3RhcnQgOiBvbGRSYW5nZS5zdGFydDtcbiAgICAgICAgY29uc3QgY2xpcHBlZEVuZCA9IG9sZFJhbmdlLmVuZC5pc0dyZWF0ZXJUaGFuT3JFcXVhbChyYW5nZS5lbmQpID8gcmFuZ2UuZW5kIDogb2xkUmFuZ2UuZW5kO1xuXG4gICAgICAgIC8vIEV4Y2x1ZGUgbm9uLWVtcHR5IG1hcmtlcnMgdGhhdCBpbnRlcnNlY3QgKm9ubHkqIGF0IHRoZSByYW5nZSBzdGFydCBvciBlbmRcbiAgICAgICAgaWYgKGNsaXBwZWRTdGFydC5pc0VxdWFsKGNsaXBwZWRFbmQpICYmICFvbGRSYW5nZS5zdGFydC5pc0VxdWFsKG9sZFJhbmdlLmVuZCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0YXJ0T2Zmc2V0ID0gY2xpcHBlZFN0YXJ0LnJvdyA9PT0gcmFuZ2Uuc3RhcnQucm93ID8gYmFzZU9mZnNldCA6IFtiYXNlT2Zmc2V0LnJvdywgMF07XG4gICAgICAgIGNvbnN0IGVuZE9mZnNldCA9IGNsaXBwZWRFbmQucm93ID09PSByYW5nZS5zdGFydC5yb3cgPyBiYXNlT2Zmc2V0IDogW2Jhc2VPZmZzZXQucm93LCAwXTtcblxuICAgICAgICBjb25zdCBuZXdNYXJrZXIgPSBzdWJCdWZmZXIubWFya1JhbmdlKFxuICAgICAgICAgIGxheWVyTmFtZSxcbiAgICAgICAgICBbY2xpcHBlZFN0YXJ0LnRyYW5zbGF0ZShzdGFydE9mZnNldCksIGNsaXBwZWRFbmQudHJhbnNsYXRlKGVuZE9mZnNldCldLFxuICAgICAgICAgIG9sZE1hcmtlci5nZXRQcm9wZXJ0aWVzKCksXG4gICAgICAgICk7XG4gICAgICAgIG1hcmtlck1hcC5zZXQob2xkTWFya2VyLCBuZXdNYXJrZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7cGF0Y2hCdWZmZXI6IHN1YkJ1ZmZlciwgbWFya2VyTWFwfTtcbiAgfVxuXG4gIGV4dHJhY3RQYXRjaEJ1ZmZlcihyYW5nZUxpa2UsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHtwYXRjaEJ1ZmZlcjogc3ViQnVmZmVyLCBtYXJrZXJNYXB9ID0gdGhpcy5jcmVhdGVTdWJCdWZmZXIocmFuZ2VMaWtlLCBvcHRpb25zKTtcblxuICAgIGZvciAoY29uc3Qgb2xkTWFya2VyIG9mIG1hcmtlck1hcC5rZXlzKCkpIHtcbiAgICAgIG9sZE1hcmtlci5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgdGhpcy5idWZmZXIuc2V0VGV4dEluUmFuZ2UocmFuZ2VMaWtlLCAnJyk7XG4gICAgcmV0dXJuIHtwYXRjaEJ1ZmZlcjogc3ViQnVmZmVyLCBtYXJrZXJNYXB9O1xuICB9XG5cbiAgZGVsZXRlTGFzdE5ld2xpbmUoKSB7XG4gICAgaWYgKHRoaXMuYnVmZmVyLmdldExhc3RMaW5lKCkgPT09ICcnKSB7XG4gICAgICB0aGlzLmJ1ZmZlci5kZWxldGVSb3codGhpcy5idWZmZXIuZ2V0TGFzdFJvdygpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFkb3B0KG9yaWdpbmFsKSB7XG4gICAgdGhpcy5jbGVhckFsbExheWVycygpO1xuICAgIHRoaXMuYnVmZmVyLnNldFRleHQob3JpZ2luYWwuZ2V0QnVmZmVyKCkuZ2V0VGV4dCgpKTtcblxuICAgIGNvbnN0IG1hcmtlck1hcCA9IG5ldyBNYXAoKTtcbiAgICBmb3IgKGNvbnN0IGxheWVyTmFtZSBvZiBMQVlFUl9OQU1FUykge1xuICAgICAgZm9yIChjb25zdCBvcmlnaW5hbE1hcmtlciBvZiBvcmlnaW5hbC5nZXRMYXllcihsYXllck5hbWUpLmdldE1hcmtlcnMoKSkge1xuICAgICAgICBjb25zdCBuZXdNYXJrZXIgPSB0aGlzLm1hcmtSYW5nZShsYXllck5hbWUsIG9yaWdpbmFsTWFya2VyLmdldFJhbmdlKCksIG9yaWdpbmFsTWFya2VyLmdldFByb3BlcnRpZXMoKSk7XG4gICAgICAgIG1hcmtlck1hcC5zZXQob3JpZ2luYWxNYXJrZXIsIG5ld01hcmtlcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXJrZXJNYXA7XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpbnNwZWN0KG9wdHMgPSB7fSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGxheWVyTmFtZXM6IExBWUVSX05BTUVTLFxuICAgICAgLi4ub3B0cyxcbiAgICB9O1xuXG4gICAgbGV0IGluc3BlY3RTdHJpbmcgPSAnJztcblxuICAgIGNvbnN0IGluY3JlYXNpbmdNYXJrZXJzID0gW107XG4gICAgZm9yIChjb25zdCBsYXllck5hbWUgb2Ygb3B0aW9ucy5sYXllck5hbWVzKSB7XG4gICAgICBmb3IgKGNvbnN0IG1hcmtlciBvZiB0aGlzLmZpbmRNYXJrZXJzKGxheWVyTmFtZSwge30pKSB7XG4gICAgICAgIGluY3JlYXNpbmdNYXJrZXJzLnB1c2goe2xheWVyTmFtZSwgcG9pbnQ6IG1hcmtlci5nZXRSYW5nZSgpLnN0YXJ0LCBzdGFydDogdHJ1ZSwgaWQ6IG1hcmtlci5pZH0pO1xuICAgICAgICBpbmNyZWFzaW5nTWFya2Vycy5wdXNoKHtsYXllck5hbWUsIHBvaW50OiBtYXJrZXIuZ2V0UmFuZ2UoKS5lbmQsIGVuZDogdHJ1ZSwgaWQ6IG1hcmtlci5pZH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpbmNyZWFzaW5nTWFya2Vycy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICBjb25zdCBjbXAgPSBhLnBvaW50LmNvbXBhcmUoYi5wb2ludCk7XG4gICAgICBpZiAoY21wICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBjbXA7XG4gICAgICB9IGVsc2UgaWYgKGEuc3RhcnQgJiYgYi5zdGFydCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0gZWxzZSBpZiAoYS5zdGFydCAmJiAhYi5zdGFydCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9IGVsc2UgaWYgKCFhLnN0YXJ0ICYmIGIuc3RhcnQpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGxldCBpbnNwZWN0UG9pbnQgPSBQb2ludC5mcm9tT2JqZWN0KFswLCAwXSk7XG4gICAgZm9yIChjb25zdCBtYXJrZXIgb2YgaW5jcmVhc2luZ01hcmtlcnMpIHtcbiAgICAgIGlmICghbWFya2VyLnBvaW50LmlzRXF1YWwoaW5zcGVjdFBvaW50KSkge1xuICAgICAgICBpbnNwZWN0U3RyaW5nICs9IGluc3BlY3QodGhpcy5idWZmZXIuZ2V0VGV4dEluUmFuZ2UoW2luc3BlY3RQb2ludCwgbWFya2VyLnBvaW50XSkpICsgJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXJrZXIuc3RhcnQpIHtcbiAgICAgICAgaW5zcGVjdFN0cmluZyArPSBgICBzdGFydCAke21hcmtlci5sYXllck5hbWV9QCR7bWFya2VyLmlkfVxcbmA7XG4gICAgICB9IGVsc2UgaWYgKG1hcmtlci5lbmQpIHtcbiAgICAgICAgaW5zcGVjdFN0cmluZyArPSBgICBlbmQgJHttYXJrZXIubGF5ZXJOYW1lfUAke21hcmtlci5pZH1cXG5gO1xuICAgICAgfVxuXG4gICAgICBpbnNwZWN0UG9pbnQgPSBtYXJrZXIucG9pbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3BlY3RTdHJpbmc7XG4gIH1cbn1cblxuY2xhc3MgSW5zZXJ0ZXIge1xuICBjb25zdHJ1Y3RvcihwYXRjaEJ1ZmZlciwgaW5zZXJ0aW9uUG9pbnQpIHtcbiAgICBjb25zdCBjbGlwcGVkID0gcGF0Y2hCdWZmZXIuZ2V0QnVmZmVyKCkuY2xpcFBvc2l0aW9uKGluc2VydGlvblBvaW50KTtcblxuICAgIHRoaXMucGF0Y2hCdWZmZXIgPSBwYXRjaEJ1ZmZlcjtcbiAgICB0aGlzLnN0YXJ0UG9pbnQgPSBjbGlwcGVkLmNvcHkoKTtcbiAgICB0aGlzLmluc2VydGlvblBvaW50ID0gY2xpcHBlZC5jb3B5KCk7XG4gICAgdGhpcy5tYXJrZXJCbHVlcHJpbnRzID0gW107XG4gICAgdGhpcy5tYXJrZXJNYXBDYWxsYmFja3MgPSBbXTtcblxuICAgIHRoaXMubWFya2Vyc0JlZm9yZSA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLm1hcmtlcnNBZnRlciA9IG5ldyBTZXQoKTtcbiAgfVxuXG4gIGtlZXBCZWZvcmUobWFya2Vycykge1xuICAgIGZvciAoY29uc3QgbWFya2VyIG9mIG1hcmtlcnMpIHtcbiAgICAgIGlmIChtYXJrZXIuZ2V0UmFuZ2UoKS5lbmQuaXNFcXVhbCh0aGlzLnN0YXJ0UG9pbnQpKSB7XG4gICAgICAgIHRoaXMubWFya2Vyc0JlZm9yZS5hZGQobWFya2VyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBrZWVwQWZ0ZXIobWFya2Vycykge1xuICAgIGZvciAoY29uc3QgbWFya2VyIG9mIG1hcmtlcnMpIHtcbiAgICAgIGlmIChtYXJrZXIuZ2V0UmFuZ2UoKS5zdGFydC5pc0VxdWFsKHRoaXMuc3RhcnRQb2ludCkpIHtcbiAgICAgICAgdGhpcy5tYXJrZXJzQWZ0ZXIuYWRkKG1hcmtlcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbWFya1doaWxlKGxheWVyTmFtZSwgYmxvY2ssIG1hcmtlck9wdHMpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuaW5zZXJ0aW9uUG9pbnQuY29weSgpO1xuICAgIGJsb2NrKCk7XG4gICAgY29uc3QgZW5kID0gdGhpcy5pbnNlcnRpb25Qb2ludC5jb3B5KCk7XG4gICAgdGhpcy5tYXJrZXJCbHVlcHJpbnRzLnB1c2goe2xheWVyTmFtZSwgcmFuZ2U6IG5ldyBSYW5nZShzdGFydCwgZW5kKSwgbWFya2VyT3B0c30pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgaW5zZXJ0KHRleHQpIHtcbiAgICBjb25zdCBpbnNlcnRlZFJhbmdlID0gdGhpcy5wYXRjaEJ1ZmZlci5nZXRCdWZmZXIoKS5pbnNlcnQodGhpcy5pbnNlcnRpb25Qb2ludCwgdGV4dCk7XG4gICAgdGhpcy5pbnNlcnRpb25Qb2ludCA9IGluc2VydGVkUmFuZ2UuZW5kO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgaW5zZXJ0TWFya2VkKHRleHQsIGxheWVyTmFtZSwgbWFya2VyT3B0cykge1xuICAgIHJldHVybiB0aGlzLm1hcmtXaGlsZShsYXllck5hbWUsICgpID0+IHRoaXMuaW5zZXJ0KHRleHQpLCBtYXJrZXJPcHRzKTtcbiAgfVxuXG4gIGluc2VydFBhdGNoQnVmZmVyKHN1YlBhdGNoQnVmZmVyLCBvcHRzKSB7XG4gICAgY29uc3QgYmFzZU9mZnNldCA9IHRoaXMuaW5zZXJ0aW9uUG9pbnQuY29weSgpO1xuICAgIHRoaXMuaW5zZXJ0KHN1YlBhdGNoQnVmZmVyLmdldEJ1ZmZlcigpLmdldFRleHQoKSk7XG5cbiAgICBjb25zdCBzdWJNYXJrZXJNYXAgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCBsYXllck5hbWUgb2YgTEFZRVJfTkFNRVMpIHtcbiAgICAgIGZvciAoY29uc3Qgb2xkTWFya2VyIG9mIHN1YlBhdGNoQnVmZmVyLmZpbmRNYXJrZXJzKGxheWVyTmFtZSwge30pKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0T2Zmc2V0ID0gb2xkTWFya2VyLmdldFJhbmdlKCkuc3RhcnQucm93ID09PSAwID8gYmFzZU9mZnNldCA6IFtiYXNlT2Zmc2V0LnJvdywgMF07XG4gICAgICAgIGNvbnN0IGVuZE9mZnNldCA9IG9sZE1hcmtlci5nZXRSYW5nZSgpLmVuZC5yb3cgPT09IDAgPyBiYXNlT2Zmc2V0IDogW2Jhc2VPZmZzZXQucm93LCAwXTtcblxuICAgICAgICBjb25zdCByYW5nZSA9IG9sZE1hcmtlci5nZXRSYW5nZSgpLnRyYW5zbGF0ZShzdGFydE9mZnNldCwgZW5kT2Zmc2V0KTtcbiAgICAgICAgY29uc3QgbWFya2VyT3B0cyA9IHtcbiAgICAgICAgICAuLi5vbGRNYXJrZXIuZ2V0UHJvcGVydGllcygpLFxuICAgICAgICAgIGNhbGxiYWNrOiBuZXdNYXJrZXIgPT4geyBzdWJNYXJrZXJNYXAuc2V0KG9sZE1hcmtlciwgbmV3TWFya2VyKTsgfSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tYXJrZXJCbHVlcHJpbnRzLnB1c2goe2xheWVyTmFtZSwgcmFuZ2UsIG1hcmtlck9wdHN9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm1hcmtlck1hcENhbGxiYWNrcy5wdXNoKHttYXJrZXJNYXA6IHN1Yk1hcmtlck1hcCwgY2FsbGJhY2s6IG9wdHMuY2FsbGJhY2t9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYXBwbHkoKSB7XG4gICAgZm9yIChjb25zdCB7bGF5ZXJOYW1lLCByYW5nZSwgbWFya2VyT3B0c30gb2YgdGhpcy5tYXJrZXJCbHVlcHJpbnRzKSB7XG4gICAgICBjb25zdCBjYWxsYmFjayA9IG1hcmtlck9wdHMuY2FsbGJhY2s7XG4gICAgICBkZWxldGUgbWFya2VyT3B0cy5jYWxsYmFjaztcblxuICAgICAgY29uc3QgbWFya2VyID0gdGhpcy5wYXRjaEJ1ZmZlci5tYXJrUmFuZ2UobGF5ZXJOYW1lLCByYW5nZSwgbWFya2VyT3B0cyk7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2sobWFya2VyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHttYXJrZXJNYXAsIGNhbGxiYWNrfSBvZiB0aGlzLm1hcmtlck1hcENhbGxiYWNrcykge1xuICAgICAgY2FsbGJhY2sobWFya2VyTWFwKTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGJlZm9yZU1hcmtlciBvZiB0aGlzLm1hcmtlcnNCZWZvcmUpIHtcbiAgICAgIGNvbnN0IGlzRW1wdHkgPSBiZWZvcmVNYXJrZXIuZ2V0UmFuZ2UoKS5pc0VtcHR5KCk7XG5cbiAgICAgIGlmICghYmVmb3JlTWFya2VyLmlzUmV2ZXJzZWQoKSkge1xuICAgICAgICBiZWZvcmVNYXJrZXIuc2V0SGVhZFBvc2l0aW9uKHRoaXMuc3RhcnRQb2ludCk7XG4gICAgICAgIGlmIChpc0VtcHR5KSB7XG4gICAgICAgICAgYmVmb3JlTWFya2VyLnNldFRhaWxQb3NpdGlvbih0aGlzLnN0YXJ0UG9pbnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiZWZvcmVNYXJrZXIuc2V0VGFpbFBvc2l0aW9uKHRoaXMuc3RhcnRQb2ludCk7XG4gICAgICAgIGlmIChpc0VtcHR5KSB7XG4gICAgICAgICAgYmVmb3JlTWFya2VyLnNldEhlYWRQb3NpdGlvbih0aGlzLnN0YXJ0UG9pbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBhZnRlck1hcmtlciBvZiB0aGlzLm1hcmtlcnNBZnRlcikge1xuICAgICAgY29uc3QgaXNFbXB0eSA9IGFmdGVyTWFya2VyLmdldFJhbmdlKCkuaXNFbXB0eSgpO1xuXG4gICAgICBpZiAoIWFmdGVyTWFya2VyLmlzUmV2ZXJzZWQoKSkge1xuICAgICAgICBhZnRlck1hcmtlci5zZXRUYWlsUG9zaXRpb24odGhpcy5pbnNlcnRpb25Qb2ludCk7XG4gICAgICAgIGlmIChpc0VtcHR5KSB7XG4gICAgICAgICAgYWZ0ZXJNYXJrZXIuc2V0SGVhZFBvc2l0aW9uKHRoaXMuaW5zZXJ0aW9uUG9pbnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZnRlck1hcmtlci5zZXRIZWFkUG9zaXRpb24odGhpcy5pbnNlcnRpb25Qb2ludCk7XG4gICAgICAgIGlmIChpc0VtcHR5KSB7XG4gICAgICAgICAgYWZ0ZXJNYXJrZXIuc2V0VGFpbFBvc2l0aW9uKHRoaXMuaW5zZXJ0aW9uUG9pbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=