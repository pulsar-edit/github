"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _url = require("url");

var _moment = _interopRequireDefault(require("moment"));

var _buildStatus = require("./build-status");

var _helpers = require("../helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Issueish {
  constructor(data) {
    const author = data.author || _helpers.GHOST_USER;
    this.number = data.number;
    this.title = data.title;
    this.url = new _url.URL(data.url);
    this.authorLogin = author.login;
    this.authorAvatarURL = new _url.URL(author.avatarUrl);
    this.createdAt = (0, _moment.default)(data.createdAt, _moment.default.ISO_8601);
    this.headRefName = data.headRefName;
    this.headRepositoryID = data.repository.id;
    this.latestCommit = null;
    this.statusContexts = [];
    this.checkRuns = [];

    if (data.commits.nodes.length > 0) {
      this.latestCommit = data.commits.nodes[0].commit;
    }

    if (this.latestCommit && this.latestCommit.status) {
      this.statusContexts = this.latestCommit.status.contexts;
    }
  }

  getNumber() {
    return this.number;
  }

  getTitle() {
    return this.title;
  }

  getGitHubURL() {
    return this.url.toString();
  }

  getAuthorLogin() {
    return this.authorLogin;
  }

  getAuthorAvatarURL(size = 32) {
    const u = new _url.URL(this.authorAvatarURL.toString());
    u.searchParams.set('s', size);
    return u.toString();
  }

  getCreatedAt() {
    return this.createdAt;
  }

  getHeadRefName() {
    return this.headRefName;
  }

  getHeadRepositoryID() {
    return this.headRepositoryID;
  }

  getLatestCommit() {
    return this.latestCommit;
  }

  setCheckRuns(runsBySuite) {
    this.checkRuns = [];

    for (const [, runs] of runsBySuite) {
      for (const checkRun of runs) {
        this.checkRuns.push(checkRun);
      }
    }
  }

  getStatusCounts() {
    const buildStatuses = [];

    for (const context of this.statusContexts) {
      buildStatuses.push((0, _buildStatus.buildStatusFromStatusContext)(context));
    }

    for (const checkRun of this.checkRuns) {
      buildStatuses.push((0, _buildStatus.buildStatusFromCheckResult)(checkRun));
    }

    const counts = {
      pending: 0,
      failure: 0,
      success: 0,
      neutral: 0
    };

    for (const {
      classSuffix
    } of buildStatuses) {
      counts[classSuffix]++;
    }

    return counts;
  }

}

exports.default = Issueish;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9tb2RlbHMvaXNzdWVpc2guanMiXSwibmFtZXMiOlsiSXNzdWVpc2giLCJjb25zdHJ1Y3RvciIsImRhdGEiLCJhdXRob3IiLCJHSE9TVF9VU0VSIiwibnVtYmVyIiwidGl0bGUiLCJ1cmwiLCJVUkwiLCJhdXRob3JMb2dpbiIsImxvZ2luIiwiYXV0aG9yQXZhdGFyVVJMIiwiYXZhdGFyVXJsIiwiY3JlYXRlZEF0IiwibW9tZW50IiwiSVNPXzg2MDEiLCJoZWFkUmVmTmFtZSIsImhlYWRSZXBvc2l0b3J5SUQiLCJyZXBvc2l0b3J5IiwiaWQiLCJsYXRlc3RDb21taXQiLCJzdGF0dXNDb250ZXh0cyIsImNoZWNrUnVucyIsImNvbW1pdHMiLCJub2RlcyIsImxlbmd0aCIsImNvbW1pdCIsInN0YXR1cyIsImNvbnRleHRzIiwiZ2V0TnVtYmVyIiwiZ2V0VGl0bGUiLCJnZXRHaXRIdWJVUkwiLCJ0b1N0cmluZyIsImdldEF1dGhvckxvZ2luIiwiZ2V0QXV0aG9yQXZhdGFyVVJMIiwic2l6ZSIsInUiLCJzZWFyY2hQYXJhbXMiLCJzZXQiLCJnZXRDcmVhdGVkQXQiLCJnZXRIZWFkUmVmTmFtZSIsImdldEhlYWRSZXBvc2l0b3J5SUQiLCJnZXRMYXRlc3RDb21taXQiLCJzZXRDaGVja1J1bnMiLCJydW5zQnlTdWl0ZSIsInJ1bnMiLCJjaGVja1J1biIsInB1c2giLCJnZXRTdGF0dXNDb3VudHMiLCJidWlsZFN0YXR1c2VzIiwiY29udGV4dCIsImNvdW50cyIsInBlbmRpbmciLCJmYWlsdXJlIiwic3VjY2VzcyIsIm5ldXRyYWwiLCJjbGFzc1N1ZmZpeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUlBOzs7O0FBRWUsTUFBTUEsUUFBTixDQUFlO0FBQzVCQyxFQUFBQSxXQUFXLENBQUNDLElBQUQsRUFBTztBQUNoQixVQUFNQyxNQUFNLEdBQUdELElBQUksQ0FBQ0MsTUFBTCxJQUFlQyxtQkFBOUI7QUFFQSxTQUFLQyxN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QUFYLElBQXVCLEtBQUt4QixTQUE1QixFQUF1QztBQUNyQzJCLE1BQUFBLGFBQWEsQ0FBQ0YsSUFBZCxDQUFtQiw2Q0FBMkJELFFBQTNCLENBQW5CO0FBQ0Q7O0FBRUQsVUFBTUssTUFBTSxHQUFHO0FBQ2JDLE1BQUFBLE9BQU8sRUFBRSxDQURJO0FBRWJDLE1BQUFBLE9BQU8sRUFBRSxDQUZJO0FBR2JDLE1BQUFBLE9BQU8sRUFBRSxDQUhJO0FBSWJDLE1BQUFBLE9BQU8sRUFBRTtBQUpJLEtBQWY7O0FBT0EsU0FBSyxNQUFNO0FBQUNDLE1BQUFBO0FBQUQsS0FBWCxJQUE0QlAsYUFBNUIsRUFBMkM7QUFDekNFLE1BQUFBLE1BQU0sQ0FBQ0ssV0FBRCxDQUFOO0FBQ0Q7O0FBRUQsV0FBT0wsTUFBUDtBQUNEOztBQTdGMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1VSTH0gZnJvbSAndXJsJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuaW1wb3J0IHtcbiAgYnVpbGRTdGF0dXNGcm9tU3RhdHVzQ29udGV4dCxcbiAgYnVpbGRTdGF0dXNGcm9tQ2hlY2tSZXN1bHQsXG59IGZyb20gJy4vYnVpbGQtc3RhdHVzJztcbmltcG9ydCB7R0hPU1RfVVNFUn0gZnJvbSAnLi4vaGVscGVycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElzc3VlaXNoIHtcbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIGNvbnN0IGF1dGhvciA9IGRhdGEuYXV0aG9yIHx8IEdIT1NUX1VTRVI7XG5cbiAgICB0aGlzLm51bWJlciA9IGRhdGEubnVtYmVyO1xuICAgIHRoaXMudGl0bGUgPSBkYXRhLnRpdGxlO1xuICAgIHRoaXMudXJsID0gbmV3IFVSTChkYXRhLnVybCk7XG4gICAgdGhpcy5hdXRob3JMb2dpbiA9IGF1dGhvci5sb2dpbjtcbiAgICB0aGlzLmF1dGhvckF2YXRhclVSTCA9IG5ldyBVUkwoYXV0aG9yLmF2YXRhclVybCk7XG4gICAgdGhpcy5jcmVhdGVkQXQgPSBtb21lbnQoZGF0YS5jcmVhdGVkQXQsIG1vbWVudC5JU09fODYwMSk7XG4gICAgdGhpcy5oZWFkUmVmTmFtZSA9IGRhdGEuaGVhZFJlZk5hbWU7XG4gICAgdGhpcy5oZWFkUmVwb3NpdG9yeUlEID0gZGF0YS5yZXBvc2l0b3J5LmlkO1xuICAgIHRoaXMubGF0ZXN0Q29tbWl0ID0gbnVsbDtcbiAgICB0aGlzLnN0YXR1c0NvbnRleHRzID0gW107XG4gICAgdGhpcy5jaGVja1J1bnMgPSBbXTtcblxuICAgIGlmIChkYXRhLmNvbW1pdHMubm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5sYXRlc3RDb21taXQgPSBkYXRhLmNvbW1pdHMubm9kZXNbMF0uY29tbWl0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxhdGVzdENvbW1pdCAmJiB0aGlzLmxhdGVzdENvbW1pdC5zdGF0dXMpIHtcbiAgICAgIHRoaXMuc3RhdHVzQ29udGV4dHMgPSB0aGlzLmxhdGVzdENvbW1pdC5zdGF0dXMuY29udGV4dHM7XG4gICAgfVxuICB9XG5cbiAgZ2V0TnVtYmVyKCkge1xuICAgIHJldHVybiB0aGlzLm51bWJlcjtcbiAgfVxuXG4gIGdldFRpdGxlKCkge1xuICAgIHJldHVybiB0aGlzLnRpdGxlO1xuICB9XG5cbiAgZ2V0R2l0SHViVVJMKCkge1xuICAgIHJldHVybiB0aGlzLnVybC50b1N0cmluZygpO1xuICB9XG5cbiAgZ2V0QXV0aG9yTG9naW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXV0aG9yTG9naW47XG4gIH1cblxuICBnZXRBdXRob3JBdmF0YXJVUkwoc2l6ZSA9IDMyKSB7XG4gICAgY29uc3QgdSA9IG5ldyBVUkwodGhpcy5hdXRob3JBdmF0YXJVUkwudG9TdHJpbmcoKSk7XG4gICAgdS5zZWFyY2hQYXJhbXMuc2V0KCdzJywgc2l6ZSk7XG4gICAgcmV0dXJuIHUudG9TdHJpbmcoKTtcbiAgfVxuXG4gIGdldENyZWF0ZWRBdCgpIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVkQXQ7XG4gIH1cblxuICBnZXRIZWFkUmVmTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5oZWFkUmVmTmFtZTtcbiAgfVxuXG4gIGdldEhlYWRSZXBvc2l0b3J5SUQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVhZFJlcG9zaXRvcnlJRDtcbiAgfVxuXG4gIGdldExhdGVzdENvbW1pdCgpIHtcbiAgICByZXR1cm4gdGhpcy5sYXRlc3RDb21taXQ7XG4gIH1cblxuICBzZXRDaGVja1J1bnMocnVuc0J5U3VpdGUpIHtcbiAgICB0aGlzLmNoZWNrUnVucyA9IFtdO1xuICAgIGZvciAoY29uc3QgWywgcnVuc10gb2YgcnVuc0J5U3VpdGUpIHtcbiAgICAgIGZvciAoY29uc3QgY2hlY2tSdW4gb2YgcnVucykge1xuICAgICAgICB0aGlzLmNoZWNrUnVucy5wdXNoKGNoZWNrUnVuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRTdGF0dXNDb3VudHMoKSB7XG4gICAgY29uc3QgYnVpbGRTdGF0dXNlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgY29udGV4dCBvZiB0aGlzLnN0YXR1c0NvbnRleHRzKSB7XG4gICAgICBidWlsZFN0YXR1c2VzLnB1c2goYnVpbGRTdGF0dXNGcm9tU3RhdHVzQ29udGV4dChjb250ZXh0KSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgY2hlY2tSdW4gb2YgdGhpcy5jaGVja1J1bnMpIHtcbiAgICAgIGJ1aWxkU3RhdHVzZXMucHVzaChidWlsZFN0YXR1c0Zyb21DaGVja1Jlc3VsdChjaGVja1J1bikpO1xuICAgIH1cblxuICAgIGNvbnN0IGNvdW50cyA9IHtcbiAgICAgIHBlbmRpbmc6IDAsXG4gICAgICBmYWlsdXJlOiAwLFxuICAgICAgc3VjY2VzczogMCxcbiAgICAgIG5ldXRyYWw6IDAsXG4gICAgfTtcblxuICAgIGZvciAoY29uc3Qge2NsYXNzU3VmZml4fSBvZiBidWlsZFN0YXR1c2VzKSB7XG4gICAgICBjb3VudHNbY2xhc3NTdWZmaXhdKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvdW50cztcbiAgfVxufVxuIl19