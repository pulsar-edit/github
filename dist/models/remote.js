"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nullRemote = exports.default = void 0;

var _endpoint = require("./endpoint");

class Remote {
  constructor(name, url) {
    this.name = name;
    this.url = url;
    const {
      isGithubRepo,
      domain,
      protocol,
      owner,
      repo
    } = githubInfoFromRemote(url);
    this.githubRepo = isGithubRepo;
    this.domain = domain;
    this.protocol = protocol;
    this.owner = owner;
    this.repo = repo;
  }

  getName() {
    return this.name;
  }

  getUrl() {
    return this.url;
  }

  isGithubRepo() {
    return this.githubRepo;
  }

  getProtocol() {
    return this.protocol;
  }

  getDomain() {
    return this.domain;
  }

  getOwner() {
    return this.owner;
  }

  getRepo() {
    return this.repo;
  }

  getNameOr() {
    return this.getName();
  }

  getSlug() {
    if (this.owner === null || this.repo === null) {
      return null;
    }

    return `${this.owner}/${this.repo}`;
  }

  getEndpoint() {
    return this.domain === null ? null : (0, _endpoint.getEndpoint)(this.domain);
  }

  getEndpointOrDotcom() {
    return this.getEndpoint() || _endpoint.DOTCOM;
  }

  isPresent() {
    return true;
  }

}

exports.default = Remote;

function githubInfoFromRemote(remoteUrl) {
  if (!remoteUrl) {
    return {
      isGithubRepo: false,
      domain: null,
      owner: null,
      repo: null
    };
  } //             proto         login   domain           owner    repo


  const regex = /(?:(.+):\/\/)?(?:.+@)?(github\.com)[:/]\/?([^/]+)\/(.+)/;
  const match = remoteUrl.match(regex);

  if (match) {
    return {
      isGithubRepo: true,
      protocol: match[1] || 'ssh',
      domain: match[2],
      owner: match[3],
      repo: match[4].replace(/\.git$/, '')
    };
  } else {
    return {
      isGithubRepo: false,
      protocol: null,
      domain: null,
      owner: null,
      repo: null
    };
  }
}

const nullRemote = {
  getName() {
    return '';
  },

  getUrl() {
    return '';
  },

  isGithubRepo() {
    return false;
  },

  getDomain() {
    return null;
  },

  getProtocol() {
    return null;
  },

  getOwner() {
    return null;
  },

  getRepo() {
    return null;
  },

  getNameOr(fallback) {
    return fallback;
  },

  getSlug() {
    return null;
  },

  getEndpoint() {
    return null;
  },

  getEndpointOrDotcom() {
    return _endpoint.DOTCOM;
  },

  isPresent() {
    return false;
  }

};
exports.nullRemote = nullRemote;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9tb2RlbHMvcmVtb3RlLmpzIl0sIm5hbWVzIjpbIlJlbW90ZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsInVybCIsImlzR2l0aHViUmVwbyIsImRvbWFpbiIsInByb3RvY29sIiwib3duZXIiLCJyZXBvIiwiZ2l0aHViSW5mb0Zyb21SZW1vdGUiLCJnaXRodWJSZXBvIiwiZ2V0TmFtZSIsImdldFVybCIsImdldFByb3RvY29sIiwiZ2V0RG9tYWluIiwiZ2V0T3duZXIiLCJnZXRSZXBvIiwiZ2V0TmFtZU9yIiwiZ2V0U2x1ZyIsImdldEVuZHBvaW50IiwiZ2V0RW5kcG9pbnRPckRvdGNvbSIsIkRPVENPTSIsImlzUHJlc2VudCIsInJlbW90ZVVybCIsInJlZ2V4IiwibWF0Y2giLCJyZXBsYWNlIiwibnVsbFJlbW90ZSIsImZhbGxiYWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRWUsTUFBTUEsTUFBTixDQUFhO0FBQzFCQyxFQUFBQSxXQUFXLENBQUNDLElBQUQsRUFBT0MsR0FBUCxFQUFZO0FBQ3JCLFNBQUtELElBQUwsR0FBWUEsSUFBWjtBQUNBLFNBQUtDLEdBQUwsR0FBV0EsR0FBWDtBQUVBLFVBQU07QUFBQ0MsTUFBQUEsWUFBRDtBQUFlQyxNQUFBQSxNQUFmO0FBQXVCQyxNQUFBQSxRQUF2QjtBQUFpQ0MsTUFBQUEsS0FBakM7QUFBd0NDLE1BQUFBO0FBQXhDLFFBQWdEQyxvQkFBb0IsQ0FBQ04sR0FBRCxDQUExRTtBQUNBLFNBQUtPLFVBQUwsR0FBa0JOLFlBQWxCO0FBQ0EsU0FBS0MsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLQyxLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDRDs7QUFFREcsRUFBQUEsT0FBTyxHQUFHO0FBQ1IsV0FBTyxLQUFLVCxJQUFaO0FBQ0Q7O0FBRURVLEVBQUFBLE1BQU0sR0FBRztBQUNQLFdBQU8sS0FB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QUFBLE9BQU8sR0FBRztBQUNSLFdBQU8sSUFBUDtBQUNELEdBM0J1Qjs7QUE2QnhCQyxFQUFBQSxTQUFTLENBQUNXLFFBQUQsRUFBVztBQUNsQixXQUFPQSxRQUFQO0FBQ0QsR0EvQnVCOztBQWlDeEJWLEVBQUFBLE9BQU8sR0FBRztBQUNSLFdBQU8sSUFBUDtBQUNELEdBbkN1Qjs7QUFxQ3hCQyxFQUFBQSxXQUFXLEdBQUc7QUFDWixXQUFPLElBQVA7QUFDRCxHQXZDdUI7O0FBeUN4QkMsRUFBQUEsbUJBQW1CLEdBQUc7QUFDcEIsV0FBT0MsZ0JBQVA7QUFDRCxHQTNDdUI7O0FBNkN4QkMsRUFBQUEsU0FBUyxHQUFHO0FBQ1YsV0FBTyxLQUFQO0FBQ0Q7O0FBL0N1QixDQUFuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Z2V0RW5kcG9pbnQsIERPVENPTX0gZnJvbSAnLi9lbmRwb2ludCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbW90ZSB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIHVybCkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy51cmwgPSB1cmw7XG5cbiAgICBjb25zdCB7aXNHaXRodWJSZXBvLCBkb21haW4sIHByb3RvY29sLCBvd25lciwgcmVwb30gPSBnaXRodWJJbmZvRnJvbVJlbW90ZSh1cmwpO1xuICAgIHRoaXMuZ2l0aHViUmVwbyA9IGlzR2l0aHViUmVwbztcbiAgICB0aGlzLmRvbWFpbiA9IGRvbWFpbjtcbiAgICB0aGlzLnByb3RvY29sID0gcHJvdG9jb2w7XG4gICAgdGhpcy5vd25lciA9IG93bmVyO1xuICAgIHRoaXMucmVwbyA9IHJlcG87XG4gIH1cblxuICBnZXROYW1lKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWU7XG4gIH1cblxuICBnZXRVcmwoKSB7XG4gICAgcmV0dXJuIHRoaXMudXJsO1xuICB9XG5cbiAgaXNHaXRodWJSZXBvKCkge1xuICAgIHJldHVybiB0aGlzLmdpdGh1YlJlcG87XG4gIH1cblxuICBnZXRQcm90b2NvbCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm90b2NvbDtcbiAgfVxuXG4gIGdldERvbWFpbigpIHtcbiAgICByZXR1cm4gdGhpcy5kb21haW47XG4gIH1cblxuICBnZXRPd25lcigpIHtcbiAgICByZXR1cm4gdGhpcy5vd25lcjtcbiAgfVxuXG4gIGdldFJlcG8oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVwbztcbiAgfVxuXG4gIGdldE5hbWVPcigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROYW1lKCk7XG4gIH1cblxuICBnZXRTbHVnKCkge1xuICAgIGlmICh0aGlzLm93bmVyID09PSBudWxsIHx8IHRoaXMucmVwbyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGAke3RoaXMub3duZXJ9LyR7dGhpcy5yZXBvfWA7XG4gIH1cblxuICBnZXRFbmRwb2ludCgpIHtcbiAgICByZXR1cm4gdGhpcy5kb21haW4gPT09IG51bGwgPyBudWxsIDogZ2V0RW5kcG9pbnQodGhpcy5kb21haW4pO1xuICB9XG5cbiAgZ2V0RW5kcG9pbnRPckRvdGNvbSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRFbmRwb2ludCgpIHx8IERPVENPTTtcbiAgfVxuXG4gIGlzUHJlc2VudCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnaXRodWJJbmZvRnJvbVJlbW90ZShyZW1vdGVVcmwpIHtcbiAgaWYgKCFyZW1vdGVVcmwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNHaXRodWJSZXBvOiBmYWxzZSxcbiAgICAgIGRvbWFpbjogbnVsbCxcbiAgICAgIG93bmVyOiBudWxsLFxuICAgICAgcmVwbzogbnVsbCxcbiAgICB9O1xuICB9XG5cbiAgLy8gICAgICAgICAgICAgcHJvdG8gICAgICAgICBsb2dpbiAgIGRvbWFpbiAgICAgICAgICAgb3duZXIgICAgcmVwb1xuICBjb25zdCByZWdleCA9IC8oPzooLispOlxcL1xcLyk/KD86LitAKT8oZ2l0aHViXFwuY29tKVs6L11cXC8/KFteL10rKVxcLyguKykvO1xuICBjb25zdCBtYXRjaCA9IHJlbW90ZVVybC5tYXRjaChyZWdleCk7XG4gIGlmIChtYXRjaCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc0dpdGh1YlJlcG86IHRydWUsXG4gICAgICBwcm90b2NvbDogbWF0Y2hbMV0gfHwgJ3NzaCcsXG4gICAgICBkb21haW46IG1hdGNoWzJdLFxuICAgICAgb3duZXI6IG1hdGNoWzNdLFxuICAgICAgcmVwbzogbWF0Y2hbNF0ucmVwbGFjZSgvXFwuZ2l0JC8sICcnKSxcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICBpc0dpdGh1YlJlcG86IGZhbHNlLFxuICAgICAgcHJvdG9jb2w6IG51bGwsXG4gICAgICBkb21haW46IG51bGwsXG4gICAgICBvd25lcjogbnVsbCxcbiAgICAgIHJlcG86IG51bGwsXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgbnVsbFJlbW90ZSA9IHtcbiAgZ2V0TmFtZSgpIHtcbiAgICByZXR1cm4gJyc7XG4gIH0sXG5cbiAgZ2V0VXJsKCkge1xuICAgIHJldHVybiAnJztcbiAgfSxcblxuICBpc0dpdGh1YlJlcG8oKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGdldERvbWFpbigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICBnZXRQcm90b2NvbCgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICBnZXRPd25lcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICBnZXRSZXBvKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIGdldE5hbWVPcihmYWxsYmFjaykge1xuICAgIHJldHVybiBmYWxsYmFjaztcbiAgfSxcblxuICBnZXRTbHVnKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIGdldEVuZHBvaW50KCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIGdldEVuZHBvaW50T3JEb3Rjb20oKSB7XG4gICAgcmV0dXJuIERPVENPTTtcbiAgfSxcblxuICBpc1ByZXNlbnQoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxufTtcbiJdfQ==