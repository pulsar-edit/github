"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _remote = require("./remote");

var _helpers = require("../helpers");

class RemoteSet {
  constructor(iterable = []) {
    this.byName = new Map();
    this.byDotcomRepo = new Map();
    this.protocolCount = new Map();

    for (const remote of iterable) {
      this.add(remote);
    }
  }

  add(remote) {
    this.byName.set(remote.getName(), remote);

    if (remote.isGithubRepo()) {
      (0, _helpers.pushAtKey)(this.byDotcomRepo, remote.getSlug(), remote);
    }

    if (remote.getProtocol()) {
      const count = this.protocolCount.get(remote.getProtocol()) || 0;
      this.protocolCount.set(remote.getProtocol(), count + 1);
    }
  }

  isEmpty() {
    return this.byName.size === 0;
  }

  size() {
    return this.byName.size;
  }

  withName(name) {
    return this.byName.get(name) || _remote.nullRemote;
  }

  [Symbol.iterator]() {
    return this.byName.values();
  }

  filter(predicate) {
    return new this.constructor(Array.from(this).filter(predicate));
  }

  matchingGitHubRepository(owner, name) {
    return this.byDotcomRepo.get(`${owner}/${name}`) || [];
  }

  mostUsedProtocol(choices) {
    let best = choices[0];
    let bestCount = 0;

    for (const protocol of choices) {
      const count = this.protocolCount.get(protocol) || 0;

      if (count > bestCount) {
        bestCount = count;
        best = protocol;
      }
    }

    return best;
  }

}

exports.default = RemoteSet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9tb2RlbHMvcmVtb3RlLXNldC5qcyJdLCJuYW1lcyI6WyJSZW1vdGVTZXQiLCJjb25zdHJ1Y3RvciIsIml0ZXJhYmxlIiwiYnlOYW1lIiwiTWFwIiwiYnlEb3Rjb21SZXBvIiwicHJvdG9jb2xDb3VudCIsInJlbW90ZSIsImFkZCIsInNldCIsImdldE5hbWUiLCJpc0dpdGh1YlJlcG8iLCJnZXRTbHVnIiwiZ2V0UHJvdG9jb2wiLCJjb3VudCIsImdldCIsImlzRW1wdHkiLCJzaXplIiwid2l0aE5hbWUiLCJuYW1lIiwibnVsbFJlbW90ZSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwidmFsdWVzIiwiZmlsdGVyIiwicHJlZGljYXRlIiwiQXJyYXkiLCJmcm9tIiwibWF0Y2hpbmdHaXRIdWJSZXBvc2l0b3J5Iiwib3duZXIiLCJtb3N0VXNlZFByb3RvY29sIiwiY2hvaWNlcyIsImJlc3QiLCJiZXN0Q291bnQiLCJwcm90b2NvbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVlLE1BQU1BLFNBQU4sQ0FBZ0I7QUFDN0JDLEVBQUFBLFdBQVcsQ0FBQ0MsUUFBUSxHQUFHLEVBQVosRUFBZ0I7QUFDekIsU0FBS0MsTUFBTCxHQUFjLElBQUlDLEdBQUosRUFBZDtBQUNBLFNBQUtDLFlBQUwsR0FBb0IsSUFBSUQsR0FBSixFQUFwQjtBQUNBLFNBQUtFLGFBQUwsR0FBcUIsSUFBSUYsR0FBSixFQUFyQjs7QUFDQSxTQUFLLE1BQU1HLE1BQVgsSUFBcUJMLFFBQXJCLEVBQStCO0FBQzdCLFdBQUtNLEdBQUwsQ0FBU0QsTUFBVDtBQUNEO0FBQ0Y7O0FBRURDLEVBQUFBLEdBQUcsQ0FBQ0QsTUFBRCxFQUFTO0FBQ1YsU0FBS0osTUFBTCxDQUFZTSxHQUFaLENBQWdCRixNQUFNLENBQUNHLE9BQVAsRUFBaEIsRUFBa0NILE1BQWxDOztBQUNBLFFBQUlBLE1BQU0sQ0FBQ0ksWUFBUCxFQUFKLEVBQTJCO0FBQ3pCLDhCQUFVLEtBQUtOLFlBQWYsRUFBNkJFLE1BQU0sQ0FBQ0ssT0FBUCxFQUE3QixFQUErQ0wsTUFBL0M7QUFDRDs7QUFDRCxRQUFJQSxNQUFNLENBQUNNLFdBQVAsRUFBSixFQUEwQjtBQUN4QixZQUFNQyxLQUFLLEdBQUcsS0FBS1IsYUFBTCxDQUFtQlMsR0FBbkIsQ0FBdUJSLE1BQU0sQ0FBQ00sV0FBUCxFQUF2QixLQUFnRCxDQUE5RDtBQUNBLFdBQUtQLGFBQUwsQ0FBbUJHLEdBQW5CLENBQXVCRixNQUFNLENBQUNNLFdBQVAsRUFBdkIsRUFBNkNDLEtBQUssR0FBRyxDQUFyRDtBQUNEO0FBQ0Y7O0FBRURFLEVBQUFBLE9BQU8sR0FBRztBQUNSLFdBQU8sS0FBS2IsTUFBTCxDQUFZYyxJQUFaLEtBQXFCLENBQTVCO0FBQ0Q7O0FBRURBLEVBQUFBLElBQUksR0FBRztBQUNMLFdBQU8sS0FBS2QsTUFBTCxDQUFZYyxJQUFuQjtBQUNEOztBQUVEQyxFQUFBQSxRQUFRLENBQUNDLElBQUQsRUFBTztBQUNiLFdBQU8sS0FBS2hCLE1BQUwsQ0FBWVksR0FBWixDQUFnQkksSUFBaEIsS0FBeUJDLGtCQUFoQztBQUNEOztBQUVlLEdBQWZDLE1BQU0sQ0FBQ0MsUUFBUSxJQUFJO0FBQ2xCLFdBQU8sS0FBS25CLE1BQUwsQ0FBWW9CLE1BQVosRUFBUDtBQUNEOztBQUVEQyxFQUFBQSxNQUFNLENBQUNDLFNBQUQsRUFBWTtBQUNoQixXQUFPLElBQUksS0FBS3hCLFdBQVQsQ0FDTHlCLEtBQUssQ0FBQ0MsSUFBTixDQUFXLElBQVgsRUFBaUJILE1BQWpCLENBQXdCQyxTQUF4QixDQURLLENBQVA7QUFHRDs7QUFFREcsRUFBQUEsd0JBQXdCLENBQUNDLEtBQUQsRUFBUVYsSUFBUixFQUFjO0FBQ3BDLFdBQU8sS0FBS2QsWUFBTCxDQUFrQlUsR0FBbEIsQ0FBdUIsR0FBRWMsS0FBTSxJQUFHVixJQUFLLEVBQXZDLEtBQTZDLEVBQXBEO0FBQ0Q7O0FBRURXLEVBQUFBLGdCQUFnQixDQUFDQyxPQUFELEVBQVU7QUFDeEIsUUFBSUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsQ0FBRCxDQUFsQjtBQUNBLFFBQUlFLFNBQVMsR0FBRyxDQUFoQjs7QUFDQSxTQUFLLE1BQU1DLFFBQVgsSUFBdUJILE9BQXZCLEVBQWdDO0FBQzlCLFlBQU1qQixLQUFLLEdBQUcsS0FBS1IsYUFBTCxDQUFtQlMsR0FBbkIsQ0FBdUJtQixRQUF2QixLQUFvQyxDQUFsRDs7QUFDQSxVQUFJcEIsS0FBSyxHQUFHbUIsU0FBWixFQUF1QjtBQUNyQkEsUUFBQUEsU0FBUyxHQUFHbkIsS0FBWjtBQUNBa0IsUUFBQUEsSUFBSSxHQUFHRSxRQUFQO0FBQ0Q7QUFDRjs7QUFDRCxXQUFPRixJQUFQO0FBQ0Q7O0FBMUQ0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7bnVsbFJlbW90ZX0gZnJvbSAnLi9yZW1vdGUnO1xuaW1wb3J0IHtwdXNoQXRLZXl9IGZyb20gJy4uL2hlbHBlcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZW1vdGVTZXQge1xuICBjb25zdHJ1Y3RvcihpdGVyYWJsZSA9IFtdKSB7XG4gICAgdGhpcy5ieU5hbWUgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5ieURvdGNvbVJlcG8gPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5wcm90b2NvbENvdW50ID0gbmV3IE1hcCgpO1xuICAgIGZvciAoY29uc3QgcmVtb3RlIG9mIGl0ZXJhYmxlKSB7XG4gICAgICB0aGlzLmFkZChyZW1vdGUpO1xuICAgIH1cbiAgfVxuXG4gIGFkZChyZW1vdGUpIHtcbiAgICB0aGlzLmJ5TmFtZS5zZXQocmVtb3RlLmdldE5hbWUoKSwgcmVtb3RlKTtcbiAgICBpZiAocmVtb3RlLmlzR2l0aHViUmVwbygpKSB7XG4gICAgICBwdXNoQXRLZXkodGhpcy5ieURvdGNvbVJlcG8sIHJlbW90ZS5nZXRTbHVnKCksIHJlbW90ZSk7XG4gICAgfVxuICAgIGlmIChyZW1vdGUuZ2V0UHJvdG9jb2woKSkge1xuICAgICAgY29uc3QgY291bnQgPSB0aGlzLnByb3RvY29sQ291bnQuZ2V0KHJlbW90ZS5nZXRQcm90b2NvbCgpKSB8fCAwO1xuICAgICAgdGhpcy5wcm90b2NvbENvdW50LnNldChyZW1vdGUuZ2V0UHJvdG9jb2woKSwgY291bnQgKyAxKTtcbiAgICB9XG4gIH1cblxuICBpc0VtcHR5KCkge1xuICAgIHJldHVybiB0aGlzLmJ5TmFtZS5zaXplID09PSAwO1xuICB9XG5cbiAgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5ieU5hbWUuc2l6ZTtcbiAgfVxuXG4gIHdpdGhOYW1lKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ieU5hbWUuZ2V0KG5hbWUpIHx8IG51bGxSZW1vdGU7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gdGhpcy5ieU5hbWUudmFsdWVzKCk7XG4gIH1cblxuICBmaWx0ZXIocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKFxuICAgICAgQXJyYXkuZnJvbSh0aGlzKS5maWx0ZXIocHJlZGljYXRlKSxcbiAgICApO1xuICB9XG5cbiAgbWF0Y2hpbmdHaXRIdWJSZXBvc2l0b3J5KG93bmVyLCBuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuYnlEb3Rjb21SZXBvLmdldChgJHtvd25lcn0vJHtuYW1lfWApIHx8IFtdO1xuICB9XG5cbiAgbW9zdFVzZWRQcm90b2NvbChjaG9pY2VzKSB7XG4gICAgbGV0IGJlc3QgPSBjaG9pY2VzWzBdO1xuICAgIGxldCBiZXN0Q291bnQgPSAwO1xuICAgIGZvciAoY29uc3QgcHJvdG9jb2wgb2YgY2hvaWNlcykge1xuICAgICAgY29uc3QgY291bnQgPSB0aGlzLnByb3RvY29sQ291bnQuZ2V0KHByb3RvY29sKSB8fCAwO1xuICAgICAgaWYgKGNvdW50ID4gYmVzdENvdW50KSB7XG4gICAgICAgIGJlc3RDb3VudCA9IGNvdW50O1xuICAgICAgICBiZXN0ID0gcHJvdG9jb2w7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiZXN0O1xuICB9XG59XG4iXX0=