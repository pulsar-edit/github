"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChunkAdapter = exports.EditorAdapter = void 0;

/*
 * Input adapter to facilitate parsing conflicts from text loaded into an Editor.
 */
class EditorAdapter {
  constructor(editor, startRow) {
    this.editor = editor;
    this.currentRow = startRow;
  }

  getCurrentRow() {
    return this.currentRow;
  }

  getCurrentLine() {
    return this.editor.lineTextForBufferRow(this.currentRow);
  }

  advanceRow() {
    this.currentRow++;
  }

  isAtEnd() {
    return this.currentRow > this.editor.getLastBufferRow();
  }

}
/*
 * Input adapter for parsing conflicts from a chunk of text arriving from a ReadStream.
 */


exports.EditorAdapter = EditorAdapter;

class ChunkAdapter {
  constructor(chunk) {
    this.chunk = chunk;
    this.lineEndRx = /\r?\n/g;
    this.lineStartPosition = 0;
    this.eof = false;
    this.advanceRow();
  }

  advanceTo(pattern) {
    if (this.eof) {
      return false;
    }

    const rx = new RegExp(pattern.source, 'gm');
    rx.lastIndex = this.lineStartPosition;
    const match = rx.exec(this.chunk);

    if (match) {
      this.lineEndRx.lastIndex = match.index;
      return true;
    } else {
      return false;
    }
  }

  getCurrentRow() {
    return undefined;
  }

  getCurrentLine() {
    return this.currentLine;
  }

  advanceRow() {
    this.lineStartPosition = this.lineEndRx.lastIndex;

    if (this.lineEndRx.test(this.chunk)) {
      this.currentLine = this.chunk.slice(this.lineStartPosition, this.lineEndRx.lastIndex);
    } else {
      this.currentLine = this.chunk.slice(this.lineStartPosition);
      this.eof = true;
    }
  }

  isAtEnd() {
    return this.eof;
  }

  getLastPartialMarker() {
    const match = /[<|>=]{1,7} ?[^\r\n]*\r?$/.exec(this.chunk);
    return match ? match[0] : '';
  }

}

exports.ChunkAdapter = ChunkAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9tb2RlbHMvY29uZmxpY3RzL3BhcnNlci9hZGFwdGVyLmpzIl0sIm5hbWVzIjpbIkVkaXRvckFkYXB0ZXIiLCJjb25zdHJ1Y3RvciIsImVkaXRvciIsInN0YXJ0Um93IiwiY3VycmVudFJvdyIsImdldEN1cnJlbnRSb3ciLCJnZXRDdXJyZW50TGluZSIsImxpbmVUZXh0Rm9yQnVmZmVyUm93IiwiYWR2YW5jZVJvdyIsImlzQXRFbmQiLCJnZXRMYXN0QnVmZmVyUm93IiwiQ2h1bmtBZGFwdGVyIiwiY2h1bmsiLCJsaW5lRW5kUngiLCJsaW5lU3RhcnRQb3NpdGlvbiIsImVvZiIsImFkdmFuY2VUbyIsInBhdHRlcm4iLCJyeCIsIlJlZ0V4cCIsInNvdXJjZSIsImxhc3RJbmRleCIsIm1hdGNoIiwiZXhlYyIsImluZGV4IiwidW5kZWZpbmVkIiwiY3VycmVudExpbmUiLCJ0ZXN0Iiwic2xpY2UiLCJnZXRMYXN0UGFydGlhbE1hcmtlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNPLE1BQU1BLGFBQU4sQ0FBb0I7QUFDekJDLEVBQUFBLFdBQVcsQ0FBQ0MsTUFBRCxFQUFTQyxRQUFULEVBQW1CO0FBQzVCLFNBQUtELE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUtFLFVBQUwsR0FBa0JELFFBQWxCO0FBQ0Q7O0FBRURFLEVBQUFBLGFBQWEsR0FBRztBQUNkLFdBQU8sS0FBS0QsVUFBWjtBQUNEOztBQUVERSxFQUFBQSxjQUFjLEdBQUc7QUFDZixXQUFPLEtBQUtKLE1BQUwsQ0FBWUssb0JBQVosQ0FBaUMsS0FBS0gsVUFBdEMsQ0FBUDtBQUNEOztBQUVESSxFQUFBQSxVQUFVLEdBQUc7QUFDWCxTQUFLSixVQUFMO0FBQ0Q7O0FBRURLLEVBQUFBLE9BQU8sR0FBRztBQUNSLFdBQU8sS0FBS0wsVUFBTCxHQUFrQixLQUFLRixNQUFMLENBQVlRLGdCQUFaLEVBQXpCO0FBQ0Q7O0FBcEJ3QjtBQXVCM0I7QUFDQTtBQUNBOzs7OztBQUNPLE1BQU1DLFlBQU4sQ0FBbUI7QUFDeEJWLEVBQUFBLFdBQVcsQ0FBQ1csS0FBRCxFQUFRO0FBQ2pCLFNBQUtBLEtBQUwsR0FBYUEsS0FBYjtBQUVBLFNBQUtDLFNBQUwsR0FBaUIsUUFBakI7QUFFQSxTQUFLQyxpQkFBTCxHQUF5QixDQUF6QjtBQUNBLFNBQUtDLEdBQUwsR0FBVyxLQUFYO0FBQ0EsU0FBS1AsVUFBTDtBQUNEOztBQUVEUSxFQUFBQSxTQUFTLENBQUNDLE9BQUQsRUFBVTtBQUNqQixRQUFJLEtBQUtGLEdBQVQsRUFBYztBQUNaLGFBQU8sS0FBUDtBQUNEOztBQUVELFVBQU1HLEVBQUUsR0FBRyxJQUFJQyxNQUFKLENBQVdGLE9BQU8sQ0FBQ0csTUFBbkIsRUFBMkIsSUFBM0IsQ0FBWDtBQUNBRixJQUFBQSxFQUFFLENBQUNHLFNBQUgsR0FBZSxLQUFLUCxpQkFBcEI7QUFFQSxVQUFNUSxLQUFLLEdBQUdKLEVBQUUsQ0FBQ0ssSUFBSCxDQUFRLEtBQUtYLEtBQWIsQ0FBZDs7QUFDQSxRQUFJVSxLQUFKLEVBQVc7QUFDVCxXQUFLVCxTQUFMLENBQWVRLFNBQWYsR0FBMkJDLEtBQUssQ0FBQ0UsS0FBakM7QUFDQSxhQUFPLElBQVA7QUFDRCxLQUhELE1BR087QUFDTCxhQUFPLEtBQVA7QUFDRDtBQUNGOztBQUVEbkIsRUFBQUEsYUFBYSxHQUFHO0FBQ2QsV0FBT29CLFNBQVA7QUFDRDs7QUFFRG5CLEVBQUFBLGNBQWMsR0FBRztBQUNmLFdBQU8sS0FBS29CLFdBQVo7QUFDRDs7QUFFRGxCLEVBQUFBLFVBQVUsR0FBRztBQUNYLFNBQUtNLGlCQUFMLEdBQXlCLEtBQUtELFNBQUwsQ0FBZVEsU0FBeEM7O0FBQ0EsUUFBSSxLQUFLUixTQUFMLENBQWVjLElBQWYsQ0FBb0IsS0FBS2YsS0FBekIsQ0FBSixFQUFxQztBQUNuQyxXQUFLYyxXQUFMLEdBQW1CLEtBQUtkLEtBQUwsQ0FBV2dCLEtBQVgsQ0FBaUIsS0FBS2QsaUJBQXRCLEVBQXlDLEtBQUtELFNBQUwsQ0FBZVEsU0FBeEQsQ0FBbkI7QUFDRCxLQUZELE1BRU87QUFDTCxXQUFLSyxXQUFMLEdBQW1CLEtBQUtkLEtBQUwsQ0FBV2dCLEtBQVgsQ0FBaUIsS0FBS2QsaUJBQXRCLENBQW5CO0FBQ0EsV0FBS0MsR0FBTCxHQUFXLElBQVg7QUFDRDtBQUNGOztBQUVETixFQUFBQSxPQUFPLEdBQUc7QUFDUixXQUFPLEtBQUtNLEdBQVo7QUFDRDs7QUFFRGMsRUFBQUEsb0JBQW9CLEdBQUc7QUFDckIsVUFBTVAsS0FBSyxHQUFHLDRCQUE0QkMsSUFBNUIsQ0FBaUMsS0FBS1gsS0FBdEMsQ0FBZDtBQUNBLFdBQU9VLEtBQUssR0FBR0EsS0FBSyxDQUFDLENBQUQsQ0FBUixHQUFjLEVBQTFCO0FBQ0Q7O0FBckR1QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBJbnB1dCBhZGFwdGVyIHRvIGZhY2lsaXRhdGUgcGFyc2luZyBjb25mbGljdHMgZnJvbSB0ZXh0IGxvYWRlZCBpbnRvIGFuIEVkaXRvci5cbiAqL1xuZXhwb3J0IGNsYXNzIEVkaXRvckFkYXB0ZXIge1xuICBjb25zdHJ1Y3RvcihlZGl0b3IsIHN0YXJ0Um93KSB7XG4gICAgdGhpcy5lZGl0b3IgPSBlZGl0b3I7XG4gICAgdGhpcy5jdXJyZW50Um93ID0gc3RhcnRSb3c7XG4gIH1cblxuICBnZXRDdXJyZW50Um93KCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRSb3c7XG4gIH1cblxuICBnZXRDdXJyZW50TGluZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lZGl0b3IubGluZVRleHRGb3JCdWZmZXJSb3codGhpcy5jdXJyZW50Um93KTtcbiAgfVxuXG4gIGFkdmFuY2VSb3coKSB7XG4gICAgdGhpcy5jdXJyZW50Um93Kys7XG4gIH1cblxuICBpc0F0RW5kKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRSb3cgPiB0aGlzLmVkaXRvci5nZXRMYXN0QnVmZmVyUm93KCk7XG4gIH1cbn1cblxuLypcbiAqIElucHV0IGFkYXB0ZXIgZm9yIHBhcnNpbmcgY29uZmxpY3RzIGZyb20gYSBjaHVuayBvZiB0ZXh0IGFycml2aW5nIGZyb20gYSBSZWFkU3RyZWFtLlxuICovXG5leHBvcnQgY2xhc3MgQ2h1bmtBZGFwdGVyIHtcbiAgY29uc3RydWN0b3IoY2h1bmspIHtcbiAgICB0aGlzLmNodW5rID0gY2h1bms7XG5cbiAgICB0aGlzLmxpbmVFbmRSeCA9IC9cXHI/XFxuL2c7XG5cbiAgICB0aGlzLmxpbmVTdGFydFBvc2l0aW9uID0gMDtcbiAgICB0aGlzLmVvZiA9IGZhbHNlO1xuICAgIHRoaXMuYWR2YW5jZVJvdygpO1xuICB9XG5cbiAgYWR2YW5jZVRvKHBhdHRlcm4pIHtcbiAgICBpZiAodGhpcy5lb2YpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCByeCA9IG5ldyBSZWdFeHAocGF0dGVybi5zb3VyY2UsICdnbScpO1xuICAgIHJ4Lmxhc3RJbmRleCA9IHRoaXMubGluZVN0YXJ0UG9zaXRpb247XG5cbiAgICBjb25zdCBtYXRjaCA9IHJ4LmV4ZWModGhpcy5jaHVuayk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICB0aGlzLmxpbmVFbmRSeC5sYXN0SW5kZXggPSBtYXRjaC5pbmRleDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZ2V0Q3VycmVudFJvdygpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZ2V0Q3VycmVudExpbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudExpbmU7XG4gIH1cblxuICBhZHZhbmNlUm93KCkge1xuICAgIHRoaXMubGluZVN0YXJ0UG9zaXRpb24gPSB0aGlzLmxpbmVFbmRSeC5sYXN0SW5kZXg7XG4gICAgaWYgKHRoaXMubGluZUVuZFJ4LnRlc3QodGhpcy5jaHVuaykpIHtcbiAgICAgIHRoaXMuY3VycmVudExpbmUgPSB0aGlzLmNodW5rLnNsaWNlKHRoaXMubGluZVN0YXJ0UG9zaXRpb24sIHRoaXMubGluZUVuZFJ4Lmxhc3RJbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudExpbmUgPSB0aGlzLmNodW5rLnNsaWNlKHRoaXMubGluZVN0YXJ0UG9zaXRpb24pO1xuICAgICAgdGhpcy5lb2YgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlzQXRFbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW9mO1xuICB9XG5cbiAgZ2V0TGFzdFBhcnRpYWxNYXJrZXIoKSB7XG4gICAgY29uc3QgbWF0Y2ggPSAvWzx8Pj1dezEsN30gP1teXFxyXFxuXSpcXHI/JC8uZXhlYyh0aGlzLmNodW5rKTtcbiAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFswXSA6ICcnO1xuICB9XG59XG4iXX0=