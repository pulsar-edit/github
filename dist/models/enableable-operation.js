"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const DISABLEMENT = Symbol('disablement');
const ENABLED = Symbol('enabled');
const NO_REASON = Symbol('no-reason'); // Track an operation that may be either enabled or disabled with a message and a reason. EnableableOperation instances
// are immutable to aid passing them as React component props; call `.enable()` or `.disable()` to derive a new
// operation instance with the same callback.

class EnableableOperation {
  constructor(op, options = {}) {
    this.beforeOp = null;
    this.op = op;
    this.afterOp = null;
    this.disablement = options[DISABLEMENT] || ENABLED;
  }

  toggleState(component, stateKey) {
    this.beforeOp = () => {
      component.setState(prevState => {
        return !prevState[stateKey] ? {
          [stateKey]: true
        } : {};
      });
    };

    this.afterOp = () => {
      return new Promise(resolve => {
        component.setState(prevState => {
          return prevState[stateKey] ? {
            [stateKey]: false
          } : {};
        }, resolve);
      });
    };
  }

  isEnabled() {
    return this.disablement === ENABLED;
  }

  async run() {
    if (!this.isEnabled()) {
      throw new Error(this.disablement.message);
    }

    if (this.beforeOp) {
      this.beforeOp();
    }

    let result = undefined;

    try {
      result = await this.op();
    } finally {
      if (this.afterOp) {
        await this.afterOp();
      }
    }

    return result;
  }

  getMessage() {
    return this.disablement.message;
  }

  why() {
    return this.disablement.reason;
  }

  disable(reason = NO_REASON, message = 'disabled') {
    if (!this.isEnabled() && this.disablement.reason === reason && this.disablement.message === message) {
      return this;
    }

    return new this.constructor(this.op, {
      [DISABLEMENT]: {
        reason,
        message
      }
    });
  }

  enable() {
    if (this.isEnabled()) {
      return this;
    }

    return new this.constructor(this.op, {
      [DISABLEMENT]: ENABLED
    });
  }

}

exports.default = EnableableOperation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9tb2RlbHMvZW5hYmxlYWJsZS1vcGVyYXRpb24uanMiXSwibmFtZXMiOlsiRElTQUJMRU1FTlQiLCJTeW1ib2wiLCJFTkFCTEVEIiwiTk9fUkVBU09OIiwiRW5hYmxlYWJsZU9wZXJhdGlvbiIsImNvbnN0cnVjdG9yIiwib3AiLCJvcHRpb25zIiwiYmVmb3JlT3AiLCJhZnRlck9wIiwiZGlzYWJsZW1lbnQiLCJ0b2dnbGVTdGF0ZSIsImNvbXBvbmVudCIsInN0YXRlS2V5Iiwic2V0U3RhdGUiLCJwcmV2U3RhdGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsImlzRW5hYmxlZCIsInJ1biIsIkVycm9yIiwibWVzc2FnZSIsInJlc3VsdCIsInVuZGVmaW5lZCIsImdldE1lc3NhZ2UiLCJ3aHkiLCJyZWFzb24iLCJkaXNhYmxlIiwiZW5hYmxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNQSxXQUFXLEdBQUdDLE1BQU0sQ0FBQyxhQUFELENBQTFCO0FBQ0EsTUFBTUMsT0FBTyxHQUFHRCxNQUFNLENBQUMsU0FBRCxDQUF0QjtBQUNBLE1BQU1FLFNBQVMsR0FBR0YsTUFBTSxDQUFDLFdBQUQsQ0FBeEIsQyxDQUVBO0FBQ0E7QUFDQTs7QUFDZSxNQUFNRyxtQkFBTixDQUEwQjtBQUN2Q0MsRUFBQUEsV0FBVyxDQUFDQyxFQUFELEVBQUtDLE9BQU8sR0FBRyxFQUFmLEVBQW1CO0FBQzVCLFNBQUtDLFFBQUwsR0FBZ0IsSUFBaEI7QUFDQSxTQUFLRixFQUFMLEdBQVVBLEVBQVY7QUFDQSxTQUFLRyxPQUFMLEdBQWUsSUFBZjtBQUNBLFNBQUtDLFdBQUwsR0FBbUJILE9BQU8sQ0FBQ1AsV0FBRCxDQUFQLElBQXdCRSxPQUEzQztBQUNEOztBQUVEUyxFQUFBQSxXQUFXLENBQUNDLFNBQUQsRUFBWUMsUUFBWixFQUFzQjtBQUMvQixTQUFLTCxRQUFMLEdBQWdCLE1BQU07QUFDcEJJLE1BQUFBLFNBQVMsQ0FBQ0UsUUFBVixDQUFtQkMsU0FBUyxJQUFJO0FBQzlCLGVBQU8sQ0FBQ0EsU0FBUyxDQUFDRixRQUFELENBQVYsR0FBdUI7QUFBQyxXQUFDQSxRQUFELEdBQVk7QUFBYixTQUF2QixHQUE0QyxFQUFuRDtBQUNELE9BRkQ7QUFHRCxLQUpEOztBQU1BLFNBQUtKLE9BQUwsR0FBZSxNQUFNO0FBQ25CLGFBQU8sSUFBSU8sT0FBSixDQUFZQyxPQUFPLElBQUk7QUFDNUJMLFFBQUFBLFNBQVMsQ0FBQ0UsUUFBVixDQUFtQkMsU0FBUyxJQUFJO0FBQzlCLGlCQUFPQSxTQUFTLENBQUNGLFFBQUQsQ0FBVCxHQUFzQjtBQUFDLGFBQUNBLFFBQUQsR0FBWTtBQUFiLFdBQXRCLEdBQTRDLEVBQW5EO0FBQ0QsU0FGRCxFQUVHSSxPQUZIO0FBR0QsT0FKTSxDQUFQO0FBS0QsS0FORDtBQU9EOztBQUVEQyxFQUFBQSxTQUFTLEdBQUc7QUFDVixXQUFPLEtBQUtSLFdBQUwsS0FBcUJSLE9BQTVCO0FBQ0Q7O0FBRVEsUUFBSGlCLEdBQUcsR0FBRztBQUNWLFFBQUksQ0FBQyxLQUFLRCxTQUFMLEVBQUwsRUFBdUI7QUFDckIsWUFBTSxJQUFJRSxLQUFKLENBQVUsS0FBS1YsV0FBTCxDQUFpQlcsT0FBM0IsQ0FBTjtBQUNEOztBQUVELFFBQUksS0FBS2IsUUFBVCxFQUFtQjtBQUNqQixXQUFLQSxRQUFMO0FBQ0Q7O0FBQ0QsUUFBSWMsTUFBTSxHQUFHQyxTQUFiOztBQUNBLFFBQUk7QUFDRkQsTUFBQUEsTUFBTSxHQUFHLE1BQU0sS0FBS2hCLEVBQUwsRUFBZjtBQUNELEtBRkQsU0FFVTtBQUNSLFVBQUksS0FBS0csT0FBVCxFQUFrQjtBQUNoQixjQUFNLEtBQUtBLE9BQUwsRUFBTjtBQUNEO0FBQ0Y7O0FBQ0QsV0FBT2EsTUFBUDtBQUNEOztBQUVERSxFQUFBQSxVQUFVLEdBQUc7QUFDWCxXQUFPLEtBQUtkLFdBQUwsQ0FBaUJXLE9BQXhCO0FBQ0Q7O0FBRURJLEVBQUFBLEdBQUcsR0FBRztBQUNKLFdBQU8sS0FBS2YsV0FBTCxDQUFpQmdCLE1BQXhCO0FBQ0Q7O0FBRURDLEVBQUFBLE9BQU8sQ0FBQ0QsTUFBTSxHQUFHdkIsU0FBVixFQUFxQmtCLE9BQU8sR0FBRyxVQUEvQixFQUEyQztBQUNoRCxRQUFJLENBQUMsS0FBS0gsU0FBTCxFQUFELElBQXFCLEtBQUtSLFdBQUwsQ0FBaUJnQixNQUFqQixLQUE0QkEsTUFBakQsSUFBMkQsS0FBS2hCLFdBQUwsQ0FBaUJXLE9BQWpCLEtBQTZCQSxPQUE1RixFQUFxRztBQUNuRyxhQUFPLElBQVA7QUFDRDs7QUFFRCxXQUFPLElBQUksS0FBS2hCLFdBQVQsQ0FBcUIsS0FBS0MsRUFBMUIsRUFBOEI7QUFBQyxPQUFDTixXQUFELEdBQWU7QUFBQzBCLFFBQUFBLE1BQUQ7QUFBU0wsUUFBQUE7QUFBVDtBQUFoQixLQUE5QixDQUFQO0FBQ0Q7O0FBRURPLEVBQUFBLE1BQU0sR0FBRztBQUNQLFFBQUksS0FBS1YsU0FBTCxFQUFKLEVBQXNCO0FBQ3BCLGFBQU8sSUFBUDtBQUNEOztBQUVELFdBQU8sSUFBSSxLQUFLYixXQUFULENBQXFCLEtBQUtDLEVBQTFCLEVBQThCO0FBQUMsT0FBQ04sV0FBRCxHQUFlRTtBQUFoQixLQUE5QixDQUFQO0FBQ0Q7O0FBckVzQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IERJU0FCTEVNRU5UID0gU3ltYm9sKCdkaXNhYmxlbWVudCcpO1xuY29uc3QgRU5BQkxFRCA9IFN5bWJvbCgnZW5hYmxlZCcpO1xuY29uc3QgTk9fUkVBU09OID0gU3ltYm9sKCduby1yZWFzb24nKTtcblxuLy8gVHJhY2sgYW4gb3BlcmF0aW9uIHRoYXQgbWF5IGJlIGVpdGhlciBlbmFibGVkIG9yIGRpc2FibGVkIHdpdGggYSBtZXNzYWdlIGFuZCBhIHJlYXNvbi4gRW5hYmxlYWJsZU9wZXJhdGlvbiBpbnN0YW5jZXNcbi8vIGFyZSBpbW11dGFibGUgdG8gYWlkIHBhc3NpbmcgdGhlbSBhcyBSZWFjdCBjb21wb25lbnQgcHJvcHM7IGNhbGwgYC5lbmFibGUoKWAgb3IgYC5kaXNhYmxlKClgIHRvIGRlcml2ZSBhIG5ld1xuLy8gb3BlcmF0aW9uIGluc3RhbmNlIHdpdGggdGhlIHNhbWUgY2FsbGJhY2suXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbmFibGVhYmxlT3BlcmF0aW9uIHtcbiAgY29uc3RydWN0b3Iob3AsIG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuYmVmb3JlT3AgPSBudWxsO1xuICAgIHRoaXMub3AgPSBvcDtcbiAgICB0aGlzLmFmdGVyT3AgPSBudWxsO1xuICAgIHRoaXMuZGlzYWJsZW1lbnQgPSBvcHRpb25zW0RJU0FCTEVNRU5UXSB8fCBFTkFCTEVEO1xuICB9XG5cbiAgdG9nZ2xlU3RhdGUoY29tcG9uZW50LCBzdGF0ZUtleSkge1xuICAgIHRoaXMuYmVmb3JlT3AgPSAoKSA9PiB7XG4gICAgICBjb21wb25lbnQuc2V0U3RhdGUocHJldlN0YXRlID0+IHtcbiAgICAgICAgcmV0dXJuICFwcmV2U3RhdGVbc3RhdGVLZXldID8ge1tzdGF0ZUtleV06IHRydWV9IDoge307XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgdGhpcy5hZnRlck9wID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBjb21wb25lbnQuc2V0U3RhdGUocHJldlN0YXRlID0+IHtcbiAgICAgICAgICByZXR1cm4gcHJldlN0YXRlW3N0YXRlS2V5XSA/IHtbc3RhdGVLZXldOiBmYWxzZX0gOiB7fTtcbiAgICAgICAgfSwgcmVzb2x2ZSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgaXNFbmFibGVkKCkge1xuICAgIHJldHVybiB0aGlzLmRpc2FibGVtZW50ID09PSBFTkFCTEVEO1xuICB9XG5cbiAgYXN5bmMgcnVuKCkge1xuICAgIGlmICghdGhpcy5pc0VuYWJsZWQoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMuZGlzYWJsZW1lbnQubWVzc2FnZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYmVmb3JlT3ApIHtcbiAgICAgIHRoaXMuYmVmb3JlT3AoKTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IHVuZGVmaW5lZDtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5vcCgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAodGhpcy5hZnRlck9wKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuYWZ0ZXJPcCgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZ2V0TWVzc2FnZSgpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNhYmxlbWVudC5tZXNzYWdlO1xuICB9XG5cbiAgd2h5KCkge1xuICAgIHJldHVybiB0aGlzLmRpc2FibGVtZW50LnJlYXNvbjtcbiAgfVxuXG4gIGRpc2FibGUocmVhc29uID0gTk9fUkVBU09OLCBtZXNzYWdlID0gJ2Rpc2FibGVkJykge1xuICAgIGlmICghdGhpcy5pc0VuYWJsZWQoKSAmJiB0aGlzLmRpc2FibGVtZW50LnJlYXNvbiA9PT0gcmVhc29uICYmIHRoaXMuZGlzYWJsZW1lbnQubWVzc2FnZSA9PT0gbWVzc2FnZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMub3AsIHtbRElTQUJMRU1FTlRdOiB7cmVhc29uLCBtZXNzYWdlfX0pO1xuICB9XG5cbiAgZW5hYmxlKCkge1xuICAgIGlmICh0aGlzLmlzRW5hYmxlZCgpKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5vcCwge1tESVNBQkxFTUVOVF06IEVOQUJMRUR9KTtcbiAgfVxufVxuIl19