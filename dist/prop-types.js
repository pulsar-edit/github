"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ItemTypePropType = exports.UserStorePropType = exports.MergeConflictItemPropType = exports.MultiFilePatchPropType = exports.FilePatchItemPropType = exports.IssueishPropType = exports.RefresherPropType = exports.OperationStateObserverPropType = exports.EnableableOperationPropType = exports.RangePropType = exports.PointPropType = exports.RefHolderPropType = exports.RelayConnectionPropType = exports.AuthorPropType = exports.CommitPropType = exports.BranchSetPropType = exports.RemoteSetPropType = exports.SearchPropType = exports.BranchPropType = exports.EndpointPropType = exports.RemotePropType = exports.GithubLoginModelPropType = exports.WorkdirContextPoolPropType = exports.DOMNodePropType = exports.TokenPropType = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const TokenPropType = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.symbol, _propTypes.default.instanceOf(Error)]);

exports.TokenPropType = TokenPropType;

const DOMNodePropType = (props, propName, componentName) => {
  if (props[propName] instanceof HTMLElement) {
    return null;
  } else {
    return new Error(`Invalid prop '${propName}' supplied to '${componentName}'. Value is not DOM element.`);
  }
};

exports.DOMNodePropType = DOMNodePropType;

const WorkdirContextPoolPropType = _propTypes.default.shape({
  getContext: _propTypes.default.func.isRequired
});

exports.WorkdirContextPoolPropType = WorkdirContextPoolPropType;

const GithubLoginModelPropType = _propTypes.default.shape({
  getToken: _propTypes.default.func.isRequired,
  setToken: _propTypes.default.func.isRequired,
  removeToken: _propTypes.default.func.isRequired,
  getScopes: _propTypes.default.func.isRequired,
  onDidUpdate: _propTypes.default.func.isRequired
});

exports.GithubLoginModelPropType = GithubLoginModelPropType;

const RemotePropType = _propTypes.default.shape({
  getName: _propTypes.default.func.isRequired,
  getUrl: _propTypes.default.func.isRequired,
  isGithubRepo: _propTypes.default.func.isRequired,
  getOwner: _propTypes.default.func.isRequired,
  getRepo: _propTypes.default.func.isRequired,
  getEndpoint: _propTypes.default.func.isRequired
});

exports.RemotePropType = RemotePropType;

const EndpointPropType = _propTypes.default.shape({
  getGraphQLRoot: _propTypes.default.func.isRequired,
  getRestRoot: _propTypes.default.func.isRequired,
  getRestURI: _propTypes.default.func.isRequired
});

exports.EndpointPropType = EndpointPropType;

const BranchPropType = _propTypes.default.shape({
  getName: _propTypes.default.func.isRequired,
  isDetached: _propTypes.default.func.isRequired,
  isPresent: _propTypes.default.func.isRequired
});

exports.BranchPropType = BranchPropType;

const SearchPropType = _propTypes.default.shape({
  getName: _propTypes.default.func.isRequired,
  createQuery: _propTypes.default.func.isRequired
});

exports.SearchPropType = SearchPropType;

const RemoteSetPropType = _propTypes.default.shape({
  withName: _propTypes.default.func.isRequired,
  isEmpty: _propTypes.default.func.isRequired,
  size: _propTypes.default.func.isRequired,
  [Symbol.iterator]: _propTypes.default.func.isRequired
});

exports.RemoteSetPropType = RemoteSetPropType;

const BranchSetPropType = _propTypes.default.shape({
  getNames: _propTypes.default.func.isRequired,
  getPullTargets: _propTypes.default.func.isRequired,
  getPushSources: _propTypes.default.func.isRequired
});

exports.BranchSetPropType = BranchSetPropType;

const CommitPropType = _propTypes.default.shape({
  getSha: _propTypes.default.func.isRequired,
  getMessageSubject: _propTypes.default.func.isRequired,
  isUnbornRef: _propTypes.default.func.isRequired,
  isPresent: _propTypes.default.func.isRequired
});

exports.CommitPropType = CommitPropType;

const AuthorPropType = _propTypes.default.shape({
  getEmail: _propTypes.default.func.isRequired,
  getFullName: _propTypes.default.func.isRequired,
  getAvatarUrl: _propTypes.default.func.isRequired
});

exports.AuthorPropType = AuthorPropType;

const RelayConnectionPropType = nodePropType => _propTypes.default.shape({
  edges: _propTypes.default.arrayOf(_propTypes.default.shape({
    cursor: _propTypes.default.string,
    node: nodePropType
  })),
  pageInfo: _propTypes.default.shape({
    endCursor: _propTypes.default.string,
    hasNextPage: _propTypes.default.bool,
    hasPreviousPage: _propTypes.default.bool,
    startCursor: _propTypes.default.string
  }),
  totalCount: _propTypes.default.number
});

exports.RelayConnectionPropType = RelayConnectionPropType;

const RefHolderPropType = _propTypes.default.shape({
  isEmpty: _propTypes.default.func.isRequired,
  get: _propTypes.default.func.isRequired,
  setter: _propTypes.default.func.isRequired,
  observe: _propTypes.default.func.isRequired
});

exports.RefHolderPropType = RefHolderPropType;

const PointPropType = _propTypes.default.shape({
  row: _propTypes.default.number.isRequired,
  column: _propTypes.default.number.isRequired,
  isEqual: _propTypes.default.func.isRequired
});

exports.PointPropType = PointPropType;

const RangePropType = _propTypes.default.shape({
  start: PointPropType.isRequired,
  end: PointPropType.isRequired,
  isEqual: _propTypes.default.func.isRequired
});

exports.RangePropType = RangePropType;

const EnableableOperationPropType = _propTypes.default.shape({
  isEnabled: _propTypes.default.func.isRequired,
  run: _propTypes.default.func.isRequired,
  getMessage: _propTypes.default.func.isRequired,
  why: _propTypes.default.func.isRequired
});

exports.EnableableOperationPropType = EnableableOperationPropType;

const OperationStateObserverPropType = _propTypes.default.shape({
  onDidComplete: _propTypes.default.func.isRequired,
  dispose: _propTypes.default.func.isRequired
});

exports.OperationStateObserverPropType = OperationStateObserverPropType;

const RefresherPropType = _propTypes.default.shape({
  setRetryCallback: _propTypes.default.func.isRequired,
  trigger: _propTypes.default.func.isRequired,
  deregister: _propTypes.default.func.isRequired
});

exports.RefresherPropType = RefresherPropType;

const IssueishPropType = _propTypes.default.shape({
  getNumber: _propTypes.default.func.isRequired,
  getTitle: _propTypes.default.func.isRequired,
  getGitHubURL: _propTypes.default.func.isRequired,
  getAuthorLogin: _propTypes.default.func.isRequired,
  getAuthorAvatarURL: _propTypes.default.func.isRequired,
  getCreatedAt: _propTypes.default.func.isRequired,
  getHeadRefName: _propTypes.default.func.isRequired,
  getHeadRepositoryID: _propTypes.default.func.isRequired,
  getStatusCounts: _propTypes.default.func.isRequired
});

exports.IssueishPropType = IssueishPropType;

const FilePatchItemPropType = _propTypes.default.shape({
  filePath: _propTypes.default.string.isRequired,
  status: _propTypes.default.string.isRequired
});

exports.FilePatchItemPropType = FilePatchItemPropType;

const MultiFilePatchPropType = _propTypes.default.shape({
  getFilePatches: _propTypes.default.func.isRequired
});

exports.MultiFilePatchPropType = MultiFilePatchPropType;
const statusNames = ['added', 'deleted', 'modified', 'typechange', 'equivalent'];

const MergeConflictItemPropType = _propTypes.default.shape({
  filePath: _propTypes.default.string.isRequired,
  status: _propTypes.default.shape({
    file: _propTypes.default.oneOf(statusNames).isRequired,
    ours: _propTypes.default.oneOf(statusNames).isRequired,
    theirs: _propTypes.default.oneOf(statusNames).isRequired
  }).isRequired
});

exports.MergeConflictItemPropType = MergeConflictItemPropType;

const UserStorePropType = _propTypes.default.shape({
  getUsers: _propTypes.default.func.isRequired,
  onDidUpdate: _propTypes.default.func.isRequired
}); // Require item classes lazily to prevent circular imports


exports.UserStorePropType = UserStorePropType;
let lazyItemConstructors = null;

function createItemTypePropType(required) {
  return function (props, propName, componentName) {
    if (lazyItemConstructors === null) {
      lazyItemConstructors = new Set();

      for (const itemPath of ['./items/changed-file-item', './items/commit-preview-item', './items/commit-detail-item', './items/issueish-detail-item']) {
        lazyItemConstructors.add(require(itemPath).default);
      }
    }

    if (props[propName] === undefined || props[propName] === null) {
      /* istanbul ignore else */
      if (required) {
        return new Error(`Missing required prop ${propName} on component ${componentName}.`);
      } else {
        return undefined;
      }
    }
    /* istanbul ignore if */


    if (!lazyItemConstructors.has(props[propName])) {
      const choices = Array.from(lazyItemConstructors, each => each.name).join(', ');
      return new Error(`Invalid prop "${propName}" supplied to ${componentName}. Must be one of ${choices}.`);
    }

    return undefined;
  };
}

const ItemTypePropType = createItemTypePropType(false);
exports.ItemTypePropType = ItemTypePropType;
ItemTypePropType.isRequired = createItemTypePropType(true);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi9wcm9wLXR5cGVzLmpzIl0sIm5hbWVzIjpbIlRva2VuUHJvcFR5cGUiLCJQcm9wVHlwZXMiLCJvbmVPZlR5cGUiLCJzdHJpbmciLCJzeW1ib2wiLCJpbnN0YW5jZU9mIiwiRXJyb3IiLCJET01Ob2RlUHJvcFR5cGUiLCJwcm9wcyIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsIkhUTUxFbGVtZW50IiwiV29ya2RpckNvbnRleHRQb29sUHJvcFR5cGUiLCJzaGFwZSIsImdldENvbnRleHQiLCJmdW5jIiwiaXNSZXF1aXJlZCIsIkdpdGh1YkxvZ2luTW9kZWxQcm9wVHlwZSIsImdldFRva2VuIiwic2V0VG9rZW4iLCJyZW1vdmVUb2tlbiIsImdldFNjb3BlcyIsIm9uRGlkVXBkYXRlIiwiUmVtb3RlUHJvcFR5cGUiLCJnZXROYW1lIiwiZ2V0VXJsIiwiaXNHaXRodWJSZXBvIiwiZ2V0T3duZXIiLCJnZXRSZXBvIiwiZ2V0RW5kcG9pbnQiLCJFbmRwb2ludFByb3BUeXBlIiwiZ2V0R3JhcGhRTFJvb3QiLCJnZXRSZXN0Um9vdCIsImdldFJlc3RVUkkiLCJCcmFuY2hQcm9wVHlwZSIsImlzRGV0YWNoZWQiLCJpc1ByZXNlbnQiLCJTZWFyY2hQcm9wVHlwZSIsImNyZWF0ZVF1ZXJ5IiwiUmVtb3RlU2V0UHJvcFR5cGUiLCJ3aXRoTmFtZSIsImlzRW1wdHkiLCJzaXplIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJCcmFuY2hTZXRQcm9wVHlwZSIsImdldE5hbWVzIiwiZ2V0UHVsbFRhcmdldHMiLCJnZXRQdXNoU291cmNlcyIsIkNvbW1pdFByb3BUeXBlIiwiZ2V0U2hhIiwiZ2V0TWVzc2FnZVN1YmplY3QiLCJpc1VuYm9yblJlZiIsIkF1dGhvclByb3BUeXBlIiwiZ2V0RW1haWwiLCJnZXRGdWxsTmFtZSIsImdldEF2YXRhclVybCIsIlJlbGF5Q29ubmVjdGlvblByb3BUeXBlIiwibm9kZVByb3BUeXBlIiwiZWRnZXMiLCJhcnJheU9mIiwiY3Vyc29yIiwibm9kZSIsInBhZ2VJbmZvIiwiZW5kQ3Vyc29yIiwiaGFzTmV4dFBhZ2UiLCJib29sIiwiaGFzUHJldmlvdXNQYWdlIiwic3RhcnRDdXJzb3IiLCJ0b3RhbENvdW50IiwibnVtYmVyIiwiUmVmSG9sZGVyUHJvcFR5cGUiLCJnZXQiLCJzZXR0ZXIiLCJvYnNlcnZlIiwiUG9pbnRQcm9wVHlwZSIsInJvdyIsImNvbHVtbiIsImlzRXF1YWwiLCJSYW5nZVByb3BUeXBlIiwic3RhcnQiLCJlbmQiLCJFbmFibGVhYmxlT3BlcmF0aW9uUHJvcFR5cGUiLCJpc0VuYWJsZWQiLCJydW4iLCJnZXRNZXNzYWdlIiwid2h5IiwiT3BlcmF0aW9uU3RhdGVPYnNlcnZlclByb3BUeXBlIiwib25EaWRDb21wbGV0ZSIsImRpc3Bvc2UiLCJSZWZyZXNoZXJQcm9wVHlwZSIsInNldFJldHJ5Q2FsbGJhY2siLCJ0cmlnZ2VyIiwiZGVyZWdpc3RlciIsIklzc3VlaXNoUHJvcFR5cGUiLCJnZXROdW1iZXIiLCJnZXRUaXRsZSIsImdldEdpdEh1YlVSTCIsImdldEF1dGhvckxvZ2luIiwiZ2V0QXV0aG9yQXZhdGFyVVJMIiwiZ2V0Q3JlYXRlZEF0IiwiZ2V0SGVhZFJlZk5hbWUiLCJnZXRIZWFkUmVwb3NpdG9yeUlEIiwiZ2V0U3RhdHVzQ291bnRzIiwiRmlsZVBhdGNoSXRlbVByb3BUeXBlIiwiZmlsZVBhdGgiLCJzdGF0dXMiLCJNdWx0aUZpbGVQYXRjaFByb3BUeXBlIiwiZ2V0RmlsZVBhdGNoZXMiLCJzdGF0dXNOYW1lcyIsIk1lcmdlQ29uZmxpY3RJdGVtUHJvcFR5cGUiLCJmaWxlIiwib25lT2YiLCJvdXJzIiwidGhlaXJzIiwiVXNlclN0b3JlUHJvcFR5cGUiLCJnZXRVc2VycyIsImxhenlJdGVtQ29uc3RydWN0b3JzIiwiY3JlYXRlSXRlbVR5cGVQcm9wVHlwZSIsInJlcXVpcmVkIiwiU2V0IiwiaXRlbVBhdGgiLCJhZGQiLCJyZXF1aXJlIiwiZGVmYXVsdCIsInVuZGVmaW5lZCIsImhhcyIsImNob2ljZXMiLCJB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QyxRQUFELENBQUwsS0FBb0IsSUFBekQsRUFBK0Q7QUFDN0Q7QUFDQSxVQUFJOEcsUUFBSixFQUFjO0FBQ1osZUFBTyxJQUFJakgsS0FBSixDQUFXLHlCQUF3QkcsUUFBUyxpQkFBZ0JDLGFBQWMsR0FBMUUsQ0FBUDtBQUNELE9BRkQsTUFFTztBQUNMLGVBQU9tSCxTQUFQO0FBQ0Q7QUFDRjtBQUVEOzs7QUFDQSxRQUFJLENBQUNSLG9CQUFvQixDQUFDUyxHQUFyQixDQUF5QnRILEtBQUssQ0FBQ0MsUUFBRCxDQUE5QixDQUFMLEVBQWdEO0FBQzlDLFlBQU1zSCxPQUFPLEdBQUdDLEtBQUssQ0FBQ0MsSUFBTixDQUFXWixvQkFBWCxFQUFpQ2EsSUFBSSxJQUFJQSxJQUFJLENBQUNDLElBQTlDLEVBQW9EQyxJQUFwRCxDQUF5RCxJQUF6RCxDQUFoQjtBQUNBLGFBQU8sSUFBSTlILEtBQUosQ0FDSixpQkFBZ0JHLFFBQVMsaUJBQWdCQyxhQUFjLG9CQUFtQnFILE9BQVEsR0FEOUUsQ0FBUDtBQUVEOztBQUVELFdBQU9GLFNBQVA7QUFDRCxHQTlCRDtBQStCRDs7QUFFTSxNQUFNUSxnQkFBZ0IsR0FBR2Ysc0JBQXNCLENBQUMsS0FBRCxDQUEvQzs7QUFDUGUsZ0JBQWdCLENBQUNySCxVQUFqQixHQUE4QnNHLHNCQUFzQixDQUFDLElBQUQsQ0FBcEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgVG9rZW5Qcm9wVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5zeW1ib2wsIFByb3BUeXBlcy5pbnN0YW5jZU9mKEVycm9yKV0pO1xuXG5leHBvcnQgY29uc3QgRE9NTm9kZVByb3BUeXBlID0gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkgPT4ge1xuICBpZiAocHJvcHNbcHJvcE5hbWVdIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgYEludmFsaWQgcHJvcCAnJHtwcm9wTmFtZX0nIHN1cHBsaWVkIHRvICcke2NvbXBvbmVudE5hbWV9Jy4gVmFsdWUgaXMgbm90IERPTSBlbGVtZW50LmAsXG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IFdvcmtkaXJDb250ZXh0UG9vbFByb3BUeXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgZ2V0Q29udGV4dDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn0pO1xuXG5leHBvcnQgY29uc3QgR2l0aHViTG9naW5Nb2RlbFByb3BUeXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgZ2V0VG9rZW46IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHNldFRva2VuOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICByZW1vdmVUb2tlbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0U2NvcGVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkRpZFVwZGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn0pO1xuXG5leHBvcnQgY29uc3QgUmVtb3RlUHJvcFR5cGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBnZXROYW1lOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBnZXRVcmw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGlzR2l0aHViUmVwbzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0T3duZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldFJlcG86IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldEVuZHBvaW50OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufSk7XG5cbmV4cG9ydCBjb25zdCBFbmRwb2ludFByb3BUeXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgZ2V0R3JhcGhRTFJvb3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldFJlc3RSb290OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBnZXRSZXN0VVJJOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufSk7XG5cbmV4cG9ydCBjb25zdCBCcmFuY2hQcm9wVHlwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIGdldE5hbWU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGlzRGV0YWNoZWQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGlzUHJlc2VudDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn0pO1xuXG5leHBvcnQgY29uc3QgU2VhcmNoUHJvcFR5cGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBnZXROYW1lOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBjcmVhdGVRdWVyeTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn0pO1xuXG5leHBvcnQgY29uc3QgUmVtb3RlU2V0UHJvcFR5cGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICB3aXRoTmFtZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNFbXB0eTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgc2l6ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgW1N5bWJvbC5pdGVyYXRvcl06IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59KTtcblxuZXhwb3J0IGNvbnN0IEJyYW5jaFNldFByb3BUeXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgZ2V0TmFtZXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldFB1bGxUYXJnZXRzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBnZXRQdXNoU291cmNlczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn0pO1xuXG5leHBvcnQgY29uc3QgQ29tbWl0UHJvcFR5cGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBnZXRTaGE6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldE1lc3NhZ2VTdWJqZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBpc1VuYm9yblJlZjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNQcmVzZW50OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufSk7XG5cbmV4cG9ydCBjb25zdCBBdXRob3JQcm9wVHlwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIGdldEVtYWlsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBnZXRGdWxsTmFtZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0QXZhdGFyVXJsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufSk7XG5cbmV4cG9ydCBjb25zdCBSZWxheUNvbm5lY3Rpb25Qcm9wVHlwZSA9IG5vZGVQcm9wVHlwZSA9PiBQcm9wVHlwZXMuc2hhcGUoe1xuICBlZGdlczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGN1cnNvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIG5vZGU6IG5vZGVQcm9wVHlwZSxcbiAgICB9KSxcbiAgKSxcbiAgcGFnZUluZm86IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZW5kQ3Vyc29yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGhhc05leHRQYWdlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBoYXNQcmV2aW91c1BhZ2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0YXJ0Q3Vyc29yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB9KSxcbiAgdG90YWxDb3VudDogUHJvcFR5cGVzLm51bWJlcixcbn0pO1xuXG5leHBvcnQgY29uc3QgUmVmSG9sZGVyUHJvcFR5cGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBpc0VtcHR5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBnZXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHNldHRlcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb2JzZXJ2ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn0pO1xuXG5leHBvcnQgY29uc3QgUG9pbnRQcm9wVHlwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHJvdzogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBjb2x1bW46IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgaXNFcXVhbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn0pO1xuXG5leHBvcnQgY29uc3QgUmFuZ2VQcm9wVHlwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHN0YXJ0OiBQb2ludFByb3BUeXBlLmlzUmVxdWlyZWQsXG4gIGVuZDogUG9pbnRQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICBpc0VxdWFsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufSk7XG5cbmV4cG9ydCBjb25zdCBFbmFibGVhYmxlT3BlcmF0aW9uUHJvcFR5cGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBpc0VuYWJsZWQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHJ1bjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0TWVzc2FnZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgd2h5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufSk7XG5cbmV4cG9ydCBjb25zdCBPcGVyYXRpb25TdGF0ZU9ic2VydmVyUHJvcFR5cGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBvbkRpZENvbXBsZXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBkaXNwb3NlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufSk7XG5cbmV4cG9ydCBjb25zdCBSZWZyZXNoZXJQcm9wVHlwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHNldFJldHJ5Q2FsbGJhY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHRyaWdnZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGRlcmVnaXN0ZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59KTtcblxuZXhwb3J0IGNvbnN0IElzc3VlaXNoUHJvcFR5cGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBnZXROdW1iZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldFRpdGxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBnZXRHaXRIdWJVUkw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldEF1dGhvckxvZ2luOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBnZXRBdXRob3JBdmF0YXJVUkw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldENyZWF0ZWRBdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0SGVhZFJlZk5hbWU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldEhlYWRSZXBvc2l0b3J5SUQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldFN0YXR1c0NvdW50czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn0pO1xuXG5leHBvcnQgY29uc3QgRmlsZVBhdGNoSXRlbVByb3BUeXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgZmlsZVBhdGg6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgc3RhdHVzOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG59KTtcblxuZXhwb3J0IGNvbnN0IE11bHRpRmlsZVBhdGNoUHJvcFR5cGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBnZXRGaWxlUGF0Y2hlczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn0pO1xuXG5jb25zdCBzdGF0dXNOYW1lcyA9IFtcbiAgJ2FkZGVkJyxcbiAgJ2RlbGV0ZWQnLFxuICAnbW9kaWZpZWQnLFxuICAndHlwZWNoYW5nZScsXG4gICdlcXVpdmFsZW50Jyxcbl07XG5cbmV4cG9ydCBjb25zdCBNZXJnZUNvbmZsaWN0SXRlbVByb3BUeXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgZmlsZVBhdGg6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgc3RhdHVzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGZpbGU6IFByb3BUeXBlcy5vbmVPZihzdGF0dXNOYW1lcykuaXNSZXF1aXJlZCxcbiAgICBvdXJzOiBQcm9wVHlwZXMub25lT2Yoc3RhdHVzTmFtZXMpLmlzUmVxdWlyZWQsXG4gICAgdGhlaXJzOiBQcm9wVHlwZXMub25lT2Yoc3RhdHVzTmFtZXMpLmlzUmVxdWlyZWQsXG4gIH0pLmlzUmVxdWlyZWQsXG59KTtcblxuZXhwb3J0IGNvbnN0IFVzZXJTdG9yZVByb3BUeXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgZ2V0VXNlcnM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uRGlkVXBkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufSk7XG5cbi8vIFJlcXVpcmUgaXRlbSBjbGFzc2VzIGxhemlseSB0byBwcmV2ZW50IGNpcmN1bGFyIGltcG9ydHNcbmxldCBsYXp5SXRlbUNvbnN0cnVjdG9ycyA9IG51bGw7XG5mdW5jdGlvbiBjcmVhdGVJdGVtVHlwZVByb3BUeXBlKHJlcXVpcmVkKSB7XG4gIHJldHVybiBmdW5jdGlvbihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgICBpZiAobGF6eUl0ZW1Db25zdHJ1Y3RvcnMgPT09IG51bGwpIHtcbiAgICAgIGxhenlJdGVtQ29uc3RydWN0b3JzID0gbmV3IFNldCgpO1xuICAgICAgZm9yIChjb25zdCBpdGVtUGF0aCBvZiBbXG4gICAgICAgICcuL2l0ZW1zL2NoYW5nZWQtZmlsZS1pdGVtJyxcbiAgICAgICAgJy4vaXRlbXMvY29tbWl0LXByZXZpZXctaXRlbScsXG4gICAgICAgICcuL2l0ZW1zL2NvbW1pdC1kZXRhaWwtaXRlbScsXG4gICAgICAgICcuL2l0ZW1zL2lzc3VlaXNoLWRldGFpbC1pdGVtJyxcbiAgICAgIF0pIHtcbiAgICAgICAgbGF6eUl0ZW1Db25zdHJ1Y3RvcnMuYWRkKHJlcXVpcmUoaXRlbVBhdGgpLmRlZmF1bHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCB8fCBwcm9wc1twcm9wTmFtZV0gPT09IG51bGwpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocmVxdWlyZWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihgTWlzc2luZyByZXF1aXJlZCBwcm9wICR7cHJvcE5hbWV9IG9uIGNvbXBvbmVudCAke2NvbXBvbmVudE5hbWV9LmApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWxhenlJdGVtQ29uc3RydWN0b3JzLmhhcyhwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICBjb25zdCBjaG9pY2VzID0gQXJyYXkuZnJvbShsYXp5SXRlbUNvbnN0cnVjdG9ycywgZWFjaCA9PiBlYWNoLm5hbWUpLmpvaW4oJywgJyk7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICBgSW52YWxpZCBwcm9wIFwiJHtwcm9wTmFtZX1cIiBzdXBwbGllZCB0byAke2NvbXBvbmVudE5hbWV9LiBNdXN0IGJlIG9uZSBvZiAke2Nob2ljZXN9LmApO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBJdGVtVHlwZVByb3BUeXBlID0gY3JlYXRlSXRlbVR5cGVQcm9wVHlwZShmYWxzZSk7XG5JdGVtVHlwZVByb3BUeXBlLmlzUmVxdWlyZWQgPSBjcmVhdGVJdGVtVHlwZVByb3BUeXBlKHRydWUpO1xuIl19