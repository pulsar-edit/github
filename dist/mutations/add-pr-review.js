"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRelay = require("react-relay");

var _relayRuntime = require("relay-runtime");

var _helpers = require("../helpers");

/* istanbul ignore file */
const mutation = function () {
  const node = require("./__generated__/addPrReviewMutation.graphql");

  if (node.hash && node.hash !== "d2960bba4729b6c3e91e249ea582fec1") {
    console.error("The definition of 'addPrReviewMutation' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return require("./__generated__/addPrReviewMutation.graphql");
};

let placeholderID = 0;

var _default = (environment, {
  body,
  event,
  pullRequestID,
  viewerID
}) => {
  const variables = {
    input: {
      pullRequestId: pullRequestID
    }
  };

  if (body) {
    variables.input.body = body;
  }

  if (event) {
    variables.input.event = event;
  }

  const configs = [{
    type: 'RANGE_ADD',
    parentID: pullRequestID,
    connectionInfo: [{
      key: 'ReviewSummariesAccumulator_reviews',
      rangeBehavior: 'append'
    }],
    edgeName: 'reviewEdge'
  }];

  function optimisticUpdater(store) {
    const pullRequest = store.get(pullRequestID);

    if (!pullRequest) {
      return;
    }

    const id = `add-pr-review:review:${placeholderID++}`;
    const review = store.create(id, 'PullRequestReview');
    review.setValue(id, 'id');
    review.setValue('PENDING', 'state');
    review.setValue(body, 'body');
    review.setValue(body ? (0, _helpers.renderMarkdown)(body) : '...', 'bodyHTML');
    review.setLinkedRecords([], 'reactionGroups');
    review.setValue(false, 'viewerCanReact');
    review.setValue(false, 'viewerCanUpdate');
    let author;

    if (viewerID) {
      author = store.get(viewerID);
    } else {
      author = store.create(`add-pr-review-comment:author:${placeholderID++}`, 'User');
      author.setValue('...', 'login');
      author.setValue('atom://github/img/avatar.svg', 'avatarUrl');
    }

    review.setLinkedRecord(author, 'author');

    const reviews = _relayRuntime.ConnectionHandler.getConnection(pullRequest, 'ReviewSummariesAccumulator_reviews');

    const edge = _relayRuntime.ConnectionHandler.createEdge(store, reviews, review, 'PullRequestReviewEdge');

    _relayRuntime.ConnectionHandler.insertEdgeAfter(reviews, edge);
  }

  return new Promise((resolve, reject) => {
    (0, _reactRelay.commitMutation)(environment, {
      mutation,
      variables,
      configs,
      optimisticUpdater,
      onCompleted: resolve,
      onError: reject
    });
  });
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9tdXRhdGlvbnMvYWRkLXByLXJldmlldy5qcyJdLCJuYW1lcyI6WyJtdXRhdGlvbiIsInBsYWNlaG9sZGVySUQiLCJlbnZpcm9ubWVudCIsImJvZHkiLCJldmVudCIsInB1bGxSZXF1ZXN0SUQiLCJ2aWV3ZXJJRCIsInZhcmlhYmxlcyIsImlucHV0IiwicHVsbFJlcXVlc3RJZCIsImNvbmZpZ3MiLCJ0eXBlIiwicGFyZW50SUQiLCJjb25uZWN0aW9uSW5mbyIsImtleSIsInJhbmdlQmVoYXZpb3IiLCJlZGdlTmFtZSIsIm9wdGltaXN0aWNVcGRhdGVyIiwic3RvcmUiLCJwdWxsUmVxdWVzdCIsImdldCIsImlkIiwicmV2aWV3IiwiY3JlYXRlIiwic2V0VmFsdWUiLCJzZXRMaW5rZWRSZWNvcmRzIiwiYXV0aG9yIiwic2V0TGlua2VkUmVjb3JkIiwicmV2aWV3cyIsIkNvbm5lY3Rpb25IYW5kbGVyIiwiZ2V0Q29ubmVjdGlvbiIsImVkZ2UiLCJjcmVhdGVFZGdlIiwiaW5zZXJ0RWRnZUFmdGVyIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbkNvbXBsZXRlZCIsIm9uRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFFQTs7QUFMQTtBQU9BLE1BQU1BLFFBQVE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQSxDQUFkOztBQXVCQSxJQUFJQyxhQUFhLEdBQUcsQ0FBcEI7O2VBRWUsQ0FBQ0MsV0FBRCxFQUFjO0FBQUNDLEVBQUFBLElBQUQ7QUFBT0MsRUFBQUEsS0FBUDtBQUFjQyxFQUFBQSxhQUFkO0FBQTZCQyxFQUFBQTtBQUE3QixDQUFkLEtBQXlEO0FBQ3RFLFFBQU1DLFNBQVMsR0FBRztBQUNoQkMsSUFBQUEsS0FBSyxFQUFFO0FBQUNDLE1BQUFBLGFBQWEsRUFBRUo7QUFBaEI7QUFEUyxHQUFsQjs7QUFJQSxNQUFJRixJQUFKLEVBQVU7QUFDUkksSUFBQUEsU0FBUyxDQUFDQyxLQUFWLENB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dGVudCI6WyIvKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZSAqL1xuXG5pbXBvcnQge2NvbW1pdE11dGF0aW9uLCBncmFwaHFsfSBmcm9tICdyZWFjdC1yZWxheSc7XG5pbXBvcnQge0Nvbm5lY3Rpb25IYW5kbGVyfSBmcm9tICdyZWxheS1ydW50aW1lJztcblxuaW1wb3J0IHtyZW5kZXJNYXJrZG93bn0gZnJvbSAnLi4vaGVscGVycyc7XG5cbmNvbnN0IG11dGF0aW9uID0gZ3JhcGhxbGBcbiAgbXV0YXRpb24gYWRkUHJSZXZpZXdNdXRhdGlvbigkaW5wdXQ6IEFkZFB1bGxSZXF1ZXN0UmV2aWV3SW5wdXQhKSB7XG4gICAgYWRkUHVsbFJlcXVlc3RSZXZpZXcoaW5wdXQ6ICRpbnB1dCkge1xuICAgICAgcmV2aWV3RWRnZSB7XG4gICAgICAgIG5vZGUge1xuICAgICAgICAgIGlkXG4gICAgICAgICAgYm9keVxuICAgICAgICAgIGJvZHlIVE1MXG4gICAgICAgICAgc3RhdGVcbiAgICAgICAgICBzdWJtaXR0ZWRBdFxuICAgICAgICAgIHZpZXdlckNhblJlYWN0XG4gICAgICAgICAgdmlld2VyQ2FuVXBkYXRlXG4gICAgICAgICAgYXV0aG9yIHtcbiAgICAgICAgICAgIGxvZ2luXG4gICAgICAgICAgICBhdmF0YXJVcmxcbiAgICAgICAgICB9XG4gICAgICAgICAgLi4uZW1vamlSZWFjdGlvbnNDb250cm9sbGVyX3JlYWN0YWJsZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5gO1xuXG5sZXQgcGxhY2Vob2xkZXJJRCA9IDA7XG5cbmV4cG9ydCBkZWZhdWx0IChlbnZpcm9ubWVudCwge2JvZHksIGV2ZW50LCBwdWxsUmVxdWVzdElELCB2aWV3ZXJJRH0pID0+IHtcbiAgY29uc3QgdmFyaWFibGVzID0ge1xuICAgIGlucHV0OiB7cHVsbFJlcXVlc3RJZDogcHVsbFJlcXVlc3RJRH0sXG4gIH07XG5cbiAgaWYgKGJvZHkpIHtcbiAgICB2YXJpYWJsZXMuaW5wdXQuYm9keSA9IGJvZHk7XG4gIH1cbiAgaWYgKGV2ZW50KSB7XG4gICAgdmFyaWFibGVzLmlucHV0LmV2ZW50ID0gZXZlbnQ7XG4gIH1cblxuICBjb25zdCBjb25maWdzID0gW3tcbiAgICB0eXBlOiAnUkFOR0VfQUREJyxcbiAgICBwYXJlbnRJRDogcHVsbFJlcXVlc3RJRCxcbiAgICBjb25uZWN0aW9uSW5mbzogW3trZXk6ICdSZXZpZXdTdW1tYXJpZXNBY2N1bXVsYXRvcl9yZXZpZXdzJywgcmFuZ2VCZWhhdmlvcjogJ2FwcGVuZCd9XSxcbiAgICBlZGdlTmFtZTogJ3Jldmlld0VkZ2UnLFxuICB9XTtcblxuICBmdW5jdGlvbiBvcHRpbWlzdGljVXBkYXRlcihzdG9yZSkge1xuICAgIGNvbnN0IHB1bGxSZXF1ZXN0ID0gc3RvcmUuZ2V0KHB1bGxSZXF1ZXN0SUQpO1xuICAgIGlmICghcHVsbFJlcXVlc3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpZCA9IGBhZGQtcHItcmV2aWV3OnJldmlldzoke3BsYWNlaG9sZGVySUQrK31gO1xuICAgIGNvbnN0IHJldmlldyA9IHN0b3JlLmNyZWF0ZShpZCwgJ1B1bGxSZXF1ZXN0UmV2aWV3Jyk7XG4gICAgcmV2aWV3LnNldFZhbHVlKGlkLCAnaWQnKTtcbiAgICByZXZpZXcuc2V0VmFsdWUoJ1BFTkRJTkcnLCAnc3RhdGUnKTtcbiAgICByZXZpZXcuc2V0VmFsdWUoYm9keSwgJ2JvZHknKTtcbiAgICByZXZpZXcuc2V0VmFsdWUoYm9keSA/IHJlbmRlck1hcmtkb3duKGJvZHkpIDogJy4uLicsICdib2R5SFRNTCcpO1xuICAgIHJldmlldy5zZXRMaW5rZWRSZWNvcmRzKFtdLCAncmVhY3Rpb25Hcm91cHMnKTtcbiAgICByZXZpZXcuc2V0VmFsdWUoZmFsc2UsICd2aWV3ZXJDYW5SZWFjdCcpO1xuICAgIHJldmlldy5zZXRWYWx1ZShmYWxzZSwgJ3ZpZXdlckNhblVwZGF0ZScpO1xuXG4gICAgbGV0IGF1dGhvcjtcbiAgICBpZiAodmlld2VySUQpIHtcbiAgICAgIGF1dGhvciA9IHN0b3JlLmdldCh2aWV3ZXJJRCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF1dGhvciA9IHN0b3JlLmNyZWF0ZShgYWRkLXByLXJldmlldy1jb21tZW50OmF1dGhvcjoke3BsYWNlaG9sZGVySUQrK31gLCAnVXNlcicpO1xuICAgICAgYXV0aG9yLnNldFZhbHVlKCcuLi4nLCAnbG9naW4nKTtcbiAgICAgIGF1dGhvci5zZXRWYWx1ZSgnYXRvbTovL2dpdGh1Yi9pbWcvYXZhdGFyLnN2ZycsICdhdmF0YXJVcmwnKTtcbiAgICB9XG4gICAgcmV2aWV3LnNldExpbmtlZFJlY29yZChhdXRob3IsICdhdXRob3InKTtcblxuICAgIGNvbnN0IHJldmlld3MgPSBDb25uZWN0aW9uSGFuZGxlci5nZXRDb25uZWN0aW9uKHB1bGxSZXF1ZXN0LCAnUmV2aWV3U3VtbWFyaWVzQWNjdW11bGF0b3JfcmV2aWV3cycpO1xuICAgIGNvbnN0IGVkZ2UgPSBDb25uZWN0aW9uSGFuZGxlci5jcmVhdGVFZGdlKHN0b3JlLCByZXZpZXdzLCByZXZpZXcsICdQdWxsUmVxdWVzdFJldmlld0VkZ2UnKTtcbiAgICBDb25uZWN0aW9uSGFuZGxlci5pbnNlcnRFZGdlQWZ0ZXIocmV2aWV3cywgZWRnZSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbW1pdE11dGF0aW9uKFxuICAgICAgZW52aXJvbm1lbnQsXG4gICAgICB7XG4gICAgICAgIG11dGF0aW9uLFxuICAgICAgICB2YXJpYWJsZXMsXG4gICAgICAgIGNvbmZpZ3MsXG4gICAgICAgIG9wdGltaXN0aWNVcGRhdGVyLFxuICAgICAgICBvbkNvbXBsZXRlZDogcmVzb2x2ZSxcbiAgICAgICAgb25FcnJvcjogcmVqZWN0LFxuICAgICAgfSxcbiAgICApO1xuICB9KTtcbn07XG4iXX0=