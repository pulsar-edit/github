"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _electron = require("electron");

var _reporterProxy = require("../reporter-proxy");

var _propTypes2 = require("../prop-types");

var _issueishSearchesController = _interopRequireDefault(require("./issueish-searches-controller"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class RemoteController extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "onCreatePr", async () => {
      const currentBranch = this.props.branches.getHeadBranch();
      const upstream = currentBranch.getUpstream();

      if (!upstream.isPresent() || this.props.aheadCount > 0) {
        await this.props.onPushBranch();
      }

      let createPrUrl = 'https://github.com/';
      createPrUrl += this.props.remote.getOwner() + '/' + this.props.remote.getRepo();
      createPrUrl += '/compare/' + encodeURIComponent(currentBranch.getName());
      createPrUrl += '?expand=1';
      await _electron.shell.openExternal(createPrUrl);
      (0, _reporterProxy.incrementCounter)('create-pull-request');
    });
  }

  render() {
    return _react.default.createElement(_issueishSearchesController.default, {
      endpoint: this.props.endpoint,
      token: this.props.token,
      workingDirectory: this.props.workingDirectory,
      repository: this.props.repository,
      workspace: this.props.workspace,
      remote: this.props.remote,
      remotes: this.props.remotes,
      branches: this.props.branches,
      aheadCount: this.props.aheadCount,
      pushInProgress: this.props.pushInProgress,
      onCreatePr: this.onCreatePr
    });
  }

}

exports.default = RemoteController;

_defineProperty(RemoteController, "propTypes", {
  // Relay payload
  repository: _propTypes.default.shape({
    id: _propTypes.default.string.isRequired,
    defaultBranchRef: _propTypes.default.shape({
      prefix: _propTypes.default.string.isRequired,
      name: _propTypes.default.string.isRequired
    })
  }),
  // Connection
  endpoint: _propTypes2.EndpointPropType.isRequired,
  token: _propTypes2.TokenPropType.isRequired,
  // Repository derived attributes
  workingDirectory: _propTypes.default.string,
  workspace: _propTypes.default.object.isRequired,
  remote: _propTypes2.RemotePropType.isRequired,
  remotes: _propTypes2.RemoteSetPropType.isRequired,
  branches: _propTypes2.BranchSetPropType.isRequired,
  aheadCount: _propTypes.default.number,
  pushInProgress: _propTypes.default.bool.isRequired,
  // Actions
  onPushBranch: _propTypes.default.func.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jb250cm9sbGVycy9yZW1vdGUtY29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJSZW1vdGVDb250cm9sbGVyIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjdXJyZW50QnJhbmNoIiwicHJvcHMiLCJicmFuY2hlcyIsImdldEhlYWRCcmFuY2giLCJ1cHN0cmVhbSIsImdldFVwc3RyZWFtIiwiaXNQcmVzZW50IiwiYWhlYWRDb3VudCIsIm9uUHVzaEJyYW5jaCIsImNyZWF0ZVByVXJsIiwicmVtb3RlIiwiZ2V0T3duZXIiLCJnZXRSZXBvIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2V0TmFtZSIsInNoZWxsIiwib3BlbkV4dGVybmFsIiwicmVuZGVyIiwiZW5kcG9pbnQiLCJ0b2tlbiIsIndvcmtpbmdEaXJlY3RvcnkiLCJyZXBvc2l0b3J5Iiwid29ya3NwYWNlIiwicmVtb3RlcyIsInB1c2hJblByb2dyZXNzIiwib25DcmVhdGVQciIsIlByb3BUeXBlcyIsInNoYXBlIiwiaWQiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwiZGVmYXVsdEJyYW5jaFJlZiIsInByZWZpeCIsIm5hbWUiLCJFbmRwb2ludFByb3BUeXBlIiwiVG9rZW5Qcm9wVHlwZSIsIm9iamVjdCIsIlJlbW90ZVByb3BUeXBlIiwiUmVtb3RlU2V0UHJvcFR5cGUiLCJCcmFuY2hTZXRQcm9wVHlwZSIsIm51bWJlciIsImJvb2wiLCJmdW5jIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVlLE1BQU1BLGdCQUFOLFNBQStCQyxlQUFNQyxTQUFyQyxDQUErQztBQUFBO0FBQUE7O0FBQUEsd0NBaUQvQyxZQUFZO0FBQ3ZCLFlBQU1DLGFBQWEsR0FBRyxLQUFLQyxLQUFMLENBQVdDLFFBQVgsQ0FBb0JDLGFBQXBCLEVBQXRCO0FBQ0EsWUFBTUMsUUFBUSxHQUFHSixhQUFhLENBQUNLLFdBQWQsRUFBakI7O0FBQ0EsVUFBSSxDQUFDRCxRQUFRLENBQUNFLFNBQVQsRUFBRCxJQUF5QixLQUFLTCxLQUFMLENBQVdNLFVBQVgsR0FBd0IsQ0FBckQsRUFBd0Q7QUFDdEQsY0FBTSxLQUFLTixLQUFMLENBQVdPLFlBQVgsRUFBTjtBQUNEOztBQUVELFVBQUlDLFdBQVcsR0FBRyxxQkFBbEI7QUFDQUEsTUFBQUEsV0FBVyxJQUFJLEtBQUtSLEtBQUwsQ0FBV1MsTUFBWCxDQUFrQkMsUUFBbEIsS0FBK0IsR0FBL0IsR0FBcUMsS0FBS1YsS0FBTCxDQUFXUyxNQUFYLENBQWtCRSxPQUFsQixFQUFwRDtBQUNBSCxNQUFBQSxXQUFXLElBQUksY0FBY0ksa0JBQWtCLENBQUNiLGFBQWEsQ0FBQ2MsT0FBZCxFQUFELENBQS9DO0FBQ0FMLE1BQUFBLFdBQVcsSUFBSSxXQUFmO0FBRUEsWUFBTU0sZ0JBQU1DLFlBQU4sQ0FBbUJQLFdBQW5CLENBQU47QUFDQSwyQ0FBaUIscUJBQWpCO0FBQ0QsS0EvRDJEO0FBQUE7O0FBNEI1RFEsRUFBQUEsTUFBTSxHQUFHO0FBQ1AsV0FDRSw2QkFBQyxtQ0FBRDtBQUNFLE1BQUEsUUFBUSxFQUFFLEtBQUtoQixLQUFMLENBQVdpQixRQUR2QjtBQUVFLE1BQUEsS0FBSyxFQUFFLEtBQUtqQixLQUFMLENBQVdrQixLQUZwQjtBQUlFLE1BQUEsZ0JBQWdCLEVBQUUsS0FBS2xCLEtBQUwsQ0FBV21CLGdCQUovQjtBQUtFLE1BQUEsVUFBVSxFQUFFLEtBQUtuQixLQUFMLENBQVdvQixVQUx6QjtBQU9FLE1BQUEsU0FBUyxFQUFFLEtBQUtwQixLQUFMLENBQVdxQixTQVB4QjtBQVFFLE1BQUEsTUFBTSxFQUFFLEtBQUtyQixLQUFMLENBQVdTLE1BUnJCO0FBU0UsTUFBQSxPQUFPLEVBQUUsS0FBS1QsS0FBTCxDQUFXc0IsT0FUdEI7QUFVRSxNQUFBLFFBQVEsRUFBRSxLQUFLdEIsS0FBTCxDQUFXQyxRQVZ2QjtBQVdFLE1BQUEsVUFBVSxFQUFFLEtBQUtELEtBQUwsQ0FBV00sVUFYekI7QUFZRSxNQUFBLGNBQWMsRUFBRSxLQUFLTixLQUFMLENBQVd1QixjQVo3QjtBQWNFLE1BQUEsVUFBVSxFQUFFLEtBQUtDO0FBZG5CLE1BREY7QUFrQkQ7O0FBL0MyRDs7OztnQkFBekM1QixnQixlQUNBO0FBQ2pCO0FBQ0F3QixFQUFBQSxVQUFVLEVBQUVLLG1CQUFVQyxLQUFWLENBQWdCO0FBQzFCQyxJQUFBQSxFQUFFLEVBQUVGLG1CQUFVRyxNQUFWLENBQWlCQyxVQURLO0FBRTFCQyxJQUFBQSxnQkFBZ0IsRUFBRUwsbUJBQVVDLEtBQVYsQ0FBZ0I7QUFDaENLLE1BQUFBLE1BQU0sRUFBRU4sbUJBQVVHLE1BQVYsQ0FBaUJDLFVBRE87QUFFaENHLE1BQUFBLElBQUksRUFBRVAsbUJBQVVHLE1BQVYsQ0FBaUJDO0FBRlMsS0FBaEI7QUFGUSxHQUFoQixDQUZLO0FBVWpCO0FBQ0FaLEVBQUFBLFFBQVEsRUFBRWdCLDZCQUFpQkosVUFYVjtBQVlqQlgsRUFBQUEsS0FBSyxFQUFFZ0IsMEJBQWNMLFVBWko7QUFjakI7QUFDQVYsRUFBQUEsZ0JBQWdCLEVBQUVNLG1CQUFVRyxNQWZYO0FBZ0JqQlAsRUFBQUEsU0FBUyxFQUFFSSxtQkFBVVUsTUFBVixDQUFpQk4sVUFoQlg7QUFpQmpCcEIsRUFBQUEsTUFBTSxFQUFFMkIsMkJBQWVQLFVBakJOO0FBa0JqQlAsRUFBQUEsT0FBTyxFQUFFZSw4QkFBa0JSLFVBbEJWO0FBbUJqQjVCLEVBQUFBLFFBQVEsRUFBRXFDLDhCQUFrQlQsVUFuQlg7QUFvQmpCdkIsRUFBQUEsVUFBVSxFQUFFbUIsbUJBQVVjLE1BcEJMO0FBcUJqQmhCLEVBQUFBLGNBQWMsRUFBRUUsbUJBQVVlLElBQVYsQ0FBZVgsVUFyQmQ7QUF1QmpCO0FBQ0F0QixFQUFBQSxZQUFZLEVBQUVrQixtQkFBVWdCLElBQVYsQ0FBZVo7QUF4QlosQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtzaGVsbH0gZnJvbSAnZWxlY3Ryb24nO1xuXG5pbXBvcnQge2luY3JlbWVudENvdW50ZXJ9IGZyb20gJy4uL3JlcG9ydGVyLXByb3h5JztcbmltcG9ydCB7UmVtb3RlUHJvcFR5cGUsIFJlbW90ZVNldFByb3BUeXBlLCBCcmFuY2hTZXRQcm9wVHlwZSwgRW5kcG9pbnRQcm9wVHlwZSwgVG9rZW5Qcm9wVHlwZX0gZnJvbSAnLi4vcHJvcC10eXBlcyc7XG5pbXBvcnQgSXNzdWVpc2hTZWFyY2hlc0NvbnRyb2xsZXIgZnJvbSAnLi9pc3N1ZWlzaC1zZWFyY2hlcy1jb250cm9sbGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVtb3RlQ29udHJvbGxlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLy8gUmVsYXkgcGF5bG9hZFxuICAgIHJlcG9zaXRvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgZGVmYXVsdEJyYW5jaFJlZjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgcHJlZml4OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIH0pLFxuICAgIH0pLFxuXG4gICAgLy8gQ29ubmVjdGlvblxuICAgIGVuZHBvaW50OiBFbmRwb2ludFByb3BUeXBlLmlzUmVxdWlyZWQsXG4gICAgdG9rZW46IFRva2VuUHJvcFR5cGUuaXNSZXF1aXJlZCxcblxuICAgIC8vIFJlcG9zaXRvcnkgZGVyaXZlZCBhdHRyaWJ1dGVzXG4gICAgd29ya2luZ0RpcmVjdG9yeTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB3b3Jrc3BhY2U6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICByZW1vdGU6IFJlbW90ZVByb3BUeXBlLmlzUmVxdWlyZWQsXG4gICAgcmVtb3RlczogUmVtb3RlU2V0UHJvcFR5cGUuaXNSZXF1aXJlZCxcbiAgICBicmFuY2hlczogQnJhbmNoU2V0UHJvcFR5cGUuaXNSZXF1aXJlZCxcbiAgICBhaGVhZENvdW50OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHB1c2hJblByb2dyZXNzOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuXG4gICAgLy8gQWN0aW9uc1xuICAgIG9uUHVzaEJyYW5jaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPElzc3VlaXNoU2VhcmNoZXNDb250cm9sbGVyXG4gICAgICAgIGVuZHBvaW50PXt0aGlzLnByb3BzLmVuZHBvaW50fVxuICAgICAgICB0b2tlbj17dGhpcy5wcm9wcy50b2tlbn1cblxuICAgICAgICB3b3JraW5nRGlyZWN0b3J5PXt0aGlzLnByb3BzLndvcmtpbmdEaXJlY3Rvcnl9XG4gICAgICAgIHJlcG9zaXRvcnk9e3RoaXMucHJvcHMucmVwb3NpdG9yeX1cblxuICAgICAgICB3b3Jrc3BhY2U9e3RoaXMucHJvcHMud29ya3NwYWNlfVxuICAgICAgICByZW1vdGU9e3RoaXMucHJvcHMucmVtb3RlfVxuICAgICAgICByZW1vdGVzPXt0aGlzLnByb3BzLnJlbW90ZXN9XG4gICAgICAgIGJyYW5jaGVzPXt0aGlzLnByb3BzLmJyYW5jaGVzfVxuICAgICAgICBhaGVhZENvdW50PXt0aGlzLnByb3BzLmFoZWFkQ291bnR9XG4gICAgICAgIHB1c2hJblByb2dyZXNzPXt0aGlzLnByb3BzLnB1c2hJblByb2dyZXNzfVxuXG4gICAgICAgIG9uQ3JlYXRlUHI9e3RoaXMub25DcmVhdGVQcn1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuXG4gIG9uQ3JlYXRlUHIgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY3VycmVudEJyYW5jaCA9IHRoaXMucHJvcHMuYnJhbmNoZXMuZ2V0SGVhZEJyYW5jaCgpO1xuICAgIGNvbnN0IHVwc3RyZWFtID0gY3VycmVudEJyYW5jaC5nZXRVcHN0cmVhbSgpO1xuICAgIGlmICghdXBzdHJlYW0uaXNQcmVzZW50KCkgfHwgdGhpcy5wcm9wcy5haGVhZENvdW50ID4gMCkge1xuICAgICAgYXdhaXQgdGhpcy5wcm9wcy5vblB1c2hCcmFuY2goKTtcbiAgICB9XG5cbiAgICBsZXQgY3JlYXRlUHJVcmwgPSAnaHR0cHM6Ly9naXRodWIuY29tLyc7XG4gICAgY3JlYXRlUHJVcmwgKz0gdGhpcy5wcm9wcy5yZW1vdGUuZ2V0T3duZXIoKSArICcvJyArIHRoaXMucHJvcHMucmVtb3RlLmdldFJlcG8oKTtcbiAgICBjcmVhdGVQclVybCArPSAnL2NvbXBhcmUvJyArIGVuY29kZVVSSUNvbXBvbmVudChjdXJyZW50QnJhbmNoLmdldE5hbWUoKSk7XG4gICAgY3JlYXRlUHJVcmwgKz0gJz9leHBhbmQ9MSc7XG5cbiAgICBhd2FpdCBzaGVsbC5vcGVuRXh0ZXJuYWwoY3JlYXRlUHJVcmwpO1xuICAgIGluY3JlbWVudENvdW50ZXIoJ2NyZWF0ZS1wdWxsLXJlcXVlc3QnKTtcbiAgfVxufVxuIl19