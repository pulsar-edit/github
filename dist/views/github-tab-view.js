"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _propTypes2 = require("../prop-types");

var _loadingView = _interopRequireDefault(require("./loading-view"));

var _queryErrorView = _interopRequireDefault(require("../views/query-error-view"));

var _githubLoginView = _interopRequireDefault(require("../views/github-login-view"));

var _remoteSelectorView = _interopRequireDefault(require("./remote-selector-view"));

var _githubTabHeaderContainer = _interopRequireDefault(require("../containers/github-tab-header-container"));

var _githubBlankNolocal = _interopRequireDefault(require("./github-blank-nolocal"));

var _githubBlankUninitialized = _interopRequireDefault(require("./github-blank-uninitialized"));

var _githubBlankNoremote = _interopRequireDefault(require("./github-blank-noremote"));

var _remoteContainer = _interopRequireDefault(require("../containers/remote-container"));

var _keytarStrategy = require("../shared/keytar-strategy");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class GitHubTabView extends _react.default.Component {
  render() {
    return _react.default.createElement("div", {
      className: "github-GitHub",
      ref: this.props.rootHolder.setter
    }, this.renderHeader(), _react.default.createElement("div", {
      className: "github-GitHub-content"
    }, this.renderRemote()));
  }

  renderRemote() {
    if (this.props.token === null) {
      return _react.default.createElement(_loadingView.default, null);
    }

    if (this.props.token === _keytarStrategy.UNAUTHENTICATED) {
      return _react.default.createElement(_githubLoginView.default, {
        onLogin: this.props.handleLogin
      });
    }

    if (this.props.token === _keytarStrategy.INSUFFICIENT) {
      return _react.default.createElement(_githubLoginView.default, {
        onLogin: this.props.handleLogin
      }, _react.default.createElement("p", null, "Your token no longer has sufficient authorizations. Please re-authenticate and generate a new one."));
    }

    if (this.props.token instanceof Error) {
      return _react.default.createElement(_queryErrorView.default, {
        error: this.props.token,
        retry: this.props.handleTokenRetry,
        login: this.props.handleLogin,
        logout: this.props.handleLogout
      });
    }

    if (this.props.isLoading) {
      return _react.default.createElement(_loadingView.default, null);
    }

    if (this.props.repository.isAbsent() || this.props.repository.isAbsentGuess()) {
      return _react.default.createElement(_githubBlankNolocal.default, {
        openCreateDialog: this.props.openCreateDialog,
        openCloneDialog: this.props.openCloneDialog
      });
    }

    if (this.props.repository.isEmpty()) {
      return _react.default.createElement(_githubBlankUninitialized.default, {
        openBoundPublishDialog: this.props.openBoundPublishDialog,
        openGitTab: this.props.openGitTab
      });
    }

    if (this.props.currentRemote.isPresent()) {
      // Single, chosen or unambiguous remote
      return _react.default.createElement(_remoteContainer.default // Connection
      , {
        endpoint: this.props.currentRemote.getEndpoint(),
        token: this.props.token // Repository attributes
        ,
        refresher: this.props.refresher,
        pushInProgress: this.props.pushInProgress,
        workingDirectory: this.props.workingDirectory,
        workspace: this.props.workspace,
        remote: this.props.currentRemote,
        remotes: this.props.remotes,
        branches: this.props.branches,
        aheadCount: this.props.aheadCount // Action methods
        ,
        handleLogin: this.props.handleLogin,
        handleLogout: this.props.handleLogout,
        onPushBranch: () => this.props.handlePushBranch(this.props.currentBranch, this.props.currentRemote)
      });
    }

    if (this.props.manyRemotesAvailable) {
      // No chosen remote, multiple remotes hosted on GitHub instances
      return _react.default.createElement(_remoteSelectorView.default, {
        remotes: this.props.remotes,
        currentBranch: this.props.currentBranch,
        selectRemote: this.props.handleRemoteSelect
      });
    }

    return _react.default.createElement(_githubBlankNoremote.default, {
      openBoundPublishDialog: this.props.openBoundPublishDialog
    });
  }

  renderHeader() {
    return _react.default.createElement(_githubTabHeaderContainer.default // Connection
    , {
      endpoint: this.props.endpoint,
      token: this.props.token // Workspace
      ,
      currentWorkDir: this.props.workingDirectory,
      contextLocked: this.props.contextLocked,
      changeWorkingDirectory: this.props.changeWorkingDirectory,
      setContextLock: this.props.setContextLock,
      getCurrentWorkDirs: this.props.getCurrentWorkDirs // Event Handlers
      ,
      onDidChangeWorkDirs: this.props.onDidChangeWorkDirs
    });
  }

}

exports.default = GitHubTabView;

_defineProperty(GitHubTabView, "propTypes", {
  refresher: _propTypes2.RefresherPropType.isRequired,
  rootHolder: _propTypes2.RefHolderPropType.isRequired,
  // Connection
  endpoint: _propTypes2.EndpointPropType.isRequired,
  token: _propTypes2.TokenPropType,
  // Workspace
  workspace: _propTypes.default.object.isRequired,
  workingDirectory: _propTypes.default.string,
  getCurrentWorkDirs: _propTypes.default.func.isRequired,
  changeWorkingDirectory: _propTypes.default.func.isRequired,
  contextLocked: _propTypes.default.bool.isRequired,
  setContextLock: _propTypes.default.func.isRequired,
  repository: _propTypes.default.object.isRequired,
  // Remotes
  remotes: _propTypes2.RemoteSetPropType.isRequired,
  currentRemote: _propTypes2.RemotePropType.isRequired,
  manyRemotesAvailable: _propTypes.default.bool.isRequired,
  isLoading: _propTypes.default.bool.isRequired,
  branches: _propTypes2.BranchSetPropType.isRequired,
  currentBranch: _propTypes2.BranchPropType.isRequired,
  aheadCount: _propTypes.default.number,
  pushInProgress: _propTypes.default.bool.isRequired,
  // Event Handlers
  handleLogin: _propTypes.default.func.isRequired,
  handleLogout: _propTypes.default.func.isRequired,
  handleTokenRetry: _propTypes.default.func.isRequired,
  handleWorkDirSelect: _propTypes.default.func,
  handlePushBranch: _propTypes.default.func.isRequired,
  handleRemoteSelect: _propTypes.default.func.isRequired,
  onDidChangeWorkDirs: _propTypes.default.func.isRequired,
  openCreateDialog: _propTypes.default.func.isRequired,
  openBoundPublishDialog: _propTypes.default.func.isRequired,
  openCloneDialog: _propTypes.default.func.isRequired,
  openGitTab: _propTypes.default.func.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi92aWV3cy9naXRodWItdGFiLXZpZXcuanMiXSwibmFtZXMiOlsiR2l0SHViVGFiVmlldyIsIlJlYWN0IiwiQ29tcG9uZW50IiwicmVuZGVyIiwicHJvcHMiLCJyb290SG9sZGVyIiwic2V0dGVyIiwicmVuZGVySGVhZGVyIiwicmVuZGVyUmVtb3RlIiwidG9rZW4iLCJVTkFVVEhFTlRJQ0FURUQiLCJoYW5kbGVMb2dpbiIsIklOU1VGRklDSUVOVCIsIkVycm9yIiwiaGFuZGxlVG9rZW5SZXRyeSIsImhhbmRsZUxvZ291dCIsImlzTG9hZGluZyIsInJlcG9zaXRvcnkiLCJpc0Fic2VudCIsImlzQWJzZW50R3Vlc3MiLCJvcGVuQ3JlYXRlRGlhbG9nIiwib3BlbkNsb25lRGlhbG9nIiwiaXNFbXB0eSIsIm9wZW5Cb3VuZFB1Ymxpc2hEaWFsb2ciLCJvcGVuR2l0VGFiIiwiY3VycmVudFJlbW90ZSIsImlzUHJlc2VudCIsImdldEVuZHBvaW50IiwicmVmcmVzaGVyIiwicHVzaEluUHJvZ3Jlc3MiLCJ3b3JraW5nRGlyZWN0b3J5Iiwid29ya3NwYWNlIiwicmVtb3RlcyIsImJyYW5jaGVzIiwiYWhlYWRDb3VudCIsImhhbmRsZVB1c2hCcmFuY2giLCJjdXJyZW50QnJhbmNoIiwibWFueVJlbW90ZXNBdmFpbGFibGUiLCJoYW5kbGVSZW1vdGVTZWxlY3QiLCJlbmRwb2ludCIsImNvbnRleHRMb2NrZWQiLCJjaGFuZ2VXb3JraW5nRGlyZWN0b3J5Iiwic2V0Q29udGV4dExvY2siLCJnZXRDdXJyZW50V29ya0RpcnMiLCJvbkRpZENoYW5nZVdvcmtEaXJzIiwiUmVmcmVzaGVyUHJvcFR5cGUiLCJpc1JlcXVpcmVkIiwiUmVmSG9sZGVyUHJvcFR5cGUiLCJFbmRwb2ludFByb3BUeXBlIiwiVG9rZW5Qcm9wVHlwZSIsIlByb3BUeXBlcyIsIm9iamVjdCIsInN0cmluZyIsImZ1bmMiLCJib29sIiwiUmVtb3RlU2V0UHJvcFR5cGUiLCJSZW1vdGVQcm9wVHlwZSIsIkJyYW5jaFNldFByb3BUeXBlIiwiQnJhbmNoUHJvcFR5cGUiLCJudW1iZXIiLCJoYW5kbGVXb3JrRGlyU2VsZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBS0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVlLE1BQU1BLGFBQU4sU0FBNEJDLGVBQU1DLFNBQWxDLENBQTRDO0FBMEN6REMsRUFBQUEsTUFBTSxHQUFHO0FBQ1AsV0FDRTtBQUFLLE1BQUEsU0FBUyxFQUFDLGVBQWY7QUFBK0IsTUFBQSxHQUFHLEVBQUUsS0FBS0MsS0FBTCxDQUFXQyxVQUFYLENBQXNCQztBQUExRCxPQUNHLEtBQUtDLFlBQUwsRUFESCxFQUVFO0FBQUssTUFBQSxTQUFTLEVBQUM7QUFBZixPQUNHLEtBQUtDLFlBQUwsRUFESCxDQUZGLENBREY7QUFRRDs7QUFFREEsRUFBQUEsWUFBWSxHQUFHO0FBQ2IsUUFBSSxLQUFLSixLQUFMLENBQVdLLEtBQVgsS0FBcUIsSUFBekIsRUFBK0I7QUFDN0IsYUFBTyw2QkFBQyxvQkFBRCxPQUFQO0FBQ0Q7O0FBRUQsUUFBSSxLQUFLTCxLQUFMLENBQVdLLEtBQVgsS0FBcUJDLCtCQUF6QixFQUEwQztBQUN4QyxhQUFPLDZCQUFDLHdCQUFEO0FBQWlCLFFBQUEsT0FBTyxFQUFFLEtBQUtOLEtBQUwsQ0FBV087QUFBckMsUUFBUDtBQUNEOztBQUVELFFBQUksS0FBS1AsS0FBTCxDQUFXSyxLQUFYLEtBQXFCRyw0QkFBekIsRUFBdUM7QUFDckMsYUFDRSw2QkFBQyx3QkFBRDtBQUFpQixRQUFBLE9BQU8sRUFBRSxLQUFLUixLQUFMLENBQVdPO0FBQXJDLFNBQ0UsNklBREYsQ0FERjtBQU9EOztBQUVELFFBQUksS0FBS1AsS0FBTCxDQUFXSyxLQUFYLFlBQTRCSSxLQUFoQyxFQUF1QztBQUNyQyxhQUNFLDZCQUFDLHVCQUFEO0FBQ0UsUUFBQSxLQUFLLEVBQUUsS0FBS1QsS0FB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LEVBQUUwQixtQkFBVUcsSUFBVixDQUFlUDtBQXRDVixDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCB7XG4gIFRva2VuUHJvcFR5cGUsIEVuZHBvaW50UHJvcFR5cGUsIFJlZkhvbGRlclByb3BUeXBlLFxuICBSZW1vdGVTZXRQcm9wVHlwZSwgUmVtb3RlUHJvcFR5cGUsIEJyYW5jaFNldFByb3BUeXBlLCBCcmFuY2hQcm9wVHlwZSxcbiAgUmVmcmVzaGVyUHJvcFR5cGUsXG59IGZyb20gJy4uL3Byb3AtdHlwZXMnO1xuaW1wb3J0IExvYWRpbmdWaWV3IGZyb20gJy4vbG9hZGluZy12aWV3JztcbmltcG9ydCBRdWVyeUVycm9yVmlldyBmcm9tICcuLi92aWV3cy9xdWVyeS1lcnJvci12aWV3JztcbmltcG9ydCBHaXRodWJMb2dpblZpZXcgZnJvbSAnLi4vdmlld3MvZ2l0aHViLWxvZ2luLXZpZXcnO1xuaW1wb3J0IFJlbW90ZVNlbGVjdG9yVmlldyBmcm9tICcuL3JlbW90ZS1zZWxlY3Rvci12aWV3JztcbmltcG9ydCBHaXRodWJUYWJIZWFkZXJDb250YWluZXIgZnJvbSAnLi4vY29udGFpbmVycy9naXRodWItdGFiLWhlYWRlci1jb250YWluZXInO1xuaW1wb3J0IEdpdEh1YkJsYW5rTm9Mb2NhbCBmcm9tICcuL2dpdGh1Yi1ibGFuay1ub2xvY2FsJztcbmltcG9ydCBHaXRIdWJCbGFua1VuaW5pdGlhbGl6ZWQgZnJvbSAnLi9naXRodWItYmxhbmstdW5pbml0aWFsaXplZCc7XG5pbXBvcnQgR2l0SHViQmxhbmtOb1JlbW90ZSBmcm9tICcuL2dpdGh1Yi1ibGFuay1ub3JlbW90ZSc7XG5pbXBvcnQgUmVtb3RlQ29udGFpbmVyIGZyb20gJy4uL2NvbnRhaW5lcnMvcmVtb3RlLWNvbnRhaW5lcic7XG5pbXBvcnQge1VOQVVUSEVOVElDQVRFRCwgSU5TVUZGSUNJRU5UfSBmcm9tICcuLi9zaGFyZWQva2V5dGFyLXN0cmF0ZWd5JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2l0SHViVGFiVmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgcmVmcmVzaGVyOiBSZWZyZXNoZXJQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICAgIHJvb3RIb2xkZXI6IFJlZkhvbGRlclByb3BUeXBlLmlzUmVxdWlyZWQsXG5cbiAgICAvLyBDb25uZWN0aW9uXG4gICAgZW5kcG9pbnQ6IEVuZHBvaW50UHJvcFR5cGUuaXNSZXF1aXJlZCxcbiAgICB0b2tlbjogVG9rZW5Qcm9wVHlwZSxcblxuICAgIC8vIFdvcmtzcGFjZVxuICAgIHdvcmtzcGFjZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHdvcmtpbmdEaXJlY3Rvcnk6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZ2V0Q3VycmVudFdvcmtEaXJzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNoYW5nZVdvcmtpbmdEaXJlY3Rvcnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY29udGV4dExvY2tlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBzZXRDb250ZXh0TG9jazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICByZXBvc2l0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgICAvLyBSZW1vdGVzXG4gICAgcmVtb3RlczogUmVtb3RlU2V0UHJvcFR5cGUuaXNSZXF1aXJlZCxcbiAgICBjdXJyZW50UmVtb3RlOiBSZW1vdGVQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICAgIG1hbnlSZW1vdGVzQXZhaWxhYmxlOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIGlzTG9hZGluZzogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBicmFuY2hlczogQnJhbmNoU2V0UHJvcFR5cGUuaXNSZXF1aXJlZCxcbiAgICBjdXJyZW50QnJhbmNoOiBCcmFuY2hQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICAgIGFoZWFkQ291bnQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgcHVzaEluUHJvZ3Jlc3M6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgICAvLyBFdmVudCBIYW5kbGVyc1xuICAgIGhhbmRsZUxvZ2luOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGhhbmRsZUxvZ291dDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBoYW5kbGVUb2tlblJldHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGhhbmRsZVdvcmtEaXJTZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhbmRsZVB1c2hCcmFuY2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaGFuZGxlUmVtb3RlU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uRGlkQ2hhbmdlV29ya0RpcnM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb3BlbkNyZWF0ZURpYWxvZzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvcGVuQm91bmRQdWJsaXNoRGlhbG9nOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9wZW5DbG9uZURpYWxvZzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvcGVuR2l0VGFiOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImdpdGh1Yi1HaXRIdWJcIiByZWY9e3RoaXMucHJvcHMucm9vdEhvbGRlci5zZXR0ZXJ9PlxuICAgICAgICB7dGhpcy5yZW5kZXJIZWFkZXIoKX1cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnaXRodWItR2l0SHViLWNvbnRlbnRcIj5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJSZW1vdGUoKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyUmVtb3RlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnRva2VuID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gPExvYWRpbmdWaWV3IC8+O1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnRva2VuID09PSBVTkFVVEhFTlRJQ0FURUQpIHtcbiAgICAgIHJldHVybiA8R2l0aHViTG9naW5WaWV3IG9uTG9naW49e3RoaXMucHJvcHMuaGFuZGxlTG9naW59IC8+O1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnRva2VuID09PSBJTlNVRkZJQ0lFTlQpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxHaXRodWJMb2dpblZpZXcgb25Mb2dpbj17dGhpcy5wcm9wcy5oYW5kbGVMb2dpbn0+XG4gICAgICAgICAgPHA+XG4gICAgICAgICAgICBZb3VyIHRva2VuIG5vIGxvbmdlciBoYXMgc3VmZmljaWVudCBhdXRob3JpemF0aW9ucy4gUGxlYXNlIHJlLWF1dGhlbnRpY2F0ZSBhbmQgZ2VuZXJhdGUgYSBuZXcgb25lLlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC9HaXRodWJMb2dpblZpZXc+XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnRva2VuIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxRdWVyeUVycm9yVmlld1xuICAgICAgICAgIGVycm9yPXt0aGlzLnByb3BzLnRva2VufVxuICAgICAgICAgIHJldHJ5PXt0aGlzLnByb3BzLmhhbmRsZVRva2VuUmV0cnl9XG4gICAgICAgICAgbG9naW49e3RoaXMucHJvcHMuaGFuZGxlTG9naW59XG4gICAgICAgICAgbG9nb3V0PXt0aGlzLnByb3BzLmhhbmRsZUxvZ291dH1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuaXNMb2FkaW5nKSB7XG4gICAgICByZXR1cm4gPExvYWRpbmdWaWV3IC8+O1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnJlcG9zaXRvcnkuaXNBYnNlbnQoKSB8fCB0aGlzLnByb3BzLnJlcG9zaXRvcnkuaXNBYnNlbnRHdWVzcygpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8R2l0SHViQmxhbmtOb0xvY2FsXG4gICAgICAgICAgb3BlbkNyZWF0ZURpYWxvZz17dGhpcy5wcm9wcy5vcGVuQ3JlYXRlRGlhbG9nfVxuICAgICAgICAgIG9wZW5DbG9uZURpYWxvZz17dGhpcy5wcm9wcy5vcGVuQ2xvbmVEaWFsb2d9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnJlcG9zaXRvcnkuaXNFbXB0eSgpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8R2l0SHViQmxhbmtVbmluaXRpYWxpemVkXG4gICAgICAgICAgb3BlbkJvdW5kUHVibGlzaERpYWxvZz17dGhpcy5wcm9wcy5vcGVuQm91bmRQdWJsaXNoRGlhbG9nfVxuICAgICAgICAgIG9wZW5HaXRUYWI9e3RoaXMucHJvcHMub3BlbkdpdFRhYn1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuY3VycmVudFJlbW90ZS5pc1ByZXNlbnQoKSkge1xuICAgICAgLy8gU2luZ2xlLCBjaG9zZW4gb3IgdW5hbWJpZ3VvdXMgcmVtb3RlXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8UmVtb3RlQ29udGFpbmVyXG4gICAgICAgICAgLy8gQ29ubmVjdGlvblxuICAgICAgICAgIGVuZHBvaW50PXt0aGlzLnByb3BzLmN1cnJlbnRSZW1vdGUuZ2V0RW5kcG9pbnQoKX1cbiAgICAgICAgICB0b2tlbj17dGhpcy5wcm9wcy50b2tlbn1cblxuICAgICAgICAgIC8vIFJlcG9zaXRvcnkgYXR0cmlidXRlc1xuICAgICAgICAgIHJlZnJlc2hlcj17dGhpcy5wcm9wcy5yZWZyZXNoZXJ9XG4gICAgICAgICAgcHVzaEluUHJvZ3Jlc3M9e3RoaXMucHJvcHMucHVzaEluUHJvZ3Jlc3N9XG4gICAgICAgICAgd29ya2luZ0RpcmVjdG9yeT17dGhpcy5wcm9wcy53b3JraW5nRGlyZWN0b3J5fVxuICAgICAgICAgIHdvcmtzcGFjZT17dGhpcy5wcm9wcy53b3Jrc3BhY2V9XG4gICAgICAgICAgcmVtb3RlPXt0aGlzLnByb3BzLmN1cnJlbnRSZW1vdGV9XG4gICAgICAgICAgcmVtb3Rlcz17dGhpcy5wcm9wcy5yZW1vdGVzfVxuICAgICAgICAgIGJyYW5jaGVzPXt0aGlzLnByb3BzLmJyYW5jaGVzfVxuICAgICAgICAgIGFoZWFkQ291bnQ9e3RoaXMucHJvcHMuYWhlYWRDb3VudH1cblxuICAgICAgICAgIC8vIEFjdGlvbiBtZXRob2RzXG4gICAgICAgICAgaGFuZGxlTG9naW49e3RoaXMucHJvcHMuaGFuZGxlTG9naW59XG4gICAgICAgICAgaGFuZGxlTG9nb3V0PXt0aGlzLnByb3BzLmhhbmRsZUxvZ291dH1cbiAgICAgICAgICBvblB1c2hCcmFuY2g9eygpID0+IHRoaXMucHJvcHMuaGFuZGxlUHVzaEJyYW5jaCh0aGlzLnByb3BzLmN1cnJlbnRCcmFuY2gsIHRoaXMucHJvcHMuY3VycmVudFJlbW90ZSl9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLm1hbnlSZW1vdGVzQXZhaWxhYmxlKSB7XG4gICAgICAvLyBObyBjaG9zZW4gcmVtb3RlLCBtdWx0aXBsZSByZW1vdGVzIGhvc3RlZCBvbiBHaXRIdWIgaW5zdGFuY2VzXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8UmVtb3RlU2VsZWN0b3JWaWV3XG4gICAgICAgICAgcmVtb3Rlcz17dGhpcy5wcm9wcy5yZW1vdGVzfVxuICAgICAgICAgIGN1cnJlbnRCcmFuY2g9e3RoaXMucHJvcHMuY3VycmVudEJyYW5jaH1cbiAgICAgICAgICBzZWxlY3RSZW1vdGU9e3RoaXMucHJvcHMuaGFuZGxlUmVtb3RlU2VsZWN0fVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEdpdEh1YkJsYW5rTm9SZW1vdGUgb3BlbkJvdW5kUHVibGlzaERpYWxvZz17dGhpcy5wcm9wcy5vcGVuQm91bmRQdWJsaXNoRGlhbG9nfSAvPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJIZWFkZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxHaXRodWJUYWJIZWFkZXJDb250YWluZXJcbiAgICAgICAgLy8gQ29ubmVjdGlvblxuICAgICAgICBlbmRwb2ludD17dGhpcy5wcm9wcy5lbmRwb2ludH1cbiAgICAgICAgdG9rZW49e3RoaXMucHJvcHMudG9rZW59XG5cbiAgICAgICAgLy8gV29ya3NwYWNlXG4gICAgICAgIGN1cnJlbnRXb3JrRGlyPXt0aGlzLnByb3BzLndvcmtpbmdEaXJlY3Rvcnl9XG4gICAgICAgIGNvbnRleHRMb2NrZWQ9e3RoaXMucHJvcHMuY29udGV4dExvY2tlZH1cbiAgICAgICAgY2hhbmdlV29ya2luZ0RpcmVjdG9yeT17dGhpcy5wcm9wcy5jaGFuZ2VXb3JraW5nRGlyZWN0b3J5fVxuICAgICAgICBzZXRDb250ZXh0TG9jaz17dGhpcy5wcm9wcy5zZXRDb250ZXh0TG9ja31cbiAgICAgICAgZ2V0Q3VycmVudFdvcmtEaXJzPXt0aGlzLnByb3BzLmdldEN1cnJlbnRXb3JrRGlyc31cblxuICAgICAgICAvLyBFdmVudCBIYW5kbGVyc1xuICAgICAgICBvbkRpZENoYW5nZVdvcmtEaXJzPXt0aGlzLnByb3BzLm9uRGlkQ2hhbmdlV29ya0RpcnN9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbn1cbiJdfQ==