"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class TabGroup {
  constructor() {
    this.nodesByElement = new Map();
    this.lastElement = null;
    this.autofocusTarget = null;
  }

  appendElement(element, autofocus) {
    const lastNode = this.nodesByElement.get(this.lastElement) || {
      next: element,
      previous: element
    };
    const next = lastNode.next;
    const previous = this.lastElement || element;
    this.nodesByElement.set(element, {
      next,
      previous
    });
    this.nodesByElement.get(lastNode.next).previous = element;
    lastNode.next = element;
    this.lastElement = element;

    if (autofocus && this.autofocusTarget === null) {
      this.autofocusTarget = element;
    }
  }

  removeElement(element) {
    const node = this.nodesByElement.get(element);

    if (node) {
      const beforeNode = this.nodesByElement.get(node.previous);
      const afterNode = this.nodesByElement.get(node.next);
      beforeNode.next = node.next;
      afterNode.previous = node.previous;
    }

    this.nodesByElement.delete(element);
  }

  after(element) {
    const node = this.nodesByElement.get(element) || {
      next: undefined
    };
    return node.next;
  }

  focusAfter(element) {
    const original = this.getCurrentFocus();
    let next = this.after(element);

    while (next && next !== element) {
      next.focus();

      if (this.getCurrentFocus() !== original) {
        return;
      }

      next = this.after(next);
    }
  }

  before(element) {
    const node = this.nodesByElement.get(element) || {
      previous: undefined
    };
    return node.previous;
  }

  focusBefore(element) {
    const original = this.getCurrentFocus();
    let previous = this.before(element);

    while (previous && previous !== element) {
      previous.focus();

      if (this.getCurrentFocus() !== original) {
        return;
      }

      previous = this.before(previous);
    }
  }

  autofocus() {
    this.autofocusTarget && this.autofocusTarget.focus();
  }
  /* istanbul ignore next */


  getCurrentFocus() {
    return document.activeElement;
  }

}

exports.default = TabGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi90YWItZ3JvdXAuanMiXSwibmFtZXMiOlsiVGFiR3JvdXAiLCJjb25zdHJ1Y3RvciIsIm5vZGVzQnlFbGVtZW50IiwiTWFwIiwibGFzdEVsZW1lbnQiLCJhdXRvZm9jdXNUYXJnZXQiLCJhcHBlbmRFbGVtZW50IiwiZWxlbWVudCIsImF1dG9mb2N1cyIsImxhc3ROb2RlIiwiZ2V0IiwibmV4dCIsInByZXZpb3VzIiwic2V0IiwicmVtb3ZlRWxlbWVudCIsIm5vZGUiLCJiZWZvcmVOb2RlIiwiYWZ0ZXJOb2RlIiwiZGVsZXRlIiwiYWZ0ZXIiLCJ1bmRlZmluZWQiLCJmb2N1c0FmdGVyIiwib3JpZ2luYWwiLCJnZXRDdXJyZW50Rm9jdXMiLCJmb2N1cyIsImJlZm9yZSIsImZvY3VzQmVmb3JlIiwiZG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWUsTUFBTUEsUUFBTixDQUFlO0FBQzVCQyxFQUFBQSxXQUFXLEdBQUc7QUFDWixTQUFLQyxjQUFMLEdBQXNCLElBQUlDLEdBQUosRUFBdEI7QUFDQSxTQUFLQyxXQUFMLEdBQW1CLElBQW5CO0FBQ0EsU0FBS0MsZUFBTCxHQUF1QixJQUF2QjtBQUNEOztBQUVEQyxFQUFBQSxhQUFhLENBQUNDLE9BQUQsRUFBVUMsU0FBVixFQUFxQjtBQUNoQyxVQUFNQyxRQUFRLEdBQUcsS0FBS1AsY0FBTCxDQUFvQlEsR0FBcEIsQ0FBd0IsS0FBS04sV0FBN0IsS0FBNkM7QUFBQ08sTUFBQUEsSUFBSSxFQUFFSixPQUFQO0FBQWdCSyxNQUFBQSxRQUFRLEVBQUVMO0FBQTFCLEtBQTlEO0FBQ0EsVUFBTUksSUFBSSxHQUFHRixRQUFRLENBQUNFLElBQXRCO0FBQ0EsVUFBTUMsUUFBUSxHQUFHLEtBQUtSLFdBQUwsSUFBb0JHLE9BQXJDO0FBRUEsU0FBS0wsY0FBTCxDQUFvQlcsR0FBcEIsQ0FBd0JOLE9BQXhCLEVBQWlDO0FBQUNJLE1BQUFBLElBQUQ7QUFBT0MsTUFBQUE7QUFB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dCBkZWZhdWx0IGNsYXNzIFRhYkdyb3VwIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ub2Rlc0J5RWxlbWVudCA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmxhc3RFbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLmF1dG9mb2N1c1RhcmdldCA9IG51bGw7XG4gIH1cblxuICBhcHBlbmRFbGVtZW50KGVsZW1lbnQsIGF1dG9mb2N1cykge1xuICAgIGNvbnN0IGxhc3ROb2RlID0gdGhpcy5ub2Rlc0J5RWxlbWVudC5nZXQodGhpcy5sYXN0RWxlbWVudCkgfHwge25leHQ6IGVsZW1lbnQsIHByZXZpb3VzOiBlbGVtZW50fTtcbiAgICBjb25zdCBuZXh0ID0gbGFzdE5vZGUubmV4dDtcbiAgICBjb25zdCBwcmV2aW91cyA9IHRoaXMubGFzdEVsZW1lbnQgfHwgZWxlbWVudDtcblxuICAgIHRoaXMubm9kZXNCeUVsZW1lbnQuc2V0KGVsZW1lbnQsIHtuZXh0LCBwcmV2aW91c30pO1xuICAgIHRoaXMubm9kZXNCeUVsZW1lbnQuZ2V0KGxhc3ROb2RlLm5leHQpLnByZXZpb3VzID0gZWxlbWVudDtcbiAgICBsYXN0Tm9kZS5uZXh0ID0gZWxlbWVudDtcblxuICAgIHRoaXMubGFzdEVsZW1lbnQgPSBlbGVtZW50O1xuXG4gICAgaWYgKGF1dG9mb2N1cyAmJiB0aGlzLmF1dG9mb2N1c1RhcmdldCA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5hdXRvZm9jdXNUYXJnZXQgPSBlbGVtZW50O1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZUVsZW1lbnQoZWxlbWVudCkge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLm5vZGVzQnlFbGVtZW50LmdldChlbGVtZW50KTtcbiAgICBpZiAobm9kZSkge1xuICAgICAgY29uc3QgYmVmb3JlTm9kZSA9IHRoaXMubm9kZXNCeUVsZW1lbnQuZ2V0KG5vZGUucHJldmlvdXMpO1xuICAgICAgY29uc3QgYWZ0ZXJOb2RlID0gdGhpcy5ub2Rlc0J5RWxlbWVudC5nZXQobm9kZS5uZXh0KTtcblxuICAgICAgYmVmb3JlTm9kZS5uZXh0ID0gbm9kZS5uZXh0O1xuICAgICAgYWZ0ZXJOb2RlLnByZXZpb3VzID0gbm9kZS5wcmV2aW91cztcbiAgICB9XG4gICAgdGhpcy5ub2Rlc0J5RWxlbWVudC5kZWxldGUoZWxlbWVudCk7XG4gIH1cblxuICBhZnRlcihlbGVtZW50KSB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMubm9kZXNCeUVsZW1lbnQuZ2V0KGVsZW1lbnQpIHx8IHtuZXh0OiB1bmRlZmluZWR9O1xuICAgIHJldHVybiBub2RlLm5leHQ7XG4gIH1cblxuICBmb2N1c0FmdGVyKGVsZW1lbnQpIHtcbiAgICBjb25zdCBvcmlnaW5hbCA9IHRoaXMuZ2V0Q3VycmVudEZvY3VzKCk7XG4gICAgbGV0IG5leHQgPSB0aGlzLmFmdGVyKGVsZW1lbnQpO1xuICAgIHdoaWxlIChuZXh0ICYmIG5leHQgIT09IGVsZW1lbnQpIHtcbiAgICAgIG5leHQuZm9jdXMoKTtcbiAgICAgIGlmICh0aGlzLmdldEN1cnJlbnRGb2N1cygpICE9PSBvcmlnaW5hbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG5leHQgPSB0aGlzLmFmdGVyKG5leHQpO1xuICAgIH1cbiAgfVxuXG4gIGJlZm9yZShlbGVtZW50KSB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMubm9kZXNCeUVsZW1lbnQuZ2V0KGVsZW1lbnQpIHx8IHtwcmV2aW91czogdW5kZWZpbmVkfTtcbiAgICByZXR1cm4gbm9kZS5wcmV2aW91cztcbiAgfVxuXG4gIGZvY3VzQmVmb3JlKGVsZW1lbnQpIHtcbiAgICBjb25zdCBvcmlnaW5hbCA9IHRoaXMuZ2V0Q3VycmVudEZvY3VzKCk7XG4gICAgbGV0IHByZXZpb3VzID0gdGhpcy5iZWZvcmUoZWxlbWVudCk7XG4gICAgd2hpbGUgKHByZXZpb3VzICYmIHByZXZpb3VzICE9PSBlbGVtZW50KSB7XG4gICAgICBwcmV2aW91cy5mb2N1cygpO1xuICAgICAgaWYgKHRoaXMuZ2V0Q3VycmVudEZvY3VzKCkgIT09IG9yaWdpbmFsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcHJldmlvdXMgPSB0aGlzLmJlZm9yZShwcmV2aW91cyk7XG4gICAgfVxuICB9XG5cbiAgYXV0b2ZvY3VzKCkge1xuICAgIHRoaXMuYXV0b2ZvY3VzVGFyZ2V0ICYmIHRoaXMuYXV0b2ZvY3VzVGFyZ2V0LmZvY3VzKCk7XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBnZXRDdXJyZW50Rm9jdXMoKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cbiJdfQ==